{
  "name": "mbpp_411_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n           ]\n          [else (snake_to_camel_iter (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfc0chzvq.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfc0chzvq.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfc0chzvq.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-capitalize word))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "/tmp/tmpu9a02iho.rkt:7:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpu9a02iho.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru2hny8k.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru2hny8k.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru2hny8k.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe12276wz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe12276wz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe12276wz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:18:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\t\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:19:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm11mih_b.rkt:20:4\n\nstring-upcase: contract violation\n  expected: string?\n  given: #\\w\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (string (second word)))))\n      ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc4rd_qq.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc4rd_qq.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprc4rd_qq.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (equal? (string-length word) 0)\n        \"\"\n        (if (equal? (string-ref word 0) #\\_)\n            (string-append (string-upcase (string-ref word 1)) (helper (string-drop word 2)))\n            (string-append (string-ref word 0) (helper (string-drop word 1))))))\n  (string-downcase (helper word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "/tmp/tmpzslek3nl.rkt:9:72: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpzslek3nl.rkt:9:72\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnxvsq31.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnxvsq31.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnxvsq31.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdb6aj3n.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdb6aj3n.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdb6aj3n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_ri79ra.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_ri79ra.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_ri79ra.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          x\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rd_yswc.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rd_yswc.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rd_yswc.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru2hny8k.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru2hny8k.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpru2hny8k.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnc2jrh5j.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnc2jrh5j.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnc2jrh5j.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmp5j5e6g29.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp5j5e6g29.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word))))) ]\n          [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphx_xsga9.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphx_xsga9.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphx_xsga9.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-capitalize x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmpchnxtjjb.rkt:10:11: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmpchnxtjjb.rkt:10:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmy0n6m8o.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmy0n6m8o.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmy0n6m8o.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx_0o3h9e.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx_0o3h9e.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx_0o3h9e.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map string-upcase\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppltjpmhz.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppltjpmhz.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppltjpmhz.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (word)\n          (string-upcase (substring word 0 1))\n          (substring word 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeqlzm3o1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (convert-to-camel-case word)\n    (define (convert-to-camel-case-helper word acc)\n      (if (empty? word)\n          (string-&gt;symbol (string-join (reverse acc)))\n          (let ([first-char (string-ref word 0)]\n                [rest-of-word (substring word 1)])\n            (if (char=? first-char #\\_)\n                (convert-to-camel-case-helper rest-of-word\n                                              (cons (string-upcase (string-ref rest-of-word 0))\n                                                    (rest acc)))\n                (convert-to-camel-case-helper rest-of-word\n                                              (cons first-char acc))))))\n    (convert-to-camel-case-helper word '()))\n  (convert-to-camel-case word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmphnewlh0t.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        empty\n        (if (equal? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (helper (string->list word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7nx3wup.rkt:18:4\nactual:     '(#\\a #\\n #\\d #\\r #\\o #\\i #\\d #\\T #\\v)\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7nx3wup.rkt:19:4\nactual:     '(#\\g #\\o #\\o #\\g #\\l #\\e #\\P #\\i #\\x #\\e #\\l)\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc7nx3wup.rkt:20:4\nactual:     '(#\\a #\\p #\\p #\\l #\\e #\\W #\\a #\\t #\\c #\\h)\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word-list)\n    (if (null? word-list)\n        \"\"\n        (string-append (string-capitalize (car word-list)) (helper (cdr word-list)))))\n  (helper (string-split word #\\_)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmptk6hdfr_.rkt:8:24: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmptk6hdfr_.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word]\n             [result '()])\n    (cond [(empty? word) (apply string result)]\n          [(char=? (first word) #\\_)\n           (loop (rest word)\n                 (append result (list (char-upcase (second word)))))\n          [else (loop (rest word)\n                      (append result (list (first word))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmpw9i34j8h.rkt:12:59: read-syntax: missing `]` to close `[` on line 8, found instead `)`\n  possible cause: indentation suggests a missing `]` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (regexp-replace* #rx\"_\" word\n                   (lambda (m) (string-upcase (cadr m)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcw_3ob4.rkt:13:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: \"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcw_3ob4.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: \"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwcw_3ob4.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: \"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (string (second word)))))\n       ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_g83ajur.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_g83ajur.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_g83ajur.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (cond\n      [(empty? word) empty]\n      [(char=? (first word) #\\_) (cons (char-upcase (second word)) (helper (rest (rest word))))]\n      [else (cons (first word) (helper (rest word)))]))\n  (string->symbol (list->string (helper (string->list word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qsi6s4x.rkt:17:4\nactual:     'androidTv\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qsi6s4x.rkt:18:4\nactual:     'googlePixel\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8qsi6s4x.rkt:19:4\nactual:     'appleWatch\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char-upper-case? (string-ref x 0)) x (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2quv3tii.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2quv3tii.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2quv3tii.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 0 1))\n      (substring word 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc8k47ziq.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          x\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9if9va5.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9if9va5.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9if9va5.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        '()\n        (if (char=? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (string-&gt;symbol (string-append (symbol-&gt;string (car (helper word))) (string-join (helper (cdr word))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmpqbnc1dtf.rkt:11:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word)\n               (string-append result (string-upcase (string (second word)))))\n      ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_135sf2k.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_135sf2k.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_135sf2k.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmkjce4_s.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmkjce4_s.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmkjce4_s.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (string-join (reverse acc) \"\")]\n      [(string-contains? word \"_\")\n       (let ([index (string-index word \"_\")])\n         (helper (substring word (+ index 1) (string-length word))\n                 (cons (string-upcase (substring word 0 index)) acc)))]\n      [else (string-join (reverse (cons word acc)) \"\")]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "/tmp/tmpe4uevsed.rkt:9:21: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmpe4uevsed.rkt:9:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-titlecase x)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond ((string-empty? word) result)\n          ((string=? (substring word 0 1) \"_\")\n           (helper (substring word 1) (string-append result (string-upcase (substring word 1 1)))))\n          (else (helper (substring word 1) (string-append result (substring word 0 1))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "/tmp/tmp1vjvjle8.rkt:6:12: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp1vjvjle8.rkt:6:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        word\n        (if (equal? (first word) #\\_)\n            (cons (char-upcase (second word)) (helper (rest (rest word))))\n            (cons (first word) (helper (rest word))))))\n  (helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz2zjedks.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz2zjedks.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz2zjedks.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word)\n                   (string-append result\n                                  (string-upcase (string (second word)))\n                                  (substring (rest (rest word)) 2)))]\n          [else (helper (rest word)\n                        (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4cpla9zs.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4cpla9zs.rkt:22:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4cpla9zs.rkt:23:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuq75vbd.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              (string-upcase x)\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorois7y.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorois7y.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjorois7y.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (convert-word word)\n    (if (string-contains word #\\_)\n        (string-append (substring word 0 (string-index word #\\_))\n                        (string-capitalize (substring word (+ 1 (string-index word #\\_)))))\n        word))\n  (define (convert-words words)\n    (if (string-contains words #\\_)\n        (convert-words (convert-word words))\n        words))\n  (convert-words word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmppkslanf0.rkt:6:9: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmppkslanf0.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx1670hhl.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (equal? (string-length word) 0)\n        result\n        (if (equal? (string-ref word 0) #\\_)\n            (helper (substring word 1 (string-length word))\n                    (string-append result (string-upcase (string-ref word 1))))\n            (helper (substring word 1 (string-length word))\n                    (string-append result (string-ref word 0))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpod0qszhy.rkt:20:4\n\nstring-append: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpod0qszhy.rkt:21:4\n\nstring-append: contract violation\n  expected: string?\n  given: #\\g\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpod0qszhy.rkt:22:4\n\nstring-append: contract violation\n  expected: string?\n  given: #\\a\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg77rhyu1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (s) (string-upcase s))\n                    (regexp-match* #rx\"_([a-z])\" word))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ns5yhwq.rkt:14:4\nactual:     \"_T\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ns5yhwq.rkt:15:4\nactual:     \"_P\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ns5yhwq.rkt:16:4\nactual:     \"_W\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-upcase? (string-ref x 0))\n              (string-downcase x)\n              (string-upcase x)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp7owgc39x.rkt:7:15: char-upcase?: unbound identifier\n  in: char-upcase?\n  location...:\n   /tmp/tmp7owgc39x.rkt:7:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (cond\n    [(empty? word) empty]\n    [(char=? (first word) #\\_) (cons #\\ (snake_to_camel (rest word)))]\n    [else (cons (first word) (snake_to_camel (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_4f3_g.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_4f3_g.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfs_4f3_g.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? x \"_\")\n              \"\"\n              (string-upcase x)))\n        (string-split word \"_\"))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyninemjz.rkt:18:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyninemjz.rkt:19:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyninemjz.rkt:20:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8gm0g2i.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (string-empty? word)\n        result\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (string-append result (string-upcase (string-ref word 1))))\n            (helper (substring word 1) (string-append result (string-ref word 0))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp2332nler.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp2332nler.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (equal? (string-length x) 1) x (string-upcase x))) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp356biioo.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp356biioo.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp356biioo.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (string (second word)))))\n       ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_g83ajur.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_g83ajur.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_g83ajur.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n            (snake_to_camel_iter (rest word) (string-append result (string (first word)))))))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjsh0_ly.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjsh0_ly.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmjsh0_ly.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let ([word (string-split word #\\_)])\n    (string-join (map (lambda (x) (string-upcase x)) (cdr word)) (string-upcase (car word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptajowpwq.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptajowpwq.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptajowpwq.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (w)\n      (string-upcase (substring w 0 1))\n      (substring w 1))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp269teb61.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1zwn9l6.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbdriww4p.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnxvsq31.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnxvsq31.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprnxvsq31.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let loop ([word word] [result '()])\n    (cond [(empty? word) (string-join (reverse result))]\n          [(char=? (first word) #\\_)\n           (loop (rest word) (cons (char-upcase (second word)) result))]\n          [else (loop (rest word) (cons (first word) result))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbic8zfd.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbic8zfd.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbic8zfd.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (\u03bb (x) (string-upcase x))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7cb81su.rkt:15:4\nactual:     \"ANDROIDTV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7cb81su.rkt:16:4\nactual:     \"GOOGLEPIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7cb81su.rkt:17:4\nactual:     \"APPLEWATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmp5j5e6g29.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp5j5e6g29.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-capitalize word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "/tmp/tmp5j5e6g29.rkt:8:7: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmp5j5e6g29.rkt:8:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 0 1)) (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponnl9sl0.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponnl9sl0.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmponnl9sl0.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (w) (string-upcase w)) (string-split word #\"_\")) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxd4m1wv.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxd4m1wv.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppxd4m1wv.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4u5n8p.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4u5n8p.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvw4u5n8p.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond ((empty? word) (list->string (reverse acc)))\n          ((char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word)))))\n          (else (snake_to_camel_iter (rest word) (cons (first word) acc)))))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppkbihqcf.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppkbihqcf.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppkbihqcf.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-titlecase word))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgydngflb.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgydngflb.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgydngflb.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1 (string-length x)))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gww7b4n.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gww7b4n.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gww7b4n.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (helper (rest word) (cons #\\ (cons (char-upcase (second word)) acc)))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rpy8i_l.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rpy8i_l.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rpy8i_l.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word)\n                                (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (snake_to_camel_iter (rest word) (string-append result (first word)))]))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b30dugr.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b30dugr.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b30dugr.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (string=? (string-upcase x) x)\n              (string-downcase x)\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsecta9ln.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsecta9ln.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsecta9ln.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (string-empty? word)\n        \"\"\n        (if (string=? (string-take word 1) \"_\")\n            (string-append (string-upcase (string-take word 2))\n                           (helper (string-drop word 2)))\n            (string-append (string-take word 1)\n                           (helper (string-drop word 1))))))\n  (helper word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmp9fi_kfe2.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmp9fi_kfe2.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest acc)))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi8u8idy.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi8u8idy.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi8u8idy.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (list->string (reverse acc))]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiupikqex.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (string-empty? word)\n        (string-join (reverse acc))\n        (let ([first-char (string-ref word 0)]\n              [rest-word (substring word 1)])\n          (if (= first-char #\\_)\n              (helper (string-upcase rest-word) acc)\n              (helper rest-word (cons first-char acc))))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpf2mjtarn.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpf2mjtarn.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0dz1dv4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char-numeric? (string-ref x 0))\n          x\n          (string-upcase x)))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw8jp3du.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw8jp3du.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuw8jp3du.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char-numeric? (string-ref x 0)) x (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavf5dya2.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavf5dya2.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpavf5dya2.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppf9ecora.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (let ([parts (string-split word #\\_)])\n    (string-join (map (lambda (part) (string-upcase part))\n                      (cdr parts))\n                 (string-upcase (car parts)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6i9megs7.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6i9megs7.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6i9megs7.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word)\n    (if (empty? word)\n        '()\n        (cons (if (equal? (first word) '_)\n                  (string-upcase (second word))\n                  (first word))\n              (helper (rest (rest word))))))\n  (string-join (helper (string-&gt;list word)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "/tmp/tmpx24y6rck.rkt:12:23: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond\n      [(empty? word) (string-join (reverse result) \"\")]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (string-upcase (string (second word))) (rest result)))]\n      [else (snake_to_camel_iter (rest word) (cons (string (first word)) result))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph66k9jo6.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph66k9jo6.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph66k9jo6.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (string=? (substring x 0 1) \"_\")\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5q472x_v.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char-numeric? (string-ref x 0))\n                        x\n                        (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04zegtl0.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04zegtl0.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04zegtl0.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (equal? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (second word))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ezueto.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ezueto.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph4ezueto.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n           ]\n          [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_fj3iu22.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_fj3iu22.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_fj3iu22.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (if (string=? (substring x 0 1) \"_\")\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8uw962yg.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8uw962yg.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8uw962yg.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (first (rest word)))) (rest (rest word))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapmk9fqw.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapmk9fqw.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpapmk9fqw.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (string-drop x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "/tmp/tmpueyqo_9u.rkt:9:26: string-drop: unbound identifier\n  in: string-drop\n  location...:\n   /tmp/tmpueyqo_9u.rkt:9:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase (substring x 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:15:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:16:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpce8f5lpx.rkt:17:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpow8f7k3u.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnp4osn5.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnp4osn5.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnp4osn5.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                       (string-upcase (substring x 1))\n                       x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu6700ei8.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp751rvar9.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp751rvar9.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp751rvar9.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join (map (lambda (x) (string-upcase x)) (string-split word #\\_)) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:12:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:13:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyddh18c.rkt:14:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-append (string-upcase (substring word 0 1))\n                 (substring word 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:13:4\nactual:     \"Android_tv\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:14:4\nactual:     \"Google_pixel\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgbgmaxj.rkt:15:4\nactual:     \"Apple_watch\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "/tmp/tmprre6dsr0.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmprre6dsr0.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char=? (string-ref x 0) #\\_)\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb0a34944.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w) (string-upcase w))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprppbju8o.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpba8g9fe1.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        acc\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append acc (string-upcase (string (second word)))))\n            (helper (rest word) (string-append acc (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6sxugpu3.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (cons (string-upcase (second word)) (rest acc)))\n            (helper (rest word) (cons (first word) acc)))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70r5cr35.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70r5cr35.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70r5cr35.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-capitalize x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "/tmp/tmprre6dsr0.rkt:6:21: string-capitalize: unbound identifier\n  in: string-capitalize\n  location...:\n   /tmp/tmprre6dsr0.rkt:6:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (regexp-replace* #rx\"_\" word\n                   (lambda (match)\n                     (string-upcase (string-ref match 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpelkznab8.rkt:14:4\n\nstring-ref: index is out of range\n  index: 1\n  valid range: [0, 0]\n  string: \"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpelkznab8.rkt:15:4\n\nstring-ref: index is out of range\n  index: 1\n  valid range: [0, 0]\n  string: \"_\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpelkznab8.rkt:16:4\n\nstring-ref: index is out of range\n  index: 1\n  valid range: [0, 0]\n  string: \"_\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (cond\n    [(empty? word) empty]\n    [(char-alphabetic? (first word))\n     (string-append (string-upcase (string (first word)))\n                    (snake_to_camel (rest word)))]\n    [else\n     (string-append (string (first word))\n                    (snake_to_camel (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvydbivt4.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvydbivt4.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvydbivt4.rkt:21:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (helper (rest word) (cons (char-upcase (first (rest word))) (rest acc)))]\n      [else (helper (rest word) (cons (first word) acc))]))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122796,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi8u8idy.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi8u8idy.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi8u8idy.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1))\n                        (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqc8bv57c.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqc8bv57c.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqc8bv57c.rkt:22:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (first (rest word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg82uuv1o.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg82uuv1o.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg82uuv1o.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (word)\n      (string-upcase (substring word 1)))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:17:4\nactual:     \"NDROIDV\"\nexpected:   \"AndroidTv\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:18:4\nactual:     \"OOGLEIXEL\"\nexpected:   \"GooglePixel\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vl8q6ye.rkt:19:4\nactual:     \"PPLEATCH\"\nexpected:   \"AppleWatch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word acc)\n    (cond\n      [(empty? word) (reverse acc)]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (cons (char-upcase (second word)) (rest (rest word))))]\n      [else (snake_to_camel_iter (rest word) (cons (first word) acc))]))\n  (snake_to_camel_iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122794,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmkjce4_s.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmkjce4_s.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmkjce4_s.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122793,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1slzekl.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word))))) ]\n          [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp751rvar9.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp751rvar9.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp751rvar9.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (if (char=? (first word) #\\_)\n            (helper (rest word) (string-append result (string-upcase (string (second word)))))\n            (helper (rest word) (string-append result (string (first word)))))))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4nn0rbe7.rkt:20:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (char-upper-case? (string-ref x 0))\n              x\n              (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfw0iq08.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfw0iq08.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfw0iq08.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (w)\n          (string-upcase (substring w 0 1))\n          (substring w 1))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppeqnki1p.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppeqnki1p.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppeqnki1p.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond\n      [(empty? word) (string-append result)]\n      [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (first (rest word)))))]\n      [else (helper (rest word) (string-append result (first word)))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_i9fd7n.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_i9fd7n.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv_i9fd7n.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgissmdki.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (helper word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_) (helper (rest word) (string-append result (string-upcase (string (second word)))))\n           (else (helper (rest word) (string-append result (string (first word)))))]))\n  (helper word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "/tmp/tmpujwnb2h9.rkt:8:11: else: not allowed as an expression\n  in: (else (helper (rest word) (string-append result (string (first word)))))\n  location...:\n   /tmp/tmpujwnb2h9.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (define (snake_to_camel_iter word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_) (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word))))) ]\n      [else (snake_to_camel_iter (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_iter word \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfqvobh7n.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"android_tv\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfqvobh7n.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"google_pixel\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfqvobh7n.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"apple_watch\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:15:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:16:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplto0dcgz.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (string-upcase x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122797,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqd5fu1iy.rkt:17:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqd5fu1iy.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqd5fu1iy.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1665517261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbaqi7hg_.rkt:21:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map (lambda (x)\n          (if (equal? (string-length x) 1)\n              x\n              (string-append (string-upcase (substring x 0 1))\n                             (substring x 1))))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122798,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n  (string-join\n   (map\n    (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                (string-upcase (substring x 1))\n                x))\n    (string-split word #\\_))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
      "timestamp": 1666122798,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16lp6pvm.rkt:18:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16lp6pvm.rkt:19:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp16lp6pvm.rkt:20:4\n\nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given: #\\_\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}