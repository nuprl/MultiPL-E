{
  "name": "mbpp_437_remove_odd",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove odd characters in a string.\n(define (remove_odd str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-equal? (candidate \"python\") \"yhn\")\n    (check-equal? (candidate \"program\") \"rga\")\n    (check-equal? (candidate \"language\") \"agae\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (define (remove_odd_iter str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((odd? i) (remove_odd_iter str2 (+ i 1)))\n          (else (remove_odd_iter (string-append str2 (string (string-ref str1 i))) (+ i 1)))))\n  (remove_odd_iter \"\" 0))\n",
    "  (string-append (substring str1 0 (remainder (string-length str1) 2))\n                 (substring str1 (remainder (string-length str1) 2))))\n",
    "  (string-join (filter (lambda (x) (even? (char->integer x))) (string->list str1))))\n",
    "  (string-join\n   (filter\n    (lambda (x)\n      (even? (char->integer x)))\n    (string->list str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char->integer x)))\n           (string->list str1))\n   \"\"))\n",
    "  (string-append (substring str1 0 (remainder (string-length str1) 2))\n                 (substring str1 (remainder (string-length str1) 2))))\n",
    "  (define (remove_odd_iter str2 i)\n    (if (and (not (empty? str2))\n             (not (= i 0)))\n        (cons (first str2)\n              (remove_odd_iter (rest str2) (- i 1)))\n        (if (and (not (empty? str2))\n                 (= i 0))\n            (remove_odd_iter (rest str2) (- i 1))\n            '())))\n  (remove_odd_iter str1 1))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (string-append (substring str1 0 1)\n                 (remove_odd (substring str1 2))))\n",
    "  (define (remove_odd_iter str1 str2 i)\n    (cond ((= i (string-length str1)) str2)\n          ((even? (char-&gt;integer (string-ref str1 i)))\n           (remove_odd_iter str1 (string-append str2 (string (string-ref str1 i))) (+ i 1)))\n          (else (remove_odd_iter str1 str2 (+ i 1)))))\n  (remove_odd_iter str1 \"\" 0))\n",
    "  (string-join\n   (filter\n    (lambda (x) (even? (char->integer x)))\n    (string->list str1))))\n",
    "  (string-append (substring str1 0 1)\n                 (substring str1 2)))\n",
    "  (string-append\n   (substring str1 0 (quotient (string-length str1) 2))\n   (substring str1 (quotient (string-length str1) 2) (string-length str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (char-&gt;integer x)))\n           (string-&gt;list str1))))\n",
    "  (string-join (filter (lambda (x) (even? (char->integer x))) (string->list str1))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))\n   \" \"))\n",
    "  (string-append (substring str1 0 (add1 (quotient (string-length str1) 2)))\n                 (substring str1 (quotient (string-length str1) 2))))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-length x)))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (string-append\n   (substring str1 0 (quotient (string-length str1) 2))\n   (substring str1 (quotient (string-length str1) 2) (string-length str1))))\n"
  ]
}