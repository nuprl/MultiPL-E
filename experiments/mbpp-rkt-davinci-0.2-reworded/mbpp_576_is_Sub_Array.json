{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n",
    "  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n        [else (is_Sub_Array A (rest B))]))\n"
  ]
}