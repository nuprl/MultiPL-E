{
  "name": "mbpp_462_combinations_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find all possible combinations of the elements of a given list.\n(define (combinations_list list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate combinations_list))\n    (check-equal? (candidate (list \"orange\" \"red\" \"green\" \"blue\")) (list (list ) (list \"orange\") (list \"red\") (list \"red\" \"orange\") (list \"green\") (list \"green\" \"orange\") (list \"green\" \"red\") (list \"green\" \"red\" \"orange\") (list \"blue\") (list \"blue\" \"orange\") (list \"blue\" \"red\") (list \"blue\" \"red\" \"orange\") (list \"blue\" \"green\") (list \"blue\" \"green\" \"orange\") (list \"blue\" \"green\" \"red\") (list \"blue\" \"green\" \"red\" \"orange\")))\n    (check-equal? (candidate (list \"red\" \"green\" \"blue\" \"white\" \"black\" \"orange\")) (list (list ) (list \"red\") (list \"green\") (list \"green\" \"red\") (list \"blue\") (list \"blue\" \"red\") (list \"blue\" \"green\") (list \"blue\" \"green\" \"red\") (list \"white\") (list \"white\" \"red\") (list \"white\" \"green\") (list \"white\" \"green\" \"red\") (list \"white\" \"blue\") (list \"white\" \"blue\" \"red\") (list \"white\" \"blue\" \"green\") (list \"white\" \"blue\" \"green\" \"red\") (list \"black\") (list \"black\" \"red\") (list \"black\" \"green\") (list \"black\" \"green\" \"red\") (list \"black\" \"blue\") (list \"black\" \"blue\" \"red\") (list \"black\" \"blue\" \"green\") (list \"black\" \"blue\" \"green\" \"red\") (list \"black\" \"white\") (list \"black\" \"white\" \"red\") (list \"black\" \"white\" \"green\") (list \"black\" \"white\" \"green\" \"red\") (list \"black\" \"white\" \"blue\") (list \"black\" \"white\" \"blue\" \"red\") (list \"black\" \"white\" \"blue\" \"green\") (list \"black\" \"white\" \"blue\" \"green\" \"red\") (list \"orange\") (list \"orange\" \"red\") (list \"orange\" \"green\") (list \"orange\" \"green\" \"red\") (list \"orange\" \"blue\") (list \"orange\" \"blue\" \"red\") (list \"orange\" \"blue\" \"green\") (list \"orange\" \"blue\" \"green\" \"red\") (list \"orange\" \"white\") (list \"orange\" \"white\" \"red\") (list \"orange\" \"white\" \"green\") (list \"orange\" \"white\" \"green\" \"red\") (list \"orange\" \"white\" \"blue\") (list \"orange\" \"white\" \"blue\" \"red\") (list \"orange\" \"white\" \"blue\" \"green\") (list \"orange\" \"white\" \"blue\" \"green\" \"red\") (list \"orange\" \"black\") (list \"orange\" \"black\" \"red\") (list \"orange\" \"black\" \"green\") (list \"orange\" \"black\" \"green\" \"red\") (list \"orange\" \"black\" \"blue\") (list \"orange\" \"black\" \"blue\" \"red\") (list \"orange\" \"black\" \"blue\" \"green\") (list \"orange\" \"black\" \"blue\" \"green\" \"red\") (list \"orange\" \"black\" \"white\") (list \"orange\" \"black\" \"white\" \"red\") (list \"orange\" \"black\" \"white\" \"green\") (list \"orange\" \"black\" \"white\" \"green\" \"red\") (list \"orange\" \"black\" \"white\" \"blue\") (list \"orange\" \"black\" \"white\" \"blue\" \"red\") (list \"orange\" \"black\" \"white\" \"blue\" \"green\") (list \"orange\" \"black\" \"white\" \"blue\" \"green\" \"red\")))\n    (check-equal? (candidate (list \"red\" \"green\" \"black\" \"orange\")) (list (list ) (list \"red\") (list \"green\") (list \"green\" \"red\") (list \"black\") (list \"black\" \"red\") (list \"black\" \"green\") (list \"black\" \"green\" \"red\") (list \"orange\") (list \"orange\" \"red\") (list \"orange\" \"green\") (list \"orange\" \"green\" \"red\") (list \"orange\" \"black\") (list \"orange\" \"black\" \"red\") (list \"orange\" \"black\" \"green\") (list \"orange\" \"black\" \"green\" \"red\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list1)\n      (list '())\n      (append (map (lambda (x) (cons (car list1) x)) (combinations_list (cdr list1)))\n              (combinations_list (cdr list1)))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else (append (combinations_list (rest list1))\n                  (map (lambda (x) (cons (first list1) x))\n                       (combinations_list (rest list1))))]))\n",
    "  (if (null? list1)\n      '()\n      (append (map (lambda (x) (list x)) list1)\n              (combinations_list (cdr list1)))))\n",
    "  (if (null? list1)\n      '()\n      (append (map (lambda (x) (list x)) list1)\n              (combinations_list (rest list1)))))\n",
    "  (if (null? list1)\n      (list '())\n      (let ((rest (combinations_list (cdr list1))))\n        (append rest (map (lambda (x) (cons (car list1) x)) rest)))))\n",
    "  (if (null? list1)\n      (list '())\n      (let ([first (car list1)]\n            [rest (cdr list1)])\n        (append (map (lambda (x) (cons first x))\n                     (combinations_list rest))\n                (combinations_list rest)))))\n",
    "  (define (combinations_list_iter list1 list2)\n    (if (null? list1)\n        list2\n        (combinations_list_iter (cdr list1)\n                                (append list2\n                                        (map (lambda (x) (cons (car list1) x)) list2)))))\n  (combinations_list_iter list1 (list (list))))\n",
    "  (define (combinations_list_helper list1 list2)\n    (cond ((null? list1) list2)\n          (else (combinations_list_helper (cdr list1) (append list2 (list (list (car list1))))))))\n  (combinations_list_helper list1 '()))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list (list (first list1)))]\n    [else\n     (append\n      (map (lambda (x) (cons (first list1) x))\n           (combinations_list (rest list1)))\n      (combinations_list (rest list1)))]))\n",
    "  (define (combinations_list_iter list1 list2)\n    (if (null? list1)\n        list2\n        (combinations_list_iter (cdr list1)\n                                (append list2\n                                        (map (lambda (x) (cons (car list1) x))\n                                             list2)))))\n  (combinations_list_iter list1 (list (list))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (append (map (lambda (x) (list x)) list1)\n             (combinations_list (rest list1)))]))\n</code>\n",
    "  (cond [(empty? list1) empty]\n        [else\n         (append (map (lambda (x) (cons (first list1) x))\n                      (combinations_list (rest list1)))\n                 (combinations_list (rest list1)))]))\n",
    "  (if (null? list1)\n      '()\n      (let* ([first (car list1)]\n             [rest (cdr list1)]\n             [combos (combinations_list rest)])\n        (append (map (lambda (x) (cons first x)) combos)\n                combos))))\n",
    "  (if (null? list1)\n      '()\n      (append (map (lambda (x) (list x)) list1)\n              (combinations_list (cdr list1)))))\n",
    "  (if (null? list1)\n      (list '())\n      (let ((rest (combinations_list (cdr list1))))\n        (append rest (map (lambda (x) (cons (car list1) x)) rest)))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (append (map (lambda (x) (list x)) list1)\n             (combinations_list (rest list1)))]))\n",
    "  (if (null? list1)\n      '(())\n      (append (map (lambda (x) (cons (car list1) x)) (combinations_list (cdr list1)))\n              (combinations_list (cdr list1)))))\n",
    "  (define (combinations_list_helper list1 list2)\n    (if (null? list1)\n        list2\n        (combinations_list_helper (cdr list1)\n                                  (append list2\n                                          (map (lambda (x) (cons (car list1) x))\n                                               list2)))))\n  (combinations_list_helper list1 (list (list))))\n",
    "  (cond [(empty? list1) empty]\n        [else (append (map (lambda (x) (list x)) list1)\n                      (combinations_list (rest list1)))]))\n",
    "  (define (combinations_list_iter list1 list2)\n    (if (null? list1)\n        list2\n        (combinations_list_iter (cdr list1)\n                                (append list2\n                                        (map (lambda (x) (cons (car list1) x))\n                                             list2)))))\n  (combinations_list_iter list1 (list (list (car list1)))))\n"
  ]
}