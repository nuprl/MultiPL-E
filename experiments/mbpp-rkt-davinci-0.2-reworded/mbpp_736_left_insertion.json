{
  "name": "mbpp_736_left_insertion",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rktthon-exercises/data-structures-and-algorithms/rktthon-data-structure-exercise-24.php\n(define (left_insertion a x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_insertion))\n    (check-equal? (candidate (list 1 2 4 5) 6) 4)\n    (check-equal? (candidate (list 1 2 4 5) 3) 2)\n    (check-equal? (candidate (list 1 2 4 5) 7) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (vector-ref a (quotient (+ i j) 2)) x)\n            (loop (quotient (+ i j) 2) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x l r)\n    (cond\n      [(= l r) l]\n      [(< x (vector-ref a l)) l]\n      [(> x (vector-ref a r)) (+ r 1)]\n      [else (left_insertion_iter a x (+ l 1) (- r 1))]))\n  (left_insertion_iter a x 0 (- (vector-length a) 1)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)) (k (quotient (+ i j) 2)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a k)) (loop i k (- k 1)))\n          (else (loop (+ k 1) j (+ k 1))))))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n        [else empty]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0))\n    (cond ((= i (length a)) i)\n          ((<= (list-ref a i) x) (loop (+ i 1)))\n          (else i))))\n",
    "  (let loop ((lst a) (i 0))\n    (cond ((null? lst) i)\n          ((< (car lst) x) (loop (cdr lst) (+ i 1)))\n          (else i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (cond [(= i j) i]\n          [(>= (vector-ref a i) x) i]\n          [else (loop (+ i 1) j)])))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((&gt;= i j) i)\n          ((&lt; (vector-ref a i) x) (loop (+ i 1) j))\n          (else (loop i (- j 1))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) 0)\n          ((< x (vector-ref a i)) (left_insertion_iter a x (- i 1)))\n          (else i)))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i 0) 0]\n      [(< x (vector-ref a i)) (left_insertion_iter a x (- i 1))]\n      [else i]))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (define (left_insertion-iter low high)\n    (if (> low high)\n        low\n        (let ((mid (quotient (+ low high) 2)))\n          (cond ((= (vector-ref a mid) x) mid)\n                ((< (vector-ref a mid) x) (left_insertion-iter (+ mid 1) high))\n                (else (left_insertion-iter low (- mid 1)))))))\n  (left_insertion-iter 0 (- (vector-length a) 1)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (&lt; i (vector-length a))\n        (if (&lt;= (vector-ref a i) x)\n            (loop (+ i 1))\n            i)\n        (vector-length a))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((lo 0) (hi (sub1 (vector-length a))))\n    (if (&lt; lo hi)\n        (let ((mid (quotient (+ lo hi) 2)))\n          (cond ((&lt; x (vector-ref a mid)) (loop lo mid))\n                ((&gt; x (vector-ref a mid)) (loop (add1 mid) hi))\n                (else mid)))\n        lo)))\n",
    "  (let loop ([i 0])\n    (if (= i (vector-length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j (add1 (vector-length a))])\n    (if (&lt; i j)\n        (let ([k (quotient (+ i j) 2)])\n          (cond [(&lt; x (vector-ref a k)) (loop i k)]\n                [(= x (vector-ref a k)) k]\n                [else (loop (add1 k) j)]))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([mid (quotient (+ i j) 2)])\n          (cond [(= (vector-ref a mid) x) mid]\n                [(&lt; (vector-ref a mid) x) (loop (+ mid 1) j)]\n                [else (loop i mid)]))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a (quotient (+ i j) 2)) x)\n            (loop (+ (quotient (+ i j) 2) 1) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (< i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((< x (vector-ref a k)) (loop i k))\n                ((> x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([m (quotient (+ i j) 2)])\n          (if (< x (list-ref a m))\n              (loop i m)\n              (loop m j))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&lt; (vector-ref a k) x) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(>= i (length a)) i]\n      [(< (vector-ref a i) x) (left_insertion_iter a x (+ i 1))]\n      [else i]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (vector-length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (loop (+ i 1))])))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (and (<= (vector-ref a i) x)\n                 (<= x (vector-ref a (+ i 1))))\n            (+ i 1)\n            (loop (+ i 1))))))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length a)) i]\n          [(<= (list-ref a i) x) (loop (+ i 1))]\n          [else i])))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (< i j)\n        (let ((mid (quotient (+ i j) 2)))\n          (cond ((< x (vector-ref a mid)) (loop i mid))\n                ((> x (vector-ref a mid)) (loop (+ mid 1) j))\n                (else mid)))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else (cons x (cons (first a) (rest a)))]))\n",
    "  (let loop ([i 0])\n    (if (&lt; i (vector-length a))\n        (if (&lt;= (vector-ref a i) x)\n            (loop (+ i 1))\n            i)\n        (vector-length a))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&gt; x (vector-ref a k))\n                 (loop (+ k 1) j))\n                ((&lt; x (vector-ref a k))\n                 (loop i k))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(<= x (first a)) 0]\n    [else (+ 1 (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop mid j))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n        [else empty]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (first a)) (+ 1 (left_insertion (rest a) x))]\n    [else 0]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (define (left_insertion_iter a x low high)\n    (if (<= low high)\n        (let* ([mid (quotient (+ low high) 2)]\n               [mid-val (vector-ref a mid)])\n          (cond\n            [(< x mid-val) (left_insertion_iter a x low (- mid 1))]\n            [(> x mid-val) (left_insertion_iter a x (+ mid 1) high)]\n            [else mid]))\n        low))\n  (left_insertion_iter a x 0 (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) 0)\n          ((< x (vector-ref a i)) (left_insertion_iter a x (- i 1)))\n          (else i)))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (vector-ref a (quotient (+ i j) 2)) x)\n            (loop (+ (quotient (+ i j) 2) 1) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (define (left_insertion-iter a x l u)\n    (cond ((&gt; l u) l)\n          ((= x (vector-ref a l)) l)\n          ((&lt; x (vector-ref a l)) l)\n          (else (left_insertion-iter a x (+ l 1) u))))\n  (left_insertion-iter a x 0 (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (vector-length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([k (quotient (+ i j) 2)])\n          (cond\n            [(= (vector-ref a k) x) k]\n            [(&lt; (vector-ref a k) x) (loop (+ k 1) j)]\n            [else (loop i k)]))\n        i)))\n",
    "  (define (left_insertion_iter a x i)\n    (if (or (= i (length a))\n            (< x (vector-ref a i)))\n        i\n        (left_insertion_iter a x (+ i 1))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([m (quotient (+ i j) 2)])\n          (cond [(= x (vector-ref a m)) m]\n                [(&lt; x (vector-ref a m)) (loop i m)]\n                [else (loop (+ m 1) j)]))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (cond ((empty? a) 0)\n        ((< x (first a)) 0)\n        ((> x (last a)) (length a))\n        (else\n         (let loop ((i 0) (j (length a)) (k (/ (+ i j) 2)))\n           (cond ((= i k) k)\n                 ((< x (list-ref a k)) (loop i k (- k (/ (- k i) 2))))\n                 ((> x (list-ref a k)) (loop k j (+ k (/ (- j k) 2)))))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (<= (vector-ref a mid) x)\n              (loop (+ mid 1) j)\n              (loop i mid))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [else\n     (if (and (not (empty? (rest a)))\n              (or (< x (first a))\n                  (> x (second a))))\n         (cons (first a) (left_insertion (rest a) x))\n         (cons x a))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop mid j))))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond [(empty? a) i]\n          [(>= (first a) x) i]\n          [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (< i j)\n        (let ((k (quotient (+ i j) 2)))\n          (if (< x (vector-ref a k))\n              (loop i k)\n              (loop (+ k 1) j)))\n        i)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter low high)\n    (if (> low high)\n        low\n        (let ((mid (quotient (+ low high) 2)))\n          (cond ((= (vector-ref a mid) x) mid)\n                ((< (vector-ref a mid) x) (left_insertion_iter (+ mid 1) high))\n                (else (left_insertion_iter low (- mid 1)))))))\n  (left_insertion_iter 0 (- (vector-length a) 1)))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([m (quotient (+ i j) 2)])\n          (if (< x (list-ref a m))\n              (loop i m)\n              (loop (+ m 1) j))))))\n",
    "  (let loop ((lo 0) (hi (sub1 (vector-length a))))\n    (if (&lt; lo hi)\n        (let ((mid (quotient (+ lo hi) 2)))\n          (cond ((&lt; x (vector-ref a mid)) (loop lo mid))\n                ((&lt; (vector-ref a mid) x) (loop (add1 mid) hi))\n                (else mid)))\n        lo)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) 0)\n          ((< x (vector-ref a i)) (left_insertion_iter a x (- i 1)))\n          (else i)))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((lst a) (i 0))\n    (cond ((null? lst) i)\n          ((< (car lst) x) (loop (cdr lst) (+ i 1)))\n          (else i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop mid j))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(null? a) 0]\n    [(> (car a) x) 0]\n    [(< (car a) x) (+ 1 (left_insertion (cdr a) x))]\n    [else 0]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((k (quotient (+ i j) 2)))\n          (if (< x (vector-ref a k))\n              (loop i k)\n              (loop (+ k 1) j))))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([k (quotient (+ i j) 2)])\n          (cond\n            [(= (vector-ref a k) x) k]\n            [(&lt; (vector-ref a k) x) (loop (+ k 1) j)]\n            [else (loop i k)]))\n        i)))\n",
    "  (let loop ([i 0] [j (length a)])\n    (cond\n      [(= i j) i]\n      [(< x (vector-ref a i)) i]\n      [else (loop (+ i 1) j)])))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (<= x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(<= x (vector-ref a i)) i]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a (quotient (+ i j) 2)) x)\n            (loop (+ (quotient (+ i j) 2) 1) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((<= (list-ref a i) x) (loop (+ i 1) j))\n          (else i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ([i 0] [j (sub1 (vector-length a))])\n    (cond [(= i j) i]\n          [(<= (vector-ref a i) x) (loop (add1 i) j)]\n          [else (loop i (sub1 j))])))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else (cons x (cons (first a) (rest a)))]))\n",
    "  (define (left_insertion_iter low high)\n    (if (<= low high)\n        (let ((mid (quotient (+ low high) 2)))\n          (cond ((= x (vector-ref a mid)) mid)\n                ((< x (vector-ref a mid)) (left_insertion_iter low (- mid 1)))\n                (else (left_insertion_iter (+ mid 1) high))))\n        low))\n  (left_insertion_iter 0 (- (vector-length a) 1)))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [(= (first a) x) 0]\n    [else (+ 1 (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (&lt; i j)\n        (let ([m (quotient (+ i j) 2)])\n          (cond [(= (vector-ref a m) x) m]\n                [(&lt; (vector-ref a m) x) (loop (+ m 1) j)]\n                [else (loop i m)]))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< x (list-ref a i))\n            i\n            (loop (+ i 1))))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (left_insertion_iter a x (+ i 1))\n            i)))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; (vector-ref a k) x) (loop (+ k 1) j))\n                ((&gt; (vector-ref a k) x) (loop i k))\n                (else k)))\n        i)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((< i (vector-length a))\n           (if (< x (vector-ref a i))\n               i\n               (left_insertion_iter a x (+ i 1))))\n          (else (vector-length a))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (cond\n      [(= i j) i]\n      [(< x (vector-ref a i)) i]\n      [else (loop (+ i 1) j)])))\n",
    "  (define (left_insertion_iter a x lo hi)\n    (cond\n      [(= lo hi) lo]\n      [(> (vector-ref a lo) x) lo]\n      [else (left_insertion_iter a x (+ lo 1) hi)]))\n  (left_insertion_iter a x 0 (vector-length a)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(< x (first a)) 0]\n    [(> x (last a)) (length a)]\n    [else\n     (let loop ([lo 0] [hi (length a)])\n       (let ([mid (quotient (+ lo hi) 2)])\n         (cond\n           [(= mid lo) mid]\n           [(> x (list-ref a mid)) (loop lo mid)]\n           [else (loop mid hi)])))]))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (cond [(< x (vector-ref a mid)) (loop i mid)]\n                [(> x (vector-ref a mid)) (loop (+ mid 1) j)]\n                [else mid])))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((m (quotient (+ i j) 2)))\n          (if (< x (vector-ref a m))\n              (loop i m)\n              (loop m j))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= x (list-ref a i))\n            i\n            (loop (+ i 1))))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (< i j)\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j)))\n        i)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) 0)\n          ((< x (vector-ref a i)) (left_insertion_iter a x (- i 1)))\n          (else i)))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length a)) i]\n          [(>= (vector-ref a i) x) i]\n          [else (loop (+ i 1))])))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (vector-ref a (quotient (+ i j) 2)) x)\n            (loop (+ (quotient (+ i j) 2) 1) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (iter a x i)\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (iter a x (+ i 1))\n            i)))\n  (iter a x 0))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i 0) i)\n          ((< x (vector-ref a i)) (left_insertion_iter a x (- i 1)))\n          (else (+ i 1))))\n  (left_insertion_iter a x (- (vector-length a) 1)))\n",
    "  (define (left_insertion_iter a x i)\n    (if (null? a)\n        i\n        (if (< x (car a))\n            i\n            (left_insertion_iter (cdr a) x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (cond ((< x (vector-ref a mid)) (loop i mid))\n                ((> x (vector-ref a mid)) (loop (+ mid 1) j))\n                (else mid))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (vector-length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((<= (vector-ref a i) x) (loop (+ i 1) j))\n          (else i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a (quotient (+ i j) 2)) x)\n            (loop (+ (quotient (+ i j) 2) 1) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (vector-length a)) i]\n      [(< x (vector-ref a i)) i]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= (list-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (<= x (list-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (vector-ref a (quotient (+ i j) 2)) x)\n            (loop (quotient (+ i j) 2) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond ((< x (vector-ref a i)) i)\n          ((= i (vector-length a)) (vector-length a))\n          (else (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n        [else empty]))\n",
    "  (define (left_insertion_iter a x l r)\n    (cond ((= l r) l)\n          ((< x (vector-ref a l)) l)\n          ((> x (vector-ref a r)) (+ r 1))\n          (else (left_insertion_iter a x (+ l 1) (- r 1)))))\n  (left_insertion_iter a x 0 (- (vector-length a) 1)))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(< x (list-ref a i)) i]\n      [else (left_insertion_iter a x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (define (left_insertion-iter low high)\n    (cond ((&gt; low high) low)\n          ((&lt; x (vector-ref a high)) (left_insertion-iter low (- high 1)))\n          (else (left_insertion-iter (+ low 1) high))))\n  (left_insertion-iter 0 (- (vector-length a) 1)))\n",
    "  (let loop ([i 0])\n    (if (= i (vector-length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((< x (vector-ref a k)) (loop i k))\n                ((> x (vector-ref a k)) (loop (+ k 1) j))\n                (else k))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n"
  ]
}