{
  "name": "mbpp_736_left_insertion",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/rktthon-exercises/data-structures-and-algorithms/rktthon-data-structure-exercise-24.php\n(define (left_insertion a x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate left_insertion))\n    (check-equal? (candidate (list 1 2 4 5) 6) 4)\n    (check-equal? (candidate (list 1 2 4 5) 3) 2)\n    (check-equal? (candidate (list 1 2 4 5) 7) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n    [else empty]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&gt; x (vector-ref a k)) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a i)) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (vector-ref a (quotient (+ i j) 2)) x)\n            (loop (quotient (+ i j) 2) j)\n            (loop i (quotient (+ i j) 2))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (< x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (define (left_insertion_iter a x i)\n    (if (= i (length a))\n        (length a)\n        (if (< x (list-ref a i))\n            i\n            (left_insertion_iter a x (+ i 1)))))\n  (left_insertion_iter a x 0))\n",
    "  (define (left_insertion_iter a x l r)\n    (cond\n      [(= l r) l]\n      [(< x (vector-ref a l)) l]\n      [(> x (vector-ref a r)) (+ r 1)]\n      [else (left_insertion_iter a x (+ l 1) (- r 1))]))\n  (left_insertion_iter a x 0 (- (vector-length a) 1)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (left_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)) (k (quotient (+ i j) 2)))\n    (cond ((= i j) i)\n          ((< x (vector-ref a k)) (loop i k (- k 1)))\n          (else (loop (+ k 1) j (+ k 1))))))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (left_insertion (rest a) x))]\n        [else empty]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (vector-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0))\n    (cond ((= i (length a)) i)\n          ((<= (list-ref a i) x) (loop (+ i 1)))\n          (else i))))\n",
    "  (let loop ((lst a) (i 0))\n    (cond ((null? lst) i)\n          ((< (car lst) x) (loop (cdr lst) (+ i 1)))\n          (else i))))\n",
    "  (define (left_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(< x (first a)) i]\n      [else (left_insertion_iter (rest a) x (+ i 1))]))\n  (left_insertion_iter a x 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (let loop ([i 0] [j (length a)])\n    (cond [(= i j) i]\n          [(>= (vector-ref a i) x) i]\n          [else (loop (+ i 1) j)])))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n"
  ]
}