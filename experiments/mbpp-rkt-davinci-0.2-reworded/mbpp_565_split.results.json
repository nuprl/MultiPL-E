{
  "name": "mbpp_565_split",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (split-iter word result)\n    (if (string=? word \"\")\n        result\n        (split-iter (substring word 1) (cons (substring word 0 1) result))))\n  (split-iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv03od1mv.rkt:16:4\nactual:     '(\"n\" \"o\" \"h\" \"t\" \"y\" \"p\")\nexpected:   '(\"p\" \"y\" \"t\" \"h\" \"o\" \"n\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv03od1mv.rkt:17:4\nactual:     '(\"e\" \"m\" \"a\" \"N\")\nexpected:   '(\"N\" \"a\" \"m\" \"e\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv03od1mv.rkt:18:4\nactual:     '(\"m\" \"a\" \"r\" \"g\" \"o\" \"r\" \"p\")\nexpected:   '(\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (eq? word \"\")\n      '()\n      (cons (string-ref word 0)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk7fm9f1p.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk7fm9f1p.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk7fm9f1p.rkt:17:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (cond\n    [(empty? word) empty]\n    [else (cons (first word) (split (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:14:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp61d4q7_5.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp61d4q7_5.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp61d4q7_5.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (list->string (string-&gt;list word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpj1y8tv11.rkt:5:16: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (cond\n    [(empty? word) empty]\n    [else (cons (first word) (split (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (cond\n    [(empty? word) empty]\n    [else (cons (first word) (split (rest word)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv1_3u812.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (map (lambda (x) (string-append x)) (string->list word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ub7th4_.rkt:12:4\n\nstring-append: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ub7th4_.rkt:13:4\n\nstring-append: contract violation\n  expected: string?\n  given: #\\N\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ub7th4_.rkt:14:4\n\nstring-append: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:14:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (helper word result)\n    (if (empty? word)\n        result\n        (helper (rest word) (append result (list (first word))))))\n  (helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhv64oju.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhv64oju.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhv64oju.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (split-helper word acc)\n    (if (empty? word)\n        acc\n        (split-helper (rest word) (cons (first word) acc))))\n  (split-helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (list->string (string-&gt;list word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122781,
      "stdout": "",
      "stderr": "/tmp/tmpj1y8tv11.rkt:5:16: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:14:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (list->string (string->list word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxb15_crh.rkt:12:4\nactual:     \"python\"\nexpected:   '(\"p\" \"y\" \"t\" \"h\" \"o\" \"n\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxb15_crh.rkt:13:4\nactual:     \"Name\"\nexpected:   '(\"N\" \"a\" \"m\" \"e\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxb15_crh.rkt:14:4\nactual:     \"program\"\nexpected:   '(\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg16z0ax1.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg16z0ax1.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg16z0ax1.rkt:17:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (split-helper word acc)\n    (if (empty? word)\n        acc\n        (split-helper (rest word) (cons (first word) acc))))\n  (split-helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:14:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (split-helper word acc)\n    (if (empty? word)\n        acc\n        (split-helper (rest word) (cons (first word) acc))))\n  (split-helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5k99p60x.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:14:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (split-helper word result)\n    (if (empty? word)\n        result\n        (split-helper (rest word) (append result (list (first word))))))\n  (split-helper word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpziv5valv.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpziv5valv.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpziv5valv.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp61d4q7_5.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp61d4q7_5.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp61d4q7_5.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (map (lambda (x) (string-append x)) word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51d3z44z.rkt:12:4\n\nmap: contract violation\n  expected: list?\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51d3z44z.rkt:13:4\n\nmap: contract violation\n  expected: list?\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp51d3z44z.rkt:14:4\n\nmap: contract violation\n  expected: list?\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (define (iter word acc)\n    (if (empty? word)\n        acc\n        (iter (rest word) (cons (first word) acc))))\n  (iter word '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5bqscr0p.rkt:16:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5bqscr0p.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5bqscr0p.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string->list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9eybpr2.rkt:12:4\nactual:     '(#\\p #\\y #\\t #\\h #\\o #\\n)\nexpected:   '(\"p\" \"y\" \"t\" \"h\" \"o\" \"n\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9eybpr2.rkt:13:4\nactual:     '(#\\N #\\a #\\m #\\e)\nexpected:   '(\"N\" \"a\" \"m\" \"e\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9eybpr2.rkt:14:4\nactual:     '(#\\p #\\r #\\o #\\g #\\r #\\a #\\m)\nexpected:   '(\"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      '()\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppm07ki97.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (string=? word \"\")\n      '()\n      (cons (substring word 0 1)\n            (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word)\n            (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwwcvuph.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (string-&gt;list word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510050,
      "stdout": "",
      "stderr": "/tmp/tmp7p0_cwyn.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (empty? word)\n      empty\n      (cons (first word) (split (rest word)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1665510051,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:14:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"python\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcou_uafo.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"program\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to split a string into characters.\n(define (split word)\n  (if (null? word)\n      '()\n      (cons (string-ref word 0) (split (substring word 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate split))\n    (check-equal? (candidate \"python\") (list \"p\" \"y\" \"t\" \"h\" \"o\" \"n\"))\n    (check-equal? (candidate \"Name\") (list \"N\" \"a\" \"m\" \"e\"))\n    (check-equal? (candidate \"program\") (list \"p\" \"r\" \"o\" \"g\" \"r\" \"a\" \"m\"))\n))\n\n(test-humaneval)",
      "timestamp": 1666122782,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:14:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:15:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfq9zcdr3.rkt:16:4\n\nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}