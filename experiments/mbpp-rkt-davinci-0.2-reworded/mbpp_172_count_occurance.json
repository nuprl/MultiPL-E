{
  "name": "mbpp_172_count_occurance",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the number of occurence of the string 'std' in a given string.\n(define (count_occurance s)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_occurance))\n    (check-equal? (candidate \"letstdlenstdporstd\") 3)\n    (check-equal? (candidate \"truststdsolensporsd\") 1)\n    (check-equal? (candidate \"makestdsostdworthit\") 2)\n    (check-equal? (candidate \"stds\") 1)\n    (check-equal? (candidate \"\") 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          ((= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (count-matches \"std\" s))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? (substring s i (+ i 3)) \"std\")\n           (+ 1 (count_occurance_iter s (+ i 3))))\n          ((>= i (string-length s)) 0)\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (count (regexp-match* #rx\"std\" s) #:test equal?))\n",
    "  (count 'std s))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((string=? s \"\") i)\n          ((string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1)))\n          (else (count_occurance_iter (substring s 1) i))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond ((= i (string-length s)) 0)\n          ((string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 3))))\n          (else (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string=? (substring s i (+ i 3)) \"std\")\n        (+ 1 (count_occurance_iter s (+ i 1)))\n        (count_occurance_iter s (+ i 1))))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1))]\n      [else (count_occurance_iter (substring s 1) i)]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(= i (- (string-length s) 2)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_iter s (+ i 1)))]\n      [else (count_occurance_iter s (+ i 1))]))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n      [(string=? (substring s i (+ i 3)) \"std\") (+ 1 (count_occurance_helper s (+ i 1)))]\n      [else (count_occurance_helper s (+ i 1))]))\n  (count_occurance_helper s 0))\n",
    "  (define (count_occurance_iter s n)\n    (if (string-contains s \"std\")\n        (count_occurance_iter (substring s (+ (string-index s \"std\") 3)) (+ n 1))\n        n))\n  (count_occurance_iter s 0))\n",
    "  (cond\n    [(empty? s) 0]\n    [(string=? (substring s 0 3) \"std\") (+ 1 (count_occurance (substring s 3)))]\n    [else (count_occurance (substring s 1))]))\n",
    "  (define (count_occurance_iter s count)\n    (if (string-length s)\n        (if (string=? (substring s 0 3) \"std\")\n            (count_occurance_iter (substring s 1) (+ count 1))\n            (count_occurance_iter (substring s 1) count))\n        count))\n  (count_occurance_iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (string-contains s \"std\")\n        (+ 1 (count_occurance_iter (substring s (+ i 1)) 0))\n        0))\n  (count_occurance_iter s 0))\n",
    "  (let loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(string=? (substring s 0 3) \"std\") (loop (substring s 3) (+ count 1))]\n          [else (loop (substring s 1) count)])))\n",
    "  (define (count_occurance_iter s i)\n    (cond\n      [(empty? s) i]\n      [(string=? (substring s 0 3) \"std\") (count_occurance_iter (substring s 3) (+ i 1))]\n      [else (count_occurance_iter (substring s 1) i)]))\n  (count_occurance_iter s 0))\n",
    "  (define (count-occurance-iter s count)\n    (cond\n      [(empty? s) count]\n      [(string=? (substring s 0 3) \"std\") (count-occurance-iter (substring s 3) (+ count 1))]\n      [else (count-occurance-iter (substring s 1) count)]))\n  (count-occurance-iter s 0))\n",
    "  (define (count_occurance_iter s i)\n    (if (= i (string-length s))\n        0\n        (if (string=? (substring s i (+ i 3)) \"std\")\n            (+ 1 (count_occurance_iter s (+ i 1)))\n            (count_occurance_iter s (+ i 1)))))\n  (count_occurance_iter s 0))\n"
  ]
}