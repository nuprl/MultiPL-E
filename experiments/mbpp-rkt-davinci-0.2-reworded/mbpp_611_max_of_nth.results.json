{
  "name": "mbpp_611_max_of_nth",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (lst) (list-ref lst N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1666123449,
      "stdout": "",
      "stderr": "/tmp/tmp7e1at1cl.rkt:6:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp7e1at1cl.rkt:6:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n(define (max_of_nth test_list N)\n  (apply max (map (lambda (x) (list-ref x N)) test_list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_of_nth))\n    (check-equal? (candidate (list (list 5 6 7) (list 1 3 5) (list 8 9 19)) 2) 19)\n    (check-equal? (candidate (list (list 6 7 8) (list 2 4 6) (list 9 10 20)) 1) 10)\n    (check-equal? (candidate (list (list 7 8 9) (list 3 5 7) (list 10 11 21)) 1) 11)\n))\n\n(test-humaneval)",
      "timestamp": 1665510329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}