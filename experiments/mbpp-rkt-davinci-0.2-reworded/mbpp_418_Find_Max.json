{
  "name": "mbpp_418_Find_Max",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the element of a list having maximum length.\n(define (Find_Max lst)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Find_Max))\n    (check-equal? (candidate (list (list \"A\") (list \"A\" \"B\") (list \"A\" \"B\" \"C\"))) (list \"A\" \"B\" \"C\"))\n    (check-equal? (candidate (list (list 1) (list 1 2) (list 1 2 3))) (list 1 2 3))\n    (check-equal? (candidate (list (list 1 1) (list 1 2 3) (list 1 5 6 1))) (list 1 5 6 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (> (length (car lst)) (length (cadr lst)))\n             (car lst)\n             (cadr lst))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (rest lst)) (first lst)]\n    [else\n     (let ([max (Find_Max (rest lst))])\n       (if (> (length (first lst)) (length max))\n           (first lst)\n           max))]))\n",
    "  (if (null? lst)\n      '()\n      (let ((max (car lst)))\n        (for ((x (cdr lst)))\n          (if (&gt; (length x) (length max))\n              (set! max x)))\n        max)))\n",
    "  (cond\n    [(empty? lst) '()]\n    [(empty? (rest lst)) (first lst)]\n    [else\n     (let ([max (Find_Max (rest lst))])\n       (if (&gt; (length (first lst)) (length max))\n           (first lst)\n           max))]))\n</code>\n",
    "  (cond\n    [(empty? lst) '()]\n    [(empty? (rest lst)) (first lst)]\n    [else\n     (if (> (length (first lst)) (length (Find_Max (rest lst))))\n         (first lst)\n         (Find_Max (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) (error \"empty list\")]\n    [(empty? (rest lst)) (first lst)]\n    [else (if (> (length (first lst)) (length (Find_Max (rest lst))))\n              (first lst)\n              (Find_Max (rest lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (> (length (car lst)) (length (car (cdr lst))))\n             (car lst)\n             (car (cdr lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (> (length (car lst)) (length (cadr lst)))\n              (car lst)\n              (cadr lst))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (> (length (car lst)) (length (cadr lst)))\n             (car lst)\n             (cadr lst))]))\n",
    "  (if (null? lst)\n      '()\n      (let ([max (car lst)])\n        (for ([elem (cdr lst)])\n          (if (&gt; (length elem) (length max))\n              (set! max elem)))\n        max)))\n",
    "  (if (null? lst)\n      '()\n      (if (null? (cdr lst))\n          (car lst)\n          (if (> (length (car lst)) (length (cadr lst)))\n              (Find_Max (cons (car lst) (cddr lst)))\n              (Find_Max (cdr lst))))))\n",
    "  (cond\n    [(null? lst) #f]\n    [(null? (cdr lst)) (car lst)]\n    [else (if (> (length (car lst)) (length (cadr lst)))\n             (car lst)\n             (cadr lst))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (if (> (length (car lst)) (length (cadr lst)))\n         (car lst)\n         (cadr lst))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (if (> (length (car lst)) (length (cadr lst)))\n         (Find_Max (cons (car lst) (cddr lst)))\n         (Find_Max (cdr lst)))]))\n",
    "  (cond [(empty? lst) '()]\n        [else (max-length (first lst) (Find_Max (rest lst)))]))\n",
    "  (if (null? lst)\n      '()\n      (let ((max (car lst)))\n        (for-each (lambda (x) (if (&gt; (length x) (length max)) (set! max x))) (cdr lst))\n        max)))\n",
    "  (if (null? lst)\n      '()\n      (if (null? (cdr lst))\n          (car lst)\n          (if (> (length (car lst)) (length (cadr lst)))\n              (Find_Max (cons (car lst) (cddr lst)))\n              (Find_Max (cons (cadr lst) (cddr lst)))))))\n",
    "  (cond [(empty? lst) empty]\n        [(empty? (rest lst)) (first lst)]\n        [else (if (> (length (first lst)) (length (Find_Max (rest lst))))\n                 (first lst)\n                 (Find_Max (rest lst)))]))\n",
    "  (cond\n    [(null? lst) '()]\n    [(null? (cdr lst)) (car lst)]\n    [else\n     (if (> (length (car lst)) (length (car (cdr lst))))\n         (car lst)\n         (Find_Max (cdr lst)))]))\n",
    "  (cond\n    [(empty? lst) '()]\n    [(empty? (rest lst)) (first lst)]\n    [else (if (> (length (first lst)) (length (Find_Max (rest lst))))\n              (first lst)\n              (Find_Max (rest lst)))]))\n"
  ]
}