{
  "name": "mbpp_411_snake_to_camel",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given snake case string to camel case string.\n(define (snake_to_camel word)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate snake_to_camel))\n    (check-equal? (candidate \"android_tv\") \"AndroidTv\")\n    (check-equal? (candidate \"google_pixel\") \"GooglePixel\")\n    (check-equal? (candidate \"apple_watch\") \"AppleWatch\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (map\n    (lambda (x)\n      (if (char=? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (snake_to_camel_iter word result)\n    (cond [(empty? word) result]\n          [(char=? (first word) #\\_)\n           (snake_to_camel_iter (rest word) (string-append result (string-upcase (string (second word)))))\n           ]\n          [else (snake_to_camel_iter (rest word) (string-append result (string (first word))))]))\n  (snake_to_camel_iter word \"\"))\n",
    "  (string-join\n   (map (lambda (word)\n          (string-capitalize word))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x) (string-upcase x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_)) \"\"))\n",
    "  (string-join (map (lambda (x) (if (char=? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-length x) 1)\n          (string-upcase x)\n          (string-append (string-upcase (substring x 0 1)) (substring x 1))))\n    (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (define (helper word acc)\n    (if (empty? word)\n        (string-join (reverse acc))\n        (if (char=? (string-ref word 0) #\\_)\n            (helper (substring word 1) (cons (string-upcase (string-ref word 1)) acc))\n            (helper (substring word 1) (cons (string-ref word 0) acc)))))\n  (helper word '()))\n",
    "  (define (helper word result)\n    (cond\n      [(empty? word) result]\n      [(char=? (first word) #\\_)\n       (helper (rest word) (string-append result (string-upcase (string (second word)))))\n      ]\n      [else (helper (rest word) (string-append result (string (first word))))]))\n  (helper word \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (string=? (substring x 0 1) \"_\")\n              (string-upcase (substring x 1))\n              x))\n        (string-split word #\\_))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map\n    (lambda (x)\n      (if (equal? (string-ref x 0) #\\_)\n          (string-upcase (substring x 1))\n          x))\n    (string-split word #\\_))\n   \"\"))\n",
    "  (define (helper word)\n    (if (equal? (string-length word) 0)\n        \"\"\n        (if (equal? (string-ref word 0) #\\_)\n            (string-append (string-upcase (string-ref word 1)) (helper (string-drop word 2)))\n            (string-append (string-ref word 0) (helper (string-drop word 1))))))\n  (string-downcase (helper word)))\n",
    "  (string-join (map (lambda (x) (string-upcase x))\n                    (string-split word #\\_)) \"\"))\n",
    "  (string-join (map (lambda (x) (if (equal? (string-ref x 0) #\\_)\n                                    (string-upcase (substring x 1))\n                                    x))\n                     (string-split word #\\_))\n               \"\"))\n",
    "  (string-join\n   (map (lambda (w) (string-upcase (substring w 1)))\n        (regexp-split #rx\"_\" word))\n   \"\"))\n",
    "  (string-join\n   (map (lambda (x)\n          (if (char-numeric? (string-ref x 0))\n              x\n              (string-upcase x)))\n        (string-split word #\\_))\n   \"\"))\n"
  ]
}