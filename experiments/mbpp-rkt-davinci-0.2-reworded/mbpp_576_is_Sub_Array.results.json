{
  "name": "mbpp_576_is_Sub_Array",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n        [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (let loop ((A A) (B B))\n    (cond\n      ((null? A) #t)\n      ((null? B) #f)\n      ((equal? (car A) (car B)) (loop (cdr A) (cdr B)))\n      (else (loop A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2nn4slr3.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2nn4slr3.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? A (rest B)) #t]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzseqm7c9.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzseqm7c9.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n        [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? B) #t]\n    [(equal? A B) #t]\n    [(equal? A (take (length A) B)) #t]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpej0r6ksa.rkt:16:4\n\ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(1 2)\n  argument position: 2nd\n  other arguments...:\n   4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpej0r6ksa.rkt:18:4\n\ntake: contract violation\n  expected: exact-nonnegative-integer?\n  given: '(2 2 0)\n  argument position: 2nd\n  other arguments...:\n   4\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]\n  )\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond [(empty? A) true]\n        [(empty? B) false]\n        [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n        [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B))\n     (or (equal? A B) (is_Sub_Array (rest A) (rest B)))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (andmap (lambda (x) (member x B)) A))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8t_9u39_.rkt:13:4\nactual:     '(1 2 1)\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [(equal? (first A) (first B))\n         (is_Sub_Array (rest A) (rest B))]\n        [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? A)\n      #t\n      (if (null? B)\n          #f\n          (if (equal? (car A) (car B))\n              (is_Sub_Array (cdr A) (cdr B))\n              (is_Sub_Array A (cdr B))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [else\n     (cond\n       [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n       [else (is_Sub_Array A (rest B))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdo4or60.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdo4or60.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B))\n     (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond [(empty? A) #t]\n        [(empty? B) #f]\n        [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n        [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(equal? A B) #t]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfoir48r.rkt:16:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfoir48r.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B))\n     (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(empty? A) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array (rest A) B)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    ((null? A) #t)\n    ((null? B) #f)\n    ((equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B)))\n    (else (is_Sub_Array A (cdr B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(null? A) #t]\n    [(null? B) #f]\n    [(equal? (car A) (car B)) (is_Sub_Array (cdr A) (cdr B))]\n    [else (is_Sub_Array A (cdr B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [(is_Sub_Array A (rest B)) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38zmh_ub.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38zmh_ub.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (if (null? B)\n      #t\n      (if (equal? (car A) (car B))\n          (is_Sub_Array (cdr A) (cdr B))\n          (is_Sub_Array A (cdr B)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl2s4_am.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl2s4_am.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? B) #t]\n    [(equal? A B) #t]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv5umea54.rkt:18:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to check whether a list is sublist of another or not.\n(define (is_Sub_Array A B)\n  (cond\n    [(empty? A) #t]\n    [(empty? B) #f]\n    [(equal? (first A) (first B)) (is_Sub_Array (rest A) (rest B))]\n    [else (is_Sub_Array A (rest B))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Sub_Array))\n    (check-equal? (candidate (list 1 4 3 5) (list 1 2)) #f)\n    (check-equal? (candidate (list 1 2 1) (list 1 2 1)) #t)\n    (check-equal? (candidate (list 1 0 2 2) (list 2 2 0)) #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665517732,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}