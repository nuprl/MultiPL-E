{
  "name": "mbpp_759_is_decimal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (define (is_decimal_helper num)\n    (cond ((null? num) #t)\n          ((char-numeric? (car num)) (is_decimal_helper (cdr num)))\n          ((char=? (car num) #\\.) (is_decimal_helper (cdr num)))\n          (else #f)))\n  (is_decimal_helper (string->list num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([dot (string-index num \".\")]\n        [len (string-length num)])\n    (and dot\n         (= (- len dot) 3)\n         (every (lambda (c) (char-numeric? c))\n                (string-&gt;list num)))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (not (empty? num))\n       (not (string-contains num #\\.))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\E))\n       (not (string-contains num #\\-))\n       (not (string-contains num #\\+))\n       (not (string-contains num #\\,))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\a))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\c))\n       (not (string-contains num #\\d))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\g))\n       (not (string-contains num #\\h))\n       (not (string-contains num #\\i))\n       (not (string-contains num #\\j))\n       (not (string-contains num #\\k))\n       (not (string-contains num #\\l))\n       (not (string-contains num #\\m))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\o))\n       (not (string-contains num #\\p))\n       (not (string-contains num #\\q))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\u))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\w))\n       (not (",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (cond\n    [(empty? num) #f]\n    [(regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (cond\n    [(string=? num \"\") #t]\n    [(string=? num \".\") #t]\n    [(string=? num \"0\") #t]\n    [(string=? num \"0.\") #t]\n    [(string=? num \"0.0\") #t]\n    [(string=? num \"0.00\") #t]\n    [(string=? num \"0.01\") #t]\n    [(string=? num \"0.10\") #t]\n    [(string=? num \"0.11\") #t]\n    [(string=? num \"1\") #t]\n    [(string=? num \"1.\") #t]\n    [(string=? num \"1.0\") #t]\n    [(string=? num \"1.00\") #t]\n    [(string=? num \"1.01\") #t]\n    [(string=? num \"1.10\") #t]\n    [(string=? num \"1.11\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (not (empty? num))\n       (not (string-contains num #\\.))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\E))\n       (not (string-contains num #\\+))\n       (not (string-contains num #\\-))\n       (not (string-contains num #\\,))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\a))\n       (not (string-contains num #\\0))\n       (not (string-contains num #\\1))\n       (not (string-contains num #\\2))\n       (not (string-contains num #\\3))\n       (not (string-contains num #\\4))\n       (not (string-contains num #\\5))\n       (not (string-contains num #\\6))\n       (not (string-contains num #\\7))\n       (not (string-contains num #\\8))\n       (not (string-contains num #\\9))\n       (not (string-contains num #\\x))\n       (not (string-contains num #\\X))\n       (not (string-contains num #\\o))\n       (not (string-contains num #\\O))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\B))\n       (not (string-contains num #\\d))\n       (not (string-contains num #\\D))\n       (not (string-contains num #\\^))\n       (not (string-contains num #\\$))\n       (not (string-contains num #\\*))\n       (not (",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (exact? num))\n       (not (negative? num))\n       (not (> num 1))\n       (not (< num 0))))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (string-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (if (string-contains num #\\.)\n      (let ([dec-pos (string-index num #\\.)])\n        (if (= (string-length num) (+ dec-pos 3))\n            (and (is_digit (substring num 0 dec-pos))\n                 (is_digit (substring num (+ dec-pos 1) (string-length num))))\n            #f))\n      #f))\n",
    "  (and (string-&gt;number num)\n       (string-contains num #\".\")\n       (let ([decimal-places (string-index num #\".\")])\n         (and (&gt;= decimal-places 2)\n              (&lt;= decimal-places 4)))))\n</code>\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ((decimal-regexp (regexp #rx\"^[0-9]*\\\\.[0-9]{2}$\")))\n    (regexp-match? decimal-regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (not (empty? num))\n       (not (regexp-match #rx\"^[0-9]*$\" num))\n       (not (regexp-match #rx\"^[0-9]*\\\\.[0-9]{3,}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}0$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (define (is_decimal-helper num)\n    (if (string-empty? num)\n        #t\n        (if (string-contains \"0123456789.\" num)\n            (is_decimal-helper (string-drop num 1))\n            #f)))\n  (if (string-contains \".\" num)\n      (if (= (string-count \".\" num) 1)\n          (if (string-contains \".\" (string-drop num (string-index \".\" num)))\n              #f\n              (is_decimal-helper num))\n          #f)\n      #f))\n",
    "  (let ([len (string-length num)])\n    (and (not (string-contains num #\\.))\n         (not (string-contains num #\\e))\n         (not (string-contains num #\\E))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\-))\n         (not (string-contains num #\\s))\n         (not (string-contains num #\\f))\n         (not (string-contains num #\\d))\n         (not (string-contains num #\\n))\n         (not (string-contains num #\\r))\n         (not (string-contains num #\\t))\n         (not (string-contains num #\\v))\n         (not (string-contains num #\\b))\n         (not (string-contains num #\\a))\n         (not (string-contains num #\\0))\n         (not (string-contains num #\\1))\n         (not (string-contains num #\\2))\n         (not (string-contains num #\\3))\n         (not (string-contains num #\\4))\n         (not (string-contains num #\\5))\n         (not (string-contains num #\\6))\n         (not (string-contains num #\\7))\n         (not (string-contains num #\\8))\n         (not (string-contains num #\\9))\n         (not (string-contains num #\\x))\n         (not (string-contains num #\\X))\n         (not (string-contains num #\\o))\n         (not (string-contains num #\\O))\n         (not (string-contains num #\\b))\n         (not (string-contains num #\\B))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-cont",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (equal? (string-length num)\n               (+ (string-length (number-&gt;string (floor (string-&gt;number num))))\n                  (string-length (number-&gt;string (floor (modulo (string-&gt;number num) 1))))\n                  1))))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}\" num))))\n",
    "  (define (is_decimal-helper num)\n    (cond\n      [(empty? num) #t]\n      [(char=? (first num) #\\.) (if (empty? (rest num)) #f (is_decimal-helper (rest num)))]\n      [(char=? (first num) #\\0) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\1) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\2) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\3) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\4) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\5) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\6) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\7) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\8) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\9) (is_decimal-helper (rest num))]\n      [else #f]))\n  (if (empty? num) #f (is_decimal-helper num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (or (string-suffix? \".0\" num)\n           (string-suffix? \".00\" num)\n           (string-suffix? \".000\" num)\n           (string-suffix? \".0000\" num)\n           (string-suffix? \".00000\" num)\n           (string-suffix? \".000000\" num)\n           (string-suffix? \".0000000\" num)\n           (string-suffix? \".00000000\" num)\n           (string-suffix? \".000000000\" num)\n           (string-suffix? \".0000000000\" num)\n           (string-suffix? \".00000000000\" num)\n           (string-suffix? \".000000000000\" num)\n           (string-suffix? \".0000000000000\" num)\n           (string-suffix? \".00000000000000\" num)\n           (string-suffix? \".000000000000000\" num)\n           (string-suffix? \".0000000000000000\" num)\n           (string-suffix? \".00000000000000000\" num)\n           (string-suffix? \".000000000000000000\" num)\n           (string-suffix? \".0000000000000000000\" num)\n           (string-suffix? \".00000000000000000000\" num)\n           (string-suffix? \".000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000000000000\" num)\n           (string",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}$\" num))))\n",
    "  (let ((regexp (regexp \"[0-9]*\\\\.[0-9]{2}\")))\n    (regexp-match regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([num (string->number num)])\n    (and (number? num)\n         (not (negative? num))\n         (not (zero? (modulo num 1)))\n         (not (> (modulo num 1) 0.01)))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (let ([decimal-regexp #rx\"^[0-9]+\\.[0-9]{2}$\"])\n    (regexp-match? decimal-regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (let ([decimal-regexp #rx\"[0-9]+\\.[0-9]{2}\"]])\n    (regexp-match? decimal-regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([digits (string-&gt;list num)])\n    (and (every (lambda (x) (char-numeric? x)) digits)\n         (or (not (member #\\. digits))\n             (and (= (length (member #\\. digits)) 1)\n                  (or (not (member #e digits))\n                      (and (= (length (member #e digits)) 1)\n                           (and (not (member #\\- digits))\n                                (or (not (member #\\+ digits))\n                                    (and (= (length (member #\\+ digits)) 1)\n                                         (and (not (member #\\- digits))\n                                              (or (not (member #\\+ digits))\n                                                  (and (= (length (member #\\+ digits)) 1)\n                                                       (and (not (member #\\- digits))\n                                                            (or (not (member #\\+ digits))\n                                                                (and (= (length (member #\\+ digits)) 1)\n                                                                     (and (not (member #\\- digits))\n                                                                          (or (not (member #\\+ digits))\n                                                                              (and (= (length (member #\\+ digits)) 1)\n                                                                                   (and (not (member #\\- digits))\n                                                                                        (or (not (member #\\+ digits))\n                                                                                            (and (= (length (member #\\+ digits)) 1)\n                                                                                                 (and (not (member #\\- digits))\n                                                                                                      (or (not (member #\\+ digits))\n                                                                                                          (and (= (length (member #\\+ digits)) 1)\n                                                                                                               (and (not (member #\\- digits))\n                                                                                                                    (or (not (member #\\+ digits))\n                                                                                                                        (and (= (length (member #\\+ digits)) 1)\n                                                                                                                             (and (not (member #\\- digits))\n                                                                                                                                  (or (not (member #\\+ digits))\n                                                                                                                                      (and (= (length (member #\\+ digits",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3,}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (cond\n    [(regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num) #t]\n    [else #f]))\n",
    "  (let ([len (string-length num)])\n    (and (not (string-contains num #\\.))\n         (and (string-contains num #\\e)\n              (and (string-contains num #\\E)\n                   (and (string-contains num #\\+)\n                        (and (string-contains num #\\-))))))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n",
    "  (let ([digits (string-&gt;list num)])\n    (and (not (empty? digits))\n         (every (lambda (x) (char-numeric? x)) digits)\n         (let ([decimal-point (string-index num \".\")]\n               [decimal-point-index (if decimal-point (sub1 decimal-point) -1)])\n           (and (or (= decimal-point-index -1)\n                    (= decimal-point-index (sub1 (string-length num))))\n                (or (= decimal-point-index -1)\n                    (= (sub1 (string-length num)) (add1 decimal-point-index))))))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string",
    "  (and (string-&gt;number num)\n       (string-match #rx\"[0-9]+\\.[0-9]{2}\" num)))\n",
    "  (let ([n (string->number num)])\n    (and (number? n)\n         (not (integer? n))\n         (not (negative? n)))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (define (is_decimal-helper num)\n    (cond\n      [(empty? num) #t]\n      [(char=? (first num) #\\.)\n       (if (empty? (rest num)) #f\n           (if (empty? (rest (rest num))) #t\n               (is_decimal-helper (rest (rest num)))))]\n      [(char-numeric? (first num)) (is_decimal-helper (rest num))]\n      [else #f]))\n  (is_decimal-helper (string->list num)))\n",
    "  (if (string-contains num #\\.)\n      (let ([decimal-index (string-index num #\\.)])\n        (if (= 2 (- (string-length num) decimal-index))\n            #t\n            #f))\n      #f))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (zero? (modulo num 1)))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (let ([decimal-regexp #rx\"([0-9]+\\.[0-9]{2})\" ])\n    (regexp-match? decimal-regexp num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (define (is_decimal_helper num)\n    (if (string-empty? num)\n        #t\n        (if (or (char=? (string-ref num 0) #\\.)\n                (char=? (string-ref num 0) #\\0)\n                (char=? (string-ref num 0) #\\1)\n                (char=? (string-ref num 0) #\\2)\n                (char=? (string-ref num 0) #\\3)\n                (char=? (string-ref num 0) #\\4)\n                (char=? (string-ref num 0) #\\5)\n                (char=? (string-ref num 0) #\\6)\n                (char=? (string-ref num 0) #\\7)\n                (char=? (string-ref num 0) #\\8)\n                (char=? (string-ref num 0) #\\9))\n            (is_decimal_helper (substring num 1))\n            #f)))\n  (if (string-length num)\n      (is_decimal_helper num)\n      #f))\n",
    "  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (and (number? num)\n       (not (integer? num))\n       (not (negative? num))\n       (not (> num 100))))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (define (is_decimal_helper num)\n    (if (empty? num)\n        #t\n        (if (or (char=? (first num) #\\.)\n                (char=? (first num) #\\0)\n                (char=? (first num) #\\1)\n                (char=? (first num) #\\2)\n                (char=? (first num) #\\3)\n                (char=? (first num) #\\4)\n                (char=? (first num) #\\5)\n                (char=? (first num) #\\6)\n                (char=? (first num) #\\7)\n                (char=? (first num) #\\8)\n                (char=? (first num) #\\9))\n            (is_decimal_helper (rest num))\n            #f)))\n  (if (is_decimal_helper num)\n      (if (char=? (first (reverse num)) #\\.)\n          #f\n          #t)\n      #f))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (let ((dot-index (string-index num \".\")))\n    (if (not dot-index)\n        #f\n        (let ((precision (string-length (substring num (+ dot-index 1)))))\n          (if (= precision 2)\n              #t\n              #f)))))\n",
    "  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num) #t))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (regexp-match? #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^\\\\.[0-9]{2}$\" num))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (not (empty? num))\n       (string-contains num #\\.)\n       (string-contains num #\\e)\n       (string-contains num #\\E)\n       (string-contains num #\\+)\n       (string-contains num #\\-)\n       (string-contains num #\\0)\n       (string-contains num #\\1)\n       (string-contains num #\\2)\n       (string-contains num #\\3)\n       (string-contains num #\\4)\n       (string-contains num #\\5)\n       (string-contains num #\\6)\n       (string-contains num #\\7)\n       (string-contains num #\\8)\n       (string-contains num #\\9)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string-&gt;number num)\n       (let ([num-list (string-&gt;list num)])\n         (let loop ([num-list num-list]\n                    [decimal-count 0])\n           (cond\n             [(null? num-list) (= decimal-count 2)]\n             [(char=? (car num-list) #\\.)\n              (loop (cdr num-list) (+ decimal-count 1))]\n             [else (loop (cdr num-list) decimal-count)])))))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (and (string-&gt;number num)\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \"",
    "  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (let ([len (string-length num)])\n    (and (not (regexp-match #rx\"^[-+]?[0-9]+$\" num))\n         (not (regexp-match #rx\"^[-+]?[0-9]*\\\\.[0-9]{3,}$\" num))\n         (not (regexp-match #rx\"^[-+]?[0-9]*\\\\.[0-9]{0,1}$\" num)))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([decimal-regexp #rx\"[0-9]+\\.[0-9]{2}\"])\n    (regexp-match? decimal-regexp num)))\n"
  ]
}