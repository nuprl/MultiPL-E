{
  "name": "mbpp_759_is_decimal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (define (is_decimal_helper num)\n    (cond ((null? num) #t)\n          ((char-numeric? (car num)) (is_decimal_helper (cdr num)))\n          ((char=? (car num) #\\.) (is_decimal_helper (cdr num)))\n          (else #f)))\n  (is_decimal_helper (string->list num)))\n",
    "  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (let ([dot (string-index num \".\")]\n        [len (string-length num)])\n    (and dot\n         (= (- len dot) 3)\n         (every (lambda (c) (char-numeric? c))\n                (string-&gt;list num)))))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (not (empty? num))\n       (not (string-contains num #\\.))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\E))\n       (not (string-contains num #\\-))\n       (not (string-contains num #\\+))\n       (not (string-contains num #\\,))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\a))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\c))\n       (not (string-contains num #\\d))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\g))\n       (not (string-contains num #\\h))\n       (not (string-contains num #\\i))\n       (not (string-contains num #\\j))\n       (not (string-contains num #\\k))\n       (not (string-contains num #\\l))\n       (not (string-contains num #\\m))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\o))\n       (not (string-contains num #\\p))\n       (not (string-contains num #\\q))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\u))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\w))\n       (not (",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n",
    "  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n",
    "  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n"
  ]
}