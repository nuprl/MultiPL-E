{
  "name": "mbpp_615_average_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum count)\n    (cond\n      [(empty? nums) (/ sum count)]\n      [else (average_helper (rest nums) (+ sum (first nums)) (+ count 1))]))\n  (average_helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fh3qk4c.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fh3qk4c.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fh3qk4c.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ (car nums) sum))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_iter nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_tuple_iter (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_tuple_iter nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp96m2wdc0.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp96m2wdc0.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp96m2wdc0.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_iter nums acc)\n    (if (empty? nums)\n        acc\n        (average_tuple_iter (rest nums) (cons (/ (apply + (first nums)) (length (first nums))) acc))))\n  (reverse (average_tuple_iter nums '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsjbswwq3.rkt:16:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsjbswwq3.rkt:17:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsjbswwq3.rkt:18:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ (car nums) sum))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let* ([sum (apply + nums)]\n         [len (length nums)])\n    (/ sum len)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ewfdw01.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ewfdw01.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0ewfdw01.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_tuple_helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_tuple_helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd0o5nts.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd0o5nts.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd0o5nts.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ((sum 0)\n        (count 0))\n    (for ((num nums))\n      (set! sum (+ sum num))\n      (set! count (+ count 1)))\n    (/ sum count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9b79w8d_.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9b79w8d_.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9b79w8d_.rkt:19:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (if (null? nums)\n      '()\n      (cons (/ (apply + (car nums)) (length (car nums))) (average_tuple (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (helper (cdr nums) (+ sum (car nums)))))\n  (helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7cgnqc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7cgnqc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2e7cgnqc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ((sum 0)\n        (count 0))\n    (for ([n nums])\n      (set! sum (+ sum n))\n      (set! count (+ count 1)))\n    (/ sum count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0iluwl2.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0iluwl2.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0iluwl2.rkt:19:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ((sum 0)\n        (count 0))\n    (for ((n nums))\n      (set! sum (+ sum n))\n      (set! count (+ count 1)))\n    (/ sum count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdr6puq.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdr6puq.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkdr6puq.rkt:19:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average nums)\n    (/ (apply + nums) (length nums)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i3244sq.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i3244sq.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i3244sq.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_iter nums acc)\n    (if (null? nums)\n        acc\n        (average_tuple_iter (cdr nums) (cons (/ (apply + (car nums)) (length (car nums))) acc))))\n  (reverse (average_tuple_iter nums '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp979_mlv7.rkt:16:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp979_mlv7.rkt:17:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp979_mlv7.rkt:18:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ((sum 0)\n        (count 0))\n    (for ([n nums])\n      (set! sum (+ sum n))\n      (set! count (+ count 1)))\n    (/ sum count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0iluwl2.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0iluwl2.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0iluwl2.rkt:19:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ (car nums) sum))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb1ecau81.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb1ecau81.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb1ecau81.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (letrec ([sum (lambda (nums)\n                  (if (null? nums)\n                      0\n                      (+ (car nums) (sum (cdr nums)))))])\n    (/ (sum nums) (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpan2sbm6d.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpan2sbm6d.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpan2sbm6d.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ((sum 0)\n        (count 0))\n    (for ([num nums])\n      (set! sum (+ sum num))\n      (set! count (+ count 1)))\n    (/ sum count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl9i3la7k.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl9i3la7k.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl9i3la7k.rkt:19:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sbeep6c.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average nums)\n    (define (sum nums)\n      (if (null? nums)\n          0\n          (+ (car nums) (sum (cdr nums)))))\n    (/ (sum nums) (length nums)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj2c5fvz3.rkt:18:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj2c5fvz3.rkt:19:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj2c5fvz3.rkt:20:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ (car nums) sum))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuvu4k5h.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_iter nums acc)\n    (if (null? nums)\n        acc\n        (average_tuple_iter (cdr nums) (cons (/ (apply + (car nums)) (length (car nums))) acc))))\n  (reverse (average_tuple_iter nums '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp979_mlv7.rkt:16:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp979_mlv7.rkt:17:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp979_mlv7.rkt:18:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple-helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_tuple-helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_tuple-helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgddoumqh.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgddoumqh.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgddoumqh.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_list nums)\n    (/ (apply + nums) (length nums)))\n  (map average_list nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3ks6exo.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3ks6exo.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3ks6exo.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (len lst)\n    (if (null? lst)\n        0\n        (+ 1 (len (cdr lst)))))\n  (/ (sum nums) (len nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo96uvswn.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo96uvswn.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo96uvswn.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_tuple_helper (cdr nums) (+ sum (car nums)))))\n  (average_tuple_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9gw0h0b.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9gw0h0b.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt9gw0h0b.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (define (length_tuple nums)\n    (if (null? nums)\n        0\n        (+ 1 (length_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length_tuple nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123927,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3er7p5z2.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3er7p5z2.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3er7p5z2.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (avg lst)\n    (/ (apply + lst) (length lst)))\n  (map avg nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123927,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6prq3e8.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6prq3e8.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6prq3e8.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (avg lst)\n    (/ (apply + lst) (length lst)))\n  (map avg nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123927,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6prq3e8.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6prq3e8.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6prq3e8.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (if (null? nums)\n      '()\n      (cons (/ (apply + (car nums)) (length (car nums))) (average_tuple (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphr5h58jb.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum_tuple nums)\n    (if (null? nums)\n        0\n        (+ (car nums) (sum_tuple (cdr nums)))))\n  (/ (sum_tuple nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ednblyc.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (len lst)\n    (if (null? lst)\n        0\n        (+ 1 (len (cdr lst)))))\n  (/ (sum nums) (len nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo96uvswn.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo96uvswn.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo96uvswn.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (if (null? nums)\n      '()\n      (cons (/ (apply + (car nums)) (length (car nums))) (average_tuple (cdr nums)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppfzx25wc.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum)\n    (if (null? nums)\n        (/ sum (length nums))\n        (average_helper (cdr nums) (+ sum (car nums)))))\n  (average_helper nums 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4aphnjal.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ((sum 0)\n        (count 0))\n    (for ((num nums))\n      (set! sum (+ sum num))\n      (set! count (+ count 1)))\n    (/ sum count)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9b79w8d_.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9b79w8d_.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9b79w8d_.rkt:19:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average nums)\n    (/ (apply + nums) (length nums)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i3244sq.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i3244sq.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7i3244sq.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average lst)\n    (/ (apply + lst) (length lst)))\n  (map average nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:14:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:15:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdepblvfu.rkt:16:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_tuple_helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_tuple_helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_tuple_helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd0o5nts.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd0o5nts.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkd0o5nts.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (map (lambda (x) (/ (apply + x) (length x))) nums))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:12:4\nactual:     '(21/2 44 58 5/2)\nexpected:   '(30.5 34.25 27.0 23.25)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:13:4\nactual:     '(-1 71/3 -6 -5/3)\nexpected:   '(25.5 -18.0 3.75)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2eh9045b.rkt:14:4\nactual:     '(105 440 580 25)\nexpected:   '(305.0 342.5 270.0 232.5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum (cdr lst)))))\n  (define (length lst)\n    (if (null? lst)\n        0\n        (+ 1 (length (cdr lst)))))\n  (/ (sum nums) (length nums)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:20:4\n\n+: contract violation\n  expected: number?\n  given: '(1 2 3 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:21:4\n\n+: contract violation\n  expected: number?\n  given: '(-10 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcpg1oig7.rkt:22:4\n\n+: contract violation\n  expected: number?\n  given: '(10 20 30 40)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (let ([sum (apply + nums)])\n    (/ sum (length nums))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1665510634,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4wuvxyet.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function which takes a list of lists and returns the average value for each list as a list.\n(define (average_tuple nums)\n  (define (average_helper nums sum count)\n    (if (null? nums)\n        (/ sum count)\n        (average_helper (cdr nums) (+ sum (car nums)) (+ count 1))))\n  (average_helper nums 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate average_tuple))\n    (check-equal? (candidate (list (list 10 10 10 12) (list 30 45 56 45) (list 81 80 39 32) (list 1 2 3 4))) (list 30.5 34.25 27.0 23.25))\n    (check-equal? (candidate (list (list 1 1 -5) (list 30 -15 56) (list 81 -60 -39) (list -10 2 3))) (list 25.5 -18.0 3.75))\n    (check-equal? (candidate (list (list 100 100 100 120) (list 300 450 560 450) (list 810 800 390 320) (list 10 20 30 40))) (list 305.0 342.5 270.0 232.5))\n))\n\n(test-humaneval)",
      "timestamp": 1666123926,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(10 10 10 12)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(1 1 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjxytsinj.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(100 100 100 120)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}