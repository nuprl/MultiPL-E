{
  "name": "mbpp_118_string_to_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert a string to a list of strings split on the space character.\n(define (string_to_list string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_to_list))\n    (check-equal? (candidate \"python programming\") (list \"python\" \"programming\"))\n    (check-equal? (candidate \"lists tuples strings\") (list \"lists\" \"tuples\" \"strings\"))\n    (check-equal? (candidate \"write a program\") (list \"write\" \"a\" \"program\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (regexp-split #px\"\\\\s+\" string))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (string-split string #\\space))\n",
    "  (regexp-split #rx\" \" string))\n",
    "  (regexp-split #rx\" \" string))\n",
    "  (string-split string #\\space))\n",
    "  (regexp-split #rx\" \" string))\n"
  ]
}