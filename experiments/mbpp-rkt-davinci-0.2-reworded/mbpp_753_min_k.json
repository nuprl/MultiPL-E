{
  "name": "mbpp_753_min_k",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/rktthon-find-minimum-k-records-from-list-list/ - in this case a verbatim corkt of test cases\n(define (min_k test_list K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_k))\n    (check-equal? (candidate (list (list \"Manjeet\" 10) (list \"Akshat\" 4) (list \"Akash\" 2) (list \"Nikhil\" 8)) 2) (list (list \"Akash\" 2) (list \"Akshat\" 4)))\n    (check-equal? (candidate (list (list \"Sanjeev\" 11) (list \"Angat\" 5) (list \"Akash\" 3) (list \"Nepin\" 9)) 3) (list (list \"Akash\" 3) (list \"Angat\" 5) (list \"Nepin\" 9)))\n    (check-equal? (candidate (list (list \"tanmay\" 14) (list \"Amer\" 11) (list \"Ayesha\" 9) (list \"SKD\" 16)) 1) (list (list \"Ayesha\" 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (append (remove-min min_list) (list (first test_list))))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(empty? min_list) (min_k_helper (rest test_list) K (list (first test_list)))]\n      [(< (first test_list) (first min_list)) (min_k_helper (rest test_list) K (list (first test_list)))]\n      [else (min_k_helper (rest test_list) K min_list)]))\n  (min_k_helper test_list K empty))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove-min min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else\n       (let* ([min_val (apply min test_list)]\n              [min_val_index (index-of min_val test_list)]\n              [new_list (remove-at min_val_index test_list)])\n         (cons min_val (min_k_helper new_list (- K 1))))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(= K 0) (error \"K must be greater than 0\")]\n    [(< K (length test_list)) (min_k_helper test_list K)]\n    [else (error \"K must be less than the length of the list\")]))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                           (cons (car test_list) min_list)\n                           min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(> (length min_list) K) (min_k_helper (rest test_list) K (remove-min min_list))]\n      [else (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (or (null? test_list) (= K 0))\n        '()\n        (let* ([min_val (apply min test_list)]\n               [min_index (index-of min_val test_list)]\n               [remaining_list (remove-at min_index test_list)])\n          (cons min_val (min_k_helper remaining_list (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (if (empty? test_list)\n      '()\n      (let ([min (apply min test_list)])\n        (cons min (min_k (filter (lambda (x) (< x min)) test_list) (- K 1))))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (empty? test_list)\n        min_list\n        (if (< (length min_list) K)\n            (min_k_helper (cdr test_list) K (cons (car test_list) min_list))\n            (if (< (car test_list) (car min_list))\n                (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n                (min_k_helper (cdr test_list) K min_list)))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond ((null? test_list) min_list)\n          ((< (car test_list) (car min_list)) (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list))))\n          ((= (car test_list) (car min_list)) (min_k_helper (cdr test_list) K (cons (car test_list) min_list)))\n          (else (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (list (apply max test_list))))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (let ([min_val (apply min test_list)])\n          (cons min_val\n                (min_k_helper (filter (lambda (x) (not (= x min_val))) test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [else\n       (define min_list_new (if (< (first test_list) (first min_list))\n                                (cons (first test_list) min_list)\n                                min_list))\n       (min_k_helper (rest test_list) K min_list_new)]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(empty? min_list) (min_k_helper (rest test_list) K (list (first test_list)))]\n      [(< (first test_list) (first min_list)) (min_k_helper (rest test_list) K (cons (first test_list) (rest min_list)))]\n      [else (min_k_helper (rest test_list) K min_list)]))\n  (min_k_helper test_list K empty))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (take sorted_list K)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [else (cons (min (car test_list)) (min_k (cdr test_list) (- K 1)))]))\n",
    "  (if (null? test_list)\n      '()\n      (let ([min (apply min test_list)])\n        (cons min (min_k (remove min test_list) (- K 1))))))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [(= K 1) (list (min (car test_list) (min_k_helper (cdr test_list) (- K 1))))]\n      [else (cons (min (car test_list) (min_k_helper (cdr test_list) (- K 1))) (min_k_helper (cdr test_list) (- K 1)))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (min (car test_list) (min_k_helper (cdr test_list) (- K 1)))\n                  (min_k_helper (cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (null? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (define (min_k_helper test_list K result)\n    (if (or (null? test_list) (= K 0))\n        result\n        (min_k_helper (cdr test_list) (- K 1) (cons (car test_list) result))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(>= (length min_list) K) min_list]\n      [else\n       (min_k_helper (cdr test_list) K (append min_list (list (car test_list))))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        '()\n        (let ([min (apply min test_list)])\n          (cons min (min_k_helper (remove min test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (zero? K))\n        min_list\n        (let* ([min_val (apply min min_list)]\n               [new_min_list (if (and (not (null? min_list))\n                                      (not (null? (car test_list)))\n                                      (&lt; (car test_list) min_val))\n                                 (cons (car test_list) min_list)\n                                 min_list)])\n          (min_k_helper (cdr test_list) (- K 1) new_min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else\n       (let ([min (min (first test_list) (min_k_helper (rest test_list) (- K 1)))])\n         (cons min (min_k_helper (rest test_list) (- K 1))))]))\n  (min_k_helper test_list K))\n",
    "  (let ([sorted (sort test_list <)])\n    (take K sorted)))\n",
    "  (sort test_list (lambda (x y) (< x y)))\n  (take test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let* ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                             (cons (car test_list) min_list)\n                             min_list)]\n               [test_list (cdr test_list)]\n               [K (if (or (null? min_list) (< (car test_list) (car min_list)))\n                      (- K 1)\n                      K)])\n          (min_k_helper test_list K min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) '()]\n      [(= K 0) '()]\n      [else (cons (min (first test_list) (min_k_helper (rest test_list) (- K 1)))\n                  (min_k_helper (rest test_list) (- K 1)))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (replace_max min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        '()\n        (if (= K 1)\n            (list (min (car test_list) (min_k_helper (cdr test_list) K)))\n            (append (list (min (car test_list) (min_k_helper (cdr test_list) K)))\n                    (min_k_helper (cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond [(empty? test_list) min_list]\n          [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n          [(>= (length min_list) K) (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (empty? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take (sort test_list <) K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K empty))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else\n       (let* ([min_val (min (first test_list) (min_k_helper (rest test_list) (- K 1)))]\n              [min_val_list (list min_val)]\n              [rest_list (min_k_helper (rest test_list) (- K 1))])\n         (append min_val_list rest_list))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let* ([min_val (apply min min_list)]\n               [min_val_index (index min_val min_list)]\n               [min_list (remove-at min_val_index min_list)]\n               [min_list (append min_list (list (car test_list)))]\n               [test_list (cdr test_list)])\n          (min_k_helper test_list (- K 1) min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (let loop ([test_list test_list]\n             [K K]\n             [acc '()])\n    (cond\n      [(empty? test_list) acc]\n      [(= K 0) acc]\n      [else (loop (rest test_list)\n                  (- K 1)\n                  (cons (first test_list) acc))])))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= K 0) empty]\n    [else\n     (let*\n         ([min_val (apply min test_list)]\n          [min_val_index (index-of min_val test_list)]\n          [rest_list (remove-at min_val_index test_list)])\n       (cons min_val (min_k rest_list (- K 1))))]))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove (first test_list) min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (cond [(= K 0) '()]\n        [(empty? test_list) '()]\n        [else (cons (min (first test_list) (min_k (rest test_list) (- K 1)))\n                    (min_k (rest test_list) (- K 1)))]))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond [(empty? test_list) min_list]\n          [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n          [else (min_k_helper (rest test_list) K (append (remove-min min_list) (list (first test_list))))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= K 0) empty]\n    [else\n     (let ([min (min (first test_list) (min_k (rest test_list) (- K 1)))])\n       (cons min (min_k (remove min test_list) (- K 1))))]))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove (first min_list) min_list)))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove (min min_list) min_list)))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (let ([sorted-test-list (sort test_list (lambda (a b) (< a b)))]\n        [min-k-records (take sorted-test-list K)])\n    min-k-records))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (let* ([min_val (apply min test_list)]\n               [min_val_index (index test_list min_val)]\n               [min_val_list (list min_val)]\n               [rest_of_list (remove test_list min_val_index)])\n          (if (= K 1)\n              min_val_list\n              (append min_val_list (min_k_helper rest_of_list (- K 1)))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (cons (first test_list) (remove-min min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K result)\n    (cond\n      [(empty? test_list) result]\n      [(< (length result) K)\n       (min_k_helper (cdr test_list) K (cons (car test_list) result))]\n      [else\n       (min_k_helper (cdr test_list) K (cons (car test_list) (remove (min result) result)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (zero? K)\n        min_list\n        (min_k_helper (cdr test_list) (- K 1) (cons (car test_list) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]))\n  (min_k_helper test_list K (list)))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                           (cons (car test_list) min_list)\n                           min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [(= K 1) (list (min test_list))]\n    [else (cons (min test_list) (min_k (remove (min test_list) test_list) (- K 1)))]))\n",
    "  (if (null? test_list)\n      '()\n      (let ([min (apply min test_list)])\n        (cons min (min_k (remove min test_list) (- K 1))))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (append (remove-min min_list) (list (first test_list))))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (for/list ([i (in-range K)])\n    (car (sort test_list <))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (= K 0) (null? test_list))\n        min_list\n        (let* ([min_list_head (car min_list)]\n               [test_list_head (car test_list)]\n               [new_min_list (if (<= test_list_head min_list_head)\n                                 (cons test_list_head min_list)\n                                 min_list)])\n          (min_k_helper (cdr test_list) (- K 1) new_min_list))))\n  (min_k_helper test_list K (list (car test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                           (cons (car test_list) min_list)\n                           min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove-min min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (if (empty? test_list)\n      '()\n      (define (min_k_helper test_list K)\n        (if (empty? test_list)\n            '()\n            (if (= K 1)\n                (list (apply min test_list))\n                (cons (apply min test_list) (min_k_helper (remove (apply min test_list) test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (sort test_list (lambda (x y) (< x y)))\n  (take test_list K))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        empty\n        (if (= K 0)\n            empty\n            (cons (min (first test_list) (min_k_helper (rest test_list) (- K 1)))\n                  (min_k_helper (rest test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (empty? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take (sort test_list <) K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [(>= (length min_list) K) (min_k_helper (rest test_list) K (append (list (first test_list)) (remove (lambda (x) (< x (first test_list))) min_list)))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (apply min (car test_list))\n                  (min_k_helper (cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let* ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                            (cons (car test_list) (cdr min_list))\n                            min_list)]\n               [min_list (if (> (length min_list) K)\n                             (cdr min_list)\n                             min_list)])\n          (min_k_helper (cdr test_list) (- K (length min_list)) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond [(empty? test_list) min_list]\n          [(< (length min_list) K)\n           (min_k_helper (cdr test_list) K (append min_list (list (car test_list))))]\n          [else\n           (min_k_helper (cdr test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K (list (car test_list))))\n",
    "  (if (empty? test_list)\n      '()\n      (let ([min (apply min test_list)])\n        (cons min (min_k (remove min test_list) (- K 1))))))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        '()\n        (let ([min (apply min test_list)])\n          (cons min (min_k_helper (remove min test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (min (car test_list) (min_k_helper (cdr test_list) (- K 1)))\n                  (min_k_helper (cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted-list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted-list i))))\n",
    "  (let ([sorted-list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted-list i))))\n",
    "  (cond [(empty? test_list) empty]\n        [(= K 0) empty]\n        [else (cons (min (car test_list) (min_k (cdr test_list) (- K 1)))\n                    (min_k (cdr test_list) (- K 1)))]))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(= K 0) '()]\n      [(empty? test_list) '()]\n      [else (cons (min (first test_list) (min_k_helper (rest test_list) (- K 1))) (min_k_helper (rest test_list) (- K 1)))]))\n  (min_k_helper test_list K))\n",
    "  (if (empty? test_list)\n      '()\n      (if (= K 0)\n          '()\n          (if (= K (length test_list))\n              test_list\n              (let ([min_val (apply min test_list)])\n                (cons min_val (min_k (filter (lambda (x) (not (= x min_val))) test_list) (- K 1))))))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove (max min_list) min_list)))]))\n  (min_k_helper test_list K empty))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                           (cons (car test_list) min_list)\n                           min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else\n       (let* ([min_val (min (first test_list) (min_k_helper (rest test_list) (- K 1)))]\n              [min_val_list (list min_val)])\n         (append min_val_list (min_k_helper (rest test_list) (- K 1))))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ((min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                           (cons (car test_list) min_list)\n                           min_list)))\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (cons (first test_list) (remove (min min_list) min_list)))]))\n  (min_k_helper test_list K empty))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [(= K 1) (list (min test_list))]\n    [else (cons (min test_list) (min_k (remove (min test_list) test_list) (- K 1)))]))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        empty\n        (if (= K 0)\n            empty\n            (cons (min (first test_list) (min_k_helper (rest test_list) (- K 1)))\n                  (min_k_helper (rest test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove-min min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted (sort test_list <)])\n    (take sorted K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (zero? K))\n        min_list\n        (let ((min_list (sort (append test_list min_list) <)))\n          (min_k_helper (cdr test_list) (- K 1) (take min_list K)))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(<= K 0) min_list]\n      [else\n       (define min_list_new (cons (min (first test_list) (first min_list)) (rest min_list)))\n       (min_k_helper (rest test_list) (- K 1) min_list_new)]))\n  (min_k_helper test_list K test_list))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (null? test_list)\n        min_list\n        (if (<= (length min_list) K)\n            (min_k_helper (cdr test_list) K (cons (car test_list) min_list))\n            (min_k_helper (cdr test_list) K (remove-min min_list)))))\n  (min_k_helper test_list K (list (car test_list))))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else (cons (min (first test_list) (min_k_helper (rest test_list) (- K 1)))\n                  (min_k_helper (rest test_list) (- K 1)))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (car test_list) (min_k_helper (cdr test_list) (- K 1))))))\n  (sort (min_k_helper test_list K) <))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(empty? min_list) (min_k_helper (rest test_list) K (list (first test_list)))]\n      [else (min_k_helper (rest test_list) K (min_list_helper (first test_list) min_list))]))\n  (min_k_helper test_list K empty))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond ((or (null? test_list) (= K 0)) min_list)\n          ((or (null? min_list) (< (car test_list) (car min_list)))\n           (min_k_helper (cdr test_list) K (cons (car test_list) min_list)))\n          (else (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [else (cons (min (car test_list)) (min_k (cdr test_list) (- K 1)))]))\n",
    "  (define (min_k_helper test_list K min_k_list)\n    (if (null? test_list)\n        min_k_list\n        (if (< (car test_list) (car min_k_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_k_list)))\n            (min_k_helper (cdr test_list) K min_k_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (or (= K 0) (null? test_list))\n        '()\n        (let ((min_val (apply min test_list))\n              (min_val_index (apply min-index test_list)))\n          (cons min_val (min_k_helper (remove-at test_list min_val_index) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (< (car test_list) (car min_list))\n                            (cons (car test_list) (cdr min_list))\n                            min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K (list (car test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min (apply min test_list)])\n          (min_k_helper (remove min test_list) (- K 1) (cons min min_list)))))\n  (min_k_helper test_list K '()))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [else (cons (min_k_helper test_list K) (min_k (remove (min_k_helper test_list K) test_list) (- K 1)))]))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (take sorted_list K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K)\n    (if (or (null? test_list) (= K 0))\n        '()\n        (let ([min_val (apply min test_list)]\n              [min_val_index (index min_val test_list)])\n          (cons min_val (min_k_helper (remove-at min_val_index test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(>= (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) (remove-min min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (= K 0) (null? test_list))\n        min_list\n        (let ([min (apply min (car test_list))])\n          (min_k_helper (cdr test_list) (- K 1) (cons min min_list)))))\n  (reverse (min_k_helper test_list K '())))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [else\n     (let ([min (apply min test_list)])\n       (cons min (min_k (remove min test_list) (- K 1))))]))\n",
    "  (define (min_k_helper test_list K)\n    (if (or (null? test_list) (= K 0))\n        '()\n        (let* ([min_val (apply min test_list)]\n               [min_index (index-of min_val test_list)]\n               [rest_list (remove-at min_index test_list)])\n          (cons min_val (min_k_helper rest_list (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (let ([test_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref test_list i))))\n",
    "  (if (null? test_list)\n      '()\n      (let ([min_k (take K test_list)])\n        (for ([i (in-range (length test_list))])\n          (if (< (list-ref test_list i) (list-ref min_k (- (length min_k) 1)))\n              (set! min_k (cons (list-ref test_list i) (drop K min_k)))))\n        min_k)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (< (car test_list) (car min_list))\n                            (cons (car test_list) (cdr min_list))\n                            min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K (list (car test_list))))\n",
    "  (let ([sorted (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (null? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (if (empty? test_list)\n      '()\n      (let ([min (apply min test_list)])\n        (cons min (min_k (remove min test_list) (- K 1)))\n        )))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove (max min_list) min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else\n       (min_k_helper (rest test_list) K (min_list (rest test_list) (first test_list)))]))\n  (min_k_helper test_list K (list)))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [else\n     (let ([min_val (apply min test_list)])\n       (cons min_val (min_k (remove min_val test_list) (- K 1))))]))\n",
    "  (define (min_k_helper test_list K)\n    (if (= K 0)\n        '()\n        (cons (min (car test_list) (min_k_helper (cdr test_list) (- K 1)))\n              (min_k_helper (cdr test_list) (- K 1)))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond [(empty? test_list) min_list]\n          [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n          [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list (cons (first test_list) min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond ((= K 0) min_list)\n          ((null? test_list) min_list)\n          ((< (car test_list) (car min_list)) (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list))))\n          (else (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= K 0) empty]\n    [else (cons (min (car test_list) (min_k (cdr test_list) (- K 1))) (min_k (cdr test_list) (- K 1)))]))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (null? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list_helper (first test_list) min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper lst k)\n    (if (or (null? lst) (= k 0))\n        '()\n        (let* ([min (apply min lst)]\n               [rest (filter (lambda (x) (not (= x min))) lst)])\n          (cons min (min_k_helper rest (- k 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let* ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                            (cons (car test_list) (cdr min_list))\n                            min_list)]\n               [test_list (cdr test_list)])\n          (min_k_helper test_list (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (null? test_list)\n        '()\n        (let ([min (apply min test_list)])\n          (cons min (min_k_helper (filter (lambda (x) (not (= x min))) test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([new_min (min (car test_list) (car min_list))])\n          (min_k_helper (cdr test_list) (- K 1) (cons new_min (cdr min_list))))))\n  (min_k_helper test_list K (list (apply max test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [else\n       (define head (first test_list))\n       (define tail (rest test_list))\n       (define min_list_len (length min_list))\n       (if (< min_list_len K)\n           (min_k_helper tail K (append min_list (list head)))\n           (if (< head (first min_list))\n               (min_k_helper tail K (append (rest min_list) (list head)))\n               (min_k_helper tail K min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond ((= K 0) min_list)\n          ((null? test_list) min_list)\n          ((< (car test_list) (car min_list)) (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list))))\n          (else (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(>= (length min_list) K)\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(>= (length min_list) K)\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K empty))\n",
    "  (let ([sorted (sort test_list <)])\n    (sublist sorted 0 K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min (apply min test_list)])\n          (min_k_helper (filter (lambda (x) (not (= x min))) test_list) (- K 1) (append min_list (list min))))))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (sublist sorted_list 0 K)))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(>= (length min_list) K)\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond ((null? test_list) min_list)\n          ((< (length min_list) K) (min_k_helper (cdr test_list) K (cons (car test_list) min_list)))\n          ((< (car test_list) (car min_list)) (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list))))\n          (else (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (< (car test_list) (car min_list))\n                            (cons (car test_list) (cdr min_list))\n                            min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K (list (car test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K (list)))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let* ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                             (cons (car test_list) min_list)\n                             min_list)]\n               [test_list (cdr test_list)])\n          (min_k_helper test_list (- K 1) min_list))))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (null? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(<= (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove (min min_list) min_list)))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (sort test_list < :key (lambda (x) (car x))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (sort test_list < :key (lambda (x) (car x)))\n  (take K test_list))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let* ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                             (cons (car test_list) min_list)\n                             min_list)]\n               [min_list (if (or (null? min_list) (< (cadr test_list) (car min_list)))\n                             (cons (cadr test_list) min_list)\n                             min_list)])\n          (min_k_helper (cddr test_list) (- K 2) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (cond\n    [(empty? test_list) '()]\n    [(= K 0) '()]\n    [else (cons (min (car test_list) (min_k (cdr test_list) (- K 1))) (min_k (cdr test_list) (- K 1)))]))\n",
    "  (if (empty? test_list)\n      '()\n      (let ([min_k (min_k (rest test_list) K)])\n        (if (and (not (empty? min_k))\n                 (< (first test_list) (first min_k)))\n            (cons (first test_list) (rest min_k))\n            (if (< (length min_k) K)\n                (cons (first test_list) min_k)\n                min_k)))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (null? test_list)\n        min_list\n        (if (< (car test_list) (car min_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n            (min_k_helper (cdr test_list) K min_list))))\n  (min_k_helper test_list K (take test_list K)))\n",
    "  (let loop ([test_list test_list]\n             [K K]\n             [min_list '()])\n    (cond [(empty? test_list) min_list]\n          [(= K 0) min_list]\n          [else (loop (cdr test_list)\n                      (- K 1)\n                      (cons (car test_list) min_list))])))\n",
    "  (define (min_k_helper test_list K k_list)\n    (if (empty? test_list)\n        k_list\n        (if (< (car test_list) (car k_list))\n            (min_k_helper (cdr test_list) K (cons (car test_list) (cdr k_list)))\n            (min_k_helper (cdr test_list) K k_list))))\n  (min_k_helper test_list K (take K test_list)))\n",
    "  (if (empty? test_list)\n      '()\n      (let* ([sorted (sort test_list <)]\n             [k_sorted (take sorted K)])\n        k_sorted)))\n",
    "  (define (min_k_helper test_list K acc)\n    (if (or (= K 0) (null? test_list))\n        acc\n        (min_k_helper (cdr test_list) (- K 1) (cons (car test_list) acc))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ((min_list (if (null? min_list)\n                            (list (car test_list))\n                            (if (< (car test_list) (car min_list))\n                                (cons (car test_list) (cdr min_list))\n                                min_list))))\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        '()\n        (let ([min (apply min test_list)])\n          (cons min (min_k_helper (remove min test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (min (car test_list) (min_k_helper (cdr test_list) (- K 1)))\n                  (min_k_helper (cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(= K 0) empty]\n    [else\n     (let* ([min_val (min (first test_list) (min_k (rest test_list) (- K 1)))]\n            [min_val_list (filter (lambda (x) (= x min_val)) test_list)])\n       (append min_val_list (min_k (remove* min_val test_list) (- K (length min_val_list)))))]))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (empty? test_list)\n        '()\n        (if (= K 0)\n            '()\n            (cons (min (car test_list) (min_k_helper (cdr test_list) (- K 1)))\n                  (min_k_helper (cdr test_list) (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (let ([sorted (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (empty? test_list)\n        min_list\n        (if (< (length min_list) K)\n            (min_k_helper (cdr test_list) K (cons (car test_list) min_list))\n            (if (< (car test_list) (car min_list))\n                (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n                (min_k_helper (cdr test_list) K min_list)))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(> (length min_list) K) (min_k_helper (rest test_list) K (remove-min min_list))]\n      [(= (length min_list) K) (min_k_helper (rest test_list) K (remove-min (cons (first test_list) min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n"
  ]
}