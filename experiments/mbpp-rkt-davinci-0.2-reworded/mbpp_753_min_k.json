{
  "name": "mbpp_753_min_k",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find minimum k records from list list. https://www.geeksforgeeks.org/rktthon-find-minimum-k-records-from-list-list/ - in this case a verbatim corkt of test cases\n(define (min_k test_list K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_k))\n    (check-equal? (candidate (list (list \"Manjeet\" 10) (list \"Akshat\" 4) (list \"Akash\" 2) (list \"Nikhil\" 8)) 2) (list (list \"Akash\" 2) (list \"Akshat\" 4)))\n    (check-equal? (candidate (list (list \"Sanjeev\" 11) (list \"Angat\" 5) (list \"Akash\" 3) (list \"Nepin\" 9)) 3) (list (list \"Akash\" 3) (list \"Angat\" 5) (list \"Nepin\" 9)))\n    (check-equal? (candidate (list (list \"tanmay\" 14) (list \"Amer\" 11) (list \"Ayesha\" 9) (list \"SKD\" 16)) 1) (list (list \"Ayesha\" 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (append (remove-min min_list) (list (first test_list))))]))\n  (min_k_helper test_list K (list (first test_list))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(empty? min_list) (min_k_helper (rest test_list) K (list (first test_list)))]\n      [(< (first test_list) (first min_list)) (min_k_helper (rest test_list) K (list (first test_list)))]\n      [else (min_k_helper (rest test_list) K min_list)]))\n  (min_k_helper test_list K empty))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (cons (first test_list) (remove-min min_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K)\n    (cond\n      [(empty? test_list) empty]\n      [(= K 0) empty]\n      [else\n       (let* ([min_val (apply min test_list)]\n              [min_val_index (index-of min_val test_list)]\n              [new_list (remove-at min_val_index test_list)])\n         (cons min_val (min_k_helper new_list (- K 1))))]))\n  (min_k_helper test_list K))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min-from-list min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (cond\n    [(empty? test_list) (error \"Empty list\")]\n    [(= K 0) (error \"K must be greater than 0\")]\n    [(< K (length test_list)) (min_k_helper test_list K)]\n    [else (error \"K must be less than the length of the list\")]))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (or (null? test_list) (= K 0))\n        min_list\n        (let ([min_list (if (or (null? min_list) (< (car test_list) (car min_list)))\n                           (cons (car test_list) min_list)\n                           min_list)])\n          (min_k_helper (cdr test_list) (- K 1) min_list))))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (append min_list (list (first test_list))))]\n      [else (min_k_helper (rest test_list) K (min_list (first test_list)))]))\n  (min_k_helper test_list K (list)))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K) (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [(> (length min_list) K) (min_k_helper (rest test_list) K (remove-min min_list))]\n      [else (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (let ([sorted (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted i))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (cond\n      [(empty? test_list) min_list]\n      [(< (length min_list) K)\n       (min_k_helper (rest test_list) K (cons (first test_list) min_list))]\n      [else\n       (min_k_helper (rest test_list) K (remove-min min_list))]))\n  (min_k_helper test_list K '()))\n",
    "  (define (min_k_helper test_list K)\n    (if (or (null? test_list) (= K 0))\n        '()\n        (let* ([min_val (apply min test_list)]\n               [min_index (index-of min_val test_list)]\n               [remaining_list (remove-at min_index test_list)])\n          (cons min_val (min_k_helper remaining_list (- K 1))))))\n  (min_k_helper test_list K))\n",
    "  (let ([sorted_list (sort test_list <)])\n    (for/list ([i (in-range K)])\n      (list-ref sorted_list i))))\n",
    "  (if (empty? test_list)\n      '()\n      (let ([min (apply min test_list)])\n        (cons min (min_k (filter (lambda (x) (< x min)) test_list) (- K 1))))))\n",
    "  (define (min_k_helper test_list K min_list)\n    (if (empty? test_list)\n        min_list\n        (if (< (length min_list) K)\n            (min_k_helper (cdr test_list) K (cons (car test_list) min_list))\n            (if (< (car test_list) (car min_list))\n                (min_k_helper (cdr test_list) K (cons (car test_list) (cdr min_list)))\n                (min_k_helper (cdr test_list) K min_list)))))\n  (min_k_helper test_list K '()))\n"
  ]
}