{
  "name": "mbpp_119_search",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the element that appears only once in a sorted list.\n(define (search arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate search))\n    (check-equal? (candidate (list 1 1 2 2 3)) 3)\n    (check-equal? (candidate (list 1 1 3 3 4 4 5 5 7 7 8)) 8)\n    (check-equal? (candidate (list 1 2 2 3 3 4 4)) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) (error \"empty list\")]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (let loop ([i 0])\n    (if (= i (sub1 (length arr)))\n        (list-ref arr i)\n        (if (equal? (list-ref arr i) (list-ref arr (add1 i)))\n            (loop (add1 (add1 i)))\n            (list-ref arr i)))))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) #f)]\n    [else\n     (let* ([mid (quotient (length arr) 2)]\n            [left (take arr mid)]\n            [right (drop arr mid)])\n       (cond\n         [(= (length left) 1) (if (= (first left) (first right)) (search right) (first left))]\n         [(= (length right) 1) (if (= (first left) (first right)) (search left) (first right))]\n         [else (if (= (first left) (first right)) (search right) (search left))]))]))\n",
    "  (cond [(empty? arr) #f]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2)\n     (if (= (first arr) (second arr))\n         (first arr)\n         (second arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (list-ref arr mid) (list-ref arr (- mid 1)))\n           (if (odd? mid)\n               (search (rest (drop arr mid)))\n               (search (drop arr mid)))\n           (if (odd? mid)\n               (search (take arr mid))\n               (search (take arr (- mid 1))))))]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr index)\n    (cond\n      [(= index (length arr)) #f]\n      [(= (list-ref arr index) (list-ref arr (+ index 1))) (search-helper arr (+ index 2))]\n      [else (list-ref arr index)]))\n  (search-helper arr 0))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (add1 (length arr))) #f]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 (add1 i)))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) '()]\n        [(empty? (rest arr)) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (define (search-helper arr i)\n    (if (= i (sub1 (length arr)))\n        (list-ref arr i)\n        (if (and (= (list-ref arr i) (list-ref arr (add1 i)))\n                 (= (list-ref arr i) (list-ref arr (add1 (add1 i)))))\n            (search-helper arr (add1 (add1 i)))\n            (list-ref arr i))))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) #f)]\n    [else\n     (let* ([mid (quotient (length arr) 2)]\n            [left (take arr mid)]\n            [right (drop arr mid)])\n       (if (odd? (length arr))\n           (if (= (first left) (second left))\n               (search right)\n               (search left))\n           (if (= (first left) (second left))\n               (search (drop right 1))\n               (search left))))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-iter arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-iter arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-iter arr 0))\n",
    "  (cond\n    [(empty? arr) (error 'search \"empty list\")]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (if (&lt; i (sub1 (length arr)))\n        (if (equal? (list-ref arr i) (list-ref arr (add1 i)))\n            (search-helper arr (add1 (add1 i)))\n            (list-ref arr i))\n        (list-ref arr i)))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) (error 'search \"empty list\")]\n        [(empty? (rest arr)) (first arr)]\n        [else\n         (if (= (first arr) (second arr))\n             (search (rest (rest arr)))\n             (first arr))]))\n",
    "  (let loop ([i 0] [j (add1 (sub1 (vector-length arr)))])\n    (cond\n      [(= i j) (vector-ref arr i)]\n      [(= (vector-ref arr i) (vector-ref arr (add1 i))) (loop (add1 (add1 i)) j)]\n      [else (loop i (sub1 j))])))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (if (= i (length arr))\n        #f\n        (if (= (list-ref arr i) (list-ref arr (+ i 1)))\n            (search-helper arr (+ i 2))\n            (list-ref arr i))))\n  (search-helper arr 0))\n",
    "  (define (helper arr i)\n    (if (&lt; i (sub1 (length arr)))\n        (if (= (list-ref arr i) (list-ref arr (add1 i)))\n            (helper arr (add1 (add1 i)))\n            (list-ref arr i))\n        (list-ref arr i)))\n  (helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) (error \"Empty list\")]\n    [(= (length arr) 1) (first arr)]\n    [else\n     (if (= (first arr) (second arr))\n         (search (rest (rest arr)))\n         (first arr))]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) #f]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (let loop ((i 0) (len (length arr)))\n    (cond\n      [(= i (- len 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (loop (+ i 2) len)]\n      [else (list-ref arr i)])))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2)\n     (if (= (first arr) (second arr))\n         #f\n         (if (= (first arr) (third arr))\n             (second arr)\n             (first arr)))]\n    [else\n     (let* ([mid (/ (length arr) 2)]\n            [mid-val (list-ref arr mid)])\n       (cond\n         [(= mid-val (list-ref arr (- mid 1)))\n          (search (sublist arr (+ mid 2)))]\n         [(= mid-val (list-ref arr (+ mid 1)))\n          (search (sublist arr (- mid 2)))]\n         [else mid-val]))]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (first arr) (second arr)) (search (drop arr 2))]\n         [(= (first arr) (list-ref arr (+ mid 1))) (search (take arr mid))]\n         [(= (list-ref arr (- mid 1)) (list-ref arr mid)) (search (drop arr mid))]\n         [else (list-ref arr mid)]))]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (if (= i (sub1 (length arr)))\n        (list-ref arr i)\n        (if (or (= (list-ref arr i) (list-ref arr (add1 i)))\n                (= (list-ref arr i) (list-ref arr (add1 (add1 i)))))\n            (search-helper arr (add1 (add1 i)))\n            (list-ref arr i))))\n  (search-helper arr 0))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let* ([mid (quotient (length arr) 2)]\n            [left (take arr mid)]\n            [right (drop arr mid)])\n       (cond\n         [(= (length left) 1) (if (= (first left) (first right)) (first right) (first left))]\n         [(= (first left) (first right)) (search right)]\n         [else (search left)]))]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (sub1 (length arr)))\n       (error 'search \"no unique element\")]\n      [(= (list-ref arr i) (list-ref arr (add1 i)))\n       (loop (add1 (add1 i)))]\n      [else\n       (list-ref arr i)])))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr start end)\n    (cond ((= start end) (list-ref arr start))\n          ((= (modulo (+ start end) 2) 0)\n           (cond ((= (list-ref arr (/ (+ start end) 2))\n                    (list-ref arr (+ (/ (+ start end) 2) 1)))\n                  (search-helper arr (+ (/ (+ start end) 2) 2) end))\n                 (else (search-helper arr start (/ (+ start end) 2)))))\n          (else (cond ((= (list-ref arr (/ (+ start end) 2))\n                        (list-ref arr (- (/ (+ start end) 2) 1)))\n                       (search-helper arr (+ (/ (+ start end) 2) 1) end))\n                      (else (search-helper arr start (/ (+ start end) 2)))))))\n  (search-helper arr 0 (- (length arr) 1)))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [else (cond\n            [(= (first arr) (second arr)) (search (rest (rest arr)))]\n            [else (first arr)])]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (if (null? arr)\n      '()\n      (if (null? (cdr arr))\n          (car arr)\n          (if (equal? (car arr) (cadr arr))\n              (search (cddr arr))\n              (car arr)))))\n",
    "  (cond\n    [(empty? arr) (error \"Empty list\")]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2)\n     (if (= (first arr) (second arr))\n         (first arr)\n         (second arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (first (drop mid arr)) (second (drop mid arr)))\n           (search (drop (add1 mid) arr))\n           (search (take mid arr))))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (list-ref arr mid) (list-ref arr (- mid 1)))\n          (search (list-tail arr mid))]\n         [(= (list-ref arr mid) (list-ref arr (+ mid 1)))\n          (search (list-tail arr (+ mid 1)))]\n         [else (list-ref arr mid)]))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (first (drop arr mid)) (second (drop arr mid)))\n           (search (take arr mid))\n           (search (drop arr mid))))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (first (drop mid arr)) (second (drop mid arr)))\n           (search (take mid arr))\n           (search (drop mid arr))))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) #f]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) \"No element found\"]\n        [(= (count (first arr) arr) 1) (first arr)]\n        [else (search (rest arr))]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (count (first arr) arr) 1) (first arr)]\n        [else (search (rest arr))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [else\n     (cond\n       [(= (first arr) (second arr)) (search (rest (rest arr)))]\n       [else (first arr)])]))\n",
    "  (if (= (length arr) 1)\n      (car arr)\n      (if (equal? (car arr) (cadr arr))\n          (search (cddr arr))\n          (car arr))))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) \"No element found\"]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (equal? (list-ref arr mid) (list-ref arr (- mid 1)))\n           (search (list-ref arr (- mid 1)))\n           (if (equal? (list-ref arr mid) (list-ref arr (+ mid 1)))\n               (search (list-ref arr (+ mid 1)))\n               (list-ref arr mid))))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n        [else (if (= (first arr) (second arr))\n                  (search (rest (rest arr)))\n                  (first arr))]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) #f (first arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (list-ref arr mid) (list-ref arr (- mid 1)))\n          (search (sublist arr 0 mid))]\n         [(= (list-ref arr mid) (list-ref arr (+ mid 1)))\n          (search (sublist arr (+ mid 1) (length arr)))]\n         [else (list-ref arr mid)]))]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (list-ref arr mid) (list-ref arr (- mid 1)))\n          (search (sublist arr 0 mid))]\n         [(= (list-ref arr mid) (list-ref arr (+ mid 1)))\n          (search (sublist arr (+ mid 1) (length arr)))]\n         [else\n          (list-ref arr mid)]))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (cond\n                          [(= (first arr) (second arr)) '()]\n                          [else (first arr)])]\n    [else (cond\n           [(= (first arr) (second arr)) (search (rest (rest arr)))]\n           [else (first arr)])]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (error \"No such element\")]\n      [(= (vector-ref arr i) (vector-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (vector-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(null? arr) #f]\n        [(null? (cdr arr)) (car arr)]\n        [(= (car arr) (cadr arr)) (search (cddr arr))]\n        [else (car arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) (error \"Empty list\")]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (add1 (length arr))) #f]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 (add1 i)))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) #f)]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (list-ref arr mid) (list-ref arr (- mid 1)))\n          (search (sublist arr 0 mid))]\n         [(= (list-ref arr mid) (list-ref arr (+ mid 1)))\n          (search (sublist arr (+ mid 1) (length arr)))]\n         [else\n          (list-ref arr mid)]))]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [else (cond [(= (first arr) (second arr)) (search (rest (rest arr)))]\n                    [else (first arr)])]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (third arr) (first arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (list-ref arr mid) (list-ref arr (+ mid 1)))\n           (search (drop arr (+ mid 2)))\n           (search (take arr mid))))]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [else (if (= (first arr) (second arr))\n                  (search (rest (rest arr)))\n                  (first arr))]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [else (if (= (first arr) (second arr))\n                  (search (rest (rest arr)))\n                  (first arr))]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (if (= i (length arr))\n        #f\n        (if (= (list-ref arr i) (list-ref arr (+ i 1)))\n            (search-helper arr (+ i 2))\n            (list-ref arr i))))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) (error \"empty array\")]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (if (null? arr)\n      #f\n      (if (null? (cdr arr))\n          (car arr)\n          (if (equal? (car arr) (cadr arr))\n              (search (cddr arr))\n              (car arr)))))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) empty]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (sub1 (length arr))) #f]\n      [(= (vector-ref arr i) (vector-ref arr (add1 i))) (loop (add1 i))]\n      [else (vector-ref arr i)])))\n",
    "  (define (search-helper arr i)\n    (if (= i (- (length arr) 1))\n        (list-ref arr i)\n        (if (and (= (list-ref arr i) (list-ref arr (+ i 1)))\n                 (= (list-ref arr i) (list-ref arr (- i 1))))\n            (search-helper arr (+ i 1))\n            (list-ref arr i))))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) false]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(empty? arr) #f]\n      [(= i (add1 (length arr))) #f]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 (add1 i)))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [else\n         (cond [(= (first arr) (second arr)) (search (rest (rest arr)))]\n               [else (first arr)])]))\n",
    "  (cond\n    [(empty? arr) (error \"empty list\")]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) (second arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (list-ref arr mid) (list-ref arr (- mid 1))) (search (rest (rest (drop arr mid)))))\n         [(= (list-ref arr mid) (list-ref arr (+ mid 1))) (search (drop arr (+ mid 1)))]\n         [else (list-ref arr mid)]))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) (third arr) (first arr))]\n    [else (if (equal? (first arr) (second arr)) (search (rest (rest arr))) (first arr))]))\n",
    "  (cond [(empty? arr) #f]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) (error \"empty list\")]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (add1 (length arr))) #f]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 (add1 i)))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) (first arr) '())]\n    [else (if (equal? (first arr) (second arr))\n             (search (rest (rest arr)))\n             (first arr))]))\n",
    "  (cond\n    [(empty? arr) (error \"empty list\")]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) (third arr) (first arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (equal? (list-ref arr mid) (list-ref arr (+ mid 1)))\n           (search (sublist arr (+ mid 2)))\n           (search (sublist arr 0 mid))))]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (let loop ([i 0] [j (add1 (sub1 (vector-length arr)))] [k (quotient (+ i j) 2)])\n    (cond\n      [(= i j) (vector-ref arr i)]\n      [(= (vector-ref arr k) (vector-ref arr (add1 k))) (loop (add1 k) j (+ (add1 k) (quotient (- j (add1 k)) 2)))]\n      [(= (vector-ref arr k) (vector-ref arr (sub1 k))) (loop i (sub1 k) (quotient (- k i) 2))]\n      [else (vector-ref arr k)])))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (equal? (list-ref arr mid) (list-ref arr (+ mid 1)))\n           (search (sublist arr (+ mid 2) (length arr)))\n           (search (sublist arr 0 (+ mid 1)))))]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) (third arr) (first arr))]\n    [else (cond\n            [(= (first arr) (second arr)) (search (rest (rest arr)))]\n            [(= (second arr) (third arr)) (search (rest (rest (rest arr))))]\n            [else (first arr)])]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) (error \"Empty list\")]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (- (length arr) 1)) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (+ i 1))) (search-helper arr (+ i 2))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [else (cond [(= (first arr) (second arr)) (search (rest (rest arr)))]\n                    [else (first arr)])]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) empty]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (let loop ([i 0])\n    (if (= i (sub1 (length arr)))\n        (list-ref arr i)\n        (if (and (= (list-ref arr i) (list-ref arr (add1 i)))\n                 (not (= (list-ref arr i) (list-ref arr (add1 (add1 i))))))\n            (list-ref arr (add1 i))\n            (loop (add1 i))))))\n",
    "  (cond [(empty? arr) #f]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond [(= i (sub1 (length arr))) (error \"No single element found\")]\n          [(= (vector-ref arr i) (vector-ref arr (add1 i))) (search-helper arr (add1 i))]\n          [else (vector-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) (error \"Empty list\")]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [else\n     (cond\n       [(= (first arr) (second arr)) (search (rest arr))]\n       [else (first arr)])]))\n",
    "  (let loop ((i 0) (len (length arr)) (prev (car arr)))\n    (cond\n      [(= i len) #f]\n      [(= (car (list-ref arr i)) prev) (loop (+ i 2) len (car (list-ref arr (+ i 1))))]\n      [else (car (list-ref arr i))])))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (let loop ((i 0))\n    (if (= i (sub1 (length arr)))\n        (error 'search \"not found\")\n        (if (and (= (vector-ref arr i) (vector-ref arr (add1 i)))\n                 (not (= (vector-ref arr i) (vector-ref arr (add1 (add1 i)))))\n                 (not (= (vector-ref arr i) (vector-ref arr (sub1 i)))))\n            (vector-ref arr (add1 i))\n            (loop (add1 i))))))\n",
    "  (let loop ((i 0) (j (add1 (sub1 (length arr)))))\n    (cond\n      [(= i j) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (loop (add1 (add1 i)) j)]\n      [else (loop (add1 i) (sub1 j))])))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) '())]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (cond\n         [(= (list-ref arr mid) (list-ref arr (+ mid 1)))\n          (search (list-ref arr (+ mid 2)))]\n         [(= (list-ref arr mid) (list-ref arr (- mid 1)))\n          (search (list-ref arr (- mid 2)))]\n         [else (list-ref arr mid)]))]))\n",
    "  (cond\n    [(empty? arr) (error 'search \"empty list\")]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) (error 'search \"no unique element\"))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (list-ref arr mid) (list-ref arr (- mid 1)))\n           (search (drop arr (- mid 1)))\n           (if (= (list-ref arr mid) (list-ref arr (+ mid 1)))\n               (search (drop arr (+ mid 1)))\n               (list-ref arr mid))))]))\n",
    "  (cond [(empty? arr) '()]\n        [(empty? (rest arr)) (first arr)]\n        [else (cond [(equal? (first arr) (second arr)) (search (rest (rest arr)))]\n                    [else (first arr)])]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (let loop ((i 0) (j (add1 (length arr))))\n    (if (= i j)\n        (error \"no single element\")\n        (let ((mid (quotient (+ i j) 2)))\n          (cond ((= (vector-ref arr mid) (vector-ref arr (add1 mid)))\n                 (loop (add1 mid) j))\n                ((= (vector-ref arr mid) (vector-ref arr (sub1 mid)))\n                 (loop i mid))\n                (else (vector-ref arr mid)))))))\n",
    "  (cond\n    [(empty? arr) (error \"Empty list\")]\n    [(= 1 (length arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (let loop ([i 0])\n    (if (= i (sub1 (length arr)))\n        (list-ref arr i)\n        (if (and (= (list-ref arr i) (list-ref arr (add1 i)))\n                 (= (list-ref arr i) (list-ref arr (add1 (add1 i)))))\n            (loop (add1 (add1 i)))\n            (list-ref arr i)))))\n",
    "  (cond [(empty? arr) #f]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (let loop ((i 0) (j (add1 (length arr))))\n    (cond\n      [(= i j) #f]\n      [(= (vector-ref arr i) (vector-ref arr (add1 i))) (loop (add1 (add1 i)) j)]\n      [else (vector-ref arr i)])))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (= (first arr) (second arr)) (first arr) #f)]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (= (first arr) (second arr))\n           (search (rest (rest arr)))\n           (if (= (first arr) (list-ref arr mid))\n               (search (rest arr))\n               (search (take arr mid)))))]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (list-ref arr i)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr)) '() (first arr))]\n    [else\n     (let ([mid (quotient (length arr) 2)])\n       (if (and (equal? (list-ref arr mid) (list-ref arr (- mid 1)))\n                (equal? (list-ref arr mid) (list-ref arr (+ mid 1))))\n           (search (append (take arr mid) (drop arr (+ mid 1))))\n           (if (equal? (list-ref arr mid) (list-ref arr (- mid 1)))\n               (search (drop arr mid))\n               (search (take arr mid)))))]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (sub1 (length arr))) #f]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (loop (add1 i))]\n      [else (list-ref arr i)])))\n",
    "  (let loop ([i 0] [n (length arr)])\n    (cond [(= i (- n 1)) (list-ref arr i)]\n          [(= (list-ref arr i) (list-ref arr (+ i 1))) (loop (+ i 2) n)]\n          [else (list-ref arr i)])))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (if (null? arr)\n      #f\n      (if (null? (cdr arr))\n          (car arr)\n          (if (equal? (car arr) (cadr arr))\n              (search (cddr arr))\n              (car arr)))))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (define (search-helper arr i)\n    (cond\n      [(= i (sub1 (length arr))) (void)]\n      [(= (list-ref arr i) (list-ref arr (add1 i))) (search-helper arr (add1 i))]\n      [else (list-ref arr i)]))\n  (search-helper arr 0))\n",
    "  (cond [(empty? arr) '()]\n        [(= (length arr) 1) (first arr)]\n        [(= (first arr) (second arr)) (search (rest (rest arr)))]\n        [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (length arr) 2) (if (equal? (first arr) (second arr))\n                           (first arr)\n                           (second arr))]\n    [else (let ([mid (quotient (length arr) 2)])\n            (if (equal? (list-ref arr mid) (list-ref arr (+ mid 1)))\n                (search (sublist arr (+ mid 2)))\n                (search (sublist arr 0 mid))))]))\n",
    "  (cond\n    [(empty? arr) #f]\n    [(empty? (rest arr)) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [else\n     (cond\n       [(= (first arr) (second arr)) (search (rest (rest arr)))]\n       [else (first arr)])]))\n",
    "  (cond\n    [(empty? arr) '()]\n    [(= (length arr) 1) (first arr)]\n    [(= (first arr) (second arr)) (search (rest (rest arr)))]\n    [else (first arr)]))\n"
  ]
}