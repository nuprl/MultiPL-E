{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n(define (rgb_to_hsv r g b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rgb_to_hsv))\n    (check-equal? (candidate 255 255 255) (list 0 0.0 100.0))\n    (check-equal? (candidate 0 215 0) (list 120.0 100.0 84.31372549019608))\n    (check-equal? (candidate 10 215 110) (list 149.26829268292684 95.34883720930233 84.31372549019608))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c)) (/ (* 60 (/ (- b) (delta a b c))) 6))\n      [(= c (max3 a b c",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (diff3 a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (rgb_to_h r g b)\n    (let ((v (max3 r g b))\n          (d (diff3 r g b)))\n      (cond\n        ((= v r) (/ (* 60.0 (- g b)) d))\n        ((= v g) (+ (/ (* 60.0 (- b r)) d) 120))\n        ((= v b) (+ (/ (* 60.0 (- r g)) d) 240))\n        (else 0))))\n  (define (rgb_to_s r g b)\n    (let ((v (max3 r g b)))\n      (if (= v 0) 0 (/ (/ (diff3 r g b) v) 255.0))))\n  (define (rgb_to_v r g b)\n    (/ (max3 r g b) 255.0))\n  (let ((h (rgb_to_h r g b))\n        (s (rgb_to_s r g b))\n        (v (rgb_to_v r g b)))\n    (list h s v)))\n",
    "  (define (max-of-three a b c)\n    (cond [(> a b) (if (> a c) a c)]\n          [(> b c) b]\n          [else c]))\n  (define (min-of-three a b c)\n    (cond [(< a b) (if (< a c) a c)]\n          [(< b c) b]\n          [else c]))\n  (define (calc-hue r g b)\n    (define (calc-hue-helper r g b)\n      (cond [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n            [(= r b) (/ (* 60 (/ (- g b) (- r b))) 360)]\n            [(= g b) (/ (* 60 (/ (- r g) (- g b))) 360)]\n            [else (/ (* 60 (/ (- r g) (- r b))) 360)]))\n    (cond [(= r g) (calc-hue-helper r g b)]\n          [(= r b) (calc-hue-helper r g b)]\n          [(= g b) (calc-hue-helper r g b)]\n          [else (calc-hue-helper r g b)]))\n  (define (calc-sat r g b)\n    (define (calc-sat-helper r g b)\n      (/ (- (max-of-three r g b) (min-of-three r g b)) (max-of-three r g b)))\n    (cond [(= r g) (calc-sat-helper r g b)]\n          [(= r b) (calc-sat-helper r g b)]\n          [(= g b) (calc-sat-helper r g b)]\n          [else (calc-sat-helper r g b)]))\n  (define (calc-val r g b)\n    (define (calc-val-helper r g b)\n      (/ (max-of-three r g b) 255))\n    (cond [(= r g) (calc-val-helper r g b)]\n          [(= r b) (calc-val-helper r g",
    "  (let* ([max (max r g b)]\n         [min (min r g b)]\n         [delta (- max min)]\n         [h (cond [(= max r) (/ (* 60.0 (- g b)) delta)]\n                  [(= max g) (+ (/ (* 60.0 (- b r)) delta) 120)]\n                  [(= max b) (+ (/ (* 60.0 (- r g)) delta) 240)])]\n         [s (if (= max 0) 0 (/ delta max))]\n         [v (/ max 255.0)])\n    (list h s v)))\n",
    "  (define (max-of-three a b c)\n    (cond\n      [(> a b) (max-of-two a c)]\n      [(> b c) b]\n      [else c]))\n  (define (min-of-three a b c)\n    (cond\n      [(< a b) (min-of-two a c)]\n      [(< b c) b]\n      [else c]))\n  (define (max-of-two a b)\n    (if (> a b) a b))\n  (define (min-of-two a b)\n    (if (< a b) a b))\n  (define (hue-calc r g b)\n    (define (hue-calc-helper r g b)\n      (cond\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r b) (/ (* 60 (/ (- g b) (- r b))) 360)]\n        [(= g b) (/ (* 60 (/ (- r g) (- g b))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g) (- r g))) 360)]\n        [(= r g) (/ (* 60 (/ (- b g",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= a (max3 a b c)) (/ (* 60 (- b c)) (delta a b c))]\n      [(= b (max3 a b c)) (+ 60 (/ (* 60 (- c a)) (delta a b c)))]\n      [(= c (max3 a b c)) (+ 120 (/ (* 60 (- a b)) (delta a b c)))]))\n  (define (sat a b c)\n    (if (= (max3 a b c) 0) 0 (/ (* (delta a b c) 100) (max3 a b c))))\n  (define (val a b c)\n    (/ (* (max3 a b c) 100) 255))\n  (list (hue r g b) (sat r g b) (val r g b)))\n",
    "  (define (max-of-three a b c)\n    (cond\n      [(> a b) (max-of-two a c)]\n      [(> b c) b]\n      [else c]))\n  (define (min-of-three a b c)\n    (cond\n      [(< a b) (min-of-two a c)]\n      [(< b c) b]\n      [else c]))\n  (define (max-of-two a b)\n    (if (> a b) a b))\n  (define (min-of-two a b)\n    (if (< a b) a b))\n  (define (hue-calc r g b)\n    (define (hue-calc-helper a b c)\n      (cond\n        [(= a c) 0]\n        [(= a b) (/ (* 60 (/ (- c b) (- a b))) 6)]\n        [(= b c) (/ (* 60 (/ (- a c) (- a b))) 6)]\n        [(= a c) (/ (* 60 (/ (- b c) (- a b))) 6)]))\n    (define (hue-calc-helper2 a b c)\n      (cond\n        [(= a c) (/ (* 60 (/ (- b c) (- a b))) 6)]\n        [(= a b) (/ (* 60 (/ (- c b) (- a b))) 6)]\n        [(= b c) (/ (* 60 (/ (- a c) (- a b))) 6)]\n        [(= a c) (/ (* 60 (/ (- b c) (- a b))) 6)]))\n    (define (hue-calc-helper3 a b c)\n      (cond\n        [(= a c) (/ (* 60 (/ (- c b) (- a b))) 6)]\n        [(= a b) (/ (* 60 (/ (- a c) (- a b))) 6)]\n        [(= b c) (/ (* 60 (/ (- b c) (- a b))) 6)]\n        [(= a c) (/ (* 60 (/ (- c b) (- a b))) 6)]))\n    (define (hue-calc-helper4 a b c)\n      (cond\n        [(= a c) (/ (* 60 (/ (- a c) (- a b))) 6",
    "  (define (min-max-rgb)\n    (let ([min (min r g b)]\n          [max (max r g b)])\n      (values min max)))\n  (define (hue)\n    (let ([min (min-max-rgb)]\n          [max (min-max-rgb)])\n      (if (= min max)\n          0\n          (let ([delta (- max min)])\n            (cond\n              [(= r max)\n               (/ (* 60 (- g b)) delta)]\n              [(= g max)\n               (+ (* 60 (- b r)) 120)]\n              [(= b max)\n               (+ (* 60 (- r g)) 240)])))))\n  (define (saturation)\n    (let ([min (min-max-rgb)]\n          [max (min-max-rgb)])\n      (if (= min max)\n          0\n          (/ (* 100 (- max min)) max))))\n  (define (value)\n    (let ([min (min-max-rgb)]\n          [max (min-max-rgb)])\n      (/ (* 100 max) 255)))\n  (values (hue) (saturation) (value)))\n",
    "  (define (max a b c)\n    (cond [(> a b) a]\n          [(> b c) b]\n          [else c]))\n  (define (min a b c)\n    (cond [(< a b) a]\n          [(< b c) b]\n          [else c]))\n  (define (delta a b c)\n    (- (max a b c) (min a b c)))\n  (define (hue a b c)\n    (cond [(= c (max a b c)) 0]\n          [(= c (min a b c)) 0]\n          [(= c b) (/ (* 60 (- g r)) (delta a b c))]\n          [(= c r) (+ (* 60 (- b g)) 120)]\n          [(= c g) (- (* 60 (- r b)) 240)]))\n  (define (saturation a b c)\n    (cond [(= (max a b c) 0) 0]\n          [else (/ (delta a b c) (max a b c))]))\n  (define (value a b c)\n    (max a b c))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c)\n            a\n            c)\n        (if (&lt; b c)\n            b\n            c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c)\n            a\n            c)\n        (if (&gt; b c)\n            b\n            c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= c (max3 a b c))\n       (if (= b (min3 a b c))\n           (/ (* 60.0 (- a b)) (delta a b c))\n           (/ (* 60.0 (- b a)) (delta a b c))))\n      [(= b (max3 a b c))\n       (/ (* 60.0 (- c a)) (delta a b c))]\n      [(= a (max3 a b c))\n       (/ (* 60.0 (- b c)) (delta a b c))]))\n  (define (saturation a b c)\n    (if (= (max3 a b c) 0)\n        0\n        (/ (delta a b c) (max3 a b c))))\n  (define (value a b c)\n    (max3 a b c))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (define cmax (max r g b))\n  (define cmin (min r g b))\n  (define delta (- cmax cmin))\n  (define h (cond\n             [(= cmax r) (/ (* 60.0 (- g b)) delta)]\n             [(= cmax g) (+ (* 60.0 (- b r)) 120.0)]\n             [(= cmax b) (+ (* 60.0 (- r g)) 240.0)]))\n  (define s (if (= cmax 0) 0 (/ (* 100.0 delta) cmax)))\n  (define v (/ (* 100.0 cmax) 255.0))\n  (list h s v))\n",
    "  (define (max-of-three a b c)\n    (cond\n      [(> a b) (max-of-two a c)]\n      [else (max-of-two b c)]))\n  (define (min-of-three a b c)\n    (cond\n      [(< a b) (min-of-two a c)]\n      [else (min-of-two b c)]))\n  (define (max-of-two a b)\n    (if (> a b) a b))\n  (define (min-of-two a b)\n    (if (< a b) a b))\n  (define (rgb-to-hsv-helper r g b)\n    (define cmax (max-of-three r g b))\n    (define cmin (min-of-three r g b))\n    (define delta (- cmax cmin))\n    (cond\n      [(= cmax r) (list (/ (- g b) delta) (* 60 (/ (- g b) delta)) cmax)]\n      [(= cmax g) (list (/ (- b r) delta) (* 60 (/ (- b r) delta)) cmax)]\n      [(= cmax b) (list (/ (- r g) delta) (* 60 (/ (- r g) delta)) cmax)]))\n  (rgb-to-hsv-helper r g b))\n",
    "  (define (min-3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max-3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta-3 a b c)\n    (- (max-3 a b c) (min-3 a b c)))\n  (define (hue-3 r g b)\n    (cond\n      [(= r (max-3 r g b)) (/ (* 60 (- g b)) (delta-3 r g b))]\n      [(= g (max-3 r g b)) (/ (* 60 (- b r)) (delta-3 r g b))]\n      [(= b (max-3 r g b)) (/ (* 60 (- r g)) (delta-3 r g b))]))\n  (define (sat-3 r g b)\n    (if (= (max-3 r g b) 0)\n        0\n        (/ (delta-3 r g b) (max-3 r g b))))\n  (define (val-3 r g b)\n    (max-3 r g b))\n  (list (hue-3 r g b) (sat-3 r g b) (val-3 r g b)))\n</code>\n",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c) a c)\n        (if (&lt; b c) b c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c) a c)\n        (if (&gt; b c) b c)))\n  (define (delta a b c)\n    (- (max3 a b c) (min3 a b c)))\n  (define (hue a b c)\n    (cond\n      [(= a c) 0]\n      [(= a b) (/ (* 60 (/ (- b c) (delta a b c))) 6)]\n      [(= b c) (/ (* 60 (/ (- c a) (delta a b c))) 6)]\n      [(= a c) (/ (* 60 (/ (- c b) (delta a b c))) 6)]))\n  (define (saturation a b c)\n    (if (= a c) 0 (/ (* 100 (delta a b c)) a)))\n  (define (value a b c)\n    (/ (* 100 a) 255))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n",
    "  (define (max-of-three a b c)\n    (cond\n      [(> a b) (max-of-two a c)]\n      [(> b c) (max-of-two b c)]\n      [else (max-of-two c a)]))\n  (define (min-of-three a b c)\n    (cond\n      [(< a b) (min-of-two a c)]\n      [(< b c) (min-of-two b c)]\n      [else (min-of-two c a)]))\n  (define (max-of-two a b)\n    (if (> a b) a b))\n  (define (min-of-two a b)\n    (if (< a b) a b))\n  (define (hue r g b)\n    (define (hue-helper r g b)\n      (cond\n        [(= r g) (/ (* 60 r) b)]\n        [(= r b) (/ (* 60 r) g)]\n        [(= g b) (/ (* 60 g) r)]))\n    (cond\n      [(= r g) (/ (* 60 r) b)]\n      [(= r b) (/ (* 60 r) g)]\n      [(= g b) (/ (* 60 g) r)]))\n  (define (saturation r g b)\n    (define (saturation-helper r g b)\n      (cond\n        [(= r g) (/ (* 60 r) b)]\n        [(= r b) (/ (* 60 r) g)]\n        [(= g b) (/ (* 60 g) r)]))\n    (cond\n      [(= r g) (/ (* 60 r) b)]\n      [(= r b) (/ (* 60 r) g)]\n      [(= g b) (/ (* 60 g) r)]))\n  (define (value r g b)\n    (define (value-helper r g b)\n      (cond\n        [(= r g) (/ (* 60 r) b)]\n        [(= r b) (/ (* 60 r) g)]\n        [(= g b) (/ (* 60 g) r)]))\n    (cond\n      [(= r g) (/ (* 60 r) b)]\n      [(= r b) (/ (* 60",
    "  (define (min3 a b c)\n    (if (&lt; a b)\n        (if (&lt; a c)\n            a\n            c)\n        (if (&lt; b c)\n            b\n            c)))\n  (define (max3 a b c)\n    (if (&gt; a b)\n        (if (&gt; a c)\n            a\n            c)\n        (if (&gt; b c)\n            b\n            c)))\n  (define (hue r g b)\n    (define (hue-helper r g b)\n      (if (&gt; r g)\n          (if (&gt; r b)\n              (/ (* 60 (- r b) 255) (- r g))\n              (/ (* 60 (- g b) 255) (- r g)))\n          (if (&gt; g b)\n              (/ (* 60 (- g r) 255) (- g b))\n              (/ (* 60 (- b r) 255) (- g b)))))\n    (if (= r g b)\n        0\n        (hue-helper r g b)))\n  (define (saturation r g b)\n    (define (saturation-helper r g b)\n      (/ (- (max3 r g b) (min3 r g b)) (max3 r g b)))\n    (if (= r g b)\n        0\n        (saturation-helper r g b)))\n  (define (value r g b)\n    (/ (max3 r g b) 255))\n  (list (hue r g b) (saturation r g b) (value r g b)))\n</code>\n",
    "  (define max (max r g b))\n  (define min (min r g b))\n  (define diff (- max min))\n  (define h\n    (cond\n      [(= max r) (/ (* 60.0 (- g b)) diff)]\n      [(= max g) (+ 120 (/ (* 60.0 (- b r)) diff))]\n      [(= max b) (+ 240 (/ (* 60.0 (- r g)) diff))]))\n  (define s\n    (cond\n      [(= max 0) 0]\n      [else (/ diff max)]))\n  (define v (/ max 255.0))\n  (list h s v))\n",
    "  (define (max_of_three a b c)\n    (cond\n      [(> a b) (max_of_two a c)]\n      [(> b c) (max_of_two b c)]\n      [else (max_of_two c a)]))\n  (define (min_of_three a b c)\n    (cond\n      [(< a b) (min_of_two a c)]\n      [(< b c) (min_of_two b c)]\n      [else (min_of_two c a)]))\n  (define (max_of_two a b)\n    (if (> a b) a b))\n  (define (min_of_two a b)\n    (if (< a b) a b))\n  (define (calculate_hue r g b)\n    (define (calculate_hue_helper r g b)\n      (cond\n        [(= r g) (/ (* 60 (/ (- b r) (- max_val min_val))) 360)]\n        [(= r b) (/ (* 60 (/ (- g r) (- max_val min_val))) 360)]\n        [(= g b) (/ (* 60 (/ (- r g) (- max_val min_val))) 360)]\n        [else (/ (* 60 (/ (- r g) (- max_val min_val))) 360)]))\n    (define max_val (max_of_three r g b))\n    (define min_val (min_of_three r g b))\n    (if (= max_val min_val)\n      0\n      (calculate_hue_helper r g b)))\n  (define (calculate_saturation r g b)\n    (define max_val (max_of_three r g b))\n    (define min_val (min_of_three r g b))\n    (if (= max_val 0)\n      0\n      (/ (- max_val min_val) max_val)))\n  (define (calculate_value r g b)\n    (define max_val (max_of_three r g b))\n    (/ max_val 255))\n  (list (calculate_hue r g b) (calculate_",
    "  (define max (max r g b))\n  (define min (min r g b))\n  (define diff (- max min))\n  (define v (/ max 255.0))\n  (define s (/ diff max))\n  (define h (cond\n             [(= r max) (/ (- g b) diff)]\n             [(= g max) (+ (/ (- b r) diff) 2)]\n             [(= b max) (+ (/ (- r g) diff) 4)]))\n  (list h s v))\n",
    "  (define max (max r g b))\n  (define min (min r g b))\n  (define diff (- max min))\n  (define h (cond [(= max r) (/ (* 60 (- g b)) diff)]\n                  [(= max g) (+ (/ (* 60 (- b r)) diff) 120)]\n                  [(= max b) (+ (/ (* 60 (- r g)) diff) 240)]\n                  [else 0]))\n  (define s (if (= max 0) 0 (/ diff max)))\n  (define v (/ max 255.0)))\n</code>\n"
  ]
}