{
  "name": "mbpp_602_first_repeated_char",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the first repeated character in a given string.\n(define (first_repeated_char str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_repeated_char))\n    (check-equal? (candidate \"abcabc\") \"a\")\n    (check-equal? (candidate \"abc\") #f)\n    (check-equal? (candidate \"123123\") \"1\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([str2 (string-append str1 \" \")])\n    (for/first ([c1 (in-string str1)])\n      (for/first ([c2 (in-string (substring str2 (+ (string-index str2 c1) 1)))])\n        (when (char=? c1 c2)\n          c1)))))\n",
    "  (let* ([str2 (string-append str1 str1)]\n         [str3 (string-append str1 \" \")]\n         [str4 (string-append str3 str2)]\n         [str5 (string-append str4 str3)]\n         [str6 (string-append str5 str2)]\n         [str7 (string-append str6 str3)]\n         [str8 (string-append str7 str2)]\n         [str9 (string-append str8 str3)]\n         [str10 (string-append str9 str2)]\n         [str11 (string-append str10 str3)]\n         [str12 (string-append str11 str2)]\n         [str13 (string-append str12 str3)]\n         [str14 (string-append str13 str2)]\n         [str15 (string-append str14 str3)]\n         [str16 (string-append str15 str2)]\n         [str17 (string-append str16 str3)]\n         [str18 (string-append str17 str2)]\n         [str19 (string-append str18 str3)]\n         [str20 (string-append str19 str2)]\n         [str21 (string-append str20 str3)]\n         [str22 (string-append str21 str2)]\n         [str23 (string-append str22 str3)]\n         [str24 (string-append str23 str2)]\n         [str25 (string-append str24 str3)]\n         [str26 (string-append str25 str2)]\n         [str27 (string-append str26 str3)]\n         [str28 (string-append str27 str2)]\n         [str29 (string-append str28 str3)]\n         [str30 (string-append str29 str2)]\n         [str31 (string-append str30 str3)]\n         [str32 (string-append str31 str2)]\n         [str33 (string-append str32 str3)]\n         [str34 (string-append str33 str2)]\n         [str35 (string-append str34 str3)]\n         [str36 (string-append str35 str2)]\n         [str37 (string-append str36 str3)]\n         [str38",
    "  (let ((str2 (string-append str1 str1)))\n    (for/first ([i (in-range (string-length str1))])\n      (string-index str2 (substring str1 i (+ i 1))))))\n",
    "  (let ([chars (string->list str1)])\n    (for/first ([chars chars]\n                #:when (member (car chars) (cdr chars)))\n      (car chars))))\n",
    "  (let ((str2 (string-append str1 str1)))\n    (for/first ([i (in-range (string-length str1))])\n      (if (string-contains str2 (substring str1 i (add1 i)))\n          (substring str1 i (add1 i))))))\n",
    "  (define (helper str1 str2)\n    (cond\n      [(empty? str1) (error \"No repeated characters\")]\n      [(char=? (first str1) (first str2)) (first str1)]\n      [else (helper (rest str1) (string-append str2 (string (first str1))))]))\n  (helper str1 \"\"))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (and (not (char=? (string-ref str1 i) #\\ ))\n           (string-contains str2 (string-ref str1 i) (+ i 1))))))\n",
    "  (let ([chars (string->list str1)])\n    (for/first ([c (in-list chars)]\n                #:when (member c (cdr chars)))\n      c)))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (string-index str2 (substring str1 i (+ i 1)))\n      #:when (= i (string-index str2 (substring str1 i (+ i 1)))))))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (and (char=? (string-ref str1 i) (string-ref str2 (+ i (string-length str1))))\n           (string-ref str1 i)))))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (string-index str2 (substring str1 i (+ i 1)))\n      (not (= i (string-index str2 (substring str1 i (+ i 1))))))))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))]\n                #:when (string-contains str2 (substring str1 i (+ i 1))))\n      (substring str1 i (+ i 1)))))\n",
    "  (let ([str (string->list str1)])\n    (for/first ([ch (in-list str)]\n                #:when (member ch (cdr str)))\n      ch)))\n",
    "  (let loop ([str str1] [i 0] [j 1])\n    (if (&gt;= i (string-length str))\n        #f\n        (if (string-contains str (substring str i j))\n            (substring str i j)\n            (loop str (+ i 1) (+ j 1))))))\n",
    "  (define (helper str1 i)\n    (if (= i (string-length str1))\n        #f\n        (if (string-contains str1 (string-ref str1 i))\n            (string-ref str1 i)\n            (helper str1 (+ i 1)))))\n  (helper str1 0))\n",
    "  (let ((str2 (string-append str1 str1)))\n    (for/first ([i (in-range (string-length str1))])\n      (if (string-contains str2 (substring str1 i (+ i 1)))\n          (substring str1 i (+ i 1))))))\n",
    "  (let ((str2 (string-append str1 str1)))\n    (for/first ([i (in-range (string-length str1))])\n      (let ((substr (substring str2 i (+ i (string-length str1)))))\n        (if (string-contains? substr (string-ref str1 i))\n            (string-ref str1 i))))))\n",
    "  (define (first_repeated_char_helper str1 str2)\n    (cond\n      [(empty? str1) #f]\n      [(member (first str1) str2) (first str1)]\n      [else (first_repeated_char_helper (rest str1) (append str2 (list (first str1))))]))\n  (first_repeated_char_helper str1 '()))\n",
    "  (define (helper str1 i)\n    (if (= i (string-length str1))\n        #f\n        (if (string-contains str1 (string-ref str1 i))\n            (string-ref str1 i)\n            (helper str1 (+ i 1)))))\n  (helper str1 0))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (if (string=? (substring str1 i (+ i 1))\n                    (substring str2 (+ i 1) (+ i 2)))\n          (substring str1 i (+ i 1))))))\n"
  ]
}