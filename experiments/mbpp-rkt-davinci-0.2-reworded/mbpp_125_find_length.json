{
  "name": "mbpp_125_find_length",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0) (loop (+ i 1) j (max diff max-diff))]\n             [else (loop (+ i 1) (+ j 1) (max diff max-diff))]))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; (- count) max-count) (- count) max-count))))))\n",
    "  (let loop ([string string] [count 0] [max-count 0])\n    (cond [(empty? string) max-count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max-count))]\n          [else (loop (rest string) (sub1 count) (max count max-count))])))\n",
    "  (length string))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([zero-count (count (string-ref string i) #\\0)]\n               [one-count (count (string-ref string i) #\\1)])\n           (loop (+ i 1) j (max max (- zero-count one-count))))]))))\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [(equal? (first string) #\\0) (loop (rest string) (- count 1))])))\n",
    "  (let ([length (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond [(= i length) max-diff]\n            [(= j length) (loop (+ i 1) (+ i 1) max-diff)]\n            [else (let ([diff (- (count-char #\\1 (substring string i j))\n                                 (count-char #\\0 (substring string i j)))])\n                    (if (&gt; diff max-diff)\n                        (loop i (+ j 1) diff)\n                        (loop i (+ j 1) max-diff)))]))))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) (max max-count count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n",
    "  (let loop ((string string)\n             (count 0))\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          ((equal? (car string) #\\1) (loop (cdr string) (- count 1)))\n          (else (error \"Invalid input\")))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [(= (string-ref string i) #\\0)\n         (loop i (+ j 1) (max max (- j i)))]\n        [else (loop i (+ j 1) max)]))))\n</code>\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0] [max-count 0])\n      (cond\n        [(= i len) max-count]\n        [(= j len) (loop (+ i 1) i 0 max-count)]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (+ count 1) (max max-count count))]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (- count 1) (max max-count (- 0 count)))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-diff 0))\n    (cond ((null? string) max-diff)\n          ((char=? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (max max-diff (sub1 count))))\n          ((char=? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (max max-diff (add1 count)))))))\n",
    "  (let ((len (string-length string)))\n    (let loop ((i 0) (j 0) (max 0))\n      (if (= i len)\n          max\n          (let ((count0 (count (string-ref string i) #\\0))\n                (count1 (count (string-ref string i) #\\1)))\n            (if (&gt; (- count0 count1) max)\n                (loop (+ i 1) j (- count0 count1))\n                (loop (+ i 1) j max)))))))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) max-count)]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max-count (abs count)))])))\n",
    "  (cond [(empty? string) 0]\n        [else (add1 (find_length (rest string)))]))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n"
  ]
}