{
  "name": "mbpp_125_find_length",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n(define (find_length string)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_length))\n    (check-equal? (candidate \"11000010001\") 6)\n    (check-equal? (candidate \"10111\") 1)\n    (check-equal? (candidate \"11011101100101\") 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0) (loop (+ i 1) j (max diff max-diff))]\n             [else (loop (+ i 1) (+ j 1) (max diff max-diff))]))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; (- count) max-count) (- count) max-count))))))\n",
    "  (let loop ([string string] [count 0] [max-count 0])\n    (cond [(empty? string) max-count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max-count))]\n          [else (loop (rest string) (sub1 count) (max count max-count))])))\n",
    "  (length string))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([zero-count (count (string-ref string i) #\\0)]\n               [one-count (count (string-ref string i) #\\1)])\n           (loop (+ i 1) j (max max (- zero-count one-count))))]))))\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [(equal? (first string) #\\0) (loop (rest string) (- count 1))])))\n",
    "  (let ([length (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond [(= i length) max-diff]\n            [(= j length) (loop (+ i 1) (+ i 1) max-diff)]\n            [else (let ([diff (- (count-char #\\1 (substring string i j))\n                                 (count-char #\\0 (substring string i j)))])\n                    (if (&gt; diff max-diff)\n                        (loop i (+ j 1) diff)\n                        (loop i (+ j 1) max-diff)))]))))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) (max max-count count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n",
    "  (let loop ((string string)\n             (count 0))\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          ((equal? (car string) #\\1) (loop (cdr string) (- count 1)))\n          (else (error \"Invalid input\")))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [(= (string-ref string i) #\\0)\n         (loop i (+ j 1) (max max (- j i)))]\n        [else (loop i (+ j 1) max)]))))\n</code>\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0] [max-count 0])\n      (cond\n        [(= i len) max-count]\n        [(= j len) (loop (+ i 1) i 0 max-count)]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (+ count 1) (max max-count count))]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (- count 1) (max max-count (- 0 count)))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-diff 0))\n    (cond ((null? string) max-diff)\n          ((char=? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (max max-diff (sub1 count))))\n          ((char=? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (max max-diff (add1 count)))))))\n",
    "  (let ((len (string-length string)))\n    (let loop ((i 0) (j 0) (max 0))\n      (if (= i len)\n          max\n          (let ((count0 (count (string-ref string i) #\\0))\n                (count1 (count (string-ref string i) #\\1)))\n            (if (&gt; (- count0 count1) max)\n                (loop (+ i 1) j (- count0 count1))\n                (loop (+ i 1) j max)))))))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) max-count)]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max-count (abs count)))])))\n",
    "  (cond [(empty? string) 0]\n        [else (add1 (find_length (rest string)))]))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (let* ([length (string-length string)]\n         [zeros (count (lambda (x) (= x #\\0)) string)]\n         [ones (count (lambda (x) (= x #\\1)) string)])\n    (- zeros ones)))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(equal? (first string) #\\0)\n           (loop (rest string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count))]\n          [else\n           (loop (rest string)\n                 (sub1 count)\n                 (if (&gt; count max-count) count max-count))])))\n</code>\n",
    "  (define (find_length_iter string count max)\n    (if (null? string)\n        max\n        (let ([char (car string)])\n          (if (equal? char #\\0)\n              (find_length_iter (cdr string) (- count 1) (max max (- count)))\n              (find_length_iter (cdr string) (+ count 1) (max max count))))))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (if (= len 0)\n        0\n        (let ([first (string-ref string 0)])\n          (if (char=? first #\\0)\n              (add1 (find_length (substring string 1)))\n              (sub1 (find_length (substring string 1))))))))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-diff 0])\n    (cond [(empty? string) max-diff]\n          [(char=? (first string) #\\1)\n           (loop (rest string)\n                 (add1 count)\n                 (max max-diff (- count)))]\n          [else\n           (loop (rest string)\n                 (sub1 count)\n                 (max max-diff count))])))\n",
    "  (if (string=? string \"\")\n      0\n      (+ 1 (find_length (substring string 1)))))\n",
    "  (let loop ([string string] [count 0] [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) (max max-count count))]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max-count (abs count)))])))\n</code>\n",
    "  (let ([len (string-length string)])\n    (if (equal? len 0)\n        0\n        (let ([first-char (string-ref string 0)])\n          (if (equal? first-char #\\0)\n              (add1 (find_length (substring string 1)))\n              (sub1 (find_length (substring string 1))))))))\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length string))])\n      (if (equal? (string-ref string i) #\\1)\n          (set! count (+ count 1))\n          (set! count (- count 1))))\n    count))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0)\n           (loop (rest string) (add1 count) (if (&gt; count max) count max))]\n          [else\n           (loop (rest string) (sub1 count) (if (&gt; count max) count max))])))\n</code>\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(char=? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(string-ref string 0) (find_length_iter (rest string) (add1 count) max)]\n      [else (find_length_iter (rest string) (sub1 count) (max (abs count) max))]))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= (string-ref string i) #\\1) (loop (+ i 1) j (+ count 1))]\n        [else (loop (+ i 1) j (- count 1))]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max 0])\n      (if (&lt; i len)\n          (let ([zero-count (count (lambda (x) (char=? x #\\0)) (substring string i j))])\n            (loop (+ i 1) j (max max (- j i zero-count))))\n          max))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max 0])\n      (cond [(= i j) max]\n            [else\n             (let ([sub (substring string i j)])\n               (let ([diff (abs (- (count-substrings sub #\\0) (count-substrings sub #\\1)))]\n                     [new-max (if (&gt; diff max) diff max)])\n                 (loop (+ i 1) j new-max)))]))))\n</code>\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) max-count)]\n          [(char=? (first string) #\\1) (loop (rest string) (sub1 count) (max max-count (abs count)))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (let ((count 0))\n    (for ([i (in-range (string-length string))])\n      (if (equal? (string-ref string i) #\\1)\n          (set! count (+ count 1))\n          (set! count (- count 1))))\n    count))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let ([len (string-length string)])\n    (define (find_length-iter string i j)\n      (cond\n        [(= i len) j]\n        [(= (string-ref string i) #\\0) (find_length-iter string (+ i 1) (+ j 1))]\n        [(= (string-ref string i) #\\1) (find_length-iter string (+ i 1) (- j 1))]))\n    (find_length-iter string 0 0)))\n",
    "  (let loop ([string string] [count 0])\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n      [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_iter string count max)\n    (if (null? string)\n        max\n        (let ((new-count (if (equal? (car string) #\\0)\n                             (- count 1)\n                             (+ count 1))))\n          (find_length_iter (cdr string) new-count (max max (abs new-count))))))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length_helper string count)\n    (if (empty? string)\n        count\n        (if (equal? (first string) #\\0)\n            (find_length_helper (rest string) (- count 1))\n            (find_length_helper (rest string) (+ count 1)))))\n  (find_length_helper string 0))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n",
    "  (let ((zeros 0)\n        (ones 0)\n        (max-diff 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0) (set! zeros (+ zeros 1))]\n        [(string=? (string-ref string i) #\\1) (set! ones (+ ones 1))]))\n    (set! max-diff (abs (- zeros ones)))\n    max-diff))\n",
    "  (let loop ((string string) (count 0))\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond ((null? string) max)\n          ((= (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; (- count) max) (- count) max)))\n          ((= (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; (add1 count) max) (add1 count) max)))\n          (else (error \"Invalid character\")))))\n</code>\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max))]\n          [(equal? (first string) #\\1) (loop (rest string) (sub1 count) (max count max))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (let ([length (string-length string)])\n    (if (zero? length)\n        0\n        (let ([first-char (string-ref string 0)])\n          (if (char=? first-char #\\0)\n              (add1 (find_length (substring string 1)))\n              (sub1 (find_length (substring string 1))))))))\n",
    "  (let ((len (string-length string)))\n    (if (= len 0)\n        0\n        (let ((first-char (substring string 0 1)))\n          (if (string=? first-char \"1\")\n              (+ 1 (find_length (substring string 1 len)))\n              (find_length (substring string 1 len)))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) (+ i 1) max)]\n        [else\n         (let ([count0 (count-substring \"0\" (substring string i j))]\n               [count1 (count-substring \"1\" (substring string i j))])\n           (let ([diff (- count0 count1)])\n             (if (&gt; diff max)\n                 (loop i (+ j 1) diff)\n                 (loop i (+ j 1) max))))]))))\n</code>\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let ((length (string-length string)))\n    (if (zero? length)\n        0\n        (let ((first-char (substring string 0 1)))\n          (if (equal? first-char \"0\")\n              (add1 (find_length (substring string 1 length)))\n              (sub1 (find_length (substring string 1 length))))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0] [max-count 0])\n      (cond\n        [(= i len) max-count]\n        [(= (string-ref string i) #\\0)\n         (loop (+ i 1) j (+ count 1) (max max-count count))]\n        [(= (string-ref string i) #\\1)\n         (loop (+ i 1) j (- count 1) (max max-count count))]))))\n",
    "  (define (helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (helper (cdr string) (+ count 1))\n            (helper (cdr string) (- count 1)))))\n  (helper string 0))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max))]\n          [else (loop (rest string) (sub1 count) (max count max))])))\n",
    "  (define (find_length_helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (find_length_helper (cdr string) (+ count 1))\n            (find_length_helper (cdr string) (- count 1)))))\n  (find_length_helper string 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else (error \"Invalid character\")))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string]\n             [max-diff 0]\n             [count-0 0]\n             [count-1 0])\n    (cond [(empty? string) max-diff]\n          [(equal? (first string) #\\0)\n           (loop (rest string)\n                 (max max-diff (- count-0 count-1))\n                 (+ count-0 1)\n                 count-1)]\n          [else\n           (loop (rest string)\n                 (max max-diff (- count-0 count-1))\n                 count-0\n                 (+ count-1 1))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let* ([sub (substring string i j)]\n                [ones (count-ones sub)]\n                [zeros (- (string-length sub) ones)])\n           (loop i (+ j 1) (max max (abs (- ones zeros)))))]))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (abs (- (count-char (substring string i j) #\\1)\n                             (count-char (substring string i j) #\\0)))]\n               [new-max-diff (if (&gt; diff max-diff) diff max-diff)])\n           (loop i (+ j 1) new-max-diff))]))))\n",
    "  (let ((len (string-length string)))\n    (if (zero? len)\n        0\n        (let ((first-char (substring string 0 1)))\n          (if (equal? first-char \"1\")\n              (add1 (find_length (substring string 1 len)))\n              (find_length (substring string 1 len)))))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let ((length (string-length string)))\n    (cond\n      [(= length 0) 0]\n      [(= length 1) (if (string=? (substring string 0 1) \"0\") 1 -1)]\n      [else (let ((left (substring string 0 (/ length 2)))\n                   (right (substring string (/ length 2) length)))\n              (max (find_length left)\n                   (find_length right)\n                   (+ (find_length left) (find_length right))))])))\n",
    "  (let ((zeros (count (lambda (x) (= x #\\0)) string))\n        (ones (count (lambda (x) (= x #\\1)) string)))\n    (if (> zeros ones)\n        (- zeros ones)\n        (- ones zeros))))\n",
    "  (let ([len (string-length string)])\n    (let ([zeros (count (lambda (c) (char=? c #\\0)) string)])\n      (let ([ones (- len zeros)])\n        (let ([diff (- zeros ones)])\n          (let ([max-diff (if (negative? diff) (- diff) diff)])\n            (let ([max-zeros (if (negative? diff) ones zeros)])\n              (let ([max-ones (- len max-zeros)])\n                (let ([max-substring (substring string 0 max-ones)])\n                  (list max-diff max-zeros max-ones max-substring))))))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-diff 0])\n    (cond [(empty? string) max-diff]\n          [else\n           (let ([char (first string)])\n             (cond [(char=? char #\\0)\n                    (loop (rest string)\n                          (+ count 1)\n                          (max max-diff (- count)))]\n                   [else\n                    (loop (rest string)\n                          (- count 1)\n                          (max max-diff count))]))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (cond\n        [(= i j) max-diff]\n        [else\n         (let ([diff (- (count-substrings string #\\1 i j)\n                        (count-substrings string #\\0 i j))])\n           (loop (+ i 1) j (max max-diff (abs diff))))]))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [(= j len) (loop (+ i 1) i max-diff)]\n        [else\n         (let ([diff (- (count-char #\\1 (substring string i j))\n                        (count-char #\\0 (substring string i j)))])\n           (loop i (+ j 1) (max max-diff (abs diff))))]))))\n",
    "  (define (count_ones string)\n    (if (null? string)\n        0\n        (+ (if (= (string-ref string 0) #\\1) 1 0)\n           (count_ones (substring string 1)))))\n  (define (count_zeros string)\n    (if (null? string)\n        0\n        (+ (if (= (string-ref string 0) #\\0) 1 0)\n           (count_zeros (substring string 1)))))\n  (define (find_max_diff string)\n    (if (null? string)\n        0\n        (max (- (count_ones string) (count_zeros string))\n             (find_max_diff (substring string 1)))))\n  (find_max_diff string))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (define (find_length_helper string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (find_length_helper (cdr string) (add1 count)))\n          ((equal? (car string) #\\1) (find_length_helper (cdr string) (sub1 count)))\n          (else (find_length_helper (cdr string) count))))\n  (find_length_helper string 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([diff (- (count-char #\\1 (substring string i j))\n                        (count-char #\\0 (substring string i j)))])\n           (if (&gt; diff max)\n               (loop i (+ j 1) diff)\n               (loop i (+ j 1) max)))]))))\n",
    "  (let loop ((string string)\n             (max-diff 0)\n             (count 0))\n    (cond ((null? string) max-diff)\n          ((= (car string) #\\0) (loop (cdr string)\n                                      (max max-diff count)\n                                      (- count 1)))\n          ((= (car string) #\\1) (loop (cdr string)\n                                      (max max-diff count)\n                                      (+ count 1)))\n          (else (error \"Invalid character\")))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(char=? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (max-diff 0)\n             (count 0))\n    (cond ((null? string) max-diff)\n          ((= (car string) #\\0) (loop (cdr string)\n                                      (max max-diff count)\n                                      (- count 1)))\n          ((= (car string) #\\1) (loop (cdr string)\n                                      (max max-diff count)\n                                      (+ count 1)))\n          (else (error \"Invalid character\")))))\n</code>\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (define (find_length_helper string count length)\n    (cond\n      [(empty? string) length]\n      [(= (first string) #\\0) (find_length_helper (rest string) (+ count 1) length)]\n      [(= (first string) #\\1) (find_length_helper (rest string) (- count 1) (max length (abs count)))]))\n  (find_length_helper string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (cond [(= i (string-length string)) max]\n          [(= (string-ref string i) #\\0) (loop (+ i 1) (+ j 1) (max max (- j)))]\n          [else (loop (+ i 1) (- j 1) (max max (- j)))])))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (if (= i len)\n          max\n          (let ([count0 (count (string-ref string i) \"0\")]\n                [count1 (count (string-ref string i) \"1\")])\n            (loop (+ i 1) (+ j 1) (max max (- j count0 count1))))))))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_helper string i j)\n    (cond\n      [(= i j) 0]\n      [(= (string-ref string i) #\\0) (+ 1 (find_length_helper string (+ i 1) j))]\n      [else (- 1 (find_length_helper string (+ i 1) j))]))\n  (let loop ([i 0] [j (string-length string)])\n    (cond\n      [(= i j) 0]\n      [else (max (find_length_helper string i j) (loop (+ i 1) j))])))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (loop (rest string) (+ count 1) max)]\n          [(char=? (first string) #\\1) (loop (rest string) (- count 1) (max max (- count)))])))\n",
    "  (string-length string))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) (max max-count count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (max max-count (abs count)))))))\n",
    "  (let ([len (string-length string)])\n    (let ([zeros (count-zeros string)])\n      (let ([ones (- len zeros)])\n        (let ([diff (- zeros ones)])\n          (let ([abs-diff (abs diff)])\n            (if (zero? diff)\n                (if (zero? zeros)\n                    0\n                    (- len 1))\n                abs-diff)))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (empty? string)\n        count\n        (loop (rest string) (add1 count)))))\n",
    "  (let ((count 0)\n        (max_count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0)\n         (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1)\n         (set! count (sub1 count))]))\n      (if (&gt; count max_count)\n          (set! max_count count)))\n    max_count))\n",
    "  (define (find_length_helper string count)\n    (if (empty? string)\n        count\n        (if (equal? (first string) #\\0)\n            (find_length_helper (rest string) (+ count 1))\n            (find_length_helper (rest string) (- count 1)))))\n  (find_length_helper string 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond ((null? string) max)\n          ((= (car string) #\\0)\n           (loop (cdr string) (add1 count)\n                 (if (&gt; (- count) max) (- count) max)))\n          ((= (car string) #\\1)\n           (loop (cdr string) (sub1 count)\n                 (if (&gt; (add1 count) max) (add1 count) max)))\n          (else (error \"Invalid character\")))))\n</code>\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (max max (- j i)))]\n        [else (loop i (+ j 1) max)]))))\n",
    "  (define (find_length_iter string count max)\n    (cond ((null? string) max)\n          ((= (car string) #\\0) (find_length_iter (cdr string) (add1 count) max))\n          ((= (car string) #\\1) (find_length_iter (cdr string) (sub1 count) (max max count)))\n          (else (find_length_iter (cdr string) count max))))\n  (find_length_iter string 0 0))\n",
    "  (length string))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count (car string))))))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count) (max count max))]\n          [else (loop (rest string) (sub1 count) (max count max))])))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(char=? (first string) #\\1) (find_length_helper (rest string) (+ count 1))]\n      [(char=? (first string) #\\0) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) (max count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (max count max-count)))\n          (else (error \"Invalid character\")))))\n",
    "  (let ([len (string-length string)])\n    (let ([zeros (make-vector len 0)]\n          [ones (make-vector len 0)])\n      (let loop ([i 0])\n        (cond\n          [(= i len) (vector-ref zeros (- len 1))]\n          [(string=? (string-ref string i) #\\0)\n           (vector-set! zeros i (+ (vector-ref zeros (- i 1)) 1))\n           (vector-set! ones i (vector-ref ones (- i 1)))\n           (loop (+ i 1))]\n          [(string=? (string-ref string i) #\\1)\n           (vector-set! zeros i (vector-ref zeros (- i 1)))\n           (vector-set! ones i (+ (vector-ref ones (- i 1)) 1))\n           (loop (+ i 1))])))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(string=? (first string) \"0\") (find_length_iter (rest string) (add1 count) (max max count))]\n      [else (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (add1 (find_length (rest string)))]))\n",
    "  (let loop ((string string)\n             (max-diff 0)\n             (count 0))\n    (cond ((null? string) max-diff)\n          ((char=? (car string) #\\0)\n           (loop (cdr string)\n                 (max max-diff (- count 1))\n                 (- count 1)))\n          ((char=? (car string) #\\1)\n           (loop (cdr string)\n                 (max max-diff count)\n                 (+ count 1)))\n          (else (error \"Invalid character\")))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (if (= i len)\n          max-diff\n          (let ([c (string-ref string i)])\n            (cond\n              [(char=? c #\\0) (loop (+ i 1) (+ j 1) (max max-diff (- j i)))]\n              [(char=? c #\\1) (loop (+ i 1) j (max max-diff (- j i)))]))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [(= (string-ref string i) #\\0) (loop i (+ j 1) (+ count 1))]\n        [(= (string-ref string i) #\\1) (loop i (+ j 1) (- count 1))]))))\n",
    "  (let ([length (string-length string)])\n    (cond\n      [(= length 0) 0]\n      [(= length 1) 1]\n      [else\n       (let ([first-char (string-ref string 0)])\n         (cond\n           [(= first-char #\\0)\n            (let ([second-char (string-ref string 1)])\n              (cond\n                [(= second-char #\\0)\n                 (let ([rest-of-string (substring string 2)])\n                   (find_length rest-of-string))]\n                [(= second-char #\\1)\n                 (let ([rest-of-string (substring string 2)])\n                   (find_length rest-of-string))]))]\n           [(= first-char #\\1)\n            (let ([second-char (string-ref string 1)])\n              (cond\n                [(= second-char #\\0)\n                 (let ([rest-of-string (substring string 2)])\n                   (find_length rest-of-string))]\n                [(= second-char #\\1)\n                 (let ([rest-of-string (substring string 2)])\n                   (find_length rest-of-string))]))])))])))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (+ count 1))]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max 0])\n      (if (= i j)\n          max\n          (let ([count (count-substring string i j)])\n            (loop (+ i 1) j (max max count)))))))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((char=? (car string) #\\0) (loop (cdr string) (+ count 1) max-count))\n          ((char=? (car string) #\\1) (loop (cdr string) (- count 1) (max max-count (- count)))))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(char=? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (max-diff 0)\n             (count 0))\n    (cond ((null? string) max-diff)\n          ((= (car string) #\\0)\n           (loop (cdr string)\n                 (max max-diff (- count 1))\n                 (- count 1)))\n          ((= (car string) #\\1)\n           (loop (cdr string)\n                 (max max-diff count)\n                 (+ count 1))))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (helper string count)\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (helper (rest string) (+ count 1))]\n          [(equal? (first string) #\\1) (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper (rest string) (sub1 count))]))\n  (define (helper2 string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper2 (rest string) (sub1 count))]\n      [(equal? (first string) #\\1) (helper2 (rest string) (add1 count))]))\n  (define (helper3 string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper3 (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper3 (rest string) (sub1 count))]))\n  (define (helper4 string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper4 (rest string) (sub1 count))]\n      [(equal? (first string) #\\1) (helper4 (rest string) (add1 count))]))\n  (define (helper5 string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper5 (rest string) (add1 count))]\n      [(equal? (first string) #\\1) (helper5 (rest string) (sub1 count))]))\n  (define (helper6 string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper6 (rest string) (sub1 count))]\n      [(equal? (first string) #\\1) (helper6 (rest string) (add1 count))]))\n  (define (helper7 string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper7",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max-diff 0])\n      (cond\n        [(= i len) max-diff]\n        [else\n         (let ([diff (- j i)])\n           (cond\n             [(= (string-ref string i) #\\0)\n              (loop (+ i 1) j (max max-diff diff))]\n             [else\n              (loop (+ i 1) (+ j 1) (max max-diff diff))]))]))))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n",
    "  (define (find_length_helper string count max_count)\n    (cond\n      [(empty? string) max_count]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (- count 1) (max max_count (- count 1)))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (+ count 1) (max max_count count))]))\n  (find_length_helper string 0 0))\n",
    "  (define (find_length_helper string count)\n    (cond\n      [(empty? string) count]\n      [(string=? (first string) \"0\") (find_length_helper (rest string) (+ count 1))]\n      [(string=? (first string) \"1\") (find_length_helper (rest string) (- count 1))]))\n  (find_length_helper string 0))\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n      [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([count (count-matches (substring string i j) \"1\")])\n           (loop i (+ j 1) (max max (- j i count))))]))))\n",
    "  (let loop ([string string]\n             [max-length 0]\n             [length 0])\n    (cond [(empty? string) max-length]\n          [(equal? (first string) #\\0)\n           (loop (rest string)\n                 (max max-length length)\n                 (add1 length))]\n          [else\n           (loop (rest string)\n                 (max max-length length)\n                 (sub1 length))])))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_helper string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (add1 count) (if (&gt; count max-count) count max-count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (sub1 count) (if (&gt; (- count) max-count) (- count) max-count)))\n          (else (error \"Unexpected character\")))))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count (car string))))))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond ((null? string) max)\n          ((equal? (car string) #\\0)\n           (loop (cdr string) (- count 1) (max count)))\n          ((equal? (car string) #\\1)\n           (loop (cdr string) (+ count 1) (max count)))\n          (else (error \"Invalid input\")))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([diff (abs (- (count-matches #\\1 (substring string i j))\n                             (count-matches #\\0 (substring string i j))))])\n           (if (&gt; diff max)\n               (loop i (+ j 1) diff)\n               (loop i (+ j 1) max)))]))))\n",
    "  (let ([len (string-length string)])\n    (let ([zeros (count-zeros string)])\n      (let ([ones (- len zeros)])\n        (let ([diff (- zeros ones)])\n          (let ([diff-abs (abs diff)])\n            (if (or (= diff 0) (= diff-abs 1))\n                1\n                (let ([diff-abs-1 (- diff-abs 1)])\n                  (if (or (= diff-abs-1 0) (= diff-abs-1 1))\n                      2\n                      diff-abs-1))))))))))\n",
    "  (let ((zeros (count-zeros string))\n        (ones (count-ones string)))\n    (if (&gt; zeros ones)\n        (- zeros ones)\n        (- ones zeros))))\n",
    "  (let* ([len (string-length string)]\n         [zeros (count (lambda (x) (= x #\\0)) string)]\n         [ones (count (lambda (x) (= x #\\1)) string)])\n    (if (= zeros ones)\n        len\n        (- len (abs (- zeros ones))))))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (+ 1 (find_length (rest string)))]))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (+ count 1) (max max count))]))\n  (find_length_helper string 0 0))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(string-contains? \"0\" (first string)) (loop (rest string) (+ count 1))]\n          [(string-contains? \"1\" (first string)) (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond\n      [(empty? string) max-count]\n      [(char=? (first string) #\\0)\n       (loop (rest string)\n             (add1 count)\n             (if (&gt; count max-count) count max-count))]\n      [else\n       (loop (rest string)\n             (sub1 count)\n             (if (&gt; (abs count) max-count) (abs count) max-count))])))\n</code>\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ((string string)\n             (count 0))\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (loop (cdr string) (+ count 1)))\n          ((equal? (car string) #\\1) (loop (cdr string) (- count 1)))\n          (else (error \"Invalid character\")))))\n",
    "  (let loop ((string string) (count 0))\n    (if (null? string)\n        count\n        (loop (cdr string) (+ count 1)))))\n",
    "  (let ((count 0)\n        (max-diff 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0)\n         (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1)\n         (set! count (sub1 count))]))\n      (cond\n        [(> count max-diff)\n         (set! max-diff count)])\n      (cond\n        [(< count 0)\n         (set! count 0)]))\n    max-diff))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\1) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string]\n             [count 0]\n             [max-count 0])\n    (cond [(empty? string) max-count]\n          [else\n           (if (equal? (first string) #\\0)\n               (loop (rest string) (add1 count) max-count)\n               (loop (rest string) (sub1 count) (max max-count (abs count))))])))\n",
    "  (define (helper string count)\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (helper (rest string) (add1 count))]\n          [else (helper (rest string) (sub1 count))]))\n  (helper string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_helper (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_helper (rest string) (sub1 count) (max max (abs count)))]))\n  (find_length_helper string 0 0))\n",
    "  (let loop ([string string]\n             [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (+ count 1))]\n          [else (loop (rest string) (- count 1))])))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond [(= i len) max]\n            [(= j len) (loop (+ i 1) i max)]\n            [else\n             (let ([sub (substring string i j)])\n               (let ([diff (abs (- (count-substrings sub \"0\")\n                                   (count-substrings sub \"1\")))]\n                     [new-max (if (&gt; diff max) diff max)])\n                 (loop i (+ j 1) new-max)))])\n      )\n    )\n  )\n</code>\n",
    "  (let loop ([string string] [count 0] [max-count 0])\n    (cond [(empty? string) max-count]\n          [(equal? (first string) #\\0)\n           (loop (rest string) (add1 count) (max count max-count))]\n          [(equal? (first string) #\\1)\n           (loop (rest string) (sub1 count) (max (abs count) max-count))])))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(char=? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max-count 0))\n    (cond ((null? string) max-count)\n          ((char=? (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max-count) count max-count)))\n          (else (loop (cdr string)\n                      (sub1 count)\n                      (if (&gt; (- count) max-count) (- count) max-count))))))\n",
    "  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(= (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max count))]\n          [(= (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond\n      [(null? string) max]\n      [(equal? (car string) #\\0) (loop (cdr string) (add1 count) max)]\n      [(equal? (car string) #\\1) (loop (cdr string) (sub1 count) (max (abs count) max))])))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [else (let ([c (first string)])\n                  (cond [(= c #\\0) (loop (rest string) (+ count 1) max)]\n                        [(= c #\\1) (loop (rest string) (- count 1) (max max (- count)))]\n                        [else (error \"invalid character\")]))])))\n",
    "  (let loop ([string string] [count 0])\n    (cond [(empty? string) count]\n          [(equal? (first string) #\\0) (loop (rest string) (add1 count))]\n          [else (loop (rest string) (sub1 count))])))\n",
    "  (let ((zeros (count (lambda (x) (equal? x #\\0)) string))\n        (ones (count (lambda (x) (equal? x #\\1)) string)))\n    (abs (- zeros ones))))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(string-ref string 0) (helper (rest string) (+ count 1))]\n      [else (helper (rest string) (- count 1))]))\n  (helper string 0))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\0) (find_length_iter (rest string) (add1 count) (max max count))]\n      [else (find_length_iter (rest string) (sub1 count) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (helper string count)\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (helper (cdr string) (+ count 1))\n            (helper (cdr string) (- count 1)))))\n  (helper string 0))\n",
    "  (cond\n    [(empty? string) 0]\n    [else (add1 (find_length (rest string)))]))\n",
    "  (define (iter string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (iter (rest string) (add1 count))]\n      [else (iter (rest string) (sub1 count))]))\n  (define (find_max string count max)\n    (cond\n      [(empty? string) max]\n      [(> (abs (iter string count)) max) (find_max (rest string) count (abs (iter string count)))]\n      [else (find_max (rest string) count max)]))\n  (find_max string 0 0))\n",
    "  (define (helper string count)\n    (cond\n      [(empty? string) count]\n      [(equal? (first string) #\\0) (helper (rest string) (- count 1))]\n      [(equal? (first string) #\\1) (helper (rest string) (+ count 1))]))\n  (helper string 0))\n",
    "  (let loop ([string string] [length 0])\n    (if (null? string)\n        length\n        (loop (cdr string) (+ length 1)))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max (abs count) max))]))\n  (find_length_iter string 0 0))\n",
    "  (let ((count 0)\n        (max-count 0))\n    (for ([i (in-range (string-length string))])\n      (cond\n        [(string=? (string-ref string i) #\\0) (set! count (add1 count))]\n        [(string=? (string-ref string i) #\\1) (set! count (sub1 count))]))\n      (cond\n        [(> count max-count) (set! max-count count)]))\n    max-count))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (if (= i len)\n          count\n          (let ([c (string-ref string i)])\n            (if (or (= c #\\0) (= c #\\1))\n                (loop (+ i 1) j (+ count 1))\n                (loop (+ i 1) j count)))))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max (abs count) max))]))\n  (find_length_iter string 0 0))\n",
    "  (let loop ((string string)\n             (count 0)\n             (max 0))\n    (cond ((null? string) max)\n          ((= (car string) #\\0)\n           (loop (cdr string)\n                 (add1 count)\n                 (if (&gt; count max) count max)))\n          (else\n           (loop (cdr string)\n                 (sub1 count)\n                 (if (&gt; (- count) max) (- count) max))))))\n</code>\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (define (count_zeros string)\n    (if (string=? string \"\")\n        0\n        (if (string=? (substring string 0 1) \"0\")\n            (+ 1 (count_zeros (substring string 1)))\n            (count_zeros (substring string 1)))))\n  (define (count_ones string)\n    (if (string=? string \"\")\n        0\n        (if (string=? (substring string 0 1) \"1\")\n            (+ 1 (count_ones (substring string 1)))\n            (count_ones (substring string 1)))))\n  (define (find_max_diff string)\n    (if (string=? string \"\")\n        0\n        (max (abs (- (count_zeros string) (count_ones string)))\n             (find_max_diff (substring string 1)))))\n  (find_max_diff string))\n",
    "  (let loop ([string string] [max-diff 0] [count 0])\n    (cond [(empty? string) max-diff]\n          [else\n           (let ([char (first string)])\n             (cond [(equal? char #\\0) (loop (rest string) max-diff (- count 1))]\n                   [(equal? char #\\1) (loop (rest string) max-diff (+ count 1))]))])))\n",
    "  (let loop ([string string]\n             [max-diff 0]\n             [count 0])\n    (cond [(empty? string) max-diff]\n          [(char=? (first string) #\\0)\n           (loop (rest string)\n                 (max max-diff (abs (- count (sub1 (string-length string)))))\n                 (add1 count))]\n          [else (loop (rest string)\n                      (max max-diff (abs (- count (sub1 (string-length string)))))\n                      (sub1 count))])))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0)\n           (loop (rest string) (+ count 1) (if (&gt; count max) count max))]\n          [(equal? (first string) #\\1)\n           (loop (rest string) (- count 1) (if (&gt; (- count) max) (- count) max))])))\n",
    "  (define (find_length_iter string count max)\n    (cond [(empty? string) max]\n          [(equal? (first string) #\\0) (find_length_iter (rest string) (- count 1) (max max (- count)))]\n          [(equal? (first string) #\\1) (find_length_iter (rest string) (+ count 1) (max max count))]))\n  (find_length_iter string 0 0))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [max 0])\n      (cond\n        [(= i len) max]\n        [(= j len) (loop (+ i 1) i max)]\n        [else\n         (let ([diff (- (count-char #\\1 string i j)\n                        (count-char #\\0 string i j))])\n           (loop i (+ j 1) (max max diff)))]))))\n",
    "  (define (find_length_iter string count max)\n    (cond\n      [(empty? string) max]\n      [(equal? (first string) #\\0) (find_length_iter (rest string) (add1 count) max)]\n      [(equal? (first string) #\\1) (find_length_iter (rest string) (sub1 count) (max max (- count)))]))\n  (find_length_iter string 0 0))\n",
    "  (define (find_length_helper string count)\n    (cond ((null? string) count)\n          ((equal? (car string) #\\0) (find_length_helper (cdr string) (- count 1)))\n          ((equal? (car string) #\\1) (find_length_helper (cdr string) (+ count 1)))\n          (else (error \"Invalid character\"))))\n  (find_length_helper string 0))\n",
    "  (let loop ((string string) (count 0) (max-count 0))\n    (cond ((null? string) max-count)\n          ((= (string-ref string 0) #\\0)\n           (loop (substring string 1) (add1 count) (max max-count count)))\n          ((= (string-ref string 0) #\\1)\n           (loop (substring string 1) (sub1 count) (max max-count (abs count)))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(= j len) (loop (+ i 1) i count)]\n        [else\n         (let ([char (string-ref string j)])\n           (cond\n             [(= char #\\0) (loop i (+ j 1) (+ count 1))]\n             [else (loop i (+ j 1) (- count 1))]))]))))\n",
    "  (define (find_length_helper string count max)\n    (cond\n      [(empty? string) max]\n      [(char=? (first string) #\\1) (find_length_helper (rest string) (+ count 1) max)]\n      [(char=? (first string) #\\0) (find_length_helper (rest string) (- count 1) (if (&gt; count max) count max))]))\n  (find_length_helper string 0 0))\n</code>\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len])\n      (if (= i j)\n          0\n          (let ([count (count-ones string i j)])\n            (max (loop (+ i 1) j)\n                 (loop i (- j 1))\n                 (- len count)\n                 count))))))\n",
    "  (let loop ([string string] [count 0])\n    (if (null? string)\n        count\n        (if (equal? (car string) #\\0)\n            (loop (cdr string) (+ count 1))\n            (loop (cdr string) (- count 1))))))\n",
    "  (let loop ([string string] [count 0] [max 0])\n    (cond [(empty? string) max]\n          [(char=? (first string) #\\0) (loop (rest string) (add1 count) (max count (- count max)))]\n          [else (loop (rest string) (sub1 count) (max count (- count max)))])))\n",
    "  (let ((len (string-length string)))\n    (if (= len 1)\n        (if (string=? string \"0\")\n            1\n            -1)\n        (let ((left (substring string 0 (/ len 2)))\n              (right (substring string (/ len 2) len)))\n          (+ (find_length left) (find_length right))))))\n",
    "  (let ([len (string-length string)])\n    (let loop ([i 0] [j len] [max-diff 0])\n      (if (&lt; i len)\n          (let ([diff (- (count-substrings string #\\1 i j)\n                         (count-substrings string #\\0 i j))])\n            (loop (+ i 1) j (max max-diff (abs diff))))\n          max-diff))))\n</code>\n"
  ]
}