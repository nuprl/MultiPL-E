{
  "name": "mbpp_295_sum_div",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to return the sum of all divisors of a number.\n(define (sum_div number)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_div))\n    (check-equal? (candidate 8) 7)\n    (check-equal? (candidate 12) 16)\n    (check-equal? (candidate 7) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum_div_iter n acc)\n    (if (= n 1)\n        acc\n        (if (= (remainder n 2) 0)\n            (sum_div_iter (/ n 2) (+ acc n))\n            (sum_div_iter (- n 1) acc))))\n  (sum_div_iter number 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= divisor number) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (if (= (modulo number n) 0)\n            (helper (- n 1) (+ acc n))\n            (helper (- n 1) acc))))\n  (helper number 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (&lt; divisor number)\n        (if (zero? (modulo number divisor))\n            (+ divisor (sum_div_iter number (+ divisor 1)))\n            (sum_div_iter number (+ divisor 1)))\n        0))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum-div-iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum-div-iter number (+ divisor 1) (+ sum divisor))\n            (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond\n      [(= number 1) sum]\n      [(= (modulo number divisor) 0)\n       (sum_div-iter (/ number divisor) divisor (+ sum divisor))]\n      [else (sum_div-iter number (+ divisor 1) sum)]))\n  (sum_div-iter number 2 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n"
  ]
}