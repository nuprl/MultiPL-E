{
  "name": "mbpp_295_sum_div",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to return the sum of all divisors of a number.\n(define (sum_div number)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_div))\n    (check-equal? (candidate 8) 7)\n    (check-equal? (candidate 12) 16)\n    (check-equal? (candidate 7) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum_div_iter n acc)\n    (if (= n 1)\n        acc\n        (if (= (remainder n 2) 0)\n            (sum_div_iter (/ n 2) (+ acc n))\n            (sum_div_iter (- n 1) acc))))\n  (sum_div_iter number 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= divisor number) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (if (= (modulo number n) 0)\n            (helper (- n 1) (+ acc n))\n            (helper (- n 1) acc))))\n  (helper number 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (&lt; divisor number)\n        (if (zero? (modulo number divisor))\n            (+ divisor (sum_div_iter number (+ divisor 1)))\n            (sum_div_iter number (+ divisor 1)))\n        0))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum-div-iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum-div-iter number (+ divisor 1) (+ sum divisor))\n            (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond\n      [(= number 1) sum]\n      [(= (modulo number divisor) 0)\n       (sum_div-iter (/ number divisor) divisor (+ sum divisor))]\n      [else (sum_div-iter number (+ divisor 1) sum)]))\n  (sum_div-iter number 2 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (for/sum ([i (in-range 1 (add1 (/ number 2)))])\n    (if (zero? (modulo number i)) i 0)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number 1) sum]\n      [(= (remainder number divisor) 0) (sum_div_iter (/ number divisor) divisor (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 2 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= divisor number) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number 1) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter (/ number divisor) divisor (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 2 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (cond ((= divisor number) sum)\n          ((= (remainder number divisor) 0)\n           (sum_div_iter (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= 0 (modulo number divisor))\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter i sum)\n    (if (&gt; i number)\n        sum\n        (if (zero? (modulo number i))\n            (sum_div_iter (+ i 1) (+ sum i))\n            (sum_div_iter (+ i 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= divisor number)\n        0\n        (+ (if (= (modulo number divisor) 0)\n               divisor\n               0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter current sum)\n    (if (= current number)\n        sum\n        (if (= (remainder number current) 0)\n            (sum_div_iter (+ current 1) (+ sum current))\n            (sum_div_iter (+ current 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter n i)\n    (if (= n i)\n        0\n        (+ (if (= (modulo n i) 0) i 0)\n           (sum_div_iter n (+ i 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (divisors number)\n    (for/list ([i (in-range 1 (add1 (quotient number 2)))])\n      (if (zero? (remainder number i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter sum div)\n    (if (= div number)\n        sum\n        (if (= (modulo number div) 0)\n            (sum_div_iter (+ sum div) (+ div 1))\n            (sum_div_iter sum (+ div 1)))))\n  (sum_div_iter 0 1))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= divisor number)\n        0\n        (+ (if (zero? (modulo number divisor)) divisor 0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= (modulo number divisor) 0)\n               divisor\n               0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (for/sum ([i (in-range 1 (add1 (quotient number 2)))])\n    (if (zero? (modulo number i)) i 0)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter i sum)\n    (if (&gt; i number)\n        sum\n        (if (zero? (modulo number i))\n            (sum_div_iter (+ i 1) (+ sum i))\n            (sum_div_iter (+ i 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= (modulo number divisor) 0) divisor 0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond\n      ((= number divisor) sum)\n      ((= 0 (modulo number divisor))\n       (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n      (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((&gt; number (* divisor divisor)) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div-iter number (+ divisor 1) (+ sum divisor divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum-div-iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum-div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 1 0))\n",
    "  (define (sum_div_iter number div-sum)\n    (cond ((= number 1) div-sum)\n          ((= (remainder number 2) 0) (sum_div_iter (/ number 2) (+ div-sum number)))\n          ((= (remainder number 3) 0) (sum_div_iter (/ number 3) (+ div-sum number)))\n          ((= (remainder number 5) 0) (sum_div_iter (/ number 5) (+ div-sum number)))\n          ((= (remainder number 7) 0) (sum_div_iter (/ number 7) (+ div-sum number)))\n          (else (sum_div_iter (/ number 7) (+ div-sum number)))))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number div-so-far)\n    (if (= number 1)\n        div-so-far\n        (if (= (remainder number div-so-far) 0)\n            (sum_div_iter (/ number div-so-far) (+ div-so-far div-so-far))\n            (sum_div_iter number (+ div-so-far 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter acc n)\n    (if (= n 1)\n        acc\n        (if (= (modulo number n) 0)\n            (sum_div_iter (+ acc n) (- n 1))\n            (sum_div_iter acc (- n 1)))))\n  (sum_div_iter 0 number))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (> divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= 0 (modulo number divisor)) divisor 0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number div-sum)\n    (if (= number 1)\n        div-sum\n        (if (= (remainder number div-sum) 0)\n            (sum_div_iter (/ number div-sum) (+ div-sum div-sum))\n            (sum_div_iter number (+ div-sum 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((divides? number divisor)\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (zero? (modulo number divisor))\n               divisor\n               0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter n i)\n    (cond ((= i n) 0)\n          ((= (modulo n i) 0) (+ i (sum_div_iter n (+ i 1))))\n          (else (sum_div_iter n (+ i 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter n acc)\n    (if (= n 0)\n        acc\n        (if (= (remainder n 2) 0)\n            (sum_div_iter (- n 1) (+ acc n))\n            (sum_div_iter (- n 1) acc))))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum-div-helper number divisor)\n    (cond ((= number divisor) 0)\n          ((= 0 (modulo number divisor)) (+ divisor (sum-div-helper number (+ divisor 1))))\n          (else (sum-div-helper number (+ divisor 1)))))\n  (sum-div-helper number 1))\n",
    "  (define (sum_div_iter current-div sum)\n    (if (= current-div number)\n        sum\n        (if (= (modulo number current-div) 0)\n            (sum_div_iter (+ current-div 1) (+ sum current-div))\n            (sum_div_iter (+ current-div 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div-iter number acc)\n    (if (= number 0)\n        acc\n        (if (= (remainder number acc) 0)\n            (sum_div-iter number (- acc 1))\n            (sum_div-iter number (- acc 1)))))\n  (sum_div-iter number (- number 1)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number sum)\n    (if (= number 1)\n        sum\n        (if (= (remainder number (sub1 number)) 0)\n            (sum_div_iter (sub1 number) (+ sum (sub1 number)))\n            (sum_div_iter (sub1 number) sum))))\n  (sum_div_iter number 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter divisor sum)\n    (cond\n      [(= divisor number) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter (+ divisor 1) sum)]))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number acc)\n    (if (= number 1)\n        acc\n        (if (= (remainder number acc) 0)\n            (sum_div_iter number (- acc 1))\n            (sum_div_iter number (- acc 1)))))\n  (sum_div_iter number (- number 1)))\n",
    "  (define (sum_div_helper number divisor)\n    (cond\n      [(= number 1) 0]\n      [(= (modulo number divisor) 0) (+ divisor (sum_div_helper (/ number divisor) divisor))]\n      [else (sum_div_helper number (+ divisor 1))]))\n  (sum_div_helper number 2))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= divisor number) sum)\n          ((zero? (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (for/sum ([i (in-range 1 (add1 (quotient number 2)))])\n    (if (zero? (modulo number i))\n        i)))\n",
    "  (define (sum-div-iter number divisor sum)\n    (cond ((= number 1) sum)\n          ((= (modulo number divisor) 0)\n           (sum-div-iter (/ number divisor) divisor (+ sum divisor)))\n          (else (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 2 0))\n",
    "  (define (sum_div_helper number div)\n    (if (= number div)\n        0\n        (+ (if (= 0 (modulo number div))\n               div\n               0)\n           (sum_div_helper number (+ div 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((&gt; number (* divisor divisor)) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter number (+ divisor 1) (+ sum divisor divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; number divisor)\n        (sum_div_iter number (+ divisor 1)\n                      (if (zero? (modulo number divisor))\n                          (+ sum divisor)\n                          sum))\n        sum))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number sum)\n    (cond\n      [(= number 1) sum]\n      [(= (remainder number 2) 0) (sum_div_iter (/ number 2) (+ sum number))]\n      [else (sum_div_iter (- number 1) sum)]))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((zero? (modulo number divisor)) (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div-iter number sum)\n    (cond\n      [(= number 1) sum]\n      [(= (remainder number 2) 0) (sum_div-iter (/ number 2) (+ sum number))]\n      [else (sum_div-iter (- number 1) sum)]))\n  (sum_div-iter number 0))\n",
    "  (for/sum ([i (in-range 1 (add1 (quotient number 2)))])\n    (if (zero? (modulo number i))\n        i\n        0)))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&gt; i number)\n        sum\n        (if (zero? (modulo number i))\n            (loop (+ i 1) (+ sum i))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number sum)\n    (cond\n      [(= number 1) sum]\n      [(= (modulo number 2) 0) (sum_div_iter (/ number 2) (+ sum number))]\n      [else (sum_div_iter (- number 1) sum)]))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor)) (+ sum divisor (sum_div_iter number (+ divisor 1) 0)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div-iter number (+ divisor 1) (+ sum divisor))\n            (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; number divisor)\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))\n        sum))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_helper number divisor)\n    (cond ((= number divisor) 0)\n          ((= 0 (modulo number divisor)) (+ divisor (sum_div_helper number (+ divisor 1))))\n          (else (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((&gt; number (* divisor divisor)) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div-iter number div-sum)\n    (cond ((= number 1) div-sum)\n          ((= (remainder number 2) 0) (sum_div-iter (/ number 2) (+ div-sum number)))\n          (else (sum_div-iter (- number 1) div-sum))))\n  (sum_div-iter number 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number acc)\n    (cond\n      [(= number 1) acc]\n      [(= (remainder number 2) 0) (sum_div_iter (/ number 2) (+ acc number))]\n      [else (sum_div_iter (- number 1) acc)]))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number 1) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter (/ number divisor) divisor (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 2 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum-div-iter number divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum-div-iter number (+ divisor 1) (+ divisor sum))\n            (sum-div-iter number (+ divisor 1) sum))))\n  (sum-div-iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div-iter number divisor)\n    (cond ((= number divisor) 0)\n          ((= 0 (modulo number divisor)) (+ divisor (sum_div-iter number (+ divisor 1))))\n          (else (sum_div-iter number (+ divisor 1)))))\n  (sum_div-iter number 1))\n",
    "  (define (divisors number)\n    (for/list ([i (in-range 1 (add1 (quotient number 2)))])\n      (if (zero? (modulo number i))\n          i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter current sum)\n    (cond\n      [(= current number) sum]\n      [(= (modulo number current) 0) (sum_div_iter (+ current 1) (+ sum current))]\n      [else (sum_div_iter (+ current 1) sum)]))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor)) (+ sum divisor (sum_div_iter number (+ divisor 1) 0)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number 1) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter (/ number divisor) divisor (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 2 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div-iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div-iter number (+ divisor 1) sum))))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter sum i)\n    (if (&gt; i number)\n        sum\n        (if (zero? (modulo number i))\n            (sum_div_iter (+ sum i) (+ i 1))\n            (sum_div_iter sum (+ i 1)))))\n  (sum_div_iter 0 1))\n",
    "  (define (sum_div_iter n i acc)\n    (cond\n      [(= n i) acc]\n      [(= 0 (modulo n i)) (sum_div_iter n (+ i 1) (+ acc i))]\n      [else (sum_div_iter n (+ i 1) acc)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= 0 (modulo number divisor))\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter current sum)\n    (if (= current number)\n        sum\n        (if (= (modulo number current) 0)\n            (sum_div_iter (+ current 1) (+ sum current))\n            (sum_div_iter (+ current 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((zero? (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&lt;= divisor number)\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))\n        sum))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (cond ((= number divisor) 0)\n          ((= 0 (modulo number divisor)) (+ divisor (sum_div_iter number (+ divisor 1))))\n          (else (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (zero? (modulo number divisor))\n               divisor\n               0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum-div-helper number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (zero? (modulo number divisor))\n               divisor\n               0)\n           (sum-div-helper number (+ divisor 1)))))\n  (sum-div-helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((divides? number divisor) (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum-div-iter number div-sum)\n    (cond ((= number 1) div-sum)\n          ((= (remainder number 2) 0) (sum-div-iter (/ number 2) (+ div-sum number)))\n          ((= (remainder number 3) 0) (sum-div-iter (/ number 3) (+ div-sum number)))\n          ((= (remainder number 5) 0) (sum-div-iter (/ number 5) (+ div-sum number)))\n          ((= (remainder number 7) 0) (sum-div-iter (/ number 7) (+ div-sum number)))\n          (else (sum-div-iter (/ number 11) (+ div-sum number)))))\n  (sum-div-iter number 0))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= divisor number)\n        0\n        (+ (if (= (modulo number divisor) 0) divisor 0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (zero? (modulo number divisor))\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number 1) sum]\n      [(= (modulo number divisor) 0)\n       (sum_div_iter (/ number divisor) divisor (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 2 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number div-so-far)\n    (if (= number 1)\n        div-so-far\n        (if (zero? (modulo number div-so-far))\n            (sum_div_iter (/ number div-so-far) (+ div-so-far (/ number div-so-far)))\n            (sum_div_iter number (+ div-so-far 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= (modulo number divisor) 0)\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (for/sum ([i (in-range 1 (add1 (quotient number 2)))])\n    (if (zero? (modulo number i)) i 0)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; number divisor)\n        (sum_div_iter number (+ divisor 1) (+ sum (if (zero? (modulo number divisor)) divisor 0)))\n        sum))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number acc)\n    (if (= number 1)\n        acc\n        (if (= (modulo number 2) 0)\n            (sum_div_iter (/ number 2) (+ acc number))\n            (sum_div_iter (- number 1) acc))))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter n acc)\n    (if (= n 1)\n        acc\n        (if (= (remainder n 2) 0)\n            (sum_div_iter (/ n 2) (+ acc n))\n            (sum_div_iter (- n 1) acc))))\n  (sum_div_iter number 0))\n",
    "  (define (divisors number)\n    (for/list ([i (in-range 1 number)])\n      (if (zero? (modulo number i))\n          i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor)) (+ sum divisor)]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (divisors number)\n    (for/list ([i (in-range 1 (add1 (quotient number 2)))])\n      (if (zero? (modulo number i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= (modulo number divisor) 0) (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (= divisor number)\n        sum\n        (if (= (remainder number divisor) 0)\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (&gt; number divisor)\n        (if (= (modulo number divisor) 0)\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))\n        sum))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor)\n    (if (&gt; divisor number)\n        0\n        (+ (if (zero? (modulo number divisor))\n               divisor\n               0)\n           (sum_div_iter number (+ divisor 1)))))\n  (sum_div_iter number 1))\n",
    "  (define (divisors number)\n    (for/list ([i (in-range 1 (add1 (quotient number 2)))])\n      (if (zero? (modulo number i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_helper number divisor)\n    (if (= number divisor)\n        0\n        (+ (if (= (modulo number divisor) 0)\n               divisor\n               0)\n           (sum_div_helper number (+ divisor 1)))))\n  (sum_div_helper number 1))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (iter count sum)\n    (if (= count number)\n        sum\n        (if (= (modulo number count) 0)\n            (iter (+ count 1) (+ sum count))\n            (iter (+ count 1) sum))))\n  (iter 1 0))\n",
    "  (define (sum_div-iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor)) (sum_div-iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div-iter number (+ divisor 1) sum)]))\n  (sum_div-iter number 1 0))\n",
    "  (define (sum_div_iter i sum)\n    (if (= i number)\n        sum\n        (if (= (modulo number i) 0)\n            (sum_div_iter (+ i 1) (+ sum i))\n            (sum_div_iter (+ i 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter divisor sum)\n    (if (&gt; divisor number)\n        sum\n        (if (zero? (modulo number divisor))\n            (sum_div_iter (+ divisor 1) (+ sum divisor))\n            (sum_div_iter (+ divisor 1) sum))))\n  (sum_div_iter 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number acc)\n    (if (= number 1)\n        acc\n        (if (zero? (modulo number acc))\n            (sum_div_iter (- number 1) (+ acc number))\n            (sum_div_iter (- number 1) acc))))\n  (sum_div_iter number 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((&gt; divisor number) sum)\n          ((= (modulo number divisor) 0)\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= divisor number) sum)\n          ((zero? (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond\n      [(= number divisor) sum]\n      [(= 0 (modulo number divisor))\n       (sum_div_iter number (+ divisor 1) (+ sum divisor))]\n      [else (sum_div_iter number (+ divisor 1) sum)]))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number 1) sum)\n          ((= (remainder number divisor) 0)\n           (sum_div_iter (/ number divisor) divisor (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 2 0))\n",
    "  (define (divisors number)\n    (for/list ([i (in-range 1 (add1 (quotient number 2)))])\n      (if (zero? (modulo number i)) i)))\n  (apply + (divisors number)))\n",
    "  (define (sum_div_iter number divisor sum)\n    (cond ((= number divisor) sum)\n          ((= 0 (modulo number divisor))\n           (sum_div_iter number (+ divisor 1) (+ sum divisor)))\n          (else (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n",
    "  (define (sum_div_iter number divisor sum)\n    (if (= number divisor)\n        sum\n        (if (= 0 (modulo number divisor))\n            (sum_div_iter number (+ divisor 1) (+ sum divisor))\n            (sum_div_iter number (+ divisor 1) sum))))\n  (sum_div_iter number 1 0))\n"
  ]
}