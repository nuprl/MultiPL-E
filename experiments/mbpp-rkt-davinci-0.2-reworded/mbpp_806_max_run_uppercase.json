{
  "name": "mbpp_806_max_run_uppercase",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find maximum run of uppercase characters in the given string.\n(define (max_run_uppercase test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_run_uppercase))\n    (check-equal? (candidate \"GeMKSForGERksISBESt\") 5)\n    (check-equal? (candidate \"PrECIOusMOVemENTSYT\") 6)\n    (check-equal? (candidate \"GooGLEFluTTER\") 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 curr_run))\n                 (+ 1 curr_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase-helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_uppercase? (first test_str))\n       (if (> cur_run max_run)\n           (max_run_uppercase-helper (rest test_str) cur_run (add1 cur_run))\n           (max_run_uppercase-helper (rest test_str) max_run (add1 cur_run)))]\n      [else (max_run_uppercase-helper (rest test_str) max_run 0)]))\n  (max_run_uppercase-helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([str test_str] [max 0] [curr 0])\n    (cond [(empty? str) max]\n          [(char-upper-case? (first str))\n           (loop (rest str) (max max (add1 curr)) (add1 curr))]\n          [else (loop (rest str) max 0)])))\n",
    "  (define (max_run_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_helper (rest test_str) max_run 0)]))\n  (max_run_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (cond [(= i (string-length test_str)) max_run]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))]\n          [else (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([i 0] [max_run 0] [curr_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max_run (+ curr_run 1)) (+ curr_run 1))]\n      [else (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (cond [(= i (string-length test_str)) max_run]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))]\n          [else (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (&gt; cur_run max_run) cur_run max_run)\n             (+ 1 cur_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (let ([char (string-ref test_str i)])\n          (if (char-upper-case? char)\n              (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (define (helper str max-run cur-run)\n    (cond\n      [(empty? str) max-run]\n      [(char-upper-case? (first str))\n       (helper (rest str) (max max-run (add1 cur-run)) (add1 cur-run))]\n      [else (helper (rest str) max-run 0)]))\n  (helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ cur_run 1))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ cur_run 1))\n                 (+ cur_run 1))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (> cur_run max_run) cur_run max_run)\n                 (+ 1 cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond\n      [(empty? str) max_run]\n      [(char-upper-case? (first str))\n       (loop (rest str)\n             (if (&gt; cur_run max_run) cur_run max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (> (+ cur_run 1) max_run)\n                     (+ cur_run 1)\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (define (iter current_max current_run str)\n    (cond\n      [(empty? str) current_max]\n      [(char-upper-case? (first str)) (iter (max current_max current_run) (+ current_run 1) (rest str))]\n      [else (iter current_max 0 (rest str))]))\n  (iter 0 0 test_str))\n",
    "  (let loop ([str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (> cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ 1 cur_run))]\n          [else (loop (rest str) max_run 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 curr_run))\n             (add1 curr_run))]\n      [else (loop (rest test_str)\n                  max_run\n                  0)])))\n",
    "  (let loop ([str test_str]\n             [max-run 0]\n             [curr-run 0])\n    (cond [(empty? str) max-run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (max max-run (+ curr-run 1))\n                 (+ curr-run 1))]\n          [else\n           (loop (rest str)\n                 max-run\n                 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (if (&gt; cur_run max_run) cur_run max_run) (+ cur_run 1))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n</code>\n",
    "  (letrec ([run_len (lambda (str)\n                      (if (empty? str)\n                          0\n                          (if (char-upper-case? (car str))\n                              (+ 1 (run_len (cdr str)))\n                              0)))]\n           [max_run (lambda (str)\n                      (if (empty? str)\n                          0\n                          (max (run_len str)\n                               (max_run (cdr str)))))]\n           [max_run_uppercase (lambda (str)\n                                (max_run (string->list str)))])\n    (max_run_uppercase test_str)))\n",
    "  (define (helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (helper (rest test_str)\n               (if (&gt; cur_run max_run) cur_run max_run)\n               (+ 1 cur_run))]\n      [else\n       (helper (rest test_str) max_run 0)]))\n  (helper test_str 0 0))\n",
    "  (define (max_run_helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_helper (substring test_str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (max_run_helper (substring test_str 1) max_run 0))))\n  (max_run_helper test_str 0 0))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let ([max-run 0]\n        [current-run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (begin\n            (set! current-run (+ current-run 1))\n            (if (&gt; current-run max-run)\n                (set! max-run current-run)))\n          (set! current-run 0)))\n    max-run))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (loop (rest test_str)\n                  (max max_run (add1 current_run))\n                  (add1 current_run))\n            (loop (rest test_str)\n                  max_run\n                  0)))))\n",
    "  (define (is_upper? c)\n    (char-upper-case? c))\n  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_upper? (first test_str))\n       (if (&gt; cur_run max_run)\n           (max_run_uppercase_iter (rest test_str) cur_run (+ cur_run 1))\n           (max_run_uppercase_iter (rest test_str) max_run (+ cur_run 1)))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (max_run_uppercase_iter (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))\n            (max_run_uppercase_iter (rest test_str) max_run 0))))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (define (helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (helper (substring test_str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (helper (substring test_str 1) max_run 0))))\n  (helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [curr_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1) (max max_run (+ curr_run 1)) (+ curr_run 1))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (define (helper str max_run cur_run)\n    (if (empty? str)\n        max_run\n        (if (char-upper-case? (first str))\n            (helper (rest str) (max max_run (add1 cur_run)) (add1 cur_run))\n            (helper (rest str) max_run 0))))\n  (helper test_str 0 0))\n",
    "  (let loop ((i 0) (max 0) (cur 0))\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max cur) (+ cur 1))]\n      [else (loop (+ i 1) (max max cur) 0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ cur_run 1))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ([test_str test_str] [count 0] [max_count 0])\n    (if (string-empty? test_str)\n        max_count\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1) (+ count 1) (if (&gt; count max_count) count max_count))\n            (loop (substring test_str 1) 0 (if (&gt; count max_count) count max_count))))))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond\n        [(null? test_str) max_run]\n        [(char-upper-case? (car test_str))\n         (loop (cdr test_str)\n               (max max_run (add1 cur_run))\n               (add1 cur_run))]\n        [else (loop (cdr test_str)\n                    max_run\n                    0)]))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (add1 cur_run))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let loop ((str test_str) (max-run 0) (cur-run 0))\n    (cond\n      [(empty? str) max-run]\n      [(char-upper-case? (first str))\n       (loop (rest str) (max max-run (add1 cur-run)) (add1 cur-run))]\n      [else\n       (loop (rest str) max-run 0)])))\n",
    "  (let loop ((str test_str)\n             (max-run 0)\n             (cur-run 0))\n    (cond ((null? str) max-run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max-run (inc cur-run))\n                 (inc cur-run)))\n          (else (loop (cdr str)\n                      max-run\n                      0)))))\n",
    "  (let ([len (string-length test_str)]\n        [max_run 0]\n        [run 0])\n    (for ([i (in-range len)])\n      (if (char-upper-case? (string-ref test_str i))\n          (set! run (add1 run))\n          (set! run 0))\n      (if (&gt; run max_run)\n          (set! max_run run)))\n    max_run))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (> cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let ([len (string-length test_str)])\n    (let loop ([i 0] [max_run 0] [cur_run 0])\n      (cond\n        [(= i len) max_run]\n        [(char-upper-case? (string-ref test_str i))\n         (loop (+ i 1)\n               (if (&gt; cur_run max_run) cur_run max_run)\n               (+ cur_run 1))]\n        [else (loop (+ i 1) max_run 0)]))))\n</code>\n",
    "  (let loop ([test_str test_str]\n             [max_count 0]\n             [cur_count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (> cur_count max_count)\n                     cur_count\n                     max_count)\n                 (+ 1 cur_count))]\n          [else (loop (rest test_str) max_count 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      (if (&gt; cur_run max_run) cur_run max_run)\n                                      (+ cur_run 1))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      max_run\n                                      0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (if (> cur max) cur max) (+ cur 1))]\n      [else (loop (+ i 1) max 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 cur_run))\n             (add1 cur_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (if (empty? test_str)\n        max_run\n        (let ([c (first test_str)])\n          (if (char-upper-case? c)\n              (loop (rest test_str)\n                    (max max_run (add1 current_run))\n                    (add1 current_run))\n              (loop (rest test_str)\n                    max_run\n                    0))))))\n",
    "  (let loop ((i 0) (max_run 0) (cur_run 0))\n    (if (&gt;= i (string-length test_str))\n        max_run\n        (let ((cur_char (string-ref test_str i)))\n          (if (char-upper-case? cur_char)\n              (loop (+ i 1) (max max_run (inc cur_run)) cur_run)\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond\n        [(null? test_str) max_run]\n        [(char-upper-case? (car test_str))\n         (loop (cdr test_str)\n               (max max_run (add1 cur_run))\n               (add1 cur_run))]\n        [else\n         (loop (cdr test_str)\n               max_run\n               0)]))))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (if (&gt;= i (string-length test_str))\n        max\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1) (if (&gt; cur max) cur max) (+ cur 1))\n              (loop (+ i 1) max 0))))))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond [(null? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (max max_run (+ 1 cur_run))\n                   (+ 1 cur_run))]\n            [else\n             (loop (cdr test_str)\n                   max_run\n                   0)]))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (empty? test_str)\n        max_run\n        (let ([cur_char (first test_str)])\n          (if (char-upper-case? cur_char)\n              (loop (rest test_str)\n                    (max max_run (add1 cur_run))\n                    (add1 cur_run))\n              (loop (rest test_str)\n                    max_run\n                    0))))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ 1 cur_run)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (cond [(= i (string-length test_str)) max_run]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))]\n          [else (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ 1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n</code>\n",
    "  (let ([max_run 0]\n        [current_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! current_run (add1 current_run))\n        (set! current_run 0))\n      (if (&gt; current_run max_run)\n          (set! max_run current_run)))\n    max_run))\n",
    "  (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run_so_far current_run)\n    (cond\n      [(empty? test_str) max_run_so_far]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run_so_far (add1 current_run))\n                                 (add1 current_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      max_run_so_far\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr test_str) max_run 0)))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (curr_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; curr_run max_run)\n                     curr_run\n                     max_run)\n                 (+ curr_run 1)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n</code>\n",
    "  (let loop ([str test_str] [max_run 0] [cur_run 0])\n    (if (null? str)\n        max_run\n        (let ([c (string-ref str 0)])\n          (if (char-upper-case? c)\n              (loop (substring str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (substring str 1) max_run 0))))))\n",
    "  (let loop ([i 0] [max 0] [curr 0])\n    (if (= i (string-length test_str))\n        max\n        (let ([char (string-ref test_str i)])\n          (if (char-upper-case? char)\n              (loop (+ i 1) (if (> curr max) curr max) (+ curr 1))\n              (loop (+ i 1) max 0))))))\n",
    "  (define (helper test_str max_run curr_run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (helper (rest test_str) (max max_run (add1 curr_run)) (add1 curr_run))\n            (helper (rest test_str) max_run 0))))\n  (helper test_str 0 0))\n",
    "  (let ([len (string-length test_str)])\n    (let loop ([i 0] [max_run 0] [cur_run 0])\n      (if (= i len)\n          max_run\n          (let ([c (string-ref test_str i)])\n            (if (char-upper-case? c)\n                (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n                (loop (+ i 1) max_run 0)))))))\n",
    "  (let loop ([test_str test_str] [max_run 0] [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (&gt; current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1))]\n          [else\n           (loop (cdr test_str) max_run 0)])))\n",
    "  (let loop ([str test_str] [max-run 0] [run 0])\n    (cond [(empty? str) max-run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; run max-run) run max-run)\n                 (+ run 1))]\n          [else (loop (rest str) max-run 0)])))\n",
    "  (let loop ([i 0] [max 0] [count 0])\n    (if (= i (string-length test_str))\n        max\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1) (max max count) (+ count 1))\n              (loop (+ i 1) (max max count) 0))))))\n",
    "  (let loop ((i 0) (max_run 0) (cur_run 0))\n    (if (= i (string-length test_str))\n        max_run\n        (let ((cur_char (string-ref test_str i)))\n          (if (char-upper-case? cur_char)\n              (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let ([max-run 0]\n        [cur-run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur-run (add1 cur-run))\n          (begin\n            (when (&gt; cur-run max-run)\n              (set! max-run cur-run))\n            (set! cur-run 0))))\n    (when (&gt; cur-run max-run)\n      (set! max-run cur-run))\n    max-run))\n",
    "  (let loop ([test_str test_str]\n             [count 0]\n             [max_count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str) (+ count 1) (max count max_count))]\n          [else (loop (rest test_str) 0 (max count max_count))])))\n",
    "  (let loop ((str test_str) (max_run 0) (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str) (max max_run (add1 cur_run)) (add1 cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (define (is_uppercase? ch)\n    (and (char-alphabetic? ch) (char-upper-case? ch)))\n  (define (count_run str i)\n    (if (is_uppercase? (string-ref str i))\n        (add1 (count_run str (add1 i)))\n        0))\n  (define (max_run str i max)\n    (if (&lt; i (string-length str))\n        (max_run str (add1 i) (max (count_run str i) max))\n        max))\n  (max_run test_str 0 0))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (max_run_uppercase_iter (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))\n            (max_run_uppercase_iter (rest test_str) max_run 0))))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 cur_run))\n                                 (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      max_run\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (define (max_run_uppercase_helper test_str max_run current_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 current_run))\n                                 (add1 current_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let ([max_run 0]\n        [current_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! current_run (add1 current_run))\n        (set! current_run 0))\n      (if (&gt; current_run max_run)\n          (set! max_run current_run)))\n    max_run))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (current_run 0))\n    (if (null? test_str)\n        max_run\n        (if (char-upper-case? (car test_str))\n            (loop (cdr test_str)\n                  (if (&gt; current_run max_run)\n                      current_run\n                      max_run)\n                  (+ current_run 1))\n            (loop (cdr test_str)\n                  max_run\n                  0)))))\n",
    "  (let loop ([str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest str) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run_so_far current_run)\n    (cond\n      [(empty? test_str) max_run_so_far]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run_so_far (add1 current_run))\n                                 (add1 current_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      max_run_so_far\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max-run 0] [curr-run 0])\n    (if (= i (string-length test_str))\n        max-run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max-run (+ curr-run 1)) (+ curr-run 1))\n            (loop (+ i 1) max-run 0)))))\n",
    "  (let loop ([str test_str]\n             [max-run 0]\n             [cur-run 0])\n    (cond [(empty? str) max-run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (max max-run (add1 cur-run))\n                 (add1 cur-run))]\n          [else\n           (loop (rest str)\n                 max-run\n                 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ 1 cur_run))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n</code>\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (let ([cur_char (string-ref test_str i)])\n          (if (char-upper-case? cur_char)\n              (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n              (loop (+ i 1) (max max_run cur_run) 0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 cur_run))\n                 (+ 1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([i 0] [max_run 0] [run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upcase? (string-ref test_str i))\n       (loop (+ i 1)\n             (if (> run max_run) run max_run)\n             (+ run 1))]\n      [else\n       (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (empty? test_str)\n        max_run\n        (let ([c (first test_str)])\n          (if (char-upper-case? c)\n              (loop (rest test_str)\n                    (if (> (+ cur_run 1) max_run)\n                        (+ cur_run 1)\n                        max_run)\n                    (+ cur_run 1))\n              (loop (rest test_str)\n                    max_run\n                    0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ 1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str] [max_run 0] [cur_run 0])\n      (cond [(empty? test_str) max_run]\n            [(char-upper-case? (car test_str))\n             (loop (cdr test_str)\n                   (if (> cur_run max_run) cur_run max_run)\n                   (+ cur_run 1))]\n            [else (loop (cdr test_str) max_run 0)]))))\n",
    "  (let loop ([str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest str) max_run 0)])))\n",
    "  (let loop ((i 0) (max_run 0) (cur_run 0))\n    (if (&lt; i (string-length test_str))\n        (let ((cur_char (string-ref test_str i)))\n          (if (char-upper-case? cur_char)\n              (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n              (loop (+ i 1) max_run 0)))\n        max_run)))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (if (= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max (add1 cur)) (add1 cur))\n            (loop (+ i 1) max 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run curr_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 curr_run))\n                                 (add1 curr_run))]\n      [else (max_run_uppercase_helper (rest test_str)\n                                      max_run\n                                      0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([str test_str]\n             [max-run 0]\n             [cur-run 0])\n    (cond\n      [(empty? str) max-run]\n      [(char-upper-case? (first str))\n       (loop (rest str)\n             (if (&gt; cur-run max-run)\n                 cur-run\n                 max-run)\n             (+ cur-run 1))]\n      [else\n       (loop (rest str)\n             max-run\n             0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_iter (rest test_str) max_run 0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(is_uppercase? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [count 0]\n             [max_count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (+ count 1)\n                 (if (> count max_count)\n                     count\n                     max_count))]\n          [else (loop (rest test_str)\n                      0\n                      max_count)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (&gt; current_run max_run)\n                 current_run\n                 max_run)\n             (+ current_run 1))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([i 0] [max 0] [curr 0])\n    (if (= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max (+ curr 1)) (+ curr 1))\n            (loop (+ i 1) max 0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (+ 1 cur_run)) (+ 1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (if (&gt; current_run max_run)\n                      current_run\n                      max_run)\n                  (+ current_run 1))\n            (loop (substring test_str 1)\n                  max_run\n                  0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run current_run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (max_run_uppercase_helper (rest test_str) (max max_run (add1 current_run)) (add1 current_run))\n            (max_run_uppercase_helper (rest test_str) max_run 0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (loop (substring test_str 1)\n                  (max max_run (add1 cur_run))\n                  (add1 cur_run))\n            (loop (substring test_str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 current_run))\n             (add1 current_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ((i 0) (max_run 0) (cur_run 0))\n    (if (&gt;= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ((str test_str)\n             (max-run 0)\n             (cur-run 0))\n    (cond ((null? str) max-run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max-run (inc! cur-run))\n                 cur-run))\n          (else (loop (cdr str)\n                      max-run\n                      0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (> cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (max_run_uppercase_helper (rest test_str) (max max_run (add1 run)) (add1 run))\n            (max_run_uppercase_helper (rest test_str) max_run 0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [current_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 current_run))\n                 (add1 current_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (+ j 1) (max j max))]\n      [else (loop (+ i 1) 0 (max j max))])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (inc cur_run))\n                 (inc cur_run)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([str test_str] [count 0] [max 0])\n    (cond [(empty? str) max]\n          [(char-upper-case? (first str))\n           (loop (rest str) (+ count 1) (if (> count max) count max))]\n          [else (loop (rest str) 0 max)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (> cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (if (= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (if (&gt; cur max) cur max) (+ cur 1))\n            (loop (+ i 1) max 0)))))\n",
    "  (let ([max_run 0]\n        [current_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! current_run (add1 current_run))\n        (set! current_run 0))\n      (when (&gt; current_run max_run)\n        (set! max_run current_run)))\n    max_run))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ cur_run 1))\n                 (+ cur_run 1))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (> cur_run max_run)\n                 cur_run\n                 max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))\n            (loop (+ i 1) 0 (if (&gt; j max) j max))))))\n",
    "  (let loop ([test_str test_str]\n             [max_count 0]\n             [count 0])\n    (cond [(empty? test_str) max_count]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max (add1 count) max_count)\n                 (add1 count))]\n          [else\n           (loop (rest test_str)\n                 max_count\n                 0)])))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? test_str) max_run)\n          ((char-upper-case? (car test_str))\n           (loop (cdr test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr test_str) max_run 0)))))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (null? test_str)\n        max_run\n        (if (char-upper-case? (car test_str))\n            (loop (cdr test_str)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ 1 cur_run))\n            (loop (cdr test_str)\n                  max_run\n                  0)))))\n</code>\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (if (&gt; cur max) cur max) (+ cur 1))]\n      [else (loop (+ i 1) max 0)])))\n",
    "  (let ([max_run 0]\n        [current_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! current_run (add1 current_run))\n        (set! current_run 0))\n      (if (&gt; current_run max_run)\n          (set! max_run current_run)))\n    max_run))\n",
    "  (define (max_run_uppercase_iter test_str curr_max curr_run)\n    (cond\n      [(empty? test_str) curr_max]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_iter (rest test_str)\n                               (max curr_max (add1 curr_run))\n                               (add1 curr_run))]\n      [else (max_run_uppercase_iter (rest test_str)\n                                    curr_max\n                                    0)]))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ((i 0) (max_run 0) (cur_run 0))\n    (if (= i (string-length test_str))\n        max_run\n        (let ((c (string-ref test_str i)))\n          (if (char-upper-case? c)\n              (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (+ 1 cur_run))\n                 (+ 1 cur_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n",
    "  (let loop ((str test_str)\n             (count 0)\n             (max_count 0))\n    (cond ((null? str) max_count)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (+ count 1)\n                 (if (&gt; count max_count) count max_count)))\n          (else (loop (cdr str) 0 max_count)))))\n",
    "  (define (max_run_helper test_str max_run cur_run)\n    (if (string-empty? test_str)\n        max_run\n        (let ([cur_char (string-ref test_str 0)])\n          (if (char-upper-case? cur_char)\n              (max_run_helper (substring test_str 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (max_run_helper (substring test_str 1) max_run 0)))))\n  (max_run_helper test_str 0 0))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (&gt;= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))\n            (loop (+ i 1) 0 max)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (&gt;= i (string-length test_str))\n        max_run\n        (let ([char (string-ref test_str i)])\n          (if (char-upper-case? char)\n              (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (define (max_run_uppercase-iter test_str max_run curr_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase-iter (rest test_str) (max max_run (+ curr_run 1)) (+ curr_run 1))]\n      [else (max_run_uppercase-iter (rest test_str) max_run 0)]))\n  (max_run_uppercase-iter test_str 0 0))\n",
    "  (let loop ([str test_str] [max_run 0] [cur_run 0])\n    (cond [(empty? str) max_run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest str) max_run 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (let loop ([str test_str] [count 0] [max 0])\n    (cond [(empty? str) max]\n          [(char-upper-case? (first str))\n           (loop (rest str) (+ count 1) (if (> count max) count max))]\n          [else (loop (rest str) 0 max)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (max max_run (add1 curr_run))\n             (add1 curr_run))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ((i 0) (max 0) (cur 0))\n    (cond ((= i (string-length test_str)) (if (&gt; cur max) cur max))\n          ((char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) max (+ cur 1)))\n          (else (loop (+ i 1) (if (&gt; cur max) cur max) 0)))))\n</code>\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (define (max_run_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_helper (rest test_str) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (max_run_helper (rest test_str) max_run 0)]))\n  (max_run_helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))]\n      [else (loop (+ i 1) max_run 0)])))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str] [max_run 0] [curr_run 0])\n      (if (null? test_str)\n          max_run\n          (let ([curr_char (car test_str)])\n            (if (char-upper-case? curr_char)\n                (loop (cdr test_str)\n                      (if (> curr_run max_run)\n                          (+ curr_run 1)\n                          max_run)\n                      (+ curr_run 1))\n                (loop (cdr test_str)\n                      max_run\n                      0)))))))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (= i (string-length test_str))\n        max\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (+ j 1) (if (&gt; j max) j max))\n            (loop (+ i 1) 0 (if (&gt; j max) j max))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (null? test_str)\n        max_run\n        (let ([cur_char (string-ref test_str 0)])\n          (if (char-upper-case? cur_char)\n              (loop (substring test_str 1)\n                    (max max_run (add1 cur_run))\n                    (add1 cur_run))\n              (loop (substring test_str 1)\n                    max_run\n                    0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (loop (rest test_str)\n                  (max max_run (+ 1 cur_run))\n                  (+ 1 cur_run))\n            (loop (rest test_str)\n                  max_run\n                  0)))))\n",
    "  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (if (empty? test_str)\n        max_run\n        (if (char-upper-case? (first test_str))\n            (max_run_uppercase_iter (rest test_str)\n                                    (if (&gt; cur_run max_run)\n                                        cur_run\n                                        max_run)\n                                    (+ 1 cur_run))\n            (max_run_uppercase_iter (rest test_str)\n                                    max_run\n                                    0))))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([i 0] [max 0] [count 0])\n    (cond [(= i (string-length test_str)) max]\n          [(char-upper-case? (string-ref test_str i))\n           (loop (+ i 1) (max count (add1 count)) 0)]\n          [else (loop (+ i 1) max (add1 count))])))\n",
    "  (define (max_run_uppercase_helper test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str)\n                                 (max max_run (add1 cur_run))\n                                 (add1 cur_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (if (string-empty? str)\n        max_run\n        (if (char-upper-case? (string-ref str 0))\n            (loop (substring str 1)\n                  (if (&gt; cur_run max_run)\n                      cur_run\n                      max_run)\n                  (+ 1 cur_run))\n            (loop (substring str 1)\n                  max_run\n                  0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [curr_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; curr_run max_run)\n                     curr_run\n                     max_run)\n                 (+ 1 curr_run))]\n          [else\n           (loop (rest test_str)\n                 max_run\n                 0)])))\n</code>\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define (max_run_uppercase_iter test_str max_run cur_run)\n    (if (null? test_str)\n        max_run\n        (if (is_uppercase? (car test_str))\n            (max_run_uppercase_iter (cdr test_str) (max max_run (add1 cur_run)) (add1 cur_run))\n            (max_run_uppercase_iter (cdr test_str) max_run 0))))\n  (max_run_uppercase_iter test_str 0 0))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (let ([char (string-ref test_str i)])\n          (if (char-upper-case? char)\n              (loop (+ i 1) (max max_run (+ cur_run 1)) (+ cur_run 1))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let loop ([i 0]\n             [max-run 0]\n             [cur-run 0])\n    (cond\n      [(= i (string-length test_str)) max-run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1)\n             (max max-run (+ cur-run 1))\n             (+ cur-run 1))]\n      [else\n       (loop (+ i 1)\n             max-run\n             0)])))\n",
    "  (define (helper test_str max_run cur_run)\n    (if (null? test_str)\n        max_run\n        (if (char-upper-case? (car test_str))\n            (helper (cdr test_str) (if (&gt; cur_run max_run) cur_run max_run) (+ cur_run 1))\n            (helper (cdr test_str) max_run 0))))\n  (helper test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [current_run 0])\n    (cond\n      [(= i (string-length test_str)) max_run]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1)\n             (if (&gt; current_run max_run)\n                 current_run\n                 max_run)\n             (+ current_run 1))]\n      [else (loop (+ i 1) max_run 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (define (max_run_uppercase-iter test_str max_run cur_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase-iter (rest test_str)\n                               (max max_run (add1 cur_run))\n                               (add1 cur_run))]\n      [else (max_run_uppercase-iter (rest test_str) max_run 0)]))\n  (max_run_uppercase-iter test_str 0 0))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (let ([cur_char (string-ref test_str i)])\n          (if (char-upper-case? cur_char)\n              (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n              (loop (+ i 1) max_run 0))))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ([i 0] [max 0] [cur 0])\n    (cond\n      [(= i (string-length test_str)) max]\n      [(char-upper-case? (string-ref test_str i))\n       (loop (+ i 1) (max max (add1 cur)) (add1 cur))]\n      [else\n       (loop (+ i 1) max 0)])))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (if (&gt; cur_run max_run)\n                     cur_run\n                     max_run)\n                 (+ cur_run 1))]\n          [else (loop (rest test_str) max_run 0)])))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run)))\n          (else (loop (cdr str)\n                      max_run\n                      0)))))\n",
    "  (let loop ([test_str test_str]\n             [max_run 0]\n             [cur_run 0])\n    (cond [(empty? test_str) max_run]\n          [(char-upper-case? (first test_str))\n           (loop (rest test_str)\n                 (max max_run (add1 cur_run))\n                 (add1 cur_run))]\n          [else (loop (rest test_str)\n                      max_run\n                      0)])))\n",
    "  (let loop ([i 0] [j 0] [max 0])\n    (if (= i (string-length test_str))\n        max\n        (let ([c (string-ref test_str i)])\n          (if (char-upper-case? c)\n              (loop (+ i 1) (+ j 1) (if (> j max) j max))\n              (loop (+ i 1) 0 (if (> j max) j max)))))))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (current_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (> current_run max_run)\n                     current_run\n                     max_run)\n                 (+ current_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (define (char-upper? c)\n    (and (char? c) (char-upper-case? c)))\n  (define (max-run-helper str count max)\n    (cond\n      [(empty? str) max]\n      [(char-upper? (first str)) (max-run-helper (rest str) (+ count 1) (if (&gt; count max) count max))]\n      [else (max-run-helper (rest str) 0 max)]))\n  (max-run-helper test_str 0 0))\n",
    "  (let loop ((str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond ((null? str) max_run)\n          ((char-upper-case? (car str))\n           (loop (cdr str)\n                 (if (&gt; cur_run max_run) cur_run max_run)\n                 (+ cur_run 1)))\n          (else (loop (cdr str) max_run 0)))))\n",
    "  (define (is_uppercase? c)\n    (and (char-alphabetic? c)\n         (char-upper-case? c)))\n  (define (count_run str)\n    (let loop ((str str)\n               (count 0))\n      (if (null? str)\n          count\n          (if (is_uppercase? (car str))\n              (loop (cdr str) (+ count 1))\n              count))))\n  (define (max_run str)\n    (let loop ((str str)\n               (max_run 0))\n      (if (null? str)\n          max_run\n          (let ((run (count_run str)))\n            (if (&gt; run max_run)\n                (loop (cdr str) run)\n                (loop (cdr str) max_run))))))\n  (max_run test_str))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-upper-case? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) 0))))\n  (define (helper2 str acc)\n    (if (empty? str)\n        acc\n        (if (&gt; (helper (rest str) 0) acc)\n            (helper2 (rest str) (helper (rest str) 0))\n            (helper2 (rest str) acc))))\n  (helper2 test_str 0))\n",
    "  (let ([test_str (string->list test_str)])\n    (let loop ([test_str test_str]\n               [max_run 0]\n               [cur_run 0])\n      (cond\n        [(empty? test_str) max_run]\n        [(char-upper-case? (car test_str))\n         (loop (cdr test_str)\n               (max max_run (add1 cur_run))\n               (add1 cur_run))]\n        [else (loop (cdr test_str)\n                    max_run\n                    0)]))))\n",
    "  (let loop ([str test_str] [max-run 0] [cur-run 0])\n    (cond [(empty? str) max-run]\n          [(char-upper-case? (first str))\n           (loop (rest str)\n                 (if (&gt; cur-run max-run) cur-run max-run)\n                 (+ cur-run 1))]\n          [else (loop (rest str) max-run 0)])))\n</code>\n",
    "  (define (helper test_str count max)\n    (if (empty? test_str)\n        max\n        (if (char-upper-case? (first test_str))\n            (helper (rest test_str) (+ count 1) (if (&gt; count max) count max))\n            (helper (rest test_str) 0 max))))\n  (helper test_str 0 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.  I'm not sure if there is a better way to do it.  I'm also not sure if I should be using <code>char-upper-case?</code> or <code>char-upper-case=?</code>.  I'm not sure what the difference is.  I'm also not sure if I should be using <code>rest</code> or <code>cdr</code>.  I'm not sure what the difference is.\n\n\nA:\n\nI think you're on the right track.  I would use <code>char-upper-case?</code> and <code>cdr</code> as you have.  I would also use <code>foldl</code> instead of a helper function.  I would also use <code>string-&gt;list</code> to convert the string to a list of characters.  I would also use <code>string-&gt;number</code> to convert the string to a number.  I would also use <code>string-append</code> to concatenate strings.  I would also use <code>string-length</code> to get the length of a string.  I would also use <code>string-ref</code> to get the character at a given index in a string.  I would also use <code>string-set!</code> to set the character at a given index in a string.  I would also use <code>string-copy</code> to make a copy of a string.  I would also use <code>string-fill!</code> to fill a string with a given character.  I would also use <code>string-&gt;symbol</code> to convert a string to a symbol.  I would also use <code>symbol-&gt",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run current_run)\n    (if (string-empty? test_str)\n        max_run\n        (if (char-upper-case? (string-ref test_str 0))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      (max max_run (add1 current_run))\n                                      (add1 current_run))\n            (max_run_uppercase_helper (substring test_str 1)\n                                      max_run\n                                      0))))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let loop ((test_str test_str)\n             (max_run 0)\n             (cur_run 0))\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (loop (rest test_str)\n             (if (> cur_run max_run)\n                 cur_run\n                 max_run)\n             (+ cur_run 1))]\n      [else\n       (loop (rest test_str)\n             max_run\n             0)])))\n",
    "  (let loop ([i 0] [max_run 0] [cur_run 0])\n    (if (= i (string-length test_str))\n        max_run\n        (if (char-upper-case? (string-ref test_str i))\n            (loop (+ i 1) (max max_run (add1 cur_run)) (add1 cur_run))\n            (loop (+ i 1) max_run 0)))))\n",
    "  (define (max_run_uppercase_helper test_str max_run current_run)\n    (cond\n      [(empty? test_str) max_run]\n      [(char-upper-case? (first test_str))\n       (max_run_uppercase_helper (rest test_str) (max max_run (add1 current_run)) (add1 current_run))]\n      [else (max_run_uppercase_helper (rest test_str) max_run 0)]))\n  (max_run_uppercase_helper test_str 0 0))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (add1 cur_run))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n",
    "  (let ([max_run 0]\n        [cur_run 0])\n    (for ([c (in-string test_str)])\n      (if (char-upper-case? c)\n          (set! cur_run (+ 1 cur_run))\n        (set! cur_run 0))\n      (if (&gt; cur_run max_run)\n          (set! max_run cur_run)))\n    max_run))\n</code>\n"
  ]
}