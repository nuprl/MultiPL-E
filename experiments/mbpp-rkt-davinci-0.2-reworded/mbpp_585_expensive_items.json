{
  "name": "mbpp_585_expensive_items",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the n most expensive items in a given dataset.\n(define (expensive_items items n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate expensive_items))\n    (check-equal? (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))))\n    (check-equal? (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09))) 2) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1))))\n    (check-equal? (candidate (list #hash((\"name\" .  \"Item-1\") (\"price\" .  101.1)) #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22)) #hash((\"name\" .  \"Item-3\") (\"price\" .  45.09)) #hash((\"name\" .  \"Item-4\") (\"price\" .  22.75))) 1) (list #hash((\"name\" .  \"Item-2\") (\"price\" .  555.22))))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (take (sort (lambda (x y) (&gt; (item-price x) (item-price y))) items) n))\n</code>\n",
    "  (take (sort items >) n))\n",
    "  (sort (lambda (x y) (&gt; (item-price x) (item-price y)))\n        (take n items)))\n",
    "  (take (sort items >) n))\n",
    "  (sort (take (sort items >) n) <))\n",
    "  (take (sort (lambda (a b) (&gt; (item-price a) (item-price b))) items) n))\n",
    "  (take (sort > (map item-price items)) n))\n",
    "  (if (empty? items)\n      empty\n      (let ([max-item (apply max items)])\n        (cons max-item\n              (expensive_items (remove max-item items) (- n 1))))))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (for/list ([item (in-list (sort items (\u03bb (x y) (&gt; (item-price x) (item-price y)))))]\n              #:when (&lt; (length (expensive_items items n)) n))\n    item))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort (lambda (x y) (&gt; (item-price x) (item-price y))) items) n))\n",
    "  (take (sort items >) n))\n",
    "  (take (sort items >) n))\n",
    "  (sort items (lambda (a b)\n                (> (item-price a) (item-price b)))))\n",
    "  (sort (lambda (x y) (&gt; (cdr x) (cdr y)))\n        (take n (sort (lambda (x y) (&gt; (cdr x) (cdr y))) items))))\n",
    "  (take (sort items >) n))\n"
  ]
}