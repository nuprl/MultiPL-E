{
  "name": "mbpp_12_sort_matrix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M\n        (lambda (row1 row2)\n          (< (apply + row1)\n             (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M\n        (lambda (row1 row2)\n          (< (apply + row1)\n             (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpog6t4spy.rkt:5:13: sum: unbound identifier\n  in: sum\n  location...:\n   /tmp/tmpog6t4spy.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons row (apply + row))) M)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw8dy67n.rkt:13:4\nactual:     '(((1 1 1) . 3) ((1 2 3) . 6) ((2 4 5) . 11))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw8dy67n.rkt:14:4\nactual:     '(((-2 4 -5) . -3) ((1 -1 1) . 1) ((1 2 3) . 6))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyw8dy67n.rkt:15:4\nactual:     '(((2 1 4) . 7) ((6 4 3) . 13) ((5 8 9) . 22))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpymb8k86g.rkt:5:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpwtxcpmk2.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpmr9m43mb.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmpmr9m43mb.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpymb8k86g.rkt:5:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzhbzyye.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzhbzyye.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptzhbzyye.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmprtss_xl0.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (row1 row2)\n            (< (apply + row1)\n               (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpymb8k86g.rkt:5:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpymb8k86g.rkt:5:21: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (define (sum-row row)\n    (apply + row))\n  (sort (map sum-row M) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp70zp5d84.rkt:14:4\nactual:     '(3 6 11)\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp70zp5d84.rkt:15:4\nactual:     '(-3 1 6)\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp70zp5d84.rkt:16:4\nactual:     '(7 13 22)\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (for/list ([row M])\n          (cons (apply + row) row))\n        < #:key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91xtqme4.rkt:14:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91xtqme4.rkt:15:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91xtqme4.rkt:16:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (row1 row2)\n             (< (apply + row1) (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpytpsk2x0.rkt:8:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpytpsk2x0.rkt:8:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmp07cj6qck.rkt:6:10: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp07cj6qck.rkt:6:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmpx3av9ddr.rkt:5:58: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx3av9ddr.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2)\n            (apply + r1)\n            (apply + r2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuri_jwk.rkt:14:4\nactual:     '((1 1 1) (2 4 5) (1 2 3))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuri_jwk.rkt:15:4\nactual:     '((1 -1 1) (-2 4 -5) (1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpwtxcpmk2.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmprtss_xl0.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmprtss_xl0.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M)\n        <\n        M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpizge77pb.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmpizge77pb.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpwtxcpmk2.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (&lt; (car r1) (car r2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123490,
      "stdout": "",
      "stderr": "/tmp/tmpwapfacmm.rkt:6:24: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpseu4f_rt.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpwtxcpmk2.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp420q_a6_.rkt:12:4\n\n<: contract violation\n  expected: real?\n  given: '(11 2 4 5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp420q_a6_.rkt:13:4\n\n<: contract violation\n  expected: real?\n  given: '(-3 -2 4 -5)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp420q_a6_.rkt:14:4\n\n<: contract violation\n  expected: real?\n  given: '(13 6 4 3)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw12x7e2.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (list (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpvgy20rpw.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpvgy20rpw.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (row1 row2)\n            (let ((sum1 (apply + row1))\n                  (sum2 (apply + row2)))\n              (if (&lt; sum1 sum2)\n                  #t\n                  #f)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmp077kvxkc.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpz83xlcm6.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517551,
      "stdout": "",
      "stderr": "/tmp/tmpw8gh36tr.rkt:6:28: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (x y)\n            (< (apply + x)\n               (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (a b) (&lt; (apply + a) (apply + b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmp62zjz28p.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M\n        (lambda (row1 row2)\n          (< (apply + row1)\n             (apply + row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphyh5_9ey.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpg82vc2el.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpwtxcpmk2.rkt:5:19: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123489,
      "stdout": "",
      "stderr": "/tmp/tmpc0k9hd0t.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort M\n        (lambda (a b)\n          (< (apply + a)\n             (apply + b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123492,
      "stdout": "",
      "stderr": "/tmp/tmpx9eo0jcp.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmpx9eo0jcp.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons row (apply + row))) M)\n        (lambda (a b) (&lt; (cdr a) (cdr b)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmpitep13dz.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 7\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwo_bgj7r.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:13:4\nactual:     '((3 1 1 1) (6 1 2 3) (11 2 4 5))\nexpected:   '((1 1 1) (1 2 3) (2 4 5))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:14:4\nactual:     '((-3 -2 4 -5) (1 1 -1 1) (6 1 2 3))\nexpected:   '((-2 4 -5) (1 -1 1) (1 2 3))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrdowx18.rkt:15:4\nactual:     '((7 2 1 4) (13 6 4 3) (22 5 8 9))\nexpected:   '((2 1 4) (6 4 3) (5 8 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map vector-sum M) M))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1666123491,
      "stdout": "",
      "stderr": "/tmp/tmph0l_ecec.rkt:5:13: vector-sum: unbound identifier\n  in: vector-sum\n  location...:\n   /tmp/tmph0l_ecec.rkt:5:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517552,
      "stdout": "",
      "stderr": "/tmp/tmp_sx4tm0a.rkt:7:8: :key: unbound identifier\n  in: :key\n  location...:\n   /tmp/tmp_sx4tm0a.rkt:7:8\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}