{
  "name": "mbpp_68_is_Monotonic",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given list is monotonic or not.\n(define (is_Monotonic A)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_Monotonic))\n    (check-equal? (candidate (list 6 5 4 4)) #t)\n    (check-equal? (candidate (list 1 2 2 3)) #t)\n    (check-equal? (candidate (list 1 3 2)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(> (first A) (first (rest A))) #f]\n    [else (is_Monotonic (rest A))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? (cdr A)) #t]\n    [(>= (car A) (cadr A)) (is_Monotonic (cdr A))]\n    [else #f]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(> (first A) (first (rest A))) #f]\n    [else (is_Monotonic (rest A))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(>= (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (if (null? (cdr A))\n      #t\n      (if (and (<= (car A) (cadr A)) (is_Monotonic (cdr A)))\n          #t\n          #f)))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(> (first A) (first (rest A))) #f]\n    [else (is_Monotonic (rest A))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(> (first A) (second A)) #f]\n    [else (is_Monotonic (rest A))]))\n",
    "  (if (null? (cdr A))\n      #t\n      (if (and (<= (car A) (cadr A)) (is_Monotonic (cdr A)))\n          #t\n          #f)))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [else\n     (and\n      (or (and (<= (first A) (first (rest A))) (is_Monotonic (rest A)))\n          (and (>= (first A) (first (rest A))) (is_Monotonic (rest A)))))]))\n",
    "  (cond\n    [(null? A) #t]\n    [(null? (cdr A)) #t]\n    [(> (car A) (cadr A)) #f]\n    [else (is_Monotonic (cdr A))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(= (length A) 1) #t]\n    [(and (<= (first A) (second A)) (is_Monotonic (rest A))) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(> (first A) (first (rest A))) #f]\n    [else (is_Monotonic (rest A))]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(<= (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [else\n     (cond\n       [(> (first A) (first (rest A))) (is_Monotonic (rest A))]\n       [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n       [else #f])]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(>= (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (if (null? (cdr A))\n      #t\n      (if (and (<= (car A) (cadr A)) (is_Monotonic (cdr A)))\n          #t\n          #f)))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(< (first A) (first (rest A))) (is_Monotonic (rest A))]\n    [else #f]))\n",
    "  (cond\n    [(empty? A) #t]\n    [(empty? (rest A)) #t]\n    [(> (first A) (first (rest A))) #f]\n    [else (is_Monotonic (rest A))]))\n"
  ]
}