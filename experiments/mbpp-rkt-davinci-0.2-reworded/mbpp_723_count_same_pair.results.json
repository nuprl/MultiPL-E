{
  "name": "mbpp_723_count_same_pair",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(= (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (= (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (cond\n       [(= (first nums1) (first nums2))\n        (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n       [else\n        (count_same_pair (rest nums1) (rest nums2))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (if (equal? (car nums1) (car nums2))\n          (+ 1 (count_same_pair (cdr nums1) (cdr nums2)))\n          (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(equal? (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(= (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (if (= (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(equal? (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (helper nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (helper (cdr nums1) (cdr nums2) (+ count 1))\n            (helper (cdr nums1) (cdr nums2) count))))\n  (helper nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (= (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (cond [(empty? nums1) count]\n          [(empty? nums2) count]\n          [(equal? (first nums1) (first nums2)) (iter (rest nums1) (rest nums2) (+ count 1))]\n          [else (iter (rest nums1) (rest nums2) count)]))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (length (filter (lambda (x) (= (car x) (cadr x))) (zip nums1 nums2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "/tmp/tmpr7m0t7j5.rkt:5:53: zip: unbound identifier\n  in: zip\n  location...:\n   /tmp/tmpr7m0t7j5.rkt:5:53\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      0\n      (+ (if (= (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (or (null? nums1) (null? nums2))\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (= (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (length (filter (lambda (x) (equal? (car x) (cadr x))) (zip nums1 nums2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "/tmp/tmpnzjgxx3f.rkt:5:58: zip: unbound identifier\n  in: zip\n  location...:\n   /tmp/tmpnzjgxx3f.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(equal? (first nums1) (first nums2))\n     (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (if (= (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (cond [(empty? nums1) count]\n          [(empty? nums2) count]\n          [else (iter (rest nums1) (rest nums2) (+ count (if (= (first nums1) (first nums2)) 1 0)))]))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond [(empty? nums1) count]\n          [(= (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n          [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (helper n1 n2 acc)\n    (if (null? n1)\n        acc\n        (if (equal? (car n1) (car n2))\n            (helper (cdr n1) (cdr n2) (+ acc 1))\n            (helper (cdr n1) (cdr n2) acc))))\n  (helper nums1 nums2 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "/tmp/tmp72wouehq.rkt:12:0: </code>: unbound identifier\n  in: </code>\n  location...:\n   /tmp/tmp72wouehq.rkt:12:0\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(empty? nums2) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (if (= (car nums1) (car nums2))\n          (+ 1 (count_same_pair (cdr nums1) (cdr nums2)))\n          (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond ((null? nums1) 0)\n        ((equal? (car nums1) (car nums2)) (+ 1 (count_same_pair (cdr nums1) (cdr nums2))))\n        (else (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (length (filter (lambda (x) (equal? (car x) (cadr x))) (zip nums1 nums2))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "/tmp/tmpnzjgxx3f.rkt:5:58: zip: unbound identifier\n  in: zip\n  location...:\n   /tmp/tmpnzjgxx3f.rkt:5:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (cond\n       [(= (first nums1) (first nums2))\n        (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n       [else\n        (count_same_pair (rest nums1) (rest nums2))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (add1 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xr9_nzl.rkt:15:4\nactual:     8\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xr9_nzl.rkt:16:4\nactual:     13\nexpected:   11\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xr9_nzl.rkt:17:4\nactual:     9\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xr9_nzl.rkt:18:4\nactual:     4\nexpected:   3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (= (car nums1) (car nums2))\n            (iter (cdr nums1) (cdr nums2) (+ count 1))\n            (iter (cdr nums1) (cdr nums2) count))))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (if (equal? (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(empty? nums2) count]\n      [else (if (equal? (first nums1) (first nums2))\n               (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))\n               (count_same_pair_iter (rest nums1) (rest nums2) count))]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (= (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond [(empty? nums1) count]\n          [(= (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n          [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(empty? nums2) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (if (= (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (if (equal? (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (cond\n       [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n       [else (count_same_pair (rest nums1) (rest nums2))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (if (equal? (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count-same-pair-iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count-same-pair-iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count-same-pair-iter (cdr nums1) (cdr nums2) count))))\n  (count-same-pair-iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count-same-pair-iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count-same-pair-iter (cdr nums1) (cdr nums2) (+ 1 count)))\n          (else (count-same-pair-iter (cdr nums1) (cdr nums2) count))))\n  (count-same-pair-iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (equal? (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(null? nums1) count]\n      [(equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))]\n      [else (count_same_pair_iter (cdr nums1) (cdr nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (= (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (if (equal? (car nums1) (car nums2))\n          (+ 1 (count_same_pair (cdr nums1) (cdr nums2)))\n          (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (let loop ([nums1 nums1] [nums2 nums2] [count 0])\n    (cond [(empty? nums1) count]\n          [(empty? nums2) count]\n          [(= (first nums1) (first nums2)) (loop (rest nums1) (rest nums2) (+ count 1))]\n          [else (loop (rest nums1) (rest nums2) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n        [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (cond\n       [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n       [else (count_same_pair (rest nums1) (rest nums2))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (= (car nums1) (car nums2)) 1 0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(equal? (first nums1) (first nums2))\n     (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (iter (cdr nums1) (cdr nums2) (+ count 1))\n            (iter (cdr nums1) (cdr nums2) count))))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (cond\n       [(equal? (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n       [else (count_same_pair (rest nums1) (rest nums2))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (if (equal? (first nums1) (first nums2))\n         (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n         (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (iter (cdr nums1) (cdr nums2) count))))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (= (car nums1) (car nums2))\n            (iter (cdr nums1) (cdr nums2) (+ count 1))\n            (iter (cdr nums1) (cdr nums2) count))))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (= (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (cond [(equal? (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n                   [else (count_same_pair (rest nums1) (rest nums2))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 acc)\n    (if (null? nums1)\n        acc\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ acc 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) acc))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (iter (cdr nums1) (cdr nums2) (+ count 1))\n            (iter (cdr nums1) (cdr nums2) count))))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(= (first nums1) (first nums2)) (iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (iter (rest nums1) (rest nums2) count)]))\n  (iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(empty? nums2) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else\n         (if (= (first nums1) (first nums2))\n             (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n             (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [(empty? nums2) 0]\n        [else (+ (if (equal? (first nums1) (first nums2)) 1 0)\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond [(empty? nums1) 0]\n        [else (if (= (first nums1) (first nums2))\n                 (+ 1 (count_same_pair (rest nums1) (rest nums2)))\n                 (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (if (null? nums1)\n        count\n        (if (equal? (car nums1) (car nums2))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1))\n            (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(empty? nums2) count]\n      [(= (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(empty? nums2) count]\n      [(= (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [else\n     (+ (if (equal? (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond [(empty? nums1) count]\n          [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n          [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (if (null? nums1)\n      0\n      (+ (if (= (car nums1) (car nums2))\n             1\n             0)\n         (count_same_pair (cdr nums1) (cdr nums2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond\n      [(empty? nums1) count]\n      [(equal? (first nums1) (first nums2)) (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))]\n      [else (count_same_pair_iter (rest nums1) (rest nums2) count)]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2)) (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else\n     (+ (if (= (first nums1) (first nums2)) 1 0)\n        (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [else (+ (if (equal? (first nums1) (first nums2)) 1 0) (count_same_pair (rest nums1) (rest nums2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond ((null? nums1) count)\n          ((equal? (car nums1) (car nums2))\n           (count_same_pair_iter (cdr nums1) (cdr nums2) (+ count 1)))\n          (else (count_same_pair_iter (cdr nums1) (cdr nums2) count))))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124218,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (define (count_same_pair_iter nums1 nums2 count)\n    (cond [(empty? nums1) count]\n          [(empty? nums2) count]\n          [else (if (equal? (first nums1) (first nums2))\n                   (count_same_pair_iter (rest nums1) (rest nums2) (+ count 1))\n                   (count_same_pair_iter (rest nums1) (rest nums2) count))]))\n  (count_same_pair_iter nums1 nums2 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1666124219,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n(define (count_same_pair nums1 nums2)\n  (cond\n    [(empty? nums1) 0]\n    [(empty? nums2) 0]\n    [(= (first nums1) (first nums2)) (+ 1 (count_same_pair (rest nums1) (rest nums2)))]\n    [else (count_same_pair (rest nums1) (rest nums2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_same_pair))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8) (list 2 2 3 1 2 6 7 9)) 4)\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 11)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17) (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 1)\n    (check-equal? (candidate (list 0 1 1 2) (list 0 1 2 2)) 3)\n))\n\n(test-humaneval)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}