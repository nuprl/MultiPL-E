{
  "name": "mbpp_463_max_subarray_product",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum product sublist of the given list.\n(define (max_subarray_product arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_subarray_product))\n    (check-equal? (candidate (list 1 -2 -3 0 7 -8 -2)) 112)\n    (check-equal? (candidate (list 6 -3 -10 0 2)) 180)\n    (check-equal? (candidate (list -2 -40 0 -2 -3)) 80)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_subarray_product_helper arr max_product max_product_start max_product_end)\n    (cond [(empty? arr) (values max_product max_product_start max_product_end)]\n          [else\n           (define (update-max-product-start-end max_product_start max_product_end)\n             (cond [(< max_product_start max_product_end) (values max_product_start max_product_end)]\n                   [else (values max_product_end max_product_start)]))\n           (define (update-max-product-start-end-helper max_product_start max_product_end)\n             (cond [(< max_product_start max_product_end) (values max_product_start max_product_end)]\n                   [else (values max_product_end max_product_start)]))\n           (define (update-max-product-start-end-helper-helper max_product_start max_product_end)\n             (cond [(< max_product_start max_product_end) (values max_product_start max_product_end)]\n                   [else (values max_product_end max_product_start)]))\n           (define (update-max-product-start-end-helper-helper-helper max_product_start max_product_end)\n             (cond [(< max_product_start max_product_end) (values max_product_start max_product_end)]\n                   [else (values max_product_end max_product_start)]))\n           (define (update-max-product-start-end-helper-helper-helper-helper max_product_start max_product_end)\n             (cond [(< max_product_start max_product_end) (values max_product_start max_product_end)]\n                   [else (values max_product_end max_product_start)]))\n           (define (update-max-product-start-end-helper-helper-helper-helper-helper max_product_start max_product_end)\n             (cond [(< max_product_start max_product_end) (values",
    "  (let loop ((arr arr)\n             (max-product (car arr))\n             (min-product (car arr))\n             (max-so-far (car arr)))\n    (if (null? arr)\n        max-so-far\n        (let ((curr-product (* (car arr) max-product))\n              (curr-min-product (* (car arr) min-product)))\n          (loop (cdr arr)\n                (max curr-product curr-min-product)\n                (min curr-product curr-min-product)\n                (max max-so-far (max curr-product curr-min-product)))))))\n",
    "  (define (max_product_helper arr max_product start_index end_index)\n    (cond\n      [(empty? arr) (values max_product start_index end_index)]\n      [(zero? (first arr))\n       (max_product_helper (rest arr) max_product start_index end_index)]\n      [else\n       (let ([product (* max_product (first arr))])\n         (if (&gt; product max_product)\n             (max_product_helper (rest arr) product start_index (+ end_index 1))\n             (max_product_helper (rest arr) max_product (+ start_index 1) (+ end_index 1))))]))\n  (max_product_helper arr 1 0 0))\n",
    "  (define (max_subarray_product_helper arr max_product min_product)\n    (cond\n      [(empty? arr) max_product]\n      [else\n       (let* ([curr (first arr)]\n              [rest (rest arr)]\n              [curr_max_product (max (max curr (* curr max_product)) (* curr min_product))]\n              [curr_min_product (min (min curr (* curr max_product)) (* curr min_product))])\n         (max_subarray_product_helper rest curr_max_product curr_min_product))]))\n  (max_subarray_product_helper arr (first arr) (first arr)))\n",
    "  (define (max_product_ending_here arr)\n    (define (helper arr max_ending_here min_ending_here)\n      (cond [(empty? arr) max_ending_here]\n            [(negative? (first arr))\n             (helper (rest arr)\n                     (max max_ending_here (min_ending_here * (first arr)))\n                     (min min_ending_here (first arr)))]\n            [else\n             (helper (rest arr)\n                     (max max_ending_here (max_ending_here * (first arr)))\n                     (min min_ending_here (min_ending_here * (first arr))))]))\n    (helper arr (first arr) (first arr)))\n  (max_product_ending_here arr))\n",
    "  (define (max_subarray_product_helper arr max_product_so_far max_product_ending_here min_product_ending_here)\n    (cond\n      [(empty? arr) max_product_so_far]\n      [else\n       (define curr_val (first arr))\n       (define max_product_ending_here_new (max (* curr_val max_product_ending_here) (* curr_val min_product_ending_here) curr_val))\n       (define min_product_ending_here_new (min (* curr_val max_product_ending_here) (* curr_val min_product_ending_here) curr_val))\n       (define max_product_so_far_new (max max_product_so_far max_product_ending_here_new))\n       (max_subarray_product_helper (rest arr) max_product_so_far_new max_product_ending_here_new min_product_ending_here_new)\n       ]\n      )\n    )\n  (max_subarray_product_helper arr -inf.0 -inf.0 inf.0)\n  )\n",
    "  (define (max_product_helper arr start end)\n    (if (= start end)\n        (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (define (max-product-helper arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-2 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper-2 (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-3 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper-3 (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-4 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper-4 (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-5 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper-5 (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-6 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper-6 (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-7 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start end) (first arr)]\n          [else (* (first arr) (max-product-helper-7 (rest arr) (+ start 1) end))]))\n  (define (max-product-helper-8 arr start end)\n    (cond [(empty? arr) 1]\n          [(= start",
    "  (define (helper arr max_so_far max_ending_here min_ending_here)\n    (cond\n      [(null? arr) max_so_far]\n      [else\n       (let* ([curr (car arr)]\n              [max_ending_here (max curr (* curr max_ending_here) (* curr min_ending_here))]\n              [min_ending_here (min curr (* curr max_ending_here) (* curr min_ending_here))]\n              [max_so_far (max max_so_far max_ending_here)])\n         (helper (cdr arr) max_so_far max_ending_here min_ending_here))]))\n  (helper arr -1000000000 1000000000 1000000000))\n",
    "  (define (max-product-helper arr max-product)\n    (if (null? arr)\n        max-product\n        (let ((cur-product (apply * arr)))\n          (if (&gt; cur-product max-product)\n              (max-product-helper (cdr arr) cur-product)\n              (max-product-helper (cdr arr) max-product)))))\n  (max-product-helper arr 0))\n",
    "  (define (max_subarray_product_helper arr max_product_so_far max_product_ending_here min_product_ending_here)\n    (cond [(empty? arr) max_product_so_far]\n          [else\n           (let ([x (first arr)])\n             (cond [(zero? x)\n                    (max_subarray_product_helper (rest arr) max_product_so_far 0 0)]\n                   [else\n                    (let ([max_product_ending_here (max (* x max_product_ending_here) (* x min_product_ending_here) x)]\n                          [min_product_ending_here (min (* x max_product_ending_here) (* x min_product_ending_here) x)])\n                      (max_subarray_product_helper (rest arr)\n                                                   (max max_product_so_far max_product_ending_here)\n                                                   max_product_ending_here\n                                                   min_product_ending_here))]))]))\n  (max_subarray_product_helper arr -1/0 1/0 1/0))\n",
    "  (let loop ((arr arr)\n             (max-product (car arr))\n             (min-product (car arr))\n             (max-so-far (car arr)))\n    (if (null? (cdr arr))\n        max-so-far\n        (let ((curr-max-product (* max-product (car (cdr arr))))\n              (curr-min-product (* min-product (car (cdr arr)))))\n          (loop (cdr arr)\n                (max curr-max-product (car (cdr arr)))\n                (min curr-min-product (car (cdr arr)))\n                (max max-so-far\n                     (max curr-max-product curr-min-product)))))))\n",
    "  (define (max_product_helper arr max_product)\n    (cond\n      [(null? arr) max_product]\n      [(< (car arr) 0)\n       (max_product_helper (cdr arr)\n                           (max max_product\n                                (max_product_helper (cdr arr) (car arr))))]\n      [else\n       (max_product_helper (cdr arr)\n                           (* max_product (car arr)))]))\n  (max_product_helper arr 1))\n",
    "  (define (max_subarray_product_helper arr start end)\n    (if (= start end)\n        (list (list (list (list arr) start) end)\n              (list (list (list arr) start) end))\n        (let* ((mid (/ (+ start end) 2))\n               (left (max_subarray_product_helper arr start mid))\n               (right (max_subarray_product_helper arr (+ mid 1) end))\n               (left_max (car left))\n               (left_min (cadr left))\n               (right_max (car right))\n               (right_min (cadr right))\n               (cross_max (max_subarray_product_cross arr start mid end))\n               (cross_min (min_subarray_product_cross arr start mid end)))\n          (list (max_subarray_product_max left_max right_max cross_max)\n                (min_subarray_product_min left_min right_min cross_min)))))\n  (max_subarray_product_helper arr 0 (- (length arr) 1)))\n",
    "  (let loop ((arr arr) (max-product 1) (min-product 1) (max-so-far 1))\n    (cond ((null? arr) max-so-far)\n          ((= 0 (car arr))\n           (loop (cdr arr) 1 1 max-so-far))\n          (else\n           (let ((max-product (* max-product (car arr)))\n                 (min-product (* min-product (car arr))))\n             (if (&lt; min-product 0)\n                 (set! min-product 1))\n             (if (&lt; max-product 0)\n                 (set! max-product 1))\n             (loop (cdr arr) max-product min-product\n                   (max max-so-far max-product)))))))\n</code>\n",
    "  (let loop ((arr arr) (max-product 1) (min-product 1) (max-so-far 1))\n    (cond ((null? arr) max-so-far)\n          ((= (car arr) 0) (loop (cdr arr) 1 1 max-so-far))\n          (else\n           (let* ((product (* (car arr) max-product))\n                  (min-product (min product (* (car arr) min-product)))\n                  (max-product (max product (* (car arr) min-product))))\n             (loop (cdr arr) max-product min-product (max max-so-far max-product)))))))\n",
    "  (define (max_product_helper arr start end)\n    (if (= start end)\n        (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (define (max_subarray_product_helper arr max_product max_product_ending_here min_product_ending_here)\n    (if (null? arr)\n        max_product\n        (let* ([first (car arr)]\n               [new_max_product_ending_here (max (max first (* first max_product_ending_here)) (* first min_product_ending_here))]\n               [new_min_product_ending_here (min (min first (* first max_product_ending_here)) (* first min_product_ending_here))]\n               [new_max_product (max new_max_product_ending_here max_product)])\n          (max_subarray_product_helper (cdr arr) new_max_product new_max_product_ending_here new_min_product_ending_here))))\n  (max_subarray_product_helper arr (car arr) (car arr) (car arr)))\n",
    "  (let loop ((arr arr)\n             (max-product (car arr))\n             (min-product (car arr))\n             (max-so-far max-product))\n    (cond ((null? arr) max-so-far)\n          ((= (car arr) 0) (loop (cdr arr)\n                                 1\n                                 1\n                                 (max max-so-far 0)))\n          (else (let ((new-max-product (* max-product (car arr)))\n                       (new-min-product (* min-product (car arr))))\n                  (loop (cdr arr)\n                        (max new-max-product (car arr))\n                        (min new-min-product (car arr))\n                        (max max-so-far (max new-max-product new-min-product))))))))\n",
    "  (let loop ([i 0] [j 0] [max-product 1] [min-product 1] [max-so-far 1])\n    (if (= i (length arr))\n        max-so-far\n        (let ([curr-product (if (&lt; 0 (list-ref arr i))\n                                (* (list-ref arr i) max-product)\n                                (* (list-ref arr i) min-product))])\n          (let ([max-product (if (&lt; 0 (list-ref arr i))\n                                 (max curr-product (list-ref arr i))\n                                 max-product)])\n            (let ([min-product (if (&lt; 0 (list-ref arr i))\n                                   min-product\n                                   (min curr-product (list-ref arr i)))])\n              (let ([max-so-far (max max-so-far curr-product)])\n                (loop (+ i 1) j max-product min-product max-so-far)))))))))\n</code>\n"
  ]
}