{
  "name": "mbpp_448_cal_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate the sum of perrin numbers.\n(define (cal_sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cal_sum))\n    (check-equal? (candidate 9) 49)\n    (check-equal? (candidate 10) 66)\n    (check-equal? (candidate 11) 88)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n)\n                   (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ (cal_perrin n) sum)))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum_perrin (- n 1))))))\n  (sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n)\n                   (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (cal_perrin (- n 3)) (cal_perrin (- n 2)) (cal_perrin (- n 1)))]))\n  (define (cal_sum_helper n sum)\n    (cond\n      [(= n 1) sum]\n      [else (cal_sum_helper (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 1) (perrin 1))\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1)))]))\n  (define (cal_sum-iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum-iter (- n 1) (+ (perrin n) sum))]))\n  (cal_sum-iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n</code>\nI have tried to use the <code>time</code> function to calculate the time of execution, but it seems that the <code>time</code> function is not working properly.\n<code>#lang racket\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) (perrin 0)]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (if (= n 1)\n      0\n      (if (= n 2)\n          0\n          (if (= n 3)\n              2\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))))))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2))\n                   (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 1)) (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_perrin n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (cal_sum_perrin (- n 1)))]))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (iter n sum)\n    (cond ((= n 0) sum)\n          (else (iter (- n 1) (+ (perrin n) sum)))))\n  (iter n 0))\n",
    "  (define (perrin-iter a b c count)\n    (if (= count n)\n        (+ a b c)\n        (perrin-iter b c (+ a b c) (+ count 1))))\n  (perrin-iter 3 0 2 3))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (cond\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 2]\n    [else (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))]))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_aux n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_aux (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum-iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum-iter n 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (perrin i))))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_aux n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_aux (- n 1) (+ sum (cal_perrin n)))]))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 3)) (cal_perrin (- n 2)) (cal_perrin (- n 1))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 1) (cal_perrin 1))\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ (perrin n) sum))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 1)) (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 1) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (iter n sum)\n    (if (= n 0)\n        sum\n        (iter (- n 1) (+ sum (perrin n)))))\n  (iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 1)) (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (if (= n 0)\n        0\n        (+ (cal_perrin n) (cal_sum_perrin (- n 1)))))\n  (cal_sum_perrin n))\n",
    "  (cond\n    [(= n 1) 0]\n    [(= n 2) 2]\n    [(= n 3) 2]\n    [else (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))]))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (iter i sum)\n    (if (= i n)\n        sum\n        (iter (+ i 1) (+ sum (perrin i)))))\n  (iter 0 0))\n",
    "  (if (= n 1)\n      2\n      (if (= n 2)\n          3\n          (if (= n 3)\n              2\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))))))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (if (= n 1)\n        (cal_perrin n)\n        (+ (cal_perrin n) (cal_sum_perrin (- n 1)))))\n  (cal_sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond\n      ((= n 0) 0)\n      (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 1)\n        (perrin 1)\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum n)\n    (cond\n      ((= n 0) 0)\n      (else (+ (perrin n) (cal_sum (- n 1))))))\n  (cal_sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) (perrin 0)]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ (cal_perrin n) sum)))))\n  (cal_sum_aux n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (perrin-iter n a b c)\n    (cond ((= n 0) 0)\n          ((= n 1) a)\n          ((= n 2) b)\n          ((= n 3) c)\n          (else (perrin-iter (- n 1) b c (+ a b c)))))\n  (perrin-iter n 2 3 5))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_perrin n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (cal_sum_perrin (- n 1)))]))\n  (cal_sum_perrin n))\n",
    "  (if (= n 1)\n      0\n      (if (= n 2)\n          2\n          (if (= n 3)\n              3\n              (if (= n 4)\n                  2\n                  (if (= n 5)\n                      5\n                      (if (= n 6)\n                          10\n                          (if (= n 7)\n                              17\n                              (if (= n 8)\n                                  28\n                                  (if (= n 9)\n                                      47\n                                      (if (= n 10)\n                                          76\n                                          (if (= n 11)\n                                              123\n                                              (if (= n 12)\n                                                  199\n                                                  (if (= n 13)\n                                                      322\n                                                      (if (= n 14)\n                                                          521\n                                                          (if (= n 15)\n                                                              843\n                                                              (if (= n 16)\n                                                                  1364\n                                                                  (if (= n 17)\n                                                                      2207\n                                                                      (if (= n 18)\n                                                                          3571\n                                                                          (if (= n 19)\n                                                                              5778\n                                                                              (if (= n 20)\n                                                                                  9349\n                                                                                  (if (= n 21)\n                                                                                      15127\n                                                                                      (if (= n 22)\n                                                                                          24476\n                                                                                          (if (= n 23)\n                                                                                              39603\n                                                                                              (if (= n 24)\n                                                                                                  64079\n                                                                                                  (if (= n 25)\n                                                                                                      103682\n                                                                                                      (if (= n 26)\n                                                                                                          167761\n                                                                                                          (if (= n 27)\n                                                                                                              271443\n                                                                                                              (if (= n 28)\n                                                                                                                  439204\n                                                                                                                  (if (= n 29)\n                                                                                                                      710647\n                                                                                                                      (if",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin-iter a b c count)\n    (if (= count n)\n        (+ a b c)\n        (perrin-iter b c (+ a b c) (+ count 1))))\n  (perrin-iter 3 0 2 1))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (perrin (- n 1)) (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 1) (perrin 1)]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (perrin n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 1) 3]\n      [(= n 2) 0]\n      [(= n 3) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 1) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1)) (perrin n))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) (perrin 0)]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 1) 3)\n      ((= n 2) 0)\n      ((= n 3) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_helper n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_helper (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (let loop ([i 1] [sum 0])\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (perrin n))))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum_perrin (- n 1))))))\n  (sum_perrin n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (iter n sum)\n    (cond ((= n 0) sum)\n          (else (iter (- n 1) (+ sum (perrin n))))))\n  (iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (cond\n    [(= n 0) 0]\n    [else (+ (perrin n) (cal_sum (- n 1)))]))\n",
    "  (define (perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin (- n 1)) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_aux n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_aux (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 3)) (perrin (- n 2)) (perrin (- n 1))))))\n  (define (cal_sum_aux n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_aux (- n 1) (+ sum (perrin n))))))\n  (cal_sum_aux n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond [(= n 0) 3]\n          [(= n 1) 0]\n          [(= n 2) 2]\n          [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_perrin n)\n    (cond [(= n 0) 0]\n          [else (+ (cal_perrin n) (cal_sum_perrin (- n 1)))]))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (iter n sum)\n    (cond ((= n 0) sum)\n          (else (iter (- n 1) (+ (perrin n) sum)))))\n  (iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (iter n sum)\n    (if (= n 0)\n        sum\n        (iter (- n 1) (+ sum (perrin n)))))\n  (iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (cal_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (cal_sum_iter (- n 1) (+ sum (perrin n)))]))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) (perrin 0)]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1))\n         (perrin n))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2))\n                   (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n)\n                   (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (define (cal_sum_perrin n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (cal_perrin n) (cal_sum_perrin (- n 1)))]))\n  (cal_sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (cal_sum (- n 1))))))\n  (cal_sum n))\n",
    "  (if (= n 0)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (perrin n)\n    (cond ((= n 1) 3)\n          ((= n 2) 0)\n          ((= n 3) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) (perrin 0)]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (= n 0)\n      0\n      (+ (perrin n) (cal_sum (- n 1)))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (let loop ((i 0) (sum 0))\n    (if (= i n)\n        sum\n        (loop (+ i 1) (+ sum (perrin i))))))\n",
    "  (if (= n 1)\n      2\n      (if (= n 2)\n          3\n          (if (= n 3)\n              2\n              (cal_sum (- n 1))\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)))\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))\n              )\n          )\n      )\n  )\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_helper n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_helper (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_helper n 0))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond\n      ((= n 0) 3)\n      ((= n 1) 0)\n      ((= n 2) 2)\n      (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_helper n sum)\n    (cond\n      ((= n 0) sum)\n      (else (cal_sum_helper (- n 1) (+ sum (cal_perrin n))))))\n  (cal_sum_helper n 0))\n",
    "  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(= n 2) 2]\n        [else (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))]))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (= n 0)\n      0\n      (+ (cal_sum (- n 1)) (perrin n))))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cal_sum_iter (- n 1) (+ sum (perrin n)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin-iter n a b c)\n    (if (= n 0)\n        0\n        (+ a (perrin-iter (- n 1) b c (+ a b c)))))\n  (perrin-iter n 3 0 2))\n",
    "  (if (= n 1)\n      2\n      (if (= n 2)\n          3\n          (if (= n 3)\n              2\n              (+ (cal_sum (- n 1)) (cal_sum (- n 2)) (cal_sum (- n 3)))))))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (sum_perrin (- n 1))))))\n  (sum_perrin n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ sum (perrin n))))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (cal_perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3)))]))\n  (cond\n    [(= n 0) 0]\n    [else (+ (cal_perrin n) (cal_sum (- n 1)))]))\n",
    "  (define (perrin n)\n    (cond\n      [(= n 0) 3]\n      [(= n 1) 0]\n      [(= n 2) 2]\n      [else (+ (perrin (- n 2)) (perrin (- n 3)))]))\n  (define (sum n)\n    (cond\n      [(= n 0) 0]\n      [else (+ (perrin n) (sum (- n 1)))]))\n  (sum n))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (if (= n 1)\n      0\n      (if (= n 2)\n          0\n          (if (= n 3)\n              2\n              (if (= n 4)\n                  2\n                  (if (= n 5)\n                      3\n                      (if (= n 6)\n                          3\n                          (if (= n 7)\n                              4\n                              (if (= n 8)\n                                  5\n                                  (if (= n 9)\n                                      7\n                                      (if (= n 10)\n                                          9\n                                          (if (= n 11)\n                                              12\n                                              (if (= n 12)\n                                                  16\n                                                  (if (= n 13)\n                                                      21\n                                                      (if (= n 14)\n                                                          29\n                                                          (if (= n 15)\n                                                              41\n                                                              (if (= n 16)\n                                                                  60\n                                                                  (if (= n 17)\n                                                                      86\n                                                                      (if (= n 18)\n                                                                          122\n                                                                          (if (= n 19)\n                                                                              169\n                                                                              (if (= n 20)\n                                                                                  239\n                                                                                  (if (= n 21)\n                                                                                      340\n                                                                                      (if (= n 22)\n                                                                                          484\n                                                                                          (if (= n 23)\n                                                                                              689\n                                                                                              (if (= n 24)\n                                                                                                  986\n                                                                                                  (if (= n 25)\n                                                                                                      1409\n                                                                                                      (if (= n 26)\n                                                                                                          2000\n                                                                                                          (if (= n 27)\n                                                                                                              2861\n                                                                                                              (if (= n 28)\n                                                                                                                  4092\n                                                                                                                  (if (= n 29)\n                                                                                                                      5842\n                                                                                                                      (if (= n 30)\n                                                                                                                          8",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (cal_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (cal_sum_iter (- n 1) (+ (perrin n) sum)))))\n  (cal_sum_iter n 0))\n",
    "  (define (perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (perrin (- n 2)) (perrin (- n 3))))))\n  (define (sum n)\n    (cond ((= n 0) 0)\n          (else (+ (perrin n) (sum (- n 1))))))\n  (sum n))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (iter i sum)\n    (cond ((= i n) sum)\n          (else (iter (+ i 1) (+ sum (cal_perrin i))))))\n  (iter 0 0))\n",
    "  (define (cal_perrin n)\n    (cond ((= n 0) 3)\n          ((= n 1) 0)\n          ((= n 2) 2)\n          (else (+ (cal_perrin (- n 2)) (cal_perrin (- n 3))))))\n  (define (cal_sum_perrin n)\n    (cond ((= n 0) 0)\n          (else (+ (cal_perrin n) (cal_sum_perrin (- n 1))))))\n  (cal_sum_perrin n))\n"
  ]
}