{
  "name": "mbpp_759_is_decimal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmplfr5p2h_.rkt:5:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (define (is_decimal_helper num)\n    (cond ((null? num) #t)\n          ((char-numeric? (car num)) (is_decimal_helper (cdr num)))\n          ((char=? (car num) #\\.) (is_decimal_helper (cdr num)))\n          (else #f)))\n  (is_decimal_helper (string->list num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510369,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8a422a0l.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8a422a0l.rkt:21:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([dot (string-index num \".\")]\n        [len (string-length num)])\n    (and dot\n         (= (- len dot) 3)\n         (every (lambda (c) (char-numeric? c))\n                (string-&gt;list num)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_z66vd0u.rkt:10:16: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (not (empty? num))\n       (not (string-contains num #\\.))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\E))\n       (not (string-contains num #\\-))\n       (not (string-contains num #\\+))\n       (not (string-contains num #\\,))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\a))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\c))\n       (not (string-contains num #\\d))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\g))\n       (not (string-contains num #\\h))\n       (not (string-contains num #\\i))\n       (not (string-contains num #\\j))\n       (not (string-contains num #\\k))\n       (not (string-contains num #\\l))\n       (not (string-contains num #\\m))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\o))\n       (not (string-contains num #\\p))\n       (not (string-contains num #\\q))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\u))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\w))\n       (not (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmps_u40j_9.rkt:42:12: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 43\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (cond\n    [(empty? num) #f]\n    [(regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpalgyogi1.rkt:7:19: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (cond\n    [(string=? num \"\") #t]\n    [(string=? num \".\") #t]\n    [(string=? num \"0\") #t]\n    [(string=? num \"0.\") #t]\n    [(string=? num \"0.0\") #t]\n    [(string=? num \"0.00\") #t]\n    [(string=? num \"0.01\") #t]\n    [(string=? num \"0.10\") #t]\n    [(string=? num \"0.11\") #t]\n    [(string=? num \"1\") #t]\n    [(string=? num \"1.\") #t]\n    [(string=? num \"1.0\") #t]\n    [(string=? num \"1.00\") #t]\n    [(string=? num \"1.01\") #t]\n    [(string=? num \"1.10\") #t]\n    [(string=? num \"1.11\") #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaefb2kyt.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (not (empty? num))\n       (not (string-contains num #\\.))\n       (not (string-contains num #\\e))\n       (not (string-contains num #\\E))\n       (not (string-contains num #\\+))\n       (not (string-contains num #\\-))\n       (not (string-contains num #\\,))\n       (not (string-contains num #\\s))\n       (not (string-contains num #\\n))\n       (not (string-contains num #\\t))\n       (not (string-contains num #\\r))\n       (not (string-contains num #\\f))\n       (not (string-contains num #\\v))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\a))\n       (not (string-contains num #\\0))\n       (not (string-contains num #\\1))\n       (not (string-contains num #\\2))\n       (not (string-contains num #\\3))\n       (not (string-contains num #\\4))\n       (not (string-contains num #\\5))\n       (not (string-contains num #\\6))\n       (not (string-contains num #\\7))\n       (not (string-contains num #\\8))\n       (not (string-contains num #\\9))\n       (not (string-contains num #\\x))\n       (not (string-contains num #\\X))\n       (not (string-contains num #\\o))\n       (not (string-contains num #\\O))\n       (not (string-contains num #\\b))\n       (not (string-contains num #\\B))\n       (not (string-contains num #\\d))\n       (not (string-contains num #\\D))\n       (not (string-contains num #\\^))\n       (not (string-contains num #\\$))\n       (not (string-contains num #\\*))\n       (not (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp0o_c9zxj.rkt:42:12: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 43\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (number? num)\n       (not (integer? num))\n       (not (exact? num))\n       (not (negative? num))\n       (not (> num 1))\n       (not (< num 0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_66erkza.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_66erkza.rkt:20:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp45ud1pt6.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpormpykt3.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (string-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpu1fdtxrs.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (if (string-contains num #\\.)\n      (let ([dec-pos (string-index num #\\.)])\n        (if (= (string-length num) (+ dec-pos 3))\n            (and (is_digit (substring num 0 dec-pos))\n                 (is_digit (substring num (+ dec-pos 1) (string-length num))))\n            #f))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpg9hlizjf.rkt:5:7: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmpg9hlizjf.rkt:5:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-contains num #\".\")\n       (let ([decimal-places (string-index num #\".\")])\n         (and (&gt;= decimal-places 2)\n              (&lt;= decimal-places 4)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp868jli09.rkt:9:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 10\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpbazt8mfk.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpkraaap3_.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ((decimal-regexp (regexp #rx\"^[0-9]*\\\\.[0-9]{2}$\")))\n    (regexp-match? decimal-regexp num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgswdrvl.rkt:13:4\n\nregexp: contract violation\n  expected: string?\n  given: #rx\"^[0-9]*\\\\.[0-9]{2}$\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgswdrvl.rkt:14:4\n\nregexp: contract violation\n  expected: string?\n  given: #rx\"^[0-9]*\\\\.[0-9]{2}$\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgswdrvl.rkt:15:4\n\nregexp: contract violation\n  expected: string?\n  given: #rx\"^[0-9]*\\\\.[0-9]{2}$\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgswdrvl.rkt:16:4\n\nregexp: contract violation\n  expected: string?\n  given: #rx\"^[0-9]*\\\\.[0-9]{2}$\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdgswdrvl.rkt:17:4\n\nregexp: contract violation\n  expected: string?\n  given: #rx\"^[0-9]*\\\\.[0-9]{2}$\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphp5vd_r4.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphp5vd_r4.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmsi52j8.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmsi52j8.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (not (empty? num))\n       (not (regexp-match #rx\"^[0-9]*$\" num))\n       (not (regexp-match #rx\"^[0-9]*\\\\.[0-9]{3,}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgucff4it.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgucff4it.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgucff4it.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpkraaap3_.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}0$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpdbbrvpjg.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp45ud1pt6.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (define (is_decimal-helper num)\n    (if (string-empty? num)\n        #t\n        (if (string-contains \"0123456789.\" num)\n            (is_decimal-helper (string-drop num 1))\n            #f)))\n  (if (string-contains \".\" num)\n      (if (= (string-count \".\" num) 1)\n          (if (string-contains \".\" (string-drop num (string-index \".\" num)))\n              #f\n              (is_decimal-helper num))\n          #f)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmptoof0lar.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmptoof0lar.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([len (string-length num)])\n    (and (not (string-contains num #\\.))\n         (not (string-contains num #\\e))\n         (not (string-contains num #\\E))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\-))\n         (not (string-contains num #\\s))\n         (not (string-contains num #\\f))\n         (not (string-contains num #\\d))\n         (not (string-contains num #\\n))\n         (not (string-contains num #\\r))\n         (not (string-contains num #\\t))\n         (not (string-contains num #\\v))\n         (not (string-contains num #\\b))\n         (not (string-contains num #\\a))\n         (not (string-contains num #\\0))\n         (not (string-contains num #\\1))\n         (not (string-contains num #\\2))\n         (not (string-contains num #\\3))\n         (not (string-contains num #\\4))\n         (not (string-contains num #\\5))\n         (not (string-contains num #\\6))\n         (not (string-contains num #\\7))\n         (not (string-contains num #\\8))\n         (not (string-contains num #\\9))\n         (not (string-contains num #\\x))\n         (not (string-contains num #\\X))\n         (not (string-contains num #\\o))\n         (not (string-contains num #\\O))\n         (not (string-contains num #\\b))\n         (not (string-contains num #\\B))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-contains num #\\+))\n         (not (string-cont\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp33xt6foc.rkt:41:14: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 42\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp45ud1pt6.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpormpykt3.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (equal? (string-length num)\n               (+ (string-length (number-&gt;string (floor (string-&gt;number num))))\n                  (string-length (number-&gt;string (floor (modulo (string-&gt;number num) 1))))\n                  1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpl196a5r3.rkt:7:15: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 11\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphp5vd_r4.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphp5vd_r4.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (define (is_decimal-helper num)\n    (cond\n      [(empty? num) #t]\n      [(char=? (first num) #\\.) (if (empty? (rest num)) #f (is_decimal-helper (rest num)))]\n      [(char=? (first num) #\\0) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\1) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\2) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\3) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\4) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\5) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\6) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\7) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\8) (is_decimal-helper (rest num))]\n      [(char=? (first num) #\\9) (is_decimal-helper (rest num))]\n      [else #f]))\n  (if (empty? num) #f (is_decimal-helper num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qd5vede.rkt:27:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"123.11\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qd5vede.rkt:28:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"e666.86\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qd5vede.rkt:29:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"3.124587\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qd5vede.rkt:30:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"1.11\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qd5vede.rkt:31:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"1.1.11\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp45ud1pt6.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (or (string-suffix? \".0\" num)\n           (string-suffix? \".00\" num)\n           (string-suffix? \".000\" num)\n           (string-suffix? \".0000\" num)\n           (string-suffix? \".00000\" num)\n           (string-suffix? \".000000\" num)\n           (string-suffix? \".0000000\" num)\n           (string-suffix? \".00000000\" num)\n           (string-suffix? \".000000000\" num)\n           (string-suffix? \".0000000000\" num)\n           (string-suffix? \".00000000000\" num)\n           (string-suffix? \".000000000000\" num)\n           (string-suffix? \".0000000000000\" num)\n           (string-suffix? \".00000000000000\" num)\n           (string-suffix? \".000000000000000\" num)\n           (string-suffix? \".0000000000000000\" num)\n           (string-suffix? \".00000000000000000\" num)\n           (string-suffix? \".000000000000000000\" num)\n           (string-suffix? \".0000000000000000000\" num)\n           (string-suffix? \".00000000000000000000\" num)\n           (string-suffix? \".000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000000000\" num)\n           (string-suffix? \".000000000000000000000000000000000\" num)\n           (string-suffix? \".0000000000000000000000000000000000\" num)\n           (string-suffix? \".00000000000000000000000000000000000\" num)\n           (string\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpw97v5bra.rkt:41:11: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 42\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp1spdm8de.rkt:7:7: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwdth0n0u.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwdth0n0u.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ((regexp (regexp \"[0-9]*\\\\.[0-9]{2}\")))\n    (regexp-match regexp num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4pk7q44.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4pk7q44.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match? #rx\"^[0-9]+(\\.[0-9]{3,})?$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpormpykt3.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([num (string->number num)])\n    (and (number? num)\n         (not (negative? num))\n         (not (zero? (modulo num 1)))\n         (not (> (modulo num 1) 0.01)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ctofpob.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 123.11\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ctofpob.rkt:18:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3.124587\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ctofpob.rkt:19:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1.11\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([decimal-regexp #rx\"^[0-9]+\\.[0-9]{2}$\"])\n    (regexp-match? decimal-regexp num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp0xvw5s04.rkt:5:24: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3c_11eev.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3c_11eev.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([decimal-regexp #rx\"[0-9]+\\.[0-9]{2}\"]])\n    (regexp-match? decimal-regexp num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp962u3u8d.rkt:5:24: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp91gf93ta.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmsi52j8.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmsi52j8.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([digits (string-&gt;list num)])\n    (and (every (lambda (x) (char-numeric? x)) digits)\n         (or (not (member #\\. digits))\n             (and (= (length (member #\\. digits)) 1)\n                  (or (not (member #e digits))\n                      (and (= (length (member #e digits)) 1)\n                           (and (not (member #\\- digits))\n                                (or (not (member #\\+ digits))\n                                    (and (= (length (member #\\+ digits)) 1)\n                                         (and (not (member #\\- digits))\n                                              (or (not (member #\\+ digits))\n                                                  (and (= (length (member #\\+ digits)) 1)\n                                                       (and (not (member #\\- digits))\n                                                            (or (not (member #\\+ digits))\n                                                                (and (= (length (member #\\+ digits)) 1)\n                                                                     (and (not (member #\\- digits))\n                                                                          (or (not (member #\\+ digits))\n                                                                              (and (= (length (member #\\+ digits)) 1)\n                                                                                   (and (not (member #\\- digits))\n                                                                                        (or (not (member #\\+ digits))\n                                                                                            (and (= (length (member #\\+ digits)) 1)\n                                                                                                 (and (not (member #\\- digits))\n                                                                                                      (or (not (member #\\+ digits))\n                                                                                                          (and (= (length (member #\\+ digits)) 1)\n                                                                                                               (and (not (member #\\- digits))\n                                                                                                                    (or (not (member #\\+ digits))\n                                                                                                                        (and (= (length (member #\\+ digits)) 1)\n                                                                                                                             (and (not (member #\\- digits))\n                                                                                                                                  (or (not (member #\\+ digits))\n                                                                                                                                      (and (= (length (member #\\+ digits\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpthits9jj.rkt:9:35: read-syntax: no digits\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3,}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpqw8ub4jf.rkt:5:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (cond\n    [(regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp9etmqqv4.rkt:6:19: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([len (string-length num)])\n    (and (not (string-contains num #\\.))\n         (and (string-contains num #\\e)\n              (and (string-contains num #\\E)\n                   (and (string-contains num #\\+)\n                        (and (string-contains num #\\-))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpoo8jz2i0.rkt:6:15: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmpoo8jz2i0.rkt:6:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp91gf93ta.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([digits (string-&gt;list num)])\n    (and (not (empty? digits))\n         (every (lambda (x) (char-numeric? x)) digits)\n         (let ([decimal-point (string-index num \".\")]\n               [decimal-point-index (if decimal-point (sub1 decimal-point) -1)])\n           (and (or (= decimal-point-index -1)\n                    (= decimal-point-index (sub1 (string-length num))))\n                (or (= decimal-point-index -1)\n                    (= (sub1 (string-length num)) (add1 decimal-point-index))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp0x2ikana.rkt:13:82: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string-&gt;number num)\n       (string\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpek_o2pli.rkt:51:7: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-match #rx\"[0-9]+\\.[0-9]{2}\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpm196s5sy.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([n (string->number num)])\n    (and (number? n)\n         (not (integer? n))\n         (not (negative? n)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7qx6hog3.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (define (is_decimal-helper num)\n    (cond\n      [(empty? num) #t]\n      [(char=? (first num) #\\.)\n       (if (empty? (rest num)) #f\n           (if (empty? (rest (rest num))) #t\n               (is_decimal-helper (rest (rest num)))))]\n      [(char-numeric? (first num)) (is_decimal-helper (rest num))]\n      [else #f]))\n  (is_decimal-helper (string->list num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgignppiw.rkt:23:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgignppiw.rkt:25:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (if (string-contains num #\\.)\n      (let ([decimal-index (string-index num #\\.)])\n        (if (= 2 (- (string-length num) decimal-index))\n            #t\n            #f))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmp21ove44h.rkt:5:7: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmp21ove44h.rkt:5:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmplfr5p2h_.rkt:5:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (number? num)\n       (not (integer? num))\n       (not (zero? (modulo num 1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9u40fx0q.rkt:14:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9u40fx0q.rkt:17:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmp91gf93ta.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp45ud1pt6.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([decimal-regexp #rx\"([0-9]+\\.[0-9]{2})\" ])\n    (regexp-match? decimal-regexp num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpuu1w4cx3.rkt:5:24: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (define (is_decimal_helper num)\n    (if (string-empty? num)\n        #t\n        (if (or (char=? (string-ref num 0) #\\.)\n                (char=? (string-ref num 0) #\\0)\n                (char=? (string-ref num 0) #\\1)\n                (char=? (string-ref num 0) #\\2)\n                (char=? (string-ref num 0) #\\3)\n                (char=? (string-ref num 0) #\\4)\n                (char=? (string-ref num 0) #\\5)\n                (char=? (string-ref num 0) #\\6)\n                (char=? (string-ref num 0) #\\7)\n                (char=? (string-ref num 0) #\\8)\n                (char=? (string-ref num 0) #\\9))\n            (is_decimal_helper (substring num 1))\n            #f)))\n  (if (string-length num)\n      (is_decimal_helper num)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpe1wdg71h.rkt:6:9: string-empty?: unbound identifier\n  in: string-empty?\n  location...:\n   /tmp/tmpe1wdg71h.rkt:6:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-match #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "/tmp/tmpxrmmbvjv.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (number? num)\n       (not (integer? num))\n       (not (negative? num))\n       (not (> num 100))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdu7ax7le.rkt:15:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdu7ax7le.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpkraaap3_.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp69in6fa9.rkt:6:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (define (is_decimal_helper num)\n    (if (empty? num)\n        #t\n        (if (or (char=? (first num) #\\.)\n                (char=? (first num) #\\0)\n                (char=? (first num) #\\1)\n                (char=? (first num) #\\2)\n                (char=? (first num) #\\3)\n                (char=? (first num) #\\4)\n                (char=? (first num) #\\5)\n                (char=? (first num) #\\6)\n                (char=? (first num) #\\7)\n                (char=? (first num) #\\8)\n                (char=? (first num) #\\9))\n            (is_decimal_helper (rest num))\n            #f)))\n  (if (is_decimal_helper num)\n      (if (char=? (first (reverse num)) #\\.)\n          #f\n          #t)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxjp8t300.rkt:32:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"123.11\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxjp8t300.rkt:33:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"e666.86\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxjp8t300.rkt:34:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"3.124587\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxjp8t300.rkt:35:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"1.11\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxjp8t300.rkt:36:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"1.1.11\"\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpkraaap3_.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]*\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp9oc61ko1.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ((dot-index (string-index num \".\")))\n    (if (not dot-index)\n        #f\n        (let ((precision (string-length (substring num (+ dot-index 1)))))\n          (if (= precision 2)\n              #t\n              #f)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmphd2yowjh.rkt:5:20: string-index: unbound identifier\n  in: string-index\n  location...:\n   /tmp/tmphd2yowjh.rkt:5:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match #rx\"^[0-9]+\\.[0-9]{2}$\" num) #t))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmpbu_8ohd5.rkt:5:21: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]*\\\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^\\\\.[0-9]{2}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivn34hy8.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivn34hy8.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match #rx\"^[0-9]+\\\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123005,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmsi52j8.rkt:13:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmsi52j8.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpkraaap3_.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (not (empty? num))\n       (string-contains num #\\.)\n       (string-contains num #\\e)\n       (string-contains num #\\E)\n       (string-contains num #\\+)\n       (string-contains num #\\-)\n       (string-contains num #\\0)\n       (string-contains num #\\1)\n       (string-contains num #\\2)\n       (string-contains num #\\3)\n       (string-contains num #\\4)\n       (string-contains num #\\5)\n       (string-contains num #\\6)\n       (string-contains num #\\7)\n       (string-contains num #\\8)\n       (string-contains num #\\9)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmp_chuet1a.rkt:6:8: string-contains: unbound identifier\n  in: string-contains\n  location...:\n   /tmp/tmp_chuet1a.rkt:6:8\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (let ([num-list (string-&gt;list num)])\n         (let loop ([num-list num-list]\n                    [decimal-count 0])\n           (cond\n             [(null? num-list) (= decimal-count 2)]\n             [(char=? (car num-list) #\\.)\n              (loop (cdr num-list) (+ decimal-count 1))]\n             [else (loop (cdr num-list) decimal-count)])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmptxh7ji43.rkt:13:58: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp_f93oh8h.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string-&gt;number num)\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \".\")\n       (string-contains num \"\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmp72975pjs.rkt:65:36: read-syntax: expected a closing `\"`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)\n       (not (regexp-match? #rx\"^[0-9]+\\.[0-9]{3}$\" num))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmpkraaap3_.rkt:5:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+(\\.[0-9]{1,2})?$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123004,
      "stdout": "",
      "stderr": "/tmp/tmp8olmbm5x.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmp8212vuxd.rkt:5:17: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([len (string-length num)])\n    (and (not (regexp-match #rx\"^[-+]?[0-9]+$\" num))\n         (not (regexp-match #rx\"^[-+]?[0-9]*\\\\.[0-9]{3,}$\" num))\n         (not (regexp-match #rx\"^[-+]?[0-9]*\\\\.[0-9]{0,1}$\" num)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjsz5sf3.rkt:16:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjsz5sf3.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjsz5sf3.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (and (string? num)\n       (regexp-match? #rx\"^[0-9]+\\.[0-9]{2}$\" num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1665510368,
      "stdout": "",
      "stderr": "/tmp/tmpp4szi_4v.rkt:6:22: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check whether a given string is a decimal number with a precision of 2.\n(define (is_decimal num)\n  (let ([decimal-regexp #rx\"[0-9]+\\.[0-9]{2}\"])\n    (regexp-match? decimal-regexp num)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_decimal))\n    (check-equal? (candidate \"123.11\") #t)\n    (check-equal? (candidate \"e666.86\") #f)\n    (check-equal? (candidate \"3.124587\") #f)\n    (check-equal? (candidate \"1.11\") #t)\n    (check-equal? (candidate \"1.1.11\") #f)\n))\n\n(test-humaneval)",
      "timestamp": 1666123006,
      "stdout": "",
      "stderr": "/tmp/tmp6pjox9f5.rkt:5:24: read-syntax: unknown escape sequence `\\.` in string\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}