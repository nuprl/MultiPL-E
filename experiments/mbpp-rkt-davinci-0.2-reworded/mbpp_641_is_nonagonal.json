{
  "name": "mbpp_641_is_nonagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth nonagonal number.\n(define (is_nonagonal n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nonagonal))\n    (check-equal? (candidate 10) 325)\n    (check-equal? (candidate 15) 750)\n    (check-equal? (candidate 18) 1089)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ((n n) (i 0))\n    (if (= n (nonagonal i))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n i) #t]\n      [(&gt; n i) (loop (- n i) (+ i 1))]\n      [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ((i 1) (j 1))\n    (cond ((= n i) #t)\n          ((&gt; n i) (loop (+ i j) (+ j 1)))\n          (else #f))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* 2 i)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let ([x (sqrt (+ (* 8 n) 1))])\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let loop ([i 1] [j 0])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 0)]\n      [else (loop i (+ j 1))])))\n",
    "  (let ([n (abs n)])\n    (and (integer? n)\n         (or (= n 0)\n             (let loop ([n n] [i 1] [j 1])\n               (if (= n i)\n                   #t\n                   (loop (- n i) (+ i 1) (+ j 1))))))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n i) #t]\n      [(&gt; n i) (loop (- n i) (+ i 1))]\n      [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (- n 1)]\n                  [n-1-sq (sqr n-1)]\n                  [n-1-sq-1 (- n-1-sq 1)])\n             (and (integer? n-1-sq)\n                  (integer? n-1-sq-1)\n                  (= n-1-sq-1 (* 3 n-1)))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i n))\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_nonagonal-iter n i)\n    (if (= n (+ i (* i 2)))\n        #t\n        (if (&lt; n (+ i (* i 2)))\n            #f\n            (is_nonagonal-iter n (+ i 1)))))\n  (is_nonagonal-iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (- n 1) (inc i)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([m (sqrt (+ (* 8 n) 1))])\n             (and (integer? m)\n                  (= (+ (* m m) m) (* 8 n)))))))\n"
  ]
}