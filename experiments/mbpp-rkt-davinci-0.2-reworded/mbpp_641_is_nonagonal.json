{
  "name": "mbpp_641_is_nonagonal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth nonagonal number.\n(define (is_nonagonal n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_nonagonal))\n    (check-equal? (candidate 10) 325)\n    (check-equal? (candidate 15) 750)\n    (check-equal? (candidate 18) 1089)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let loop ((n n) (i 0))\n    (if (= n (nonagonal i))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n i) #t]\n      [(&gt; n i) (loop (- n i) (+ i 1))]\n      [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ((i 1) (j 1))\n    (cond ((= n i) #t)\n          ((&gt; n i) (loop (+ i j) (+ j 1)))\n          (else #f))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* 2 i)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let ([x (sqrt (+ (* 8 n) 1))])\n    (and (integer? x)\n         (integer? (/ (+ x 1) 2)))))\n",
    "  (let loop ([i 1] [j 0])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 0)]\n      [else (loop i (+ j 1))])))\n",
    "  (let ([n (abs n)])\n    (and (integer? n)\n         (or (= n 0)\n             (let loop ([n n] [i 1] [j 1])\n               (if (= n i)\n                   #t\n                   (loop (- n i) (+ i 1) (+ j 1))))))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n i) #t]\n      [(&gt; n i) (loop (- n i) (+ i 1))]\n      [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (- n 1)]\n                  [n-1-sq (sqr n-1)]\n                  [n-1-sq-1 (- n-1-sq 1)])\n             (and (integer? n-1-sq)\n                  (integer? n-1-sq-1)\n                  (= n-1-sq-1 (* 3 n-1)))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i n))\n            #t\n            (loop (+ i 1))))))\n",
    "  (define (is_nonagonal-iter n i)\n    (if (= n (+ i (* i 2)))\n        #t\n        (if (&lt; n (+ i (* i 2)))\n            #f\n            (is_nonagonal-iter n (+ i 1)))))\n  (is_nonagonal-iter n 1))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (- n 1) (inc i)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([m (sqrt (+ (* 8 n) 1))])\n             (and (integer? m)\n                  (= (+ (* m m) m) (* 8 n)))))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular i)\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ((i 1))\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (zero? n)\n           (and (positive? n)\n                (is_nonagonal (- n 3))))))\n",
    "  (let loop ((i 1) (j 1) (k 1))\n    (cond ((= n i) #t)\n          ((&gt; n i) (loop (+ i j) (+ j 1) (+ k 1)))\n          (else #f))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let loop ((i 1))\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ((n n) (i 1))\n    (cond ((= n 0) #t)\n          ((< n 0) #f)\n          (else (loop (- n i) (+ i 1))))))\n",
    "  (let loop ([i 1])\n    (if (= n (nonagonal i))\n        #t\n        (loop (+ i 1)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_square (+ (* 2 i) 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n 0)\n        #t\n        (if (&lt; n 0)\n            #f\n            (loop (- n i) (+ i 1))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (let loop ((i 1))\n    (cond ((= i n) #t)\n          ((= i (+ n (* 3 (- i 1)))) #t)\n          (else (loop (+ i 1))))))\n",
    "  (let loop ([n n])\n    (if (zero? n)\n        #t\n        (and (is_nonagonal (- n 1))\n             (is_nonagonal (- n 2))\n             (is_nonagonal (- n 3))))))\n",
    "  (let loop ((i 1))\n    (cond ((= n (* i (+ i 1) (/ (+ i 1) 2))) #t)\n          ((&gt; n (* i (+ i 1) (/ (+ i 1) 2))) (loop (+ i 1)))\n          (else #f))))\n",
    "  (let loop ([n n] [i 1])\n    (cond [(= n (+ i (* i 2))) #t]\n          [(&gt; n (+ i (* i 2))) (loop (- n 1) (+ i 1))]\n          [else #f])))\n",
    "  (let ([n (floor (/ (+ (sqrt (+ (* 8 n) 1)) 1) 2))])\n    (and (= (* 2 n (- n 1)) (- n))\n         (= (* 2 n (+ n 1)) (+ n)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 8 (* 2 n)) 3))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (and (integer? n)\n       (let loop ([i 1] [j 1])\n         (if (= n (+ i j))\n             #t\n             (if (&lt; n (+ i j))\n                 (loop i (+ j 1))\n                 (loop (+ i 1) j))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (and (integer? n)\n       (zero? (modulo n 2))))\n",
    "  (and (integer? n)\n       (zero? (modulo n 2))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let ((n-1 (- n 1)))\n    (or (and (integer? (/ n-1 3)) (integer? (/ n-1 3)))\n        (and (integer? (/ n-1 3)) (integer? (/ n-1 3))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (sub1 n) (inc i)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let ([n (quotient n 2)])\n    (and (integer? n) (not (zero? n)))))\n",
    "  (let loop ((n n) (i 1))\n    (cond ((= n i) #t)\n          ((&gt; n i) (loop (- n i) (+ i 1)))\n          (else #f))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (let loop ([n n] [i 1])\n         (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n             #t\n             (loop (- n i) (+ i 1))))))\n",
    "  (let ([n (integer->inexact n)])\n    (and (integer? n)\n         (exact-integer? (sqrt (+ (* 8 n) 1))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (and (integer? n)\n       (zero? (modulo n 2))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let ((n1 (sqrt (+ (* 8 n) 1))))\n    (and (integer? n1)\n         (= (modulo n1 2) 1))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (is_nonagonal (- n 3)))))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= n sum)\n        #t\n        (if (&lt; n sum)\n            #f\n            (loop (+ i 1) (+ sum i))))))\n",
    "  (let loop ((i 1) (j 1))\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (loop (+ i j) (+ j 1))))))\n",
    "  (let ((n-1 (- n 1)))\n    (and (integer? (/ (+ 1 (sqrt (+ 1 (* 8 n-1)))) 2))\n         (integer? (/ (+ 1 (sqrt (+ 1 (* 8 n-1)))) 2)))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular i)\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (- n 1) (inc i)))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) #t]\n      [(< i n) (loop (+ i j) (+ j 1))]\n      [else #f])))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n (+ i (* i 2))) #t]\n      [(&gt; n (+ i (* i 2))) (loop (- n 1) (+ i 1))]\n      [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (cond [(= n (+ i (* i 2))) #t]\n          [(&gt; n (+ i (* i 2))) (loop (- n 1) (+ i 1))]\n          [else #f])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ((n n) (i 1))\n    (cond ((= n (+ i (* i 3))) #t)\n          ((&gt; n (+ i (* i 3))) (loop n (+ i 1)))\n          (else #f))))\n",
    "  (let loop ((i 1) (j 1))\n    (if (= n (+ i j))\n        #t\n        (if (&gt; n (+ i j))\n            (loop (+ i 1) j)\n            (loop i (+ j 1))))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (sub1 n)]\n                  [n-1-sq (sqr n-1)]\n                  [n-1-sq-1 (add1 n-1-sq)])\n             (or (= n-1-sq-1 (* 3 n-1))\n                 (= n-1-sq-1 (* 3 n-1 1/2)))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([i 1])\n    (cond\n      [(= i n) #t]\n      [(= n (+ i (* i 2))) #t]\n      [else (loop (+ i 1))])))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (= (n+k n i) n)\n            #t\n            (loop (+ i 1))))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (and (integer? (/ (- n 1) 2))\n                (integer? (/ (- n 2) 2))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (and (integer? n)\n       (let loop ([n n])\n         (cond [(zero? n) #t]\n               [(negative? n) #f]\n               [else (loop (- n 3))]))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (quotient (* i (1+ i)) 2))\n        #t\n        (loop n (1+ i)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ((n n) (i 1))\n    (if (&gt; n (* i (+ i 1)))\n        (loop (- n (* i (+ i 1))) (+ i 1))\n        (if (= n (* i (+ i 1)))\n            #t\n            #f))))\n",
    "  (let ([i 1])\n    (let loop ([n n])\n      (if (= n (+ i (* i 2)))\n          #t\n          (loop (- n 1))))))\n",
    "  (let* ([n (abs n)]\n         [n2 (+ (* n n) n)])\n    (if (even? n)\n        (= n2 (/ (+ n2 1) 2))\n        (= n2 (/ (+ n2 2) 2)))))\n",
    "  (let loop ((i 1))\n    (if (&lt; i n)\n        (if (= n (+ i (* i 2)))\n            #t\n            (loop (+ i 1)))\n        #f)))\n",
    "  (let ([n (sqrt (+ (* 8 n) 1))])\n    (and (integer? n)\n         (integer? (+ n 1) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let ([n (abs n)])\n    (and\n     (integer? n)\n     (or\n      (= n 0)\n      (and\n       (integer? (/ n 2))\n       (integer? (/ n 3)))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (and (integer? n)\n       (= n (quotient (- (* 3 n) 1) 2))))\n",
    "  (let ([x (sqrt (+ (* 8 n) 1))])\n    (and (integer? x)\n         (or (= (modulo x 4) 1)\n             (= (modulo x 4) 3)))))\n",
    "  (let loop ((i 1) (j 1))\n    (cond ((= n (+ i j)) #t)\n          ((&gt; n (+ i j)) (loop (+ i 1) j))\n          ((&lt; n (+ i j)) (loop i (+ j 1)))\n          (else #f))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (quotient (* i (1+ i)) 2))\n        #t\n        (loop n (1+ i)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([x (sqrt (+ (* 8 n) 1))])\n             (and (integer? x)\n                  (= (+ (* x (- x 1)) (/ x 2)) n))))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (- n 1)]\n                  [n-1-sqr (sqr n-1)]\n                  [n-1-sqr-plus-n-1 (+ n-1-sqr n-1)])\n             (or (= n-1-sqr-plus-n-1 (* 2 n))\n                 (= n-1-sqr-plus-n-1 (* 2 n 1)))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([i 1] [j 1] [k 1])\n    (cond\n      [(= n (+ i j k)) #t]\n      [(> n (+ i j k)) (loop (+ i 1) j k)]\n      [(> n (+ j k)) (loop i (+ j 1) k)]\n      [else (loop i j (+ k 1))])))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular i)\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n (* i (+ i 1) (/ (+ i 1) 2))) (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let ((n2 (- n 2)))\n             (and (integer? n2)\n                  (is_nonagonal n2))))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ((i 1))\n    (if (= n (nonagonal i))\n        #t\n        (loop (add1 i)))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&gt; i j)\n            (loop (+ i 1) j)\n            (loop i (+ j 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (add1 i)))\n        #t\n        (loop (sub1 n) (add1 i)))))\n",
    "  (let ([n (sqrt (+ (* 8 n) 1))])\n    (and (integer? n)\n         (even? n))))\n",
    "  (let loop ([i 0] [j 0])\n    (cond [(= n (+ i j)) #t]\n          [(> n (+ i j)) (loop (+ i 1) j)]\n          [else (loop i (+ j 1))])))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (and (integer? n)\n       (= n (* 3 n - 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (expt i 2))\n        #t\n        (loop (- n i) (+ i 1)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 1)]\n      [(= (+ i j) n) #t]\n      [else (loop i (+ j 1))])))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let ((n-1 (- n 1)))\n             (integer? (/ n-1 2))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (expt i 2))\n        #t\n        (loop (- n i) (+ i 1)))))\n",
    "  (let loop ([n n] [i 0])\n    (if (= n (nth-nonagonal i))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let ([n-1 (- n 1)])\n             (and (integer? n-1)\n                  (is_nonagonal n-1))))))\n",
    "  (let loop ([i 0])\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (expt i 2))\n        #t\n        (if (&lt; n (expt i 2))\n            #f\n            (loop (- n (expt i 2)) (+ i 1))))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) j]\n      [(= j n) (loop (+ i 1) 1)]\n      [else (loop i (+ j 1))])))\n",
    "  (let loop ([i 1])\n    (if (&lt; i n)\n        (if (= n (+ i (* i 2)))\n            #t\n            (loop (+ i 1)))\n        #f)))\n</code>\n",
    "  (let loop ((i 1))\n    (if (= i n)\n        #t\n        (if (is_square (+ (* i i) (* i 2)))\n            #t\n            (loop (+ i 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let ((x (sqrt (+ (* 8 n) 1))))\n    (and (integer? x)\n         (= (modulo x 2) 1))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (expt i 2))\n        #t\n        (loop (- n i) (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (cond\n      [(= n i) #t]\n      [(&gt; n i) (loop (- n i) (+ i 1))]\n      [else #f])))\n",
    "  (let loop ([i 1])\n    (if (&gt; i n)\n        #f\n        (if (= n (+ i (* i 2)))\n            #t\n            (loop (+ i 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (- n 1)]\n                  [n-1-sqr (sqr n-1)])\n             (or (= n-1-sqr (+ n-1-sqr n-1))\n                 (= n-1-sqr (- n-1-sqr n-1)))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (- n 1) (inc i)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ((n n) (i 0))\n    (cond ((= n (* i (+ i 3))) #t)\n          ((&gt; n (* i (+ i 3))) (loop n (+ i 1)))\n          (else #f))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (- n 1)]\n                  [n-1-sqr (sqr n-1)]\n                  [n-1-sqr-plus-n-1 (+ n-1-sqr n-1)])\n             (or (= n-1-sqr-plus-n-1 (* 3 n))\n                 (= n-1-sqr-plus-n-1 (* 3 n 1/2)))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (- n 1) (inc i)))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 1)]\n      [(= (+ i j) n) #t]\n      [else (loop i (+ j 1))])))\n",
    "  (and (integer? n)\n       (zero? (modulo n 2))\n       (not (zero? (modulo n 3)))))\n",
    "  (and (integer? n)\n       (not (zero? (modulo n 2)))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ([n-1 (- n 1)]\n                  [n-1-sqr (sqr n-1)])\n             (or (= n-1-sqr (+ n-1 1))\n                 (is_nonagonal (- n-1)))))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ((i 1) (j 1))\n    (cond ((= i n) #t)\n          ((&gt; i n) #f)\n          (else (loop (+ i j) (+ j 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (and (integer? n)\n       (= n (* 3 n - 2))))\n",
    "  (and (integer? n)\n       (integer? (/ (+ 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (cond [(= n (* i (+ i 1) (/ (+ i 1) 2))) #t]\n          [(&gt; n (* i (+ i 1) (/ (+ i 1) 2))) (loop (- n (* i (+ i 1) (/ (+ i 1) 2))) (+ i 1))]\n          [else #f])))\n",
    "  (and (integer? n)\n       (not (zero? (modulo n 2)))))\n",
    "  (let ([i 1])\n    (let loop ([n n])\n      (if (= n (expt i 2))\n          #t\n          (if (&lt; n (expt i 2))\n              #f\n              (loop (- n (expt i 2))))))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 8 n) 3))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= n (+ i j)) #t]\n      [(&gt; n (+ i j)) (loop (+ i 1) j)]\n      [else (loop i (+ j 1))])))\n",
    "  (and (integer? n)\n       (= n (quotient (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond\n      [(= i n) #t]\n      [(= j n) (loop (+ i 1) 1)]\n      [else (loop i (+ j 1))])))\n",
    "  (and (integer? n)\n       (or (zero? n)\n           (and (positive? n)\n                (integer? (/ (- 8 n) 3))))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 8 n) 3))))\n",
    "  (and (integer? n)\n       (= n (* 3 n - 2))))\n",
    "  (and (integer? n)\n       (or (zero? n)\n           (and (positive? n)\n                (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))))\n",
    "  (let loop ((i 1))\n    (if (= n (nonagonal i))\n        #t\n        (loop (+ i 1)))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&gt; (+ i j) n)\n            (loop (+ i 1) 1)\n            (loop i (+ j 1))))))\n",
    "  (and (integer? n)\n       (or (= n 1)\n           (let* ((n-1 (sub1 n))\n                  (n-1-sq (sqr n-1))\n                  (n-1-sq-3 (add1 (add1 (add1 n-1-sq)))))\n             (and (integer? n-1-sq-3)\n                  (= n-1-sq-3 (* 3 n-1-sq)))))))\n",
    "  (let ((n-sqrt (sqrt (+ (* 8 n) 1))))\n    (and (integer? n-sqrt)\n         (= (modulo n-sqrt 2) 1))))\n",
    "  (let loop ((i 1) (n n))\n    (if (= i n)\n        #t\n        (loop (+ i 3) (- n i)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular i)\n            (loop (+ i 1))\n            #f))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (let loop ((i 1) (j 1))\n    (if (= n (+ i j))\n        #t\n        (if (&gt; n (+ i j))\n            (loop (+ i 1) j)\n            (loop i (+ j 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 1 (sqrt (+ 1 (* 8 n)))) 2))))\n",
    "  (and (integer? n)\n       (zero? (modulo n 2))))\n",
    "  (let loop ([i 1])\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (and (integer? n)\n       (integer? (/ (- (sqrt (+ (* 8 n) 1)) 1) 2))))\n",
    "  (let ((x (- n 1)))\n    (and (integer? x)\n         (integer? (/ x 2)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 8 n) 3))))\n",
    "  (let ((n-1 (- n 1)))\n    (and (integer? (/ (+ n-1) 2))\n         (integer? (/ (- n-1) 2)))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 8 n) 3))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 3)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ((n n) (i 1))\n    (cond ((= n 0) #t)\n          ((< n 0) #f)\n          (else (loop (- n i) (+ i 1))))))\n",
    "  (let loop ((i 1))\n    (if (= i n)\n        #t\n        (if (is_triangular (+ i 1))\n            (loop (+ i 1))\n            #f))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (quotient (* i (inc i)) 2))\n        #t\n        (loop (dec n) (inc i)))))\n",
    "  (let loop ((i 1))\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (+ i 1)))))\n",
    "  (let loop ([i 1] [j 1])\n    (cond [(= i n) j]\n          [else (loop (+ i 1) (+ j i))])))\n",
    "  (let loop ((i 1))\n    (if (= n (nonagonal i))\n        #t\n        (loop (+ i 1)))))\n",
    "  (let loop ((n n) (i 1))\n    (cond ((= n (quotient (* i (1+ i)) 2)) #t)\n          ((&gt; n (quotient (* i (1+ i)) 2)) (loop n (1+ i)))\n          (else #f))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (quotient (* i (1+ i)) 2))\n        #t\n        (loop n (1+ i)))))\n",
    "  (let loop ((n n) (i 1))\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (+ i (* i 2)))\n        #t\n        (loop n (+ i 1)))))\n",
    "  (and (integer? n)\n       (integer? (/ (- 8 (* 3 n)) 2))))\n",
    "  (let loop ([i 1] [j 1])\n    (if (= n (+ i j))\n        #t\n        (if (&lt; n (+ i j))\n            (loop i (+ j 1))\n            (loop (+ i 1) j)))))\n",
    "  (let loop ((i 1) (j 1))\n    (cond ((= n (+ i j)) #t)\n          ((&gt; n (+ i j)) (loop (+ i 1) j))\n          ((&lt; n (+ i j)) (loop i (+ j 1))))))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n (* i (+ i 1) (/ (+ i 1) 2)))\n        #t\n        (loop (- n 1) (+ i 1)))))\n"
  ]
}