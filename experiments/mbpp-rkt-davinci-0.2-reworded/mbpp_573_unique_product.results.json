{
  "name": "mbpp_573_unique_product",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data)\n         (unique_product (remove (car list_data) list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_rml4xm.rkt:15:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond [(empty? list_data) 1]\n        [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n        [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (empty? list_data)\n      1\n      (* (first list_data)\n         (unique_product (remove (first list_data) list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvp8i07kc.rkt:15:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond [(empty? list_data) 1]\n        [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n        [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (set list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvp63jt.rkt:12:4\n\napply: contract violation\n  expected: list?\n  given: (set '(10 20 30 40 20 50 60 40))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvp63jt.rkt:13:4\n\napply: contract violation\n  expected: list?\n  given: (set '(1 2 3 1))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvp63jt.rkt:14:4\n\napply: contract violation\n  expected: list?\n  given: (set '(7 8 9 0 1 1))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [else (if (member (first list_data) (rest list_data))\n             (unique_product (rest list_data))\n             (* (first list_data) (unique_product (rest list_data))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(empty? list_data) 1]\n    [(member (first list_data) (rest list_data)) (unique_product (rest list_data))]\n    [else (* (first list_data) (unique_product (rest list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (cond\n    [(null? list_data) 1]\n    [(member (car list_data) (cdr list_data)) (unique_product (cdr list_data))]\n    [else (* (car list_data) (unique_product (cdr list_data)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (unique list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "/tmp/tmpnb5iymfj.rkt:5:12: unique: unbound identifier\n  in: unique\n  location...:\n   /tmp/tmpnb5iymfj.rkt:5:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (if (member (car list_data) (cdr list_data))\n          (unique_product (cdr list_data))\n          (* (car list_data) (unique_product (cdr list_data))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (if (null? list_data)\n      1\n      (* (car list_data) (unique_product (cdr list_data)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1666123613,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrqdyv_i.rkt:14:4\nactual:     576000000000\nexpected:   720000000\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to calculate the product of the unique numbers in a given list.\n(define (unique_product list_data)\n  (apply * (remove-duplicates list_data)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_product))\n    (check-equal? (candidate (list 10 20 30 40 20 50 60 40)) 720000000)\n    (check-equal? (candidate (list 1 2 3 1)) 6)\n    (check-equal? (candidate (list 7 8 9 0 1 1)) 0)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}