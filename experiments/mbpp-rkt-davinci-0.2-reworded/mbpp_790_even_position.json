{
  "name": "mbpp_790_even_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether every even index contains even numbers of a given list.\n(define (even_position nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_position))\n    (check-equal? (candidate (list 3 2 1)) #f)\n    (check-equal? (candidate (list 1 2 3)) #f)\n    (check-equal? (candidate (list 2 1 4)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? nums) #t]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (first nums)) (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else #f]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) #t]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else #f]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond [(empty? nums) true]\n        [(even? (first nums)) (even_position (rest nums))]\n        [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (if (null? nums)\n      #t\n      (if (even? (car nums))\n          (even_position (cdr nums))\n          #f)))\n",
    "  (cond [(empty? nums) true]\n        [(even? (first nums)) (even_position (rest nums))]\n        [else false]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (first nums)) (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(even? (first nums)) (cons (first nums) (even_position (rest nums)))]\n    [else (even_position (rest nums))]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (cond\n    [(empty? nums) true]\n    [(even? (first nums)) (even_position (rest nums))]\n    [else false]))\n",
    "  (define (helper nums index)\n    (if (null? nums)\n        #t\n        (if (= (remainder index 2) 0)\n            (if (even? (car nums))\n                (helper (cdr nums) (+ index 1))\n                #f)\n            (helper (cdr nums) (+ index 1)))))\n  (helper nums 0))\n"
  ]
}