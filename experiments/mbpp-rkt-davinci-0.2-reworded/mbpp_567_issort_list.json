{
  "name": "mbpp_567_issort_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check whether a specified list is sorted or not.\n(define (issort_list list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate issort_list))\n    (check-equal? (candidate (list 1 2 4 6 8 10 12 14 16 17)) #t)\n    (check-equal? (candidate (list 1 2 4 6 8 10 12 14 20 17)) #f)\n    (check-equal? (candidate (list 1 2 4 6 8 10 15 14 20)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list1)\n      #t\n      (if (null? (cdr list1))\n          #t\n          (if (< (car list1) (cadr list1))\n              (issort_list (cdr list1))\n              #f))))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [else (and (issort_list (rest list1))\n               (<= (first list1) (first (rest list1))))]))\n",
    "  (cond\n    [(empty? list1) true]\n    [(empty? (rest list1)) true]\n    [else (and (issort_list (rest list1))\n               (<= (first list1) (first (rest list1))))]))\n",
    "  (cond\n    [(null? list1) #t]\n    [(null? (cdr list1)) #t]\n    [else\n     (and (<= (car list1) (cadr list1))\n          (issort_list (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) true]\n    [(empty? (rest list1)) true]\n    [(< (first list1) (second list1)) (issort_list (rest list1))]\n    [else false]))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [(< (first list1) (second list1)) (issort_list (rest list1))]\n    [else #f]))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [(< (first list1) (first (rest list1))) (issort_list (rest list1))]\n    [else #f]))\n",
    "  (cond\n    [(null? list1) #t]\n    [(null? (cdr list1)) #t]\n    [(< (car list1) (car (cdr list1))) (issort_list (cdr list1))]\n    [else #f]))\n",
    "  (cond\n    [(empty? list1) true]\n    [(empty? (rest list1)) true]\n    [else (and (<= (first list1) (second list1))\n               (issort_list (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [(< (first list1) (first (rest list1)))\n     (issort_list (rest list1))]\n    [else #f]))\n",
    "  (cond\n    [(null? list1) #t]\n    [(null? (cdr list1)) #t]\n    [else (and (< (car list1) (car (cdr list1)))\n              (issort_list (cdr list1)))]))\n",
    "  (cond\n    [(null? list1) #t]\n    [(null? (cdr list1)) #t]\n    [(> (car list1) (cadr list1)) #f]\n    [else (issort_list (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [(and (not (empty? list1)) (not (empty? (rest list1))))\n     (and (<= (first list1) (second list1)) (issort_list (rest list1)))]))\n",
    "  (define (issort_list_iter list1 list2)\n    (if (null? list1)\n        (if (null? list2)\n            #t\n            #f)\n        (if (null? list2)\n            #t\n            (if (< (car list1) (car list2))\n                (issort_list_iter (cdr list1) (cdr list2))\n                #f))))\n  (issort_list_iter list1 (cdr list1)))\n",
    "  (if (null? list1)\n      #t\n      (if (null? (cdr list1))\n          #t\n          (if (< (car list1) (cadr list1))\n              (issort_list (cdr list1))\n              #f))))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [(< (first list1) (first (rest list1))) (issort_list (rest list1))]\n    [else #f]))\n",
    "  (cond\n    [(null? list1) #t]\n    [(null? (cdr list1)) #t]\n    [(< (car list1) (cadr list1)) (issort_list (cdr list1))]\n    [else #f]))\n",
    "  (cond\n    [(null? list1) #t]\n    [(null? (cdr list1)) #t]\n    [(< (car list1) (car (cdr list1))) (issort_list (cdr list1))]\n    [else #f]))\n",
    "  (if (null? list1)\n      #t\n      (if (null? (cdr list1))\n          #t\n          (if (< (car list1) (cadr list1))\n              (issort_list (cdr list1))\n              #f))))\n",
    "  (cond\n    [(empty? list1) #t]\n    [(empty? (rest list1)) #t]\n    [(< (first list1) (first (rest list1))) (issort_list (rest list1))]\n    [else #f]))\n"
  ]
}