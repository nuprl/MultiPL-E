{
  "name": "mbpp_630_get_coordinates",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to extract all the adjacent coordinates of the given coordinate list.\n(define (get_coordinates test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_coordinates))\n    (check-equal? (candidate (list 3 4)) (list (list 2 3) (list 2 4) (list 2 5) (list 3 3) (list 3 4) (list 3 5) (list 4 3) (list 4 4) (list 4 5)))\n    (check-equal? (candidate (list 4 5)) (list (list 3 4) (list 3 5) (list 3 6) (list 4 4) (list 4 5) (list 4 6) (list 5 4) (list 5 5) (list 5 6)))\n    (check-equal? (candidate (list 5 6)) (list (list 4 5) (list 4 6) (list 4 7) (list 5 5) (list 5 6) (list 5 7) (list 6 5) (list 6 6) (list 6 7)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_coordinates_helper test_tup)\n    (cond\n      [(empty? test_tup) empty]\n      [else (cons (list (car test_tup) (cadr test_tup))\n                  (cons (list (car test_tup) (caddr test_tup))\n                        (cons (list (cadr test_tup) (caddr test_tup))\n                              (cons (list (cadr test_tup) (cadr test_tup))\n                                    (cons (list (cadr test_tup) (car test_tup))\n                                          (cons (list (caddr test_tup) (car test_tup))\n                                                (cons (list (caddr test_tup) (cadr test_tup))\n                                                      (cons (list (caddr test_tup) (caddr test_tup))\n                                                            empty))))))))))\n  (get_coordinates_helper test_tup))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (cons (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (define (get_coordinates_iter test_tup acc)\n    (cond\n      [(empty? test_tup) acc]\n      [else (get_coordinates_iter (rest test_tup) (append acc (get_adjacent_coordinates (first test_tup))))]))\n  (get_coordinates_iter test_tup '()))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (cons (cons (first test_tup) (second test_tup))\n           (cons (cons (first test_tup) (add1 (second test_tup)))\n                 (cons (cons (add1 (first test_tup)) (second test_tup))\n                       (cons (cons (add1 (first test_tup)) (add1 (second test_tup)))\n                             (cons (cons (add1 (first test_tup)) (sub1 (second test_tup)))\n                                   (cons (cons (sub1 (first test_tup)) (second test_tup))\n                                         (cons (cons (sub1 (first test_tup)) (add1 (second test_tup)))\n                                               (cons (cons (sub1 (first test_tup)) (sub1 (second test_tup)))\n                                                     (cons (cons (first test_tup) (sub1 (second test_tup)))\n                                                           (get_coordinates (cdr test_tup))))))))))))))\n",
    "  (define (get_coordinates_iter test_tup acc)\n    (if (null? test_tup)\n        acc\n        (get_coordinates_iter (cdr test_tup)\n                              (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (reverse (get_coordinates_iter test_tup '())))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (cons (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (cons (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (cons (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (list (car test_tup) (cadr test_tup))\n                    (cons (list (car test_tup) (caddr test_tup))\n                          (cons (list (cadr test_tup) (cadr test_tup))\n                                (cons (list (cadr test_tup) (caddr test_tup))\n                                      (cons (list (caddr test_tup) (cadr test_tup))\n                                            (cons (list (caddr test_tup) (caddr test_tup))\n                                                  empty))))))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (list (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (define (get_coordinates_helper test_tup acc)\n    (cond\n      [(null? test_tup) acc]\n      [else (get_coordinates_helper (cdr test_tup) (append acc (list (list (car test_tup) (cadr test_tup)) (list (car test_tup) (caddr test_tup)) (list (cadr test_tup) (caddr test_tup)) (list (cadr test_tup) (car test_tup)) (list (caddr test_tup) (car test_tup)) (list (caddr test_tup) (cadr test_tup)))))]))\n  (get_coordinates_helper test_tup '()))\n",
    "  (cond\n    [(null? test_tup) '()]\n    [else\n     (append (list (list (car test_tup) (cadr test_tup)))\n             (get_coordinates (cddr test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (list (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (list (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (list (car test_tup) (cadr test_tup))\n                    (cons (list (car test_tup) (caddr test_tup))\n                          (cons (list (cadr test_tup) (cadr test_tup))\n                                (cons (list (cadr test_tup) (caddr test_tup))\n                                      (cons (list (caddr test_tup) (cadr test_tup))\n                                            (cons (list (caddr test_tup) (caddr test_tup))\n                                                  (get_coordinates (cdddr test_tup)))))))))])\n</code>\nI am getting the following error:\n<code>get_coordinates: expects argument of type &lt;listof number&gt;; given '(1 2 3 4 5 6)\n</code>\nI am not sure what is wrong with my code. I am new to Racket.\n\n\nA:\n\nThe problem is that you're using <code>cons</code> to build lists, but you're not using it correctly. For example, this expression:\n<code>(cons (list (car test_tup) (cadr test_tup))\n      (cons (list (car test_tup) (caddr test_tup))\n            (cons (list (cadr test_tup) (cadr test_tup))\n                  (cons (list (cadr test_tup) (caddr test_tup))\n                        (cons (list (caddr test_tup) (cadr test_tup))\n                              (cons (list (caddr test_tup) (caddr test_tup))\n                                    (get_coordinates (cdddr test_tup)))))))))\n</code>\nis equivalent to this:\n<code>(cons (list (car test_tup) (cadr test_tup))\n      (list (list (car test_tup) (caddr test_tup))\n            (list (cadr test_tup) (cadr test_tup))\n            (list (cadr test_tup)",
    "  (define (get_coordinates_iter test_tup result_lst)\n    (cond\n      [(empty? test_tup) result_lst]\n      [else (get_coordinates_iter (rest test_tup) (append result_lst (list (list (car test_tup) (cadr test_tup)) (list (car test_tup) (caddr test_tup)) (list (cadr test_tup) (caddr test_tup)) (list (cadr test_tup) (car test_tup)) (list (caddr test_tup) (car test_tup)) (list (caddr test_tup) (cadr test_tup)))))]))\n  (get_coordinates_iter test_tup '()))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append\n      (list (cons (car test_tup) (cadr test_tup)))\n      (get_coordinates (cddr test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else (append (list (list (car test_tup) (cadr test_tup)))\n                  (get_coordinates (cddr test_tup)))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else\n     (append\n      (list (cons (first test_tup) (second test_tup)))\n      (list (cons (second test_tup) (first test_tup)))\n      (list (cons (first test_tup) (third test_tup)))\n      (list (cons (third test_tup) (first test_tup)))\n      (list (cons (second test_tup) (third test_tup)))\n      (list (cons (third test_tup) (second test_tup))))]))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [else\n     (append (list (cons (car test_tup) (cdr test_tup)))\n             (get_coordinates (cdr test_tup)))]))\n"
  ]
}