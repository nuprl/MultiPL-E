{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum))\n    (check-equal? (candidate (list -2 -3 4 -1 -2 1 5 -3) 8) 7)\n    (check-equal? (candidate (list -3 -4 5 -2 -3 2 6 -4) 8) 8)\n    (check-equal? (candidate (list -4 -5 6 -3 -4 3 7 -5) 8) 10)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_aux a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) (max_sub_array_sum_aux (cdr a) (- size 1) max_sum))])\n          (if (&gt; sum max_sum)\n              sum\n              max_sum))))\n  (max_sub_array_sum_aux a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0) (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (+ max-ending-here (car a))) ]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (car a))]))\n  (max_sub_array_sum_helper a size (car a) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (rest a) (- size 1) sum)\n             (max_sub_array_sum_helper (rest a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [(> (+ (car a) max_sum) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(= size 1) (max max_sum (car a))]\n      [else\n       (let ([sum (apply + a)])\n         (max_sub_array_sum_helper (cdr a) (- size 1) (max max_sum sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let* ([sum (apply + a)]\n              [new_max_sum (max sum max_sum)])\n         (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))]))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) 0 max)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([sum (apply + (take a size))]\n               [max_sum (if (&gt; sum max_sum) sum max_sum)])\n          (max_sub_array_sum_helper (rest a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(zero? size) max_sum]\n      [(< (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n      [(> (car a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (rest a) (- size 1) (sum a))]\n      [else (max_sub_array_sum_helper (rest a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size (sum a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((< (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))\n          ((> (+ (car a) max_sum) 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) 0))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond\n      [(= i size) max]\n      [(= j size) (loop (+ i 1) i max 0)]\n      [(> (+ sum (list-ref a j)) 0)\n       (loop i (+ j 1) (max (max sum (+ sum (list-ref a j)))) (+ sum (list-ref a j)))]\n      [else (loop i (+ j 1) max 0)])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))\n       ]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (car a))\n       ]\n      )\n    )\n  (max_sub_array_sum_helper a size 0 0)\n  )\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (+ (car a) max_sum)))\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let* ([sum_so_far (if (&gt; (car a) (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))\n                              (car a)\n                              (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]\n               [new_max_sum (if (&gt; sum_so_far max_sum) sum_so_far max_sum)])\n          new_max_sum)))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond\n      [(= i size) max]\n      [(= j size) (loop (+ i 1) i max sum)]\n      [(> (+ sum (list-ref a j)) 0) (loop i (+ j 1) (max max (+ sum (list-ref a j))) (+ sum (list-ref a j)))]\n      [else (loop (+ i 1) i max 0)])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size curr_sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(>= curr_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ curr_sum (car a)) (max max_sum curr_sum))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) (max max_sum curr_sum))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (cond\n           [(> sum max_sum) (max_sub_array_sum_helper (rest a) size sum)]\n           [else (max_sub_array_sum_helper (rest a) size max_sum)]))]))\n  (max_sub_array_sum_helper a size (apply + (take a size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (sum a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (if (= size 0)\n        max\n        (let ((new-sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max)\n              (max_sub_array_sum_helper a (- size 1) new-sum (max new-sum max))))))\n  (max_sub_array_sum_helper a size 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((new_max_sum (if (&gt; (apply + a) max_sum)\n                               (apply + a)\n                               max_sum)))\n          (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) (max sum max_sum))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (if (= size 0)\n        max\n        (let ((new-sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new-sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max)\n              (max_sub_array_sum_helper a (- size 1) new-sum (max new-sum max))))))\n  (max_sub_array_sum_helper a size 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum-iter a i max-sum)\n    (if (= i size)\n        max-sum\n        (let ((sum (apply + (sublist a i (+ i 1)))))\n          (if (&gt; sum max-sum)\n              (max_sub_array_sum-iter a (+ i 1) sum)\n              (max_sub_array_sum-iter a (+ i 1) max-sum)))))\n  (max_sub_array_sum-iter a 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([new_sum (+ sum (list-ref a (- size 1)))])\n         (if (&lt; new_sum 0)\n             (max_sub_array_sum_helper a (- size 1) 0 max_sum)\n             (max_sub_array_sum_helper a (- size 1) new_sum (max new_sum max_sum))))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + (take a size))))\n          (max_sub_array_sum_helper (rest a) (- size 1) (max sum max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max-sum 0) (sum 0))\n    (cond ((= i size) max-sum)\n          ((&lt; sum 0) (loop (+ i 1) i 0 0))\n          ((&gt; sum max-sum) (loop (+ i 1) j sum (+ sum (list-ref a i))))\n          (else (loop (+ i 1) j max-sum (+ sum (list-ref a i)))))))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum max)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((new_sum (+ sum (list-ref a (- size 1)))))\n          (if (&lt; new_sum 0)\n              (max_sub_array_sum_helper a (- size 1) 0 max_sum)\n              (max_sub_array_sum_helper a (- size 1) new_sum (max new_sum max_sum))))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sum_helper (rest a) (- size 1) sum)\n              (max_sum_helper (rest a) (- size 1) max_sum)))))\n  (max_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + (take a size))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (define (sum_sub_array a size)\n         (define (sum_sub_array_helper a size sum)\n           (cond\n             [(= size 1) sum]\n             [else\n              (sum_sub_array_helper (cdr a) (- size 1) (+ sum (car a)))]))\n         (sum_sub_array_helper a size 0))\n       (define new_sum (sum_sub_array a size))\n       (if (&gt; new_sum max_sum)\n           (max_sub_array_sum_helper a (- size 1) new_sum)\n           (max_sub_array_sum_helper a (- size 1) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n</code>\nThe problem is that this function is not tail recursive. I tried to make it tail recursive by using an accumulator but I couldn't figure out how to do it.\nI am new to Racket and functional programming in general. I would appreciate any help.\n\n\nA:\n\nHere's a tail-recursive version of your function:\n<code>(define (max-sub-array-sum a size)\n  (define (max-sub-array-sum-helper a size max-sum)\n    (cond\n      [(= size 1) max-sum]\n      [else\n       (define (sum-sub-array a size)\n         (define (sum-sub-array-helper a size sum)\n           (cond\n             [(= size 1) sum]\n             [else\n              (sum-sub-array-helper (cdr a) (- size 1) (+ sum (car a)))]))\n         (sum-sub-array-helper a size 0))\n       (define new-sum (sum-sub-array a size))\n       (if (&gt; new-sum max-sum)\n           (max-sub-array-sum-helper a (- size 1) new-sum)\n           (max-sub-array-sum-helper a (-",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (car a))]))\n  (max_sub_array_sum_helper a size (car a) (car a)))\n",
    "  (define (helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum) (helper (cdr a) (- size 1) sum sum)]\n      [else (helper (cdr a) (- size 1) sum max-sum)]))\n  (helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))])\n          (if (&gt; sum max_sum)\n              sum\n              max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max 0) (current 0))\n    (cond ((= i size) max)\n          ((= j size) (loop (+ i 1) i max current))\n          (else (let ((new-current (+ current (list-ref a j))))\n                  (if (&lt; new-current 0)\n                      (loop i (+ j 1) (max max current) 0)\n                      (loop i (+ j 1) (max max new-current) new-current)))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (+ (car a) max_sum)])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond ((= i size) max)\n          ((&lt; j size)\n           (let ((new-sum (+ sum (list-ref a j))))\n             (cond ((&lt; new-sum 0)\n                    (loop (+ i 1) (+ i 1) max 0))\n                   ((&gt; new-sum max)\n                    (loop i (+ j 1) new-sum new-sum))\n                   (else\n                    (loop i (+ j 1) max new-sum)))))\n          (else\n           (loop (+ i 1) (+ i 1) max 0)))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> (+ sum (car a)) 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) 0 max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size current-sum max-sum)\n    (cond ((= size 0) max-sum)\n          ((&gt; (+ current-sum (list-ref a size)) 0)\n           (max_sub_array_sum_helper a (- size 1) (+ current-sum (list-ref a size))\n                                     (if (&gt; (+ current-sum (list-ref a size)) max-sum)\n                                         (+ current-sum (list-ref a size))\n                                         max-sum)))\n          (else (max_sub_array_sum_helper a (- size 1) 0 max-sum))))\n  (max_sub_array_sum_helper a (- size 1) 0 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (if (= i size)\n        max_sum\n        (let ((sum (apply + (sublist a i (+ i size)))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a size (+ i 1) sum)\n              (max_sub_array_sum_helper a size (+ i 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (+ (car a) max_sum)])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size curr_max curr_sum)\n    (cond [(= size 0) curr_max]\n          [else (let ([curr_sum (+ curr_sum (list-ref a size))])\n                  (if (&lt; curr_sum 0)\n                      (max_sub_array_sum_helper a (- size 1) curr_max 0)\n                      (max_sub_array_sum_helper a (- size 1) (max curr_max curr_sum) curr_sum)))]))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum curr_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; curr_sum max_sum)\n           (max_sub_array_sum_helper (cdr a) (- size 1) curr_sum (+ curr_sum (car a))))\n          ((&lt; curr_sum max_sum)\n           (max_sub_array_sum_helper (cdr a) (- size 1) max_sum (+ curr_sum (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum (+ curr_sum (car a))))))\n  (max_sub_array_sum_helper a size (car a) (car a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((max_sum_ending_here (+ (list-ref a (- size 1))\n                                       (if (&lt; max_sum_ending_here 0)\n                                           0\n                                           max_sum_ending_here)))\n               (max_sum (if (&gt; max_sum_ending_here max_sum)\n                            max_sum_ending_here\n                            max_sum)))\n          (max_sub_array_sum_helper a (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (sum (sublist a 0 size)) max_sum)\n       (max_sub_array_sum_helper a (- size 1) (sum (sublist a 0 size)))]\n      [else\n       (max_sub_array_sum_helper a (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a (- size 1) (sum (sublist a 0 size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i j sum)\n    (if (= i size)\n        sum\n        (let ((sum (+ sum (list-ref a i))))\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper a size (+ i 1) (+ j 1) 0)\n              (max_sub_array_sum_helper a size (+ i 1) j sum)))))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (let loop ((i 0) (j 0) (max-sum 0) (sum 0))\n    (cond ((>= i size) max-sum)\n          ((>= j size) (loop (+ i 1) i max-sum 0))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (if (> new-sum max-sum)\n                      (loop i (+ j 1) new-sum new-sum)\n                      (loop i (+ j 1) max-sum new-sum)))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(= size 1) (+ max_sum (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (max max_sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 2) 0))))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let loop ([i 0] [max_sum 0] [sum 0])\n    (cond [(= i size) max_sum]\n          [else\n           (let ([sum (+ sum (list-ref a i))])\n             (cond [(> sum max_sum) (loop (+ i 1) sum 0)]\n                   [else (loop (+ i 1) max_sum sum)]))])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (apply + a)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max-sum)\n    (cond ((= size 0) max-sum)\n          ((< max-sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max-sum (car a))))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (if (= i size)\n        max_sum\n        (let ((sum (apply + (sublist a i (+ i size)))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a size (+ i 1) sum)\n              (max_sub_array_sum_helper a size (+ i 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let loop ((i 0) (j 0) (max-sum 0) (curr-sum 0))\n    (cond ((= i size) max-sum)\n          ((= j size) (loop (+ i 1) i max-sum curr-sum))\n          (else (let ((new-sum (+ curr-sum (list-ref a j))))\n                  (if (&gt; new-sum max-sum)\n                      (loop i (+ j 1) new-sum new-sum)\n                      (loop i (+ j 1) max-sum new-sum)))))))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let* ([first (first a)]\n               [rest (rest a)]\n               [new_max_sum (+ max_sum first)])\n          (if (&lt; new_max_sum 0)\n              (max_sub_array_sum_helper rest (- size 1) 0)\n              (max_sub_array_sum_helper rest (- size 1) new_max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let ((max_so_far 0)\n        (max_ending_here 0))\n    (for ([i (in-range size)])\n      (set! max_ending_here (+ max_ending_here (list-ref a i)))\n      (when (&lt; max_ending_here 0)\n        (set! max_ending_here 0))\n      (when (&gt; max_so_far max_ending_here)\n        (set! max_so_far max_ending_here)))\n    max_so_far))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (foldl + 0 a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (array-ref a size)])\n          (let loop ([i 0])\n            (if (= i size)\n                (max_sub_array_sum_helper a (- size 1) (max sum max_sum))\n                (loop (+ i 1)))))\n        ))\n  (max_sub_array_sum_helper a (- size 1) (array-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum)\n           (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max-sum 0) (sum 0))\n    (cond ((= i size) max-sum)\n          ((= j size) (loop (+ i 1) i max-sum 0))\n          (else (let ((new-sum (+ sum (list-ref a j))))\n                  (if (&lt; new-sum 0)\n                      (loop i (+ j 1) max-sum 0)\n                      (loop i (+ j 1) (max max-sum new-sum) new-sum)))))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size current-sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> current-sum max-sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) current-sum current-sum)]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ current-sum (car a)) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sum_ending_here a i sum)\n    (cond [(= i size) sum]\n          [else (max_sum_ending_here a (+ i 1) (max sum (+ sum (list-ref a i))))]))\n  (max_sum_ending_here a 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (max_sub_array_sum_helper (rest a) size (max sum max_sum)))]))\n  (max_sub_array_sum_helper a size (apply + (take a size))))\n",
    "  (define (sum_sub_array a start end)\n    (if (= start end)\n        0\n        (+ (list-ref a start) (sum_sub_array a (+ start 1) end))))\n  (define (max_sub_array_sum_helper a size start end max)\n    (if (= start size)\n        max\n        (let ((sum (sum_sub_array a start end)))\n          (if (&gt; sum max)\n              (max_sub_array_sum_helper a size start (+ end 1) sum)\n              (max_sub_array_sum_helper a size start (+ end 1) max)))))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([current_sum (apply + a)])\n          (if (&gt; current_sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) current_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n</code>\nThe function works fine for the following test cases:\n<code>(max_sub_array_sum '(-2 -3 4 -1 -2 1 5 -3) 8)",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size (car a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (if (= size 0)\n        max_so_far\n        (let ((max_ending_here (+ max_ending_here (list-ref a (- size 1)))))\n          (if (&lt; max_ending_here 0)\n              (max_sub_array_sum_helper a (- size 1) max_so_far 0)\n              (max_sub_array_sum_helper a (- size 1) (max max_so_far max_ending_here) max_ending_here)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(= size 0) max_sum]\n          [(< (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n          [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (apply + a)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_aux a size i j sum)\n    (cond\n      [(= i size) sum]\n      [(= j size) (max_sub_array_sum_aux a size (+ i 1) (+ i 1) sum)]\n      [else (max_sub_array_sum_aux a size i (+ j 1) (max sum (+ sum (list-ref a j))))]))\n  (max_sub_array_sum_aux a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (define new_sum (+ sum (list-ref a size)))\n       (define new_max_sum (if (&gt; new_sum max_sum) new_sum max_sum))\n       (max_sub_array_sum_helper a (- size 1) new_sum new_max_sum)]))\n  (max_sub_array_sum_helper a (- size 1) 0 0))\n",
    "  (let loop ((i 0)\n             (max_sum 0)\n             (max_sum_start 0)\n             (max_sum_end 0)\n             (curr_sum 0)\n             (curr_sum_start 0)\n             (curr_sum_end 0))\n    (cond ((= i size)\n           max_sum)\n          ((&gt;= curr_sum 0)\n           (loop (+ i 1)\n                 (if (&gt; curr_sum max_sum)\n                     curr_sum\n                     max_sum)\n                 (if (&gt; curr_sum max_sum)\n                     curr_sum_start\n                     max_sum_start)\n                 (if (&gt; curr_sum max_sum)\n                     curr_sum_end\n                     max_sum_end)\n                 (+ curr_sum (list-ref a i))\n                 curr_sum_start\n                 (+ curr_sum_end 1)))\n          (else\n           (loop (+ i 1)\n                 max_sum\n                 max_sum_start\n                 max_sum_end\n                 (list-ref a i)\n                 (+ i 1)\n                 (+ i 1))))))\n",
    "  (define (max_sub_array_sum_helper a size current-max)\n    (cond ((= size 0) current-max)\n          ((&gt; (apply + a) current-max)\n           (max_sub_array_sum_helper (cdr a) (- size 1) (+ (apply + a) 0)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) current-max))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (rest a) size (sum a))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size (sum (take a size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(empty? a) max_sum]\n          [else\n           (let ([sum (apply + (take size a))])\n             (max_sub_array_sum_helper (rest a) size (max sum max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum current_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> current_sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) current_sum (+ current_sum (car a))) ]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum (+ current_sum (car a)))]))\n  (max_sub_array_sum_helper a size (car a) (car a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> sum max-sum)\n       (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) 0 max-sum)]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size current-sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> current-sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) current-sum current-sum)]\n      [(< current-sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) current-sum max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let ([max_so_far 0]\n        [max_ending_here 0])\n    (for ([i (in-range size)])\n      (set! max_ending_here (+ max_ending_here (list-ref a i)))\n      (if (&lt; max_ending_here 0)\n          (set! max_ending_here 0))\n      (if (&gt; max_so_far max_ending_here)\n          (set! max_so_far max_ending_here)))\n    max_so_far))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (apply + a)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (+ max-ending-here (car a)))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (car a))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; sum max_sum)\n           (max_sub_array_sum_helper (cdr a) (- size 1) sum sum))\n          ((&gt; sum 0)\n           (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([new_max_sum (max max_sum (+ max_sum (list-ref a size)) (list-ref a size))])\n          (max_sub_array_sum_helper a (- size 1) new_max_sum))))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (apply + a)])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (sum_of_sub_array a size) max_sum)\n       (max_sub_array_sum_helper a (- size 1) (sum_of_sub_array a size))]\n      [else (max_sub_array_sum_helper a (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size (sum_of_sub_array a size)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (+ (car a) max_sum)))\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + (take a size))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([sum (if (&lt; max_sum 0)\n                       0\n                       max_sum)]\n               [new_sum (+ sum (list-ref a (- size 1)))])\n          (max_sub_array_sum_helper a (- size 1) new_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum-iter a size max-sum)\n    (if (zero? size)\n        max-sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max-sum)\n              (max_sub_array_sum-iter (cdr a) (- size 1) sum)\n              (max_sub_array_sum-iter (cdr a) (- size 1) max-sum)))))\n  (max_sub_array_sum-iter a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 0) max_sum]\n      [else\n       (let ([sum (apply + (take a size))])\n         (max_sub_array_sum_helper (rest a) (- size 1) (max sum max_sum)))]))\n  (max_sub_array_sum_helper a size -1000000))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size curr-sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> (+ curr-sum (list-ref a size)) curr-sum)\n       (max_sub_array_sum_helper a (- size 1) (+ curr-sum (list-ref a size)) (max max-sum (+ curr-sum (list-ref a size))))]\n      [else (max_sub_array_sum_helper a (- size 1) 0 (max max-sum curr-sum))]))\n  (max_sub_array_sum_helper a (- size 1) 0 (list-ref a 0)))\n",
    "  (define (max_sub_array_sum_helper a size current-sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [(> current-sum max-sum) (max_sub_array_sum_helper (cdr a) (- size 1) current-sum current-sum)]\n      [(>= current-sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ current-sum (car a)) max-sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [else\n       (let ([new_sum (+ sum (car a))])\n         (if (&lt; new_sum 0)\n             (max_sub_array_sum_helper (cdr a) (- size 1) 0 max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) new_sum (max max_sum new_sum))))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (let loop ([i 0] [j 0] [sum 0] [max-sum 0])\n    (cond [(= i size) max-sum]\n          [(= j size) (loop (+ i 1) i 0 max-sum)]\n          [else (loop i (+ j 1) (+ sum (list-ref a j)) (max max-sum sum))])))\n",
    "  (define (max_sub_array_sum_aux a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_aux (cdr a) (- size 1) sum)\n             (max_sub_array_sum_aux (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_aux a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) max_sum)])\n          (if (&lt; sum 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) 0)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size current-max)\n    (if (= size 0)\n        current-max\n        (let ([current-sum (apply + (take a size))])\n          (max_sub_array_sum_helper (rest a) (- size 1) (max current-sum current-max)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ((sum (apply + a))\n               (max_sum (if (&gt; sum max_sum) sum max_sum)))\n          (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) sum max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(= size 0) max_sum]\n          [(= size 1) (max max_sum (car a))]\n          [else (max_sub_array_sum_helper (cdr a) (- size 1) (max max_sum (apply + (take a size))))]))\n  (max_sub_array_sum_helper a size (apply + (take a size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond [(= size 0) max_sum]\n          [(<= (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n          [(> (car a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n          [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum_so_far (if (&gt;= max_sum 0) (+ max_sum (list-ref a size)) (list-ref a size))))\n          (max_sub_array_sum_helper a (- size 1) sum_so_far))))\n  (max_sub_array_sum_helper a (- size 1) 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (+ max-ending-here (car a)))\n       ]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (car a))\n       ]\n      )\n    )\n  (max_sub_array_sum_helper a size (car a) 0)\n  )\n",
    "  (let loop ([i 0] [j 0] [sum 0] [max_sum 0])\n    (cond [(= i size) max_sum]\n          [(= j size) (loop (+ i 1) i 0 max_sum)]\n          [else (loop i (+ j 1) (+ sum (list-ref a j)) (max max_sum sum))])))\n",
    "  (define (max_sub_array_sum_helper a size curr_sum max_sum)\n    (cond ((= size 0) max_sum)\n          ((< curr_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a) (max curr_sum max_sum)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) (+ curr_sum (car a)) (max curr_sum max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (rest a) size sum)\n              (max_sub_array_sum_helper (rest a) size max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ([i 0] [max_sum 0] [cur_sum 0])\n    (cond [(= i size) max_sum]\n          [else\n           (let ([sum (+ cur_sum (list-ref a i))])\n             (cond [(> sum 0) (loop (+ i 1) (max max_sum sum) sum)]\n                   [else (loop (+ i 1) (max max_sum sum) 0)]))])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum (take size a)) max_sum)\n       (max_sub_array_sum_helper (rest a) size (sum (take size a)))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size (sum (take size a))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else\n       (define sum (apply + a))\n       (max_sub_array_sum_helper (rest a) (- size 1) (max max_sum sum))]))\n  (max_sub_array_sum_helper a size -1))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [else\n       (let ([new-sum (+ sum (list-ref a (- size 1)))])\n         (if (&lt; new-sum (list-ref a (- size 1)))\n             (max_sub_array_sum_helper a (- size 1) (list-ref a (- size 1)) (list-ref a (- size 1)))\n             (max_sub_array_sum_helper a (- size 1) new-sum (max new-sum max-sum))))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(= size 1) (max max_sum (first a))]\n      [else\n       (define (sum_of_first_n_elements a size)\n         (cond\n           [(empty? a) 0]\n           [(= size 1) (first a)]\n           [else (+ (first a) (sum_of_first_n_elements (rest a) (- size 1)))]))\n       (max_sub_array_sum_helper (rest a) size (max max_sum (sum_of_first_n_elements a size)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [else\n       (define new-sum (+ sum (list-ref a (- size 1))))\n       (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n       (max_sub_array_sum_helper a (- size 1) new-sum new-max-sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((current_sum (+ (car a) max_sum)))\n          (if (&gt; current_sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) current_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))])\n          (if (&gt; sum max_sum)\n              sum\n              max_sum))))\n  (max_sub_array_sum_helper a size 0))\n</code>\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [(> (sum (take a size)) max_sum)\n       (max_sub_array_sum_helper (rest a) size (sum (take a size)))]\n      [else (max_sub_array_sum_helper (rest a) size max_sum)]))\n  (max_sub_array_sum_helper a size (sum (take a size))))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(empty? a) max_sum]\n      [else\n       (let* ([curr_sum (apply + (take size a))]\n              [max_sum (max max_sum curr_sum)])\n         (max_sub_array_sum_helper (rest a) size max_sum))]))\n  (max_sub_array_sum_helper a size -1))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (+ max-ending-here (car a)))\n       ]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max max-so-far max-ending-here) (car a))\n       ]\n      )\n    )\n  (max_sub_array_sum_helper a size (car a) (car a))\n  )\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ([sum (apply + (take a size))])\n          (max_sub_array_sum_helper (rest a) (- size 1) (max sum max_sum)))))\n  (max_sub_array_sum_helper a (length a) 0))\n",
    "  (define (max_sub_array_sum_helper a size i max_sum)\n    (if (= i size)\n        max_sum\n        (let ((sum (apply + (sublist a i (+ i size)))))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper a size (+ i 1) sum)\n              (max_sub_array_sum_helper a size (+ i 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (apply + a) max_sum)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size i sum max_sum)\n    (cond\n      [(= i size) max_sum]\n      [(>= sum 0)\n       (max_sub_array_sum_helper a size (+ i 1) (+ sum (list-ref a i)) (max sum max_sum))]\n      [else\n       (max_sub_array_sum_helper a size (+ i 1) (list-ref a i) (max sum max_sum))]))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max-sum)\n    (cond\n      [(= size 0) max-sum]\n      [else\n       (let* ([current-sum (+ sum (car a))]\n              [new-max-sum (max current-sum max-sum)])\n         (max_sub_array_sum_helper (cdr a) (- size 1) current-sum new-max-sum))]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a i j sum)\n    (if (= i size)\n        sum\n        (max_sub_array_sum_helper a (+ i 1) (+ j 1) (max sum (apply + (sublist a i j))))))\n  (max_sub_array_sum_helper a 0 1 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((&gt; (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a))))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (cond\n      [(= size 0) max_so_far]\n      [else\n       (define max_ending_here (+ max_ending_here (list-ref a size)))\n       (define max_so_far (max max_so_far max_ending_here))\n       (max_sub_array_sum_helper a (- size 1) max_so_far max_ending_here)]))\n  (max_sub_array_sum_helper a (- size 1) (list-ref a 0) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum))\n       (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_so_far max_ending_here)\n    (cond\n      [(= size 0) max_so_far]\n      [(> max_ending_here 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1)\n                                 (max max_so_far max_ending_here)\n                                 (+ max_ending_here (car a)))]\n      [else\n       (max_sub_array_sum_helper (cdr a) (- size 1)\n                                 (max max_so_far max_ending_here)\n                                 (car a))]))\n  (max_sub_array_sum_helper a size -1000 -1000))\n",
    "  (define (max_sub_array_sum_helper a size i sum max-sum)\n    (cond\n      [(= i size) max-sum]\n      [else\n       (define new-sum (+ sum (list-ref a i)))\n       (define new-max-sum (if (&gt; new-sum max-sum) new-sum max-sum))\n       (define new-max-sum (if (&lt; new-sum 0) 0 new-max-sum))\n       (max_sub_array_sum_helper a size (+ i 1) new-sum new-max-sum)]))\n  (max_sub_array_sum_helper a size 0 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n             (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size curr_max curr_sum)\n    (cond\n      [(= size 0) curr_max]\n      [(>= curr_sum 0)\n       (max_sub_array_sum_helper (cdr a) (- size 1) (max curr_max (+ curr_sum (car a))) (+ curr_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (max curr_max (car a)) (car a))]))\n  (max_sub_array_sum_helper a size (car a) 0))\n"
  ]
}