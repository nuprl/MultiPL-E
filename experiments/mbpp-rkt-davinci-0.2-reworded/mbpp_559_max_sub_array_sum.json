{
  "name": "mbpp_559_max_sub_array_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the sum of the largest contiguous sublist in the given list.\n(define (max_sub_array_sum a size)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sub_array_sum))\n    (check-equal? (candidate (list -2 -3 4 -1 -2 1 5 -3) 8) 7)\n    (check-equal? (candidate (list -3 -4 5 -2 -3 2 6 -4) 8) 8)\n    (check-equal? (candidate (list -4 -5 6 -3 -4 3 7 -5) 8) 10)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (max_sub_array_sum_helper a size sum max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> sum max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(> sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max_sum)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (car a) max_sum)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_aux a size max_sum)\n    (if (zero? size)\n        max_sum\n        (let ([sum (+ (car a) (max_sub_array_sum_aux (cdr a) (- size 1) max_sum))])\n          (if (&gt; sum max_sum)\n              sum\n              max_sum))))\n  (max_sub_array_sum_aux a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(< max_sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max-so-far max-ending-here)\n    (cond\n      [(= size 0) max-so-far]\n      [(> max-ending-here 0) (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (+ max-ending-here (car a))) ]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max-so-far (car a))]))\n  (max_sub_array_sum_helper a size (car a) 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let ([sum (apply + a)])\n         (if (&gt; sum max_sum)\n             (max_sub_array_sum_helper (rest a) (- size 1) sum)\n             (max_sub_array_sum_helper (rest a) (- size 1) max_sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [(> (+ (car a) max_sum) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(= size 1) (max max_sum (car a))]\n      [else\n       (let ([sum (apply + a)])\n         (max_sub_array_sum_helper (cdr a) (- size 1) (max max_sum sum)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 1) max_sum]\n      [else\n       (let* ([sum (apply + a)]\n              [new_max_sum (max sum max_sum)])\n         (max_sub_array_sum_helper (cdr a) (- size 1) new_max_sum))]))\n  (max_sub_array_sum_helper a size (apply + a)))\n",
    "  (define (max_sub_array_sum_helper a size sum max)\n    (cond\n      [(= size 0) max]\n      [(> sum max) (max_sub_array_sum_helper (cdr a) (- size 1) sum sum)]\n      [(< sum 0) (max_sub_array_sum_helper (cdr a) (- size 1) 0 max)]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ sum (car a)) max)]))\n  (max_sub_array_sum_helper a size 0 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let* ([sum (apply + (take a size))]\n               [max_sum (if (&gt; sum max_sum) sum max_sum)])\n          (max_sub_array_sum_helper (rest a) (- size 1) max_sum))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (if (= size 0)\n        max_sum\n        (let ((sum (apply + a)))\n          (if (&gt; sum max_sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) sum)\n              (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(zero? size) max_sum]\n      [(< (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]\n      [(> (car a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (apply + a) max_sum) (max_sub_array_sum_helper (cdr a) (- size 1) (+ max_sum (car a)))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (sum a) max_sum) (max_sub_array_sum_helper (rest a) (- size 1) (sum a))]\n      [else (max_sub_array_sum_helper (rest a) (- size 1) max_sum)]))\n  (max_sub_array_sum_helper a size (sum a)))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond ((= size 0) max_sum)\n          ((< (car a) 0) (max_sub_array_sum_helper (cdr a) (- size 1) max_sum))\n          ((> (+ (car a) max_sum) 0) (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum)))\n          (else (max_sub_array_sum_helper (cdr a) (- size 1) 0))))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n",
    "  (let loop ((i 0) (j 0) (max 0) (sum 0))\n    (cond\n      [(= i size) max]\n      [(= j size) (loop (+ i 1) i max 0)]\n      [(> (+ sum (list-ref a j)) 0)\n       (loop i (+ j 1) (max (max sum (+ sum (list-ref a j)))) (+ sum (list-ref a j)))]\n      [else (loop i (+ j 1) max 0)])))\n",
    "  (define (max_sub_array_sum_helper a size max_sum)\n    (cond\n      [(= size 0) max_sum]\n      [(> (car a) (+ (car a) max_sum)) (max_sub_array_sum_helper (cdr a) (- size 1) (car a))]\n      [else (max_sub_array_sum_helper (cdr a) (- size 1) (+ (car a) max_sum))]))\n  (max_sub_array_sum_helper a size 0))\n"
  ]
}