{
  "name": "mbpp_420_cube_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the cube sum of first n even natural numbers.\n(define (cube_Sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate cube_Sum))\n    (check-equal? (candidate 2) 72)\n    (check-equal? (candidate 3) 288)\n    (check-equal? (candidate 4) 800)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (cube x)\n    (* x x x))\n  (define (even? x)\n    (= (remainder x 2) 0))\n  (define (sum_even_cubes n)\n    (cond ((= n 0) 0)\n          ((even? n) (+ (cube n) (sum_even_cubes (- n 1))))\n          (else (sum_even_cubes (- n 1)))))\n  (sum_even_cubes n))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 2) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (* n n n) (cube_Sum (- n 2)))))\n",
    "  (define (cube_Sum_iter sum i)\n    (if (= i n)\n        sum\n        (cube_Sum_iter (+ sum (* i i i)) (+ i 1))))\n  (cube_Sum_iter 0 2))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 1) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (cube_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_helper (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_helper n 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 2) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (2*n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 1) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (define (cubeSum_iter n sum)\n    (if (= n 0)\n        sum\n        (cubeSum_iter (- n 2) (+ sum (* n n n)))))\n  (cubeSum_iter n 0))\n",
    "  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum_of_cubes (- n 2)))))\n  (sum_of_cubes n))\n",
    "  (define (cubeSumIter n sum)\n    (if (= n 0)\n        sum\n        (cubeSumIter (- n 1) (+ sum (* n n n)))))\n  (cubeSumIter n 0))\n",
    "  (define (cubeSum_iter i sum)\n    (if (= i n)\n        sum\n        (cubeSum_iter (+ i 1) (+ sum (* i i i)))))\n  (cubeSum_iter 1 0))\n",
    "  (define (cube_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (cube_Sum_iter (- n 2) (+ sum (* n n n)))))\n  (cube_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))]))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 3) (cube_Sum (- n 1)))))\n",
    "  (define (cubeSumIter i sum)\n    (if (= i n)\n        sum\n        (cubeSumIter (+ i 1) (+ sum (* i i i)))))\n  (cubeSumIter 0 0))\n"
  ]
}