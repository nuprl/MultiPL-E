{
  "name": "mbpp_603_get_ludic",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get all lucid numbers smaller than or equal to a given integer.\n(define (get_ludic n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_ludic))\n    (check-equal? (candidate 10) (list 1 2 3 5 7))\n    (check-equal? (candidate 25) (list 1 2 3 5 7 11 13 17 23 25))\n    (check-equal? (candidate 45) (list 1 2 3 5 7 11 13 17 23 25 29 37 41 43))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_ludic_iter i)\n    (if (&gt; i n)\n        '()\n        (if (lucid? i)\n            (cons i (get_ludic_iter (+ i 1)))\n            (get_ludic_iter (+ i 1)))))\n  (get_ludic_iter 1))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (- n 1)) (list n))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) empty]\n    [(= n 2) (list 2)]\n    [(= n 3) (list 2 3)]\n    [(= n 4) (list 2 3 4)]\n    [(= n 5) (list 2 3 4 5)]\n    [(= n 6) (list 2 3 4 5 6)]\n    [(= n 7) (list 2 3 4 5 6 7)]\n    [(= n 8) (list 2 3 4 5 6 7 8)]\n    [(= n 9) (list 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) (list 2 3 4 5 6 7 8 9",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond\n    [(= n 0) empty]\n    [else (cons n (get_ludic (- n 1)))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else\n     (append (get_ludic (quotient n 10))\n             (list n))]))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i)\n        i)))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (lucid? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (filter (lambda (x) (and (ludic? x) (<= x n))) (range 1 n)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (lucid? i) i)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (filter (lambda (x) (lucid? x)) (range 1 (+ n 1))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) (reverse acc)]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond ((= n 0) '())\n        ((ludic? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i '())))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (define (get_ludic_iter n result)\n    (cond ((= n 0) result)\n          ((lucid? n) (get_ludic_iter (- n 1) (cons n result)))\n          (else (get_ludic_iter (- n 1) result))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else\n     (append\n      (get_ludic (- n 1))\n      (list n)\n      (get_ludic (- n 2)))]))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (+ n 1))))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i)\n        i)))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (+ 1 n))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 1) '()]\n    [(= n 2) '(2)]\n    [(= n 3) '(2 3)]\n    [(= n 4) '(2 3 4)]\n    [(= n 5) '(2 3 4 5)]\n    [(= n 6) '(2 3 4 5 6)]\n    [(= n 7) '(2 3 4 5 6 7)]\n    [(= n 8) '(2 3 4 5 6 7 8)]\n    [(= n 9) '(2 3 4 5 6 7 8 9)]\n    [(= n 10) '(2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24)]\n    [(= n 25) '(2 3 4 5 6 7 8",
    "  (cond\n    [(= n 0) '()]\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (lucid? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (lucid? i)\n        i)))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (add1 n))))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (- n 1)) (list n))]))\n",
    "  (cond ((= n 0) '())\n        ((ludic? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (define (get_ludic-iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic-iter (- n 1) (cons n acc))]\n      [else (get_ludic-iter (- n 1) acc)]))\n  (get_ludic-iter n '()))\n",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (lucid? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (+ n 1))))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [else\n     (append (get_ludic (- n 1))\n             (list n)\n             (get_ludic (- n 2))\n             (list n)\n             (get_ludic (- n 3))\n             (list n))]))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (define (ludic? n)\n    (define (sum-digits n)\n      (if (= n 0)\n          0\n          (+ (modulo n 10) (sum-digits (quotient n 10)))))\n    (define (is-lucid? n)\n      (if (= n 0)\n          #t\n          (if (= (modulo n (sum-digits n)) 0)\n              (is-lucid? (quotient n (sum-digits n)))\n              #f)))\n    (is-lucid? n))\n  (define (get-ludic-list n)\n    (if (= n 0)\n        '()\n        (if (ludic? n)\n            (cons n (get-ludic-list (- n 1)))\n            (get-ludic-list (- n 1)))))\n  (get-ludic-list n))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (add1 n))))\n",
    "  (cond ((= n 1) '(1))\n        ((= n 2) '(1 2))\n        ((= n 3) '(1 2 3))\n        ((= n 4) '(1 2 3 4))\n        ((= n 5) '(1 2 3 4 5))\n        ((= n 6) '(1 2 3 4 5 6))\n        ((= n 7) '(1 2 3 4 5 6 7))\n        ((= n 8) '(1 2 3 4 5 6 7 8))\n        ((= n 9) '(1 2 3 4 5 6 7 8 9))\n        ((= n 10) '(1 2 3 4 5 6 7 8 9 10))\n        ((= n 11) '(1 2 3 4 5 6 7 8 9 10 11))\n        ((= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12))\n        ((= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13))\n        ((= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14))\n        ((= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15))\n        ((= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))\n        ((= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17))\n        ((= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18))\n        ((= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19))\n        ((= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20))\n        ((= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21))\n        ((= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22))\n        ((= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23))\n        ((= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19",
    "  (cond\n    [(= n 0) empty]\n    [else (cons n (get_ludic (- n 1)))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (cond\n    [(= n 0) '()]\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7",
    "  (cond\n    [(= n 0) '()]\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7",
    "  (cond\n    [(= n 0) '()]\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (ludic? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (define (get_ludic_iter n acc)\n    (cond [(= n 0) acc]\n          [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n          [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [else\n     (append (get_ludic (- n 1))\n             (list n)\n             (get_ludic (- n 2)))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range n)])\n    (if (lucid? i) i)))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (for/list ([i (in-range n)])\n    (if (lucid? i) i)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i)\n        i)))\n",
    "  (define (get_ludic_iter n acc)\n    (cond ((= n 0) acc)\n          ((lucid? n) (get_ludic_iter (- n 1) (cons n acc)))\n          (else (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else\n     (append\n      (get_ludic (quotient n 10))\n      (list n))]))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (- n 1))\n                  (list n)\n                  (get_ludic (- n 1)))]))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (+ n 1))))\n",
    "  (cond\n    [(= n 0) (list)]\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16",
    "  (define (get_ludic_helper n)\n    (cond\n      [(= n 0) empty]\n      [(lucid? n) (cons n (get_ludic_helper (- n 1)))]\n      [else (get_ludic_helper (- n 1))]))\n  (get_ludic_helper n))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (quotient n 10)) (list n))]))\n",
    "  (filter (lambda (x) (lucid? x)) (range 1 (+ n 1))))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (lucid? i) i)))\n",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (lucid? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [(= n 10) (list 1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) (list 1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) (list 1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) (list 1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n   ",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (filter (lambda (x) (lucid? x)) (range 1 n)))\n",
    "  (cond ((= n 1) (list 1))\n        ((= n 2) (list 1 2))\n        (else (cons 1 (get_ludic (- n 1))))))\n",
    "  (cond\n    [(= n 0) '()]\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7",
    "  (cond\n    [(= n 0) (list 0)]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (- n 1)) (list n))]))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (for/list ([i (in-range 1 n)])\n    (if (lucid? i) i)))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (if (= n 0)\n      (list)\n      (append (get_ludic (- n 1))\n              (if (ludic? n)\n                  (list n)\n                  (list)))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [else\n     (append (get_ludic (- n 1))\n             (list n))]))\n",
    "  (cond ((= n 1) (list 1))\n        ((= n 2) (list 1 2))\n        (else (append (get_ludic (- n 1))\n                      (list n)\n                      (get_ludic (- n 2))))))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (if (= n 0)\n      '()\n      (cons n (get_ludic (- n (ludic? n))))))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [else\n     (append (get_ludic (quotient n 10))\n             (list n))]))\n",
    "  (cond\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17",
    "  (define (is_ludic? n)\n    (define (sum_digits n)\n      (if (= n 0)\n          0\n          (+ (modulo n 10) (sum_digits (quotient n 10)))))\n    (if (= n 0)\n        #f\n        (if (= (modulo n (sum_digits n)) 0)\n            #t\n            #f)))\n  (if (= n 0)\n      '()\n      (cons n (get_ludic (- n 1)))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (if (= n 0)\n      '()\n      (cons n (get_ludic (- n 1)))))\n",
    "  (define (is_ludic n)\n    (cond\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n      [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(= n 50)",
    "  (define (get_ludic_helper n)\n    (cond ((= n 0) '())\n          ((lucid? n) (cons n (get_ludic_helper (- n 1))))\n          (else (get_ludic_helper (- n 1)))))\n  (get_ludic_helper n))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (is_ludic? n)\n    (define (sum_digits n)\n      (if (= n 0)\n          0\n          (+ (remainder n 10) (sum_digits (quotient n 10)))))\n    (if (= n 0)\n        #f\n        (if (= (remainder n (sum_digits n)) 0)\n            #t\n            #f)))\n  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (is_ludic? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (define (get_ludic_iter n acc)\n    (cond ((= n 0) acc)\n          ((lucid? n) (get_ludic_iter (- n 1) (cons n acc)))\n          (else (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (filter (lambda (x) (lucid? x)) (range 1 (+ n 1))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond ((= n 0) acc)\n          ((lucid? n) (get_ludic_iter (- n 1) (cons n acc)))\n          (else (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (define (get_ludic_iter i)\n    (if (&gt; i n)\n        '()\n        (if (ludic? i)\n            (cons i (get_ludic_iter (+ i 1)))\n            (get_ludic_iter (+ i 1)))))\n  (get_ludic_iter 1))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [else (append (get_ludic (- n 1)) (list n))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [(= n 4) (list 1 2 3 4)]\n    [(= n 5) (list 1 2 3 4 5)]\n    [(= n 6) (list 1 2 3 4 5 6)]\n    [(= n 7) (list 1 2 3 4 5 6 7)]\n    [(= n 8) (list 1 2 3 4 5 6 7 8)]\n    [(= n 9) (list 1 2 3 4 5 6 7 8 9)]\n    [else\n     (append (get_ludic (quotient n 10)) (list n))]))\n",
    "  (cond [(= n 0) '()]\n        [(lucid? n) (cons n (get_ludic (- n 1)))]\n        [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (is_ludic n)\n    (define (is_ludic_helper n)\n      (if (= n 0)\n          #t\n          (let* ([d (modulo n 10)]\n                 [n (quotient n 10)])\n            (if (or (= d 0) (= d 6) (= d 9))\n                (is_ludic_helper n)\n                #f))))\n    (is_ludic_helper n))\n  (define (get_ludic_helper n)\n    (if (= n 0)\n        '()\n        (if (is_ludic n)\n            (cons n (get_ludic_helper (- n 1)))\n            (get_ludic_helper (- n 1)))))\n  (get_ludic_helper n))\n",
    "  (cond\n    [(= n 0) '()]\n    [(= n 1) '(1)]\n    [(= n 2) '(1 2)]\n    [(= n 3) '(1 2 3)]\n    [(= n 4) '(1 2 3 4)]\n    [(= n 5) '(1 2 3 4 5)]\n    [(= n 6) '(1 2 3 4 5 6)]\n    [(= n 7) '(1 2 3 4 5 6 7)]\n    [(= n 8) '(1 2 3 4 5 6 7 8)]\n    [(= n 9) '(1 2 3 4 5 6 7 8 9)]\n    [(= n 10) '(1 2 3 4 5 6 7 8 9 10)]\n    [(= n 11) '(1 2 3 4 5 6 7 8 9 10 11)]\n    [(= n 12) '(1 2 3 4 5 6 7 8 9 10 11 12)]\n    [(= n 13) '(1 2 3 4 5 6 7 8 9 10 11 12 13)]\n    [(= n 14) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14)]\n    [(= n 15) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15)]\n    [(= n 16) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)]\n    [(= n 17) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17)]\n    [(= n 18) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18)]\n    [(= n 19) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19)]\n    [(= n 20) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)]\n    [(= n 21) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21)]\n    [(= n 22) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22)]\n    [(= n 23) '(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23)]\n    [(= n 24) '(1 2 3 4 5 6 7",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i '())))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (cond ((= n 0) '())\n        ((ludic? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond ((= n 0) acc)\n          ((lucid? n) (get_ludic_iter (- n 1) (cons n acc)))\n          (else (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (if (= n 0)\n      '()\n      (cons n (get_ludic (- n (ludic? n))))))\n",
    "  (cond\n    [(= n 1) (list 1)]\n    [(= n 2) (list 1 2)]\n    [(= n 3) (list 1 2 3)]\n    [else\n     (append (get_ludic (- n 1))\n             (list n))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (get_ludic-iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic-iter (- n 1) (cons n acc))]\n      [else (get_ludic-iter (- n 1) acc)]))\n  (get_ludic-iter n '()))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (get_ludic-iter n acc)\n    (cond ((= n 0) acc)\n          ((lucid? n) (get_ludic-iter (- n 1) (cons n acc)))\n          (else (get_ludic-iter (- n 1) acc))))\n  (get_ludic-iter n '()))\n",
    "  (cond ((= n 0) '())\n        ((lucid? n) (cons n (get_ludic (- n 1))))\n        (else (get_ludic (- n 1)))))\n",
    "  (define (get_ludic_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic_iter (- n 1) (cons n acc))]\n      [else (get_ludic_iter (- n 1) acc)]))\n  (get_ludic_iter n '()))\n",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (lucid? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (quotient n 2)) (list n))]))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 n)))\n",
    "  (for/list ([i (in-range 1 n)])\n    (if (ludic? i) i)))\n",
    "  (define (get_ludic-iter n acc)\n    (cond\n      [(= n 0) acc]\n      [(lucid? n) (get_ludic-iter (- n 1) (cons n acc))]\n      [else (get_ludic-iter (- n 1) acc)]))\n  (get_ludic-iter n '()))\n",
    "  (cond\n    [(= n 0) empty]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (filter (lambda (x) (lucid? x)) (range 1 n)))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (quotient n 2)) (list n))]))\n",
    "  (define (get_ludic_iter n acc)\n    (if (= n 0)\n        acc\n        (if (ludic? n)\n            (get_ludic_iter (- n 1) (cons n acc))\n            (get_ludic_iter (- n 1) acc))))\n  (get_ludic_iter n '()))\n",
    "  (filter (lambda (x) (ludic? x)) (range 1 (+ n 1))))\n",
    "  (cond\n    [(= n 0) empty]\n    [(= n 1) (list 1)]\n    [else (append (get_ludic (quotient n 10))\n                  (list n))]))\n",
    "  (cond\n    [(= n 0) '()]\n    [(lucid? n) (cons n (get_ludic (- n 1)))]\n    [else (get_ludic (- n 1))]))\n",
    "  (define (get_ludic_iter n res)\n    (cond ((= n 0) res)\n          ((lucid? n) (get_ludic_iter (- n 1) (cons n res)))\n          (else (get_ludic_iter (- n 1) res))))\n  (get_ludic_iter n '()))\n"
  ]
}