{
  "name": "mbpp_754_extract_index_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (car l1) (car l2) (car l3))\n                    (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3))\n                (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cond\n       [(equal? (first l1) (first l2))\n        (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n       [else\n        (extract_index_list (rest l1) (rest l2) (rest l3))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cond\n       [(equal? (first l1) (first l2))\n        (cond\n          [(equal? (first l1) (first l3))\n           (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n          [else (extract_index_list (rest l1) (rest l2) (rest l3))])]\n       [else (extract_index_list (rest l1) (rest l2) (rest l3))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (if (and (not (null? l1)) (not (null? l2)) (not (null? l3)))\n      (cons (list (car l1) (car l2) (car l3))\n            (extract_index_list (cdr l1) (cdr l2) (cdr l3)))\n      '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphuzz120v.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphuzz120v.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphuzz120v.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphuzz120v.rkt:18:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons\n      (list (first l1) (first l2) (first l3))\n      (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:21:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:22:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) '()]\n        [(empty? l2) '()]\n        [(empty? l3) '()]\n        [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qsejqhi.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qsejqhi.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qsejqhi.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5qsejqhi.rkt:18:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8237duno.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8237duno.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8237duno.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8237duno.rkt:18:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (first l1) (first l2) (first l3))\n                    (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l2) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l2) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:14:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:17:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond ((null? l1) '())\n        ((null? l2) '())\n        ((null? l3) '())\n        (else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfv0wv2k.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfv0wv2k.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfv0wv2k.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfv0wv2k.rkt:18:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(and (empty? l2) (empty? l3)) empty]\n    [(and (empty? l2) (not (empty? l3))) empty]\n    [(and (not (empty? l2)) (empty? l3)) empty]\n    [(and (not (empty? l2)) (not (empty? l3)))\n     (if (equal? (first l1) (first l2))\n         (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))\n         (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons\n      (list (first l1) (first l2) (first l3))\n      (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:21:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:22:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons\n      (cons (first l1) (cons (first l2) (cons (first l3) empty)))\n      (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:21:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:22:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (first l1) (first l2) (first l3))\n                    (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoqfmi1df.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons\n      (list (car l1) (car l2) (car l3))\n      (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqmkbxc2.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqmkbxc2.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqmkbxc2.rkt:21:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjqmkbxc2.rkt:22:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons\n      (cons (first l1) (cons (first l2) (cons (first l3) empty)))\n      (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:21:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5d3hp18y.rkt:22:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (car l1) (car l2) (car l3))\n                    (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cond\n       [(equal? (first l1) (first l2) (first l3)) (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n       [else (extract_index_list (rest l1) (rest l2) (rest l3))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mj_ok04.rkt:19:4\n\nequal?: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mj_ok04.rkt:20:4\n\nequal?: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mj_ok04.rkt:21:4\n\nequal?: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mj_ok04.rkt:22:4\n\nequal?: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond ((null? l1) '())\n        ((null? l2) '())\n        ((null? l3) '())\n        (else (cons (list (car l1) (car l2) (car l3))\n                    (extract_index_list (cdr l1) (cdr l2) (cdr l3))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwidbpgv5.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwidbpgv5.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwidbpgv5.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwidbpgv5.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond ((null? l1) '())\n        ((null? l2) '())\n        ((null? l3) '())\n        ((equal? (car l1) (car l2))\n         (cons (car l1) (extract_index_list (cdr l1) (cdr l2) (cdr l3))))\n        (else (extract_index_list (cdr l1) (cdr l2) (cdr l3)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (car l1) (car l2) (car l3))\n                    (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (cons (first l1) (cons (first l2) (cons (first l3) empty))) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo2do9t8a.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo2do9t8a.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo2do9t8a.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo2do9t8a.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:14:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptfrpt6it.rkt:17:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(empty? l1) empty]\n        [(empty? l2) empty]\n        [(empty? l3) empty]\n        [else (cons (list (car l1) (car l2) (car l3))\n                    (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeofndxn1.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3))\n                (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66ojyvo9.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons\n      (list (first l1) (first l2) (first l3))\n      (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:21:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_8c0tvc.rkt:22:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(null? l1) '()]\n    [(and (not (null? l1)) (not (null? l2)) (not (null? l3)))\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]\n    [else '()]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd1wuowi.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd1wuowi.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd1wuowi.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcd1wuowi.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxf6rx29u.rkt:15:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxf6rx29u.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxf6rx29u.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxf6rx29u.rkt:18:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n     (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n    [else (extract_index_list (rest l1) (rest l2) (rest l3))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) '()]\n    [(empty? l2) '()]\n    [(empty? l3) '()]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41t4uq9g.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41t4uq9g.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41t4uq9g.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp41t4uq9g.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (list-ref l1 0) (list-ref l2 0) (list-ref l3 0))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56ztr0zy.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cond\n       [(and (equal? (first l1) (first l2)) (equal? (first l1) (first l3)))\n        (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n       [else (extract_index_list (rest l1) (rest l2) (rest l3))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123141,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cond\n       [(equal? (first l1) (first l2))\n        (cons (first l1) (extract_index_list (rest l1) (rest l2) (rest l3)))]\n       [else (extract_index_list (rest l1) (rest l2) (rest l3))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3))\n                (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ww05jmg.rkt:20:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_utq06qx.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [else\n     (cons (list (first l1) (first l2) (first l3))\n           (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjp2jkhu.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjp2jkhu.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjp2jkhu.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptjp2jkhu.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else\n     (cons (list (car l1) (car l2) (car l3))\n           (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:19:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:20:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu84svk7d.rkt:21:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (car l1) (car l2) (car l3)) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510028,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuv84t4o.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond [(and (null? l1) (null? l2) (null? l3)) '()]\n        [(and (not (null? l1)) (not (null? l2)) (not (null? l3))\n              (equal? (car l1) (car l2)) (equal? (car l2) (car l3)))\n         (cons (car l1) (extract_index_list (cdr l1) (cdr l2) (cdr l3)))]\n        [else (extract_index_list (cdr l1) (cdr l2) (cdr l3))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1666123142,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n(define (extract_index_list l1 l2 l3)\n  (cond\n    [(empty? l1) empty]\n    [(empty? l2) empty]\n    [(empty? l3) empty]\n    [else (cons (list (first l1) (first l2) (first l3)) (extract_index_list (rest l1) (rest l2) (rest l3)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate extract_index_list))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 7))\n    (check-equal? (candidate (list 1 1 3 4 5 6 7) (list 0 1 2 3 4 6 5) (list 0 1 2 3 4 6 7)) (list 1 6))\n    (check-equal? (candidate (list 1 1 3 4 6 5 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list 1 5))\n    (check-equal? (candidate (list 1 2 3 4 6 6 6) (list 0 1 2 3 4 5 7) (list 0 1 2 3 4 5 7)) (list ))\n))\n\n(test-humaneval)",
      "timestamp": 1665510027,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:16:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 5 5) (7 7 7))\nexpected:   '(1 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:17:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (5 4 4) (6 6 6) (7 5 7))\nexpected:   '(1 6)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:18:4\nactual:     '((1 0 0) (1 1 1) (3 2 2) (4 3 3) (6 4 4) (5 5 5) (6 7 7))\nexpected:   '(1 5)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtkzsuwy.rkt:19:4\nactual:     '((1 0 0) (2 1 1) (3 2 2) (4 3 3) (6 4 4) (6 5 5) (6 7 7))\nexpected:   '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}