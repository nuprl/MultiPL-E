{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max_sum_increasing_subseq a n index k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_increasing_subseq))\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 4 6) 11)\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 2 5) 7)\n    (check-equal? (candidate (list 11 15 19 21 26 28 31) 7 2 4) 71)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-sum (cadr prev)]\n            [prev-seq (car prev)]\n            [prev-last (car (car prev-seq))])\n       (if (and (< (vector-ref a index) (vector-ref a k))\n                (< (vector-ref a k) (vector-ref a (- index 1))))\n           (let* ([prev-sum-k (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n                  [prev-sum-k-sum (cadr prev-sum-k)]\n                  [prev-sum-k-seq (car prev-sum-k)])\n             (if (> (+ prev-sum-k-sum (vector-ref a k)) prev-sum)\n                 (list (cons (cons (vector-ref a k) prev-last) prev-sum-k-seq)\n                       (+ prev-sum-k-sum (vector-ref a k)))\n                 (list prev-seq prev-sum)))\n           (list prev-seq prev-sum))))])\n",
    "  (cond\n    [(= index n) 0]\n    [(> index k) (max_sum_increasing_subseq a n (+ index 1) k)]\n    [(< index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))\n           max-sum))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-including-k (if (< index k)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             max-sum-including-k))))\n",
    "  (cond ((= index n) 0)\n        ((= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))\n        ((&gt; (vector-ref a index) (vector-ref a k))\n         (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))\n        (else (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-including-k (if (< k n)\n                                     (+ (list-ref a k) (max_sum_increasing_subseq a n index (+ k 1)))\n                                     0)])\n        (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n             max-sum-including-k))))\n",
    "  (if (= index n)\n      0\n      (let ([include (if (>= k index)\n                        (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                        0)])\n        (max include (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (if (= index n)\n      0\n      (let ((max (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max (vector-ref a index) (+ (vector-ref a index) max))\n            max))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (< (vector-ref a index) (vector-ref a k))\n                             (+ (max_sum_increasing_subseq a n (+ index 1) index)\n                                (vector-ref a index))\n                             0))])\n        max-sum)))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    [(= index k) (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    [(= index n) (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    [else (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    )\n  )\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (max_sum_increasing_subseq a n (- index 1) (- k 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]\n    [(> (list-ref a index) (list-ref a k)) (max_sum_increasing_subseq a n (- index 1) k)]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index (- n 1))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ((max_sum_including_k (list-ref a k))\n            (max_sum_excluding_k (max_sum_increasing_subseq a n index (+ k 1))))\n        (if (> (list-ref max_sum_excluding_k 1) max_sum_including_k)\n            max_sum_excluding_k\n            (list (list (list (list-ref a index))) max_sum_including_k)))))\n",
    "  (cond\n    [(= index (- n 1)) 0]\n    [(= index k) (vector-ref a index)]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(> k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n index (+ k 1))))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                             (+ (max_sum_increasing_subseq a n (+ index 1) index) (vector-ref a k))\n                             0))])\n        max-sum)))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (>= k index)\n            (max max-sum (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a 0))) (list (list-ref a 0)))\n      (let ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n        (let ([prev-max-sum-list (car prev-max-sum)]\n              [prev-max-sum-val (cadr prev-max-sum)])\n          (if (< (list-ref a index) (list-ref a k))\n              (let ([new-max-sum-list (append prev-max-sum-list (list (append (car (last prev-max-sum-list)) (list (list-ref a index)))))])\n                (list new-max-sum-list (+ (list-ref a index) prev-max-sum-val)))\n              (list prev-max-sum-list prev-max-sum-val))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (> index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< (vector-ref a index) (vector-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index -1)\n      0\n      (max (max_sum_increasing_subseq a n (- index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (- index 1) index)\n                  0)))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [(= index k) (list (list (list-ref a index)) (list-ref a index))]\n    [else\n     (let* ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-including-k (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n            [prev-max-sum-including-k-sum (cadr prev-max-sum-including-k)]\n            [prev-max-sum-including-k-subseq (car prev-max-sum-including-k)]\n            [prev-max-sum-sum (cadr prev-max-sum)]\n            [prev-max-sum-subseq (car prev-max-sum)])\n       (cond\n         [(> (+ prev-max-sum-including-k-sum (list-ref a index)) prev-max-sum-sum)\n          (list (append prev-max-sum-including-k-subseq (list (list-ref a index))) (+ prev-max-sum-including-k-sum (list-ref a index)))]\n         [else\n          (list prev-max-sum-subseq prev-max-sum-sum)]))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-kth-element (if (< k n)\n                                               (+ (list-ref a index)\n                                                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))\n                                               0))\n            (max-sum-excluding-kth-element (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))\n        (max max-sum-including-kth-element max-sum-excluding-kth-element))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [else\n     (let* ([previous-max-sum-increasing-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [previous-max-sum (cadr previous-max-sum-increasing-subseq)]\n            [previous-max-sum-increasing-subseq-list (car previous-max-sum-increasing-subseq)]\n            [previous-max-sum-increasing-subseq-list-length (length previous-max-sum-increasing-subseq-list)]\n            [previous-max-sum-increasing-subseq-list-last-element (list-ref previous-max-sum-increasing-subseq-list (- previous-max-sum-increasing-subseq-list-length 1))]\n            [previous-max-sum-increasing-subseq-list-last-element-length (length previous-max-sum-increasing-subseq-list-last-element)]\n            [previous-max-sum-increasing-subseq-list-last-element-last-element (list-ref previous-max-sum-increasing-subseq-list-last-element (- previous-max-sum-increasing-subseq-list-last-element-length 1))]\n            [previous-max-sum-increasing-subseq-list-last-element-last-element-sum (apply + previous-max-sum-increasing-subseq-list-last-element-last-element)])\n       (cond\n         [(> (list-ref a index) previous-max-sum-increasing-subseq-list-last-element-last-element-sum)\n          (let* ([new-max-sum (+ previous-max-sum-increasing-subseq-list-last-element-last-element-sum (list-ref a index))]\n                 [new-max-sum-increasing-subseq-list (append previous-max-sum-increasing-subseq-list (list (append previous-max-sum-increasing-subseq-list-last-element-last-element (list (list-ref a index)))))]",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (if (= index n)\n        sum\n        (if (<= (vector-ref a index) (vector-ref a k))\n            (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index)))\n            (max_sum_increasing_subseq_helper a n (+ index 1) k sum))))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k max)\n    (cond ((= index n) max)\n          ((< index k) (max_sum_increasing_subseq_helper a n (+ index 1) k (if (> (vector-ref a index) (vector-ref a k)) (+ max (vector-ref a index)) max)))\n          (else (max_sum_increasing_subseq_helper a n (+ index 1) k (if (> (vector-ref a index) (vector-ref a k)) (+ max (vector-ref a index)) max)))))\n  (max_sum_increasing_subseq_helper a n 0 k 0))\n",
    "  (cond\n    [(= index 0)\n     (if (= k 0)\n         (list (list (list (list a 0))) 0)\n         (list (list (list (list))) 0))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a (- n 1) (- index 1) k)])\n       (let ([prev-max-sum (car prev-max-sum-inc-subseq)]\n             [prev-max-sum-inc-subseq-list (cadr prev-max-sum-inc-subseq)])\n         (let ([prev-max-sum-inc-subseq-list-length (length prev-max-sum-inc-subseq-list)])\n           (let ([prev-max-sum-inc-subseq-list-last-element (list-ref prev-max-sum-inc-subseq-list (- prev-max-sum-inc-subseq-list-length 1))])\n             (let ([prev-max-sum-inc-subseq-list-last-element-length (length prev-max-sum-inc-subseq-list-last-element)])\n               (let ([prev-max-sum-inc-subseq-list-last-element-last-element (list-ref prev-max-sum-inc-subseq-list-last-element (- prev-max-sum-inc-subseq-list-last-element-length 1))])\n                 (let ([prev-max-sum-inc-subseq-list-last-element-last-element-length (length prev-max-sum-inc-subseq-list-last-element-last-element)])\n                   (let ([prev-max-sum-inc-subseq-list-last-element-last-element-last-element (list-ref prev-max-sum-inc-subseq-list-last-element-last-element (- prev-max-sum-inc-subseq-list-last-element-last-element-length 1))])\n                     (let ([prev-max-sum-inc-subseq-list-last-element-last-element-last-element-length (length prev-max-sum-inc-",
    "  (if (= index 0)\n      (if (= k 0)\n          (list (list (list (list a 0) 0)) 0)\n          (list (list (list (list a 0) 0)) (list-ref a 0)))\n    (let ((prev (max_sum_increasing_subseq a (- n 1) (- index 1) k)))\n      (if (= k 0)\n          (list (list (list (list a 0) 0)) 0)\n          (let ((prev-sum (cdr prev))\n                (prev-subseq (car prev)))\n            (if (< (list-ref a index) (list-ref a k))\n                (let ((new-sum (+ (list-ref a index) prev-sum))\n                      (new-subseq (append (list (list-ref a index)) (list-ref (car prev-subseq) 0))))\n                  (list (list new-subseq new-sum) new-sum))\n                (list (list (list-ref prev-subseq 0) prev-sum) prev-sum)))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(< index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0)\n     (if (= k 0)\n         (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (if (= index n)\n      0\n      (let ([max (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (+ (vector-ref a index) max)\n            max))))\n",
    "  (cond\n    [(= index 0) (if (&lt; index k) (list (list (list (list-ref a index)) (list-ref a index)) 0) (list (list (list (list-ref a index))) (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index))) (list-ref a index))]\n    [(&lt; index k) (let ([prev (max_sum_increasing_subseq a n (- index 1) k)])\n                    (if (&lt; (list-ref a index) (list-ref (list-ref (list-ref prev 0) 0) 0))\n                        (list (list (list (list-ref a index))) (list-ref a index))\n                        (let ([prev-sum (list-ref (list-ref prev 0) 1)])\n                          (list (list (list-ref a index) (list-ref (list-ref prev 0) 0)) (+ (list-ref a index) prev-sum))\n                          )\n                        )\n                    )\n            ]\n    [(&gt; index k) (let ([prev (max_sum_increasing_subseq a n (- index 1) k)])\n                    (if (&lt; (list-ref a index) (list-ref (list-ref (list-ref prev 0) 0) 0))\n                        (list (list (list (list-ref a index))) (list-ref a index))\n                        (let ([prev-sum (list-ref (list-ref prev 0) 1)])\n                          (list (list (list-ref a index) (list-ref (list-ref prev 0) 0)) (+ (list-ref a index) prev-sum))\n                          )\n                        )\n                    )\n            ]\n    )\n  )\n",
    "  (define (max_sum_increasing_subseq_helper a n index k max-sum)\n    (cond ((= index n) max-sum)\n          ((> k index)\n           (max (max_sum_increasing_subseq_helper a n (+ index 1) k max-sum)\n                (max_sum_increasing_subseq_helper a n (+ index 1) k (+ max-sum (vector-ref a index)))))\n          (else (max_sum_increasing_subseq_helper a n (+ index 1) k max-sum))))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0)))) (list (list))) ]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)])\n       (if (= k index)\n           (append prev-max-sum-inc-subseq (list (list (list (vector-ref a index)))))\n           (append prev-max-sum-inc-subseq (list (list)))))\n     ]))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k max_sum)\n    (cond\n      [(= index n) max_sum]\n      [(> k index)\n       (if (> (vector-ref a index) (vector-ref a k))\n           (max_sum_increasing_subseq_helper a n (+ index 1) k (+ max_sum (vector-ref a index)))\n           (max_sum_increasing_subseq_helper a n (+ index 1) k max_sum))]\n      [else (max_sum_increasing_subseq_helper a n (+ index 1) k max_sum)]))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (cond\n    [(= index k) (list (list (list (list-ref a k)) (list-ref a k)) (list (list (list-ref a k)) (list-ref a k)))]\n    [(= index 0) (list (list (list (list-ref a 0)) (list-ref a 0)) (list (list (list-ref a 0)) (list-ref a 0)))]\n    [else\n     (let* ([previous-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [previous-max-sum-inc-subseq-including-k (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n            [previous-max-sum-inc-subseq-including-k-max-sum (cadr previous-max-sum-inc-subseq-including-k)]\n            [previous-max-sum-inc-subseq-including-k-max-sum-subseq (car previous-max-sum-inc-subseq-including-k)]\n            [previous-max-sum-inc-subseq-max-sum (cadr previous-max-sum-inc-subseq)]\n            [previous-max-sum-inc-subseq-max-sum-subseq (car previous-max-sum-inc-subseq)]\n            [current-element (list-ref a index)])\n       (cond\n         [(> previous-max-sum-inc-subseq-including-k-max-sum (+ previous-max-sum-inc-subseq-max-sum current-element))\n          (list (append previous-max-sum-inc-subseq-including-k-max-sum-subseq (list current-element)) (+ previous-max-sum-inc-subseq-max-sum current-element))]\n         [else\n          (list previous-max-sum-inc-subseq-max-sum-subseq previous-max-sum-inc-subseq-max-sum)]))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= k index)\n                  0\n                  (max_sum_increasing_subseq a n index (+ k 1)))))))\n",
    "  (if (= index (- n 1))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let* ((prev-max-sum (max_sum_increasing_subseq a n (- index 1) k))\n             (prev-max-sum-list (car prev-max-sum))\n             (prev-max-sum-value (cadr prev-max-sum))\n             (prev-max-sum-list-len (length prev-max-sum-list))\n             (prev-max-sum-list-last-element (list-ref prev-max-sum-list (- prev-max-sum-list-len 1)))\n             (prev-max-sum-list-last-element-len (length prev-max-sum-list-last-element))\n             (prev-max-sum-list-last-element-last-element (list-ref prev-max-sum-list-last-element (- prev-max-sum-list-last-element-len 1)))\n             (prev-max-sum-list-last-element-last-element-value (car prev-max-sum-list-last-element-last-element))\n             (prev-max-sum-list-last-element-last-element-index (cadr prev-max-sum-list-last-element-last-element))\n             (prev-max-sum-list-last-element-last-element-value-plus-current-value (+ prev-max-sum-list-last-element-last-element-value (list-ref a index)))\n             (prev-max-sum-list-last-element-last-element-value-plus-current-value-with-index (list prev-max-sum-list-last-element-last-element-value-plus-current-value index))\n             (prev-max-sum-list-last-element-last-element-value-plus-current-value-with-index-list (list prev-max-sum-list-last-element-last-element-value-plus-current-value-with-index))\n             (prev-max-sum-list-last-element-last-element-value-plus-current-value-with",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [(> index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [else (max_sum_increasing_subseq a n (+ index 1) k)]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (>= k index) (< a (list-ref a index)))\n            (max max-sum (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (cond\n    [(= index 0)\n     (if (&lt; k index)\n         0\n         (list-ref a index))]\n    [(= k index)\n     (list-ref a index)]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n       (for/fold ([max-sum max-sum])\n                 ([i (in-range index)])\n         (let ([sum (+ (list-ref a i) (max_sum_increasing_subseq a n i k))])\n           (if (&gt; sum max-sum)\n               sum\n               max-sum))))]))\n</code>\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n    [else\n     (let* ([prev-max-sum-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum (cadr prev-max-sum-subseq)]\n            [prev-max-sum-subseq (car prev-max-sum-subseq)]\n            [prev-max-sum-subseq-with-k (max_sum_increasing_subseq a n (- k 1) k)]\n            [prev-max-sum-with-k (cadr prev-max-sum-subseq-with-k)]\n            [prev-max-sum-subseq-with-k (car prev-max-sum-subseq-with-k)])\n       (cond\n         [(< (list-ref a index) (list-ref a k))\n          (list prev-max-sum-subseq prev-max-sum)]\n         [(= (list-ref a index) (list-ref a k))\n          (list (append prev-max-sum-subseq (list (list (list-ref a index)))) (+ prev-max-sum (list-ref a index)))]\n         [else\n          (list (append prev-max-sum-subseq-with-k (list (list (list-ref a index)))) (+ prev-max-sum-with-k (list-ref a index)))]))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n index (+ k 1))))\n            max-sum))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n           (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n           max-sum))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< k n)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max (max_sum_increasing_subseq a n (+ index 1) index)\n             max-sum-including-k))))\n",
    "  (if (= index n)\n      0\n      (let ([x (vector-ref a index)])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             (+ x (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [else\n     (let* ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-list (car prev-max-sum)]\n            [prev-max-sum-val (cadr prev-max-sum)]\n            [prev-max-sum-list-len (length prev-max-sum-list)]\n            [prev-max-sum-list-last-index (- prev-max-sum-list-len 1)]\n            [prev-max-sum-list-last-val (list-ref (list-ref prev-max-sum-list prev-max-sum-list-last-index) 0)])\n       (cond\n         [(= prev-max-sum-list-len 0) (list (list (list (list-ref a index))) (list (list-ref a index)))]\n         [(< (list-ref a index) prev-max-sum-list-last-val) (list prev-max-sum-list prev-max-sum-val)]\n         [(> (list-ref a index) prev-max-sum-list-last-val)\n          (let* ([prev-max-sum-list-last-val-index (list-ref (list-ref prev-max-sum-list prev-max-sum-list-last-index) 1)])\n            (cond\n              [(> index prev-max-sum-list-last-val-index)\n               (let* ([new-max-sum-list (append prev-max-sum-list (list (list (list-ref a index) index)))]\n                      [new-max-sum-val (+ prev-max-sum-val (list-ref a index))])\n                 (list new-max-sum-list new-max-sum-val))]\n              [else (list prev-max-sum-list prev-max-sum-val)]))]\n         [else (list prev-max-sum-list prev-max-sum-val)]))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (> index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max\n      (max_sum_increasing_subseq a n (+ index 1) k)\n      (+ (vector-ref a index)\n         (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index 0) (list (list (list (vector-ref a index))) (vector-ref a index))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev_sum (cadr prev)]\n            [prev_subseqs (car prev)]\n            [prev_subseqs_len (length prev_subseqs)]\n            [prev_subseqs_last (list-ref prev_subseqs (- prev_subseqs_len 1))]\n            [prev_subseqs_last_len (length prev_subseqs_last)]\n            [prev_subseqs_last_last (list-ref prev_subseqs_last (- prev_subseqs_last_len 1))]\n            [prev_subseqs_last_last_len (vector-length prev_subseqs_last_last)])\n       (cond\n         [(and (< index k)\n               (< (vector-ref a index) (vector-ref a k)))\n          (list (append prev_subseqs (list (append prev_subseqs_last (list (vector-ref a index)))))\n                (+ prev_sum (vector-ref a index)))]\n         [(and (< index k)\n               (>= (vector-ref a index) (vector-ref a k)))\n          (list (append prev_subseqs (list (list (vector-ref a index))))\n                (+ prev_sum (vector-ref a index)))]\n         [(and (>= index k)\n               (< (vector-ref a index) (vector-ref a k))\n               (< (vector-ref a index) (vector-ref prev_subseqs_last_last_len 0)))\n          (list (append prev_subseqs (list (append prev_subseqs_last (list (vector-ref a index)))))\n                (+ prev_sum (vector-ref a index)))]\n         [(and (>= index k)\n               (< (vector-ref a index) (vector-ref a k))\n               (>= (vector-ref a index) (vector-ref prev_subseqs_last_last_len 0)))\n          (list",
    "  (if (= index n)\n      0\n      (let ((a-index (vector-ref a index))\n            (a-k (vector-ref a k)))\n        (if (< a-index a-k)\n            (max (max_sum_increasing_subseq a n (+ index 1) k)\n                 (+ (max_sum_increasing_subseq a n (+ index 1) (+ index 1)) a-index))\n            (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (let ([a-i (vector-ref a index)])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             (if (< index k)\n                 0\n                 (+ (max_sum_increasing_subseq a n (+ index 1) k) a-i))))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (max sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n           sum))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-excluding-ith-element (max_sum_increasing_subseq a n (+ index 1) k))\n            (max-sum-including-ith-element 0))\n        (if (< index k)\n            (set! max-sum-including-ith-element (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))\n            (set! max-sum-including-ith-element (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))\n        (max max-sum-excluding-ith-element max-sum-including-ith-element))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (and (< index k) (< k n))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< k n)\n                                     (+ (list-ref a index)\n                                        (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max max-sum-including-k\n             (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [else\n     (let* ([prev-max-sum-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-subseq-including-k (max_sum_increasing_subseq a n (- k 1) k)]\n            [prev-max-sum (apply + (car (car prev-max-sum-subseq)))])\n       (if (< (list-ref a index) (list-ref a k))\n           (list (car prev-max-sum-subseq-including-k) (cdr prev-max-sum-subseq-including-k))\n           (if (< (+ prev-max-sum (list-ref a index)) (cdr (car prev-max-sum-subseq-including-k)))\n               (list (car prev-max-sum-subseq-including-k) (cdr prev-max-sum-subseq-including-k))\n               (list (append (car (car prev-max-sum-subseq)) (list (list-ref a index))) (+ prev-max-sum (list-ref a index))))))]))\n",
    "  (if (= index 0)\n      (if (= k 0)\n          (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (> k index)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k max_sum)\n    (cond\n      [(= index n) max_sum]\n      [(> k index) (max_sum_increasing_subseq_helper a n (+ index 1) k (if (> (vector-ref a index) (vector-ref a k)) (+ max_sum (vector-ref a index)) max_sum))]\n      [else (max_sum_increasing_subseq_helper a n (+ index 1) k max_sum)]))\n  (max_sum_increasing_subseq_helper a n 0 k 0))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (cond\n    [(= index n) 0]\n    [(< index k) (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-excluding-ith-element (max_sum_increasing_subseq a n (+ index 1) k))\n            (max-sum-including-ith-element (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                                               (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index))\n                                               0)))\n        (max max-sum-excluding-ith-element max-sum-including-ith-element))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (> index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-sum (cadr prev)]\n            [prev-subseq (car prev)]\n            [ith-element (list-ref a index)]\n            [ith-element-sum (list-ref prev-sum index)]\n            [ith-element-subseq (list-ref prev-subseq index)])\n       (cond\n         [(> k index)\n          (let* ([kth-element (list-ref a k)]\n                 [kth-element-sum (list-ref prev-sum k)]\n                 [kth-element-subseq (list-ref prev-subseq k)])\n            (cond\n              [(>= ith-element kth-element)\n               (list (append prev-subseq (list ith-element-subseq))\n                     (append prev-sum (list ith-element-sum)))]\n              [else\n               (list (append prev-subseq (list (append kth-element-subseq (list ith-element))))\n                     (append prev-sum (list (+ kth-element-sum ith-element))))]))]\n         [else\n          (list (append prev-subseq (list ith-element-subseq))\n                (append prev-sum (list ith-element-sum)))]))]))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                        (+ (vector-ref a index)\n                           (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))])\n       (if (= k index)\n           max-sum\n           (max max-sum\n                (+ (vector-ref a index)\n                   (max_sum_increasing_subseq a n (+ index 1) k)))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([max (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (+ max (vector-ref a index))\n           max))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (let loop ([i index] [sum 0])\n    (if (= i k)\n        (max sum (apply + (sublist a i (+ i 1))))\n        (loop (+ i 1) (max sum (apply + (sublist a i (+ i 1))))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index -1)\n      0\n      (let ([max-sum-without-ith-element (max_sum_increasing_subseq a n (- index 1) k)])\n        (if (and (>= k index) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum-without-ith-element\n                 (+ (vector-ref a index)\n                    (max_sum_increasing_subseq a n (- index 1) index)))\n            max-sum-without-ith-element))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (and (> k index) (< (vector-ref a index) (vector-ref a k)))\n           (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n           max-sum))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (let ([max (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max (vector-ref a index) (+ (vector-ref a index) max))\n            max))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([sum (if (< (vector-ref a index) (vector-ref a k))\n                    (+ (vector-ref a k) (max_sum_increasing_subseq a n index (+ k 1)))\n                    0)])\n        (max sum (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))))\n",
    "  (if (= index n)\n      0\n      (let ((max_sum_without_k (max_sum_increasing_subseq a n (+ index 1) k))\n            (max_sum_with_k (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                                (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index))\n                                0)))\n        (max max_sum_without_k max_sum_with_k))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n index (+ k 1))\n                         (+ (list-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))])\n        max-sum)))\n",
    "  (cond\n    [(= index 0)\n     (if (&lt; index k)\n         (list (list (list (list (list a) 0) 0) 0) 0)\n         (list (list (list (list (list a) 0) 0) 0) (list-ref a 0)))]\n    [(= index k)\n     (let ([max-sum-subseq (max_sum_increasing_subseq a (- n 1) (- index 1) k)])\n       (let ([max-sum (list-ref max-sum-subseq 1)])\n         (let ([max-sum-subseq-list (list-ref max-sum-subseq 0)])\n           (let ([max-sum-subseq-list-list (list-ref max-sum-subseq-list 0)])\n             (let ([max-sum-subseq-list-list-list (list-ref max-sum-subseq-list-list 0)])\n               (let ([max-sum-subseq-list-list-list-list (list-ref max-sum-subseq-list-list-list 0)])\n                 (let ([max-sum-subseq-list-list-list-list-list (list-ref max-sum-subseq-list-list-list-list 0)])\n                   (let ([max-sum-subseq-list-list-list-list-list-list (list-ref max-sum-subseq-list-list-list-list-list 0)])\n                     (let ([max-sum-subseq-list-list-list-list-list-list-list (list-ref max-sum-subseq-list-list-list-list-list-list 0)])\n                       (let ([max-sum-subseq-list-list-list-list-list-list-list-list (list-ref max-sum-subseq-list-list-list-list-list-list-list 0)])\n                         (let ([max-sum-subseq-list-list-list-list-list-list-list-list-list (list-ref max-sum-subseq-list-list-list-list-list-list-list-list 0)])\n                          ",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([max-sum-without-k (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (let ([max-sum-with-k (max_sum_increasing_subseq a n (+ index 1) (+ k 1))])\n              (+ (vector-ref a index) (max max-sum-without-k max-sum-with-k)))\n            max-sum-without-k))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (list-ref a index) (max_sum_increasing_subseq a n (- index 1) k))]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< a (vector-ref a index))\n            (if (< index k)\n                (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))\n                (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(< index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [(= index k) (list (list (list (list-ref a k))) (list (list-ref a k)))]\n    [else\n     (let*\n         ([prev_max_sum_inc_subseq (max_sum_increasing_subseq a n (- index 1) k)]\n          [prev_max_sum (car prev_max_sum_inc_subseq)]\n          [prev_max_sum_last_element (cadr prev_max_sum_inc_subseq)]\n          [prev_max_sum_inc_subseq_k (max_sum_increasing_subseq a n (- k 1) k)]\n          [prev_max_sum_k (car prev_max_sum_inc_subseq_k)]\n          [prev_max_sum_last_element_k (cadr prev_max_sum_inc_subseq_k)])\n       (cond\n         [(> (list-ref a index) prev_max_sum_last_element)\n          (list\n           (append prev_max_sum (list (list (list-ref a index))))\n           (list-ref a index))]\n         [(> (list-ref a index) prev_max_sum_last_element_k)\n          (list\n           (append prev_max_sum_k (list (list (list-ref a index))))\n           (list-ref a index))]\n         [else\n          (list prev_max_sum prev_max_sum_last_element)]))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) (+ k 1))\n                         (max_sum_increasing_subseq a n (+ index 1) k))])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (+ max-sum (vector-ref a k))\n            max-sum))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a 0))) (list (list-ref a 0)))]\n    [(= index k) (list (list (list (list-ref a k))) (list (list-ref a k)))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([prev-max-sum (car prev-max-sum-inc-subseq)]\n             [prev-max-sum-inc-subseq-last-element (cadr prev-max-sum-inc-subseq)])\n         (let ([ith-element (list-ref a index)])\n           (let ([max-sum-inc-subseq-including-ith-element\n                  (append prev-max-sum-inc-subseq-last-element (list ith-element))])\n             (let ([max-sum-inc-subseq-including-ith-element-sum (apply + max-sum-inc-subseq-including-ith-element)])\n               (let ([max-sum-inc-subseq-including-ith-element-sum-list (list max-sum-inc-subseq-including-ith-element-sum)])\n                 (let ([max-sum-inc-subseq-including-ith-element-sum-list-with-max-sum-inc-subseq-including-ith-element\n                        (append max-sum-inc-subseq-including-ith-element-sum-list (list max-sum-inc-subseq-including-ith-element))])\n                   (let ([max-sum-inc-subseq-including-ith-element-sum-list-with-max-sum-inc-subseq-including-ith-element-with-prev-max-sum\n                          (append max-sum-inc-subseq-including-ith-element-sum-list-with-max-sum-inc-subseq-including-ith-element prev-max-sum)])\n                     (let ([max-sum-inc-subseq-including-ith-element-sum-list-with-max-sum-inc-subseq-including-",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k max_sum)\n    (cond\n      [(= index n) max_sum]\n      [(> k index) (max_sum_increasing_subseq_helper a n (+ index 1) k (max max_sum (+ max_sum (vector-ref a index))))]\n      [else (max_sum_increasing_subseq_helper a n (+ index 1) k max_sum)]))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (if (= index n)\n      0\n      (let ((sum1 (max_sum_increasing_subseq a n (+ index 1) k))\n            (sum2 (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                      (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) index))\n                      0)))\n        (max sum1 sum2))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (list (",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (if (= index n)\n        sum\n        (let ((sum1 (max_sum_increasing_subseq_helper a n (+ index 1) k sum))\n              (sum2 (if (< (vector-ref a index) (vector-ref a k))\n                        (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index)))\n                        0)))\n          (max sum1 sum2))))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (cond\n    [(= index 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-sum (cadr prev)]\n            [prev-seqs (car prev)]\n            [prev-seqs-max-sum (apply max (map cadr prev-seqs))]\n            [new-seqs (if (< (vector-ref a index) (vector-ref a k))\n                          (append (map (lambda (seq) (cons (vector-ref a index) seq)) prev-seqs)\n                                  (list (list (vector-ref a index))))\n                          (list (list (vector-ref a index))))]\n            [new-sum (apply max (map cadr new-seqs))])\n       (list new-seqs new-sum))]))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum-including-k (max (max_sum_increasing_subseq a n (+ index 1) k)\n                                      (+ (vector-ref a index)\n                                         (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n        (max max-sum-including-k\n             (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ((max-sum-including-k (max (max_sum_increasing_subseq a n index (+ k 1))\n                                      (+ (list-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n        (max max-sum-including-k (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (vector-ref a index))) (vector-ref a index))]\n    [(= index k) (list (list (list (vector-ref a index))) (vector-ref a index))]\n    [else\n     (let ([max-sum-subseq-without-k (max_sum_increasing_subseq a n (- index 1) k)]\n           [max-sum-subseq-with-k (max_sum_increasing_subseq a n (- k 1) k)])\n       (cond\n         [(> (vector-ref a index) (vector-ref a k))\n          (list (list (list (vector-ref a index))) (vector-ref a index))]\n         [(> (vector-ref a index) (car max-sum-subseq-without-k))\n          (list (list (list (vector-ref a index)) (car max-sum-subseq-without-k)) (+ (vector-ref a index) (cadr max-sum-subseq-without-k)))]\n         [else\n          (list (list (car max-sum-subseq-without-k)) (cadr max-sum-subseq-without-k))]))]))\n",
    "  (if (= index (- n 1))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let* ([max_sum_without_k (max_sum_increasing_subseq a n index (+ k 1))]\n             [max_sum_with_k (max_sum_increasing_subseq a n (+ index 1) (+ k 1))]\n             [max_sum_without_k_val (car max_sum_without_k)]\n             [max_sum_with_k_val (car max_sum_with_k)]\n             [max_sum_without_k_subseq (cadr max_sum_without_k)]\n             [max_sum_with_k_subseq (cadr max_sum_with_k)])\n        (if (and (< (list-ref a index) (list-ref a k))\n                 (< max_sum_without_k_val (+ max_sum_with_k_val (list-ref a index))))\n            (list (+ max_sum_with_k_val (list-ref a index))\n                  (append (list (list-ref a index)) max_sum_with_k_subseq))\n            (list max_sum_without_k_val max_sum_without_k_subseq)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0) (vector-ref a k)]\n    [else\n     (let ([max-sum (vector-ref a k)])\n       (for ([i (in-range index)])\n         (let ([sum (+ (vector-ref a k) (vector-ref a i))])\n           (when (> sum max-sum)\n             (set! max-sum sum))))\n       max-sum)]))\n",
    "  (cond [(= index n) 0]\n        [(= k n) 0]\n        [else\n         (max (max_sum_increasing_subseq a n (+ index 1) k)\n              (+ (list-ref a index)\n                 (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))]))\n",
    "  (if (= index 0)\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max-sum-list (car prev-max-sum)]\n            [prev-max-sum-value (cadr prev-max-sum)])\n        (if (= k index)\n            (let ([max-sum-value (apply max (map (lambda (l) (+ (car l) (list-ref a index))) prev-max-sum-list))])\n              (if (= max-sum-value prev-max-sum-value)\n                  (list prev-max-sum-list prev-max-sum-value)\n                  (list (filter (lambda (l) (= (+ (car l) (list-ref a index)) max-sum-value)) prev-max-sum-list) max-sum-value)))\n            (list prev-max-sum-list prev-max-sum-value)))))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [(> index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (+ (max_sum_increasing_subseq a n (- index 1) (- k 1))\n                  (vector-ref a index)))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n           (max_sum_increasing_subseq a n (+ index 1) k))))\n",
    "  (cond\n    [(= index 0) (if (&lt; index k) (list (list (list (vector-ref a index))) (vector-ref a index)) (list (list) 0))]\n    [(= index k) (if (&lt; index k) (list (list (list (vector-ref a index))) (vector-ref a index)) (list (list) 0))]\n    [else (let ([prev (max_sum_increasing_subseq a n (- index 1) k)])\n            (let ([prev-sum (cadr prev)]\n                  [prev-seqs (car prev)])\n              (let ([new-seqs (map (lambda (seq) (cons (vector-ref a index) seq)) prev-seqs)]\n                    [new-sum (apply + (map (lambda (seq) (apply + seq)) new-seqs))])\n                (if (&gt; new-sum prev-sum)\n                    (list new-seqs new-sum)\n                    (list prev-seqs prev-sum))))))]))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k) (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [(> index k) (max (max_sum_increasing_subseq a n (- index 1) k) (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [(< index k) (max (max_sum_increasing_subseq a n (- index 1) k) (max_sum_increasing_subseq a n (- index 1) (- k 1)) (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index -1)\n      0\n      (let ([sum (max_sum_increasing_subseq a n (- index 1) k)])\n        (if (= index k)\n            sum\n            (if (< (vector-ref a index) (vector-ref a k))\n                (max sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (- index 1) index)))\n                sum)))))\n",
    "  (cond\n    [(= index 0)\n     (if (= k 1)\n         (list (list (list (list (vector-ref a 0)))) (vector-ref a 0))\n         (list (list (list (list))) 0))]\n    [else\n     (let ([max-sum-so-far (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([max-sum-including-ith-element (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n         (let ([ith-element (vector-ref a index)])\n           (let ([max-sum-so-far-value (cadr max-sum-so-far)])\n             (let ([max-sum-including-ith-element-value (cadr max-sum-including-ith-element)])\n               (let ([max-sum-including-ith-element-subseqs (car max-sum-including-ith-element)])\n                 (let ([max-sum-so-far-subseqs (car max-sum-so-far)])\n                   (let ([max-sum-so-far-subseqs-length (length max-sum-so-far-subseqs)])\n                     (let ([max-sum-including-ith-element-subseqs-length (length max-sum-including-ith-element-subseqs)])\n                       (let ([max-sum-so-far-subseqs-last-element (vector-ref (car (car max-sum-so-far-subseqs)) (- max-sum-so-far-subseqs-length 1))])\n                         (let ([max-sum-including-ith-element-subseqs-last-element (vector-ref (car (car max-sum-including-ith-element-subseqs)) (- max-sum-including-ith-element-subseqs-length 1))])\n                           (let ([max-sum-so-far-subseqs-last-element-value (vector-ref max-sum-so-far-subseqs-last-element 0)])\n                             (let ([max-sum-including-ith-element-subseqs-last-",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n index (+ k 1))\n                         (+ (vector-ref a k)\n                            (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))])\n        max-sum)))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (&lt; index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (vector-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (let loop ([i index]\n             [max-sum 0])\n    (if (= i n)\n        max-sum\n        (let ([sum (+ (vector-ref a i) (vector-ref a k))])\n          (if (> sum max-sum)\n              (loop (+ i 1) sum)\n              (loop (+ i 1) max-sum))))))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(> k index)\n       (max\n        (max_sum_increasing_subseq_helper a n (+ index 1) k sum)\n        (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index))))]\n      [else\n       (max_sum_increasing_subseq_helper a n (+ index 1) k sum)]))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [else\n     (let ([(prev-subseqs prev-sum) (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([(curr-subseqs curr-sum) (max_sum_increasing_subseq a n (- k 1) (- k 1))])\n         (let ([(new-subseqs new-sum) (append (map (lambda (subseq) (append subseq (list (vector-ref a index)))) curr-subseqs) (list (list (vector-ref a index))))])\n           (if (> new-sum prev-sum)\n               (list new-subseqs new-sum)\n               (list prev-subseqs prev-sum)))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index -1)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (- index 1) index)))\n            max-sum))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) 0)]\n    [(= index k) (list (list (list (list-ref a index)) (list-ref a index)) 0)]\n    [else\n     (let ([prev-max-sum (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([prev-max-sum-list (car prev-max-sum)])\n         (let ([prev-max-sum-value (cadr prev-max-sum)])\n           (let ([prev-max-sum-list-last-element (car (car (car prev-max-sum-list)))])\n             (let ([prev-max-sum-list-last-element-value (cadr (car (car prev-max-sum-list)))))\n               (let ([current-element-value (list-ref a index)])\n                 (cond\n                   [(> current-element-value prev-max-sum-list-last-element-value)\n                    (let ([new-max-sum-value (+ current-element-value prev-max-sum-value)])\n                      (let ([new-max-sum-list (list (list (list-ref a index)) new-max-sum-value)])\n                        (list new-max-sum-list new-max-sum-value)))]\n                   [else\n                    (let ([new-max-sum-value (+ current-element-value prev-max-sum-list-last-element-value)])\n                      (let ([new-max-sum-list (list (append (car (car prev-max-sum-list)) (list (list-ref a index))) new-max-sum-value)])\n                        (list new-max-sum-list new-max-sum-value)))]))))))))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= index k) (list (list (list (vector-ref a k))) (vector-ref a k))]\n    [else\n     (let* ([res1 (max_sum_increasing_subseq a n (- index 1) k)]\n            [res2 (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (let* ([res2-max (apply max (map (lambda (x) (+ (vector-ref a index) (car x))) (car res2)))])\n             (if (= res2-max (car res1))\n                 (list (append (car res1) (car res2)) res2-max)\n                 (list (car res1) (car res1))))\n           (list (car res2) (car res2)))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (= index n)\n      0\n      (let ((k-index (if (< index k)\n                        k\n                        index)))\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             (+ (vector-ref a index)\n                (max_sum_increasing_subseq a n (+ index 1) k-index))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (cond [(= index 0) (list (list (list (vector-ref a index))) 0)]\n        [else (let ([max-sum-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n                     [max-sum (second max-sum-subseq)]\n                     [max-sum-subseqs (first max-sum-subseq)])\n                (cond [(and (< k index) (< (vector-ref a index) (vector-ref a k)))\n                       (list max-sum-subseqs max-sum)]\n                      [(and (< k index) (> (vector-ref a index) (vector-ref a k)))\n                       (list (cons (list (vector-ref a index)) max-sum-subseqs) (+ max-sum (vector-ref a index)))]\n                      [else (list (cons (list (vector-ref a index)) max-sum-subseqs) (+ max-sum (vector-ref a index)))]))]))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond ((= index n) sum)\n          ((and (< index k) (< k n)) (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a index))))\n          ((and (<= index k) (< k n)) (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum (vector-ref a k))))\n          (else (max_sum_increasing_subseq_helper a n (+ index 1) k sum))))\n  (max_sum_increasing_subseq_helper a n index k 0))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)])\n       (let ([prev-max-sum (second prev-max-sum-inc-subseq)])\n         (let ([prev-max-sum-inc-subseq-list (first prev-max-sum-inc-subseq)])\n           (let ([ith-element (vector-ref a index)])\n             (let ([ith-element-k-index (- k index)])\n               (let ([ith-element-k (vector-ref a ith-element-k-index)])\n                 (let ([ith-element-k-prev-max-sum (max_sum_increasing_subseq a n (- ith-element-k-index 1) k)])\n                   (let ([ith-element-k-prev-max-sum-list (first ith-element-k-prev-max-sum)])\n                     (let ([ith-element-k-prev-max-sum (second ith-element-k-prev-max-sum)])\n                       (let ([ith-element-k-prev-max-sum-ith-element-k-list (map (lambda (subseq) (cons ith-element-k subseq)) ith-element-k-prev-max-sum-list)])\n                         (let ([ith-element-k-prev-max-sum-ith-element-k (+ ith-element-k-prev-max-sum ith-element)])\n                           (let ([ith-element-k-prev-max-sum-ith-element-k-list (cons (list ith-element-k-prev-max-sum-ith-element-k) ith-element-k-prev-max-sum-ith-element-k-list)])\n                             (let ([ith-element-k-",
    "  (cond ((= index -1) 0)\n        ((< index k) (+ (list-ref a index)\n                        (max_sum_increasing_subseq a n (- index 1) k)))\n        ((> index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                          (max_sum_increasing_subseq a n (- index 1) (- k 1))))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (let ([prev (max_sum_increasing_subseq a n (- index 1) 0)])\n               (if (> (vector-ref a index) (vector-ref a (- index 1)))\n                   (list (list (cons (vector-ref a index) (car prev))) (+ (vector-ref a index) (cadr prev)))\n                   (list (list (car prev)) (cadr prev))))]\n    [else (let ([prev (max_sum_increasing_subseq a n (- index 1) k)])\n            (if (> (vector-ref a index) (vector-ref a (- index 1)))\n                (let ([prev-k (max_sum_increasing_subseq a n (- index 1) (- k 1))])\n                  (if (> (+ (vector-ref a index) (cadr prev-k)) (cadr prev))\n                      (list (list (cons (vector-ref a index) (car prev-k))) (+ (vector-ref a index) (cadr prev-k)))\n                      prev))\n                prev))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< index k)\n                                     (max (max_sum_increasing_subseq a n (+ index 1) k)\n                                          (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))\n                                     0)))\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             max-sum-including-k))))\n",
    "  (if (= index (- n 1))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ((max_sum_without_k (max_sum_increasing_subseq a n index (+ index 1)))\n            (max_sum_with_k (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< (list-ref a index) (list-ref a k))\n                 (or (null? (car max_sum_without_k))\n                     (> (+ (list-ref a index) (car (car max_sum_without_k)))\n                        (car (car max_sum_with_k)))))\n            (list (cons (cons (list-ref a index) (car (car max_sum_without_k)))\n                        (car max_sum_without_k))\n                  (cons (list-ref a index) (car max_sum_without_k)))\n            (list (cons (car max_sum_with_k) (cdr max_sum_with_k))\n                  (car max_sum_with_k))))))\n",
    "  (cond\n    [(= index 0) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [(= index k) (list (list (list (list-ref a index)) (list-ref a index)) (list (list (list-ref a index)) (list-ref a index)))]\n    [else (let* ([prev-max-sum-inc-subseq (max_sum_increasing_subseq a n (- index 1) k)]\n                [prev-max-sum-inc-subseq-including-k (max_sum_increasing_subseq a n (- k 1) k)]\n                [prev-max-sum-inc-subseq-including-k-sum (cadr (car prev-max-sum-inc-subseq-including-k))]\n                [prev-max-sum-inc-subseq-including-k-subseq (car (car prev-max-sum-inc-subseq-including-k))]\n                [prev-max-sum-inc-subseq-sum (cadr (car prev-max-sum-inc-subseq))]\n                [prev-max-sum-inc-subseq-subseq (car (car prev-max-sum-inc-subseq))]\n                [prev-max-sum-inc-subseq-including-k-and-index-sum (+ prev-max-sum-inc-subseq-including-k-sum (list-ref a index))]\n                [prev-max-sum-inc-subseq-including-k-and-index-subseq (append prev-max-sum-inc-subseq-including-k-subseq (list (list-ref a index))))]\n               (cond\n                 [(> prev-max-sum-inc-subseq-including-k-and-index-sum prev-max-sum-inc-subseq-sum) (list (list prev-max-sum-inc-subseq-including-k-and-index-subseq prev-max-sum-inc-subseq-including-k-and-index-sum) (list prev-max-sum-inc-subseq-subseq",
    "  (cond\n    [(= index n) 0]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) k)\n               (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< (list-ref a index) (list-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) index)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (define (max_sum_increasing_subseq_helper a n index k sum)\n    (cond\n      [(= index n) sum]\n      [(and (< index k) (< a[index] a[k]))\n       (max_sum_increasing_subseq_helper a n (+ index 1) k (+ sum a[index]))]\n      [else\n       (max_sum_increasing_subseq_helper a n (+ index 1) k sum)]))\n  (max_sum_increasing_subseq_helper a n 0 k 0))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (let loop ([i index] [sum 0])\n    (if (= i k)\n        (if (&lt; sum (vector-ref a k))\n            (vector-ref a k)\n            sum)\n        (if (&lt; (vector-ref a i) (vector-ref a k))\n            (loop (+ i 1) (+ sum (vector-ref a i)))\n            sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-kth-element (if (< index k)\n                                               0\n                                               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))))\n        (max max-sum-including-kth-element (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (<= index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (or (= index n) (= k n))\n      0\n      (let ([a-k (vector-ref a k)])\n        (max (max_sum_increasing_subseq a n index (+ k 1))\n             (+ (max_sum_increasing_subseq a n (+ index 1) (+ index 1)) a-k)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let* ([prev-sum (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-max (second prev-sum)]\n            [prev-subseqs (first prev-sum)]\n            [prev-max-subseq (first (first prev-subseqs))]\n            [prev-max-subseq-sum (apply + prev-max-subseq)]\n            [prev-max-subseq-last (vector-ref prev-max-subseq (- (vector-length prev-max-subseq) 1))]\n            [curr-val (vector-ref a index)])\n       (cond\n         [(> curr-val prev-max-subseq-last)\n          (let* ([new-subseq (vector-append prev-max-subseq (vector curr-val))]\n                 [new-subseq-sum (apply + new-subseq)])\n            (if (> new-subseq-sum prev-max)\n                (list (list new-subseq) new-subseq-sum)\n                (list (cons new-subseq prev-subseqs) prev-max)))\n          ]\n         [else\n          (let* ([new-subseq (vector curr-val)]\n                 [new-subseq-sum (apply + new-subseq)])\n            (if (> new-subseq-sum prev-max)\n                (list (list new-subseq) new-subseq-sum)\n                (list (cons new-subseq prev-subseqs) prev-max)))\n          ]\n         )\n       )\n     ]\n    )\n  )\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (>= k index) (< a (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index -1)\n      0\n      (max (max_sum_increasing_subseq a n (- index 1) k)\n           (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (- index 1) k))\n               0))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-including-k (if (< index k)\n                                     (+ (list-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)))\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             (max-sum-including-k)))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (let ([prev (max_sum_increasing_subseq a n (- index 1) 0)])\n               (if (> (vector-ref a index) (vector-ref a (- index 1)))\n                   (list (append (car prev) (list (list (vector-ref a index)))) (+ (cadr prev) (vector-ref a index)))\n                   (list (car prev) (cadr prev))))]\n    [else (let ([prev (max_sum_increasing_subseq a n (- index 1) k)])\n            (if (> (vector-ref a index) (vector-ref a (- index 1)))\n                (list (append (car prev) (list (list (vector-ref a index)))) (+ (cadr prev) (vector-ref a index)))\n                (list (car prev) (cadr prev))))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max (vector-ref a index) (+ (vector-ref a index) max-sum))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum-excluding-ith (max_sum_increasing_subseq a n (+ index 1) k))\n            (max-sum-including-ith (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n                                      (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index))\n                                      0)))\n        (max max-sum-excluding-ith max-sum-including-ith))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< (vector-ref a index) (vector-ref a k))\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-without-ith-element (max_sum_increasing_subseq a n (+ index 1) k)])\n        (if (< (vector-ref a index) (vector-ref a k))\n            (let ([max-sum-with-ith-element (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index))])\n              (max max-sum-without-ith-element max-sum-with-ith-element))\n            max-sum-without-ith-element))))\n"
  ]
}