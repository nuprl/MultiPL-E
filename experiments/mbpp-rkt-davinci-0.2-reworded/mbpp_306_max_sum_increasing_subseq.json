{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n(define (max_sum_increasing_subseq a n index k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_sum_increasing_subseq))\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 4 6) 11)\n    (check-equal? (candidate (list 1 101 2 3 100 4 5) 7 2 5) 7)\n    (check-equal? (candidate (list 11 15 19 21 26 28 31) 7 2 4) 71)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0)) (list (list) 0))]\n    [(= k 0) (list (list (list (vector-ref a 0))) (vector-ref a 0))]\n    [else\n     (let* ([prev (max_sum_increasing_subseq a n (- index 1) k)]\n            [prev-sum (cadr prev)]\n            [prev-seq (car prev)]\n            [prev-last (car (car prev-seq))])\n       (if (and (< (vector-ref a index) (vector-ref a k))\n                (< (vector-ref a k) (vector-ref a (- index 1))))\n           (let* ([prev-sum-k (max_sum_increasing_subseq a n (- index 1) (- k 1))]\n                  [prev-sum-k-sum (cadr prev-sum-k)]\n                  [prev-sum-k-seq (car prev-sum-k)])\n             (if (> (+ prev-sum-k-sum (vector-ref a k)) prev-sum)\n                 (list (cons (cons (vector-ref a k) prev-last) prev-sum-k-seq)\n                       (+ prev-sum-k-sum (vector-ref a k)))\n                 (list prev-seq prev-sum)))\n           (list prev-seq prev-sum))))])\n",
    "  (cond\n    [(= index n) 0]\n    [(> index k) (max_sum_increasing_subseq a n (+ index 1) k)]\n    [(< index k) (max (max_sum_increasing_subseq a n (+ index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) 0]\n    [else\n     (let ([max-sum (max_sum_increasing_subseq a n (+ index 1) k)])\n       (if (< (vector-ref a index) (vector-ref a k))\n           (max max-sum (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) (+ k 1))))\n           max-sum))]))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-including-k (if (< index k)\n                                     (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                                     0)])\n        (max (max_sum_increasing_subseq a n (+ index 1) k)\n             max-sum-including-k))))\n",
    "  (cond ((= index n) 0)\n        ((= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))\n        ((&gt; (vector-ref a index) (vector-ref a k))\n         (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))\n        (else (max_sum_increasing_subseq a n (+ index 1) (+ index 1)))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum-including-k (if (< k n)\n                                     (+ (list-ref a k) (max_sum_increasing_subseq a n index (+ k 1)))\n                                     0)])\n        (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n             max-sum-including-k))))\n",
    "  (if (= index n)\n      0\n      (let ([include (if (>= k index)\n                        (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k))\n                        0)])\n        (max include (max_sum_increasing_subseq a n (+ index 1) k)))))\n",
    "  (if (= index n)\n      0\n      (let ((max (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (< (vector-ref a index) (vector-ref a k))\n            (max (vector-ref a index) (+ (vector-ref a index) max))\n            max))))\n",
    "  (if (= index n)\n      0\n      (let ([max-sum (max (max_sum_increasing_subseq a n (+ index 1) k)\n                         (if (< (vector-ref a index) (vector-ref a k))\n                             (+ (max_sum_increasing_subseq a n (+ index 1) index)\n                                (vector-ref a index))\n                             0))])\n        max-sum)))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  (max_sum_increasing_subseq a n (+ index 1) k)\n                  0)))))\n",
    "  (if (= index n)\n      0\n      (let ((max-sum (max_sum_increasing_subseq a n (+ index 1) k)))\n        (if (and (< index k) (< (vector-ref a index) (vector-ref a k)))\n            (max max-sum (+ (vector-ref a index) (max_sum_increasing_subseq a n (+ index 1) index)))\n            max-sum))))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (if (< (vector-ref a index) (vector-ref a k))\n               (+ (vector-ref a k) (max_sum_increasing_subseq a n (+ index 1) k))\n               0))))\n",
    "  (cond\n    [(= index n) 0]\n    [(= k n) (max_sum_increasing_subseq a n (+ index 1) (+ index 1))]\n    [else (max (max_sum_increasing_subseq a n (+ index 1) (+ index 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (+ index 1) k)))]))\n",
    "  (cond\n    [(= index 0) (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    [(= index k) (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    [(= index n) (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    [else (if (= k 0) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))) (list (list (list (list (list a 0)))) (list (list (list (list (list a 0)))))))]\n    )\n  )\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (vector-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (cond\n    [(= index n) 0]\n    [else\n     (max (max_sum_increasing_subseq a n (+ index 1) k)\n          (+ (list-ref a index)\n             (max_sum_increasing_subseq a n (+ index 1) (+ index 1))))]))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (max_sum_increasing_subseq a n (- index 1) (- k 1)))]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (max_sum_increasing_subseq a n (- index 1) (- k 1))\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (cond\n    [(= index -1) 0]\n    [(= index k) (max (max_sum_increasing_subseq a n (- index 1) k)\n                     (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]\n    [(> (list-ref a index) (list-ref a k)) (max_sum_increasing_subseq a n (- index 1) k)]\n    [else (max (max_sum_increasing_subseq a n (- index 1) k)\n               (+ (list-ref a index) (max_sum_increasing_subseq a n (- index 1) (- k 1))))]))\n",
    "  (if (= index n)\n      0\n      (max (max_sum_increasing_subseq a n (+ index 1) k)\n           (+ (list-ref a index)\n              (if (< index k)\n                  0\n                  (max_sum_increasing_subseq a n (+ index 1) k))))))\n",
    "  (if (= index (- n 1))\n      (list (list (list (list-ref a index))) (list (list-ref a index)))\n      (let ((max_sum_including_k (list-ref a k))\n            (max_sum_excluding_k (max_sum_increasing_subseq a n index (+ k 1))))\n        (if (> (list-ref max_sum_excluding_k 1) max_sum_including_k)\n            max_sum_excluding_k\n            (list (list (list (list-ref a index))) max_sum_including_k)))))\n"
  ]
}