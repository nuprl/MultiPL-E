{
  "name": "mbpp_226_odd_values_string",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to remove the characters which have odd index values of a given string.\n(define (odd_values_string str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_values_string))\n    (check-equal? (candidate \"abcdef\") \"ace\")\n    (check-equal? (candidate \"python\") \"pto\")\n    (check-equal? (candidate \"data\") \"dt\")\n    (check-equal? (candidate \"lambs\") \"lms\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (string-join\n   (filter (lambda (x) (even? (string-index x str)))\n           (string->list str))\n   \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (even? (string-index x str)))\n           (string->list str))\n   \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join\n   (for/list ([i (in-range (string-length str))])\n     (string-ref str i))\n   \"\"))\n",
    "  (string-join (filter even? (string-&gt;list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (define (odd_values_string_helper str index)\n    (if (= index (string-length str))\n        \"\"\n        (if (= (modulo index 2) 0)\n            (string-append (string (string-ref str index)) (odd_values_string_helper str (+ index 1)))\n            (odd_values_string_helper str (+ index 1)))))\n  (odd_values_string_helper str 0))\n",
    "  (string-join\n   (filter\n    (lambda (x) (even? (string-index x str)))\n    (string->list str))\n   \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join\n   (filter\n    (lambda (x) (even? (string-index x str)))\n    (string->list str))\n   \"\"))\n",
    "  (define (odd_values_string_helper str i)\n    (cond\n      [(= i (string-length str)) \"\"]\n      [(= (modulo i 2) 0) (string-append (substring str i (+ i 1)) (odd_values_string_helper str (+ i 1)))]\n      [else (odd_values_string_helper str (+ i 1))]))\n  (odd_values_string_helper str 0))\n",
    "  (define (odd_values_string_helper str i)\n    (if (= i (string-length str))\n        \"\"\n        (if (= (remainder i 2) 0)\n            (string-append (substring str i (+ i 1))\n                           (odd_values_string_helper str (+ i 1)))\n            (odd_values_string_helper str (+ i 1)))))\n  (odd_values_string_helper str 0))\n",
    "  (string-join (filter (lambda (x) (even? (string-index x str))) (string->list str)) \"\"))\n",
    "  (string-join (filter even? (string-&gt;list str)) \"\"))\n",
    "  (define (odd_values_string_helper str i)\n    (cond\n      ((= i (string-length str)) \"\")\n      ((= (remainder i 2) 0) (string-append (string (string-ref str i)) (odd_values_string_helper str (+ i 1))))\n      (else (odd_values_string_helper str (+ i 1)))))\n  (odd_values_string_helper str 0))\n",
    "  (string-join (filter (lambda (x) (even? (string-index str x))) (string->list str)) \"\"))\n",
    "  (string-join\n   (filter\n    (lambda (x) (not (odd? (string-index x str))))\n    (string->list str))\n   \"\"))\n"
  ]
}