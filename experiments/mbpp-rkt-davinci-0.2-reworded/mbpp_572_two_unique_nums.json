{
  "name": "mbpp_572_two_unique_nums",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to remove duplicate numbers from a given number of lists.\n(define (two_unique_nums nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate two_unique_nums))\n    (check-equal? (candidate (list 1 2 3 2 3 4 5)) (list 1 4 5))\n    (check-equal? (candidate (list 1 2 3 2 4 5)) (list 1 3 4 5))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 1 2 3 4 5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (cdr nums)) nums]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (define (helper nums acc)\n    (if (empty? nums)\n        acc\n        (if (member (first nums) acc)\n            (helper (rest nums) acc)\n            (helper (rest nums) (cons (first nums) acc)))))\n  (helper nums (list)))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(empty? (rest nums)) nums]\n    [else (cons (first nums) (two_unique_nums (remove (first nums) (rest nums))))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (define (helper nums seen)\n    (cond\n      [(empty? nums) empty]\n      [(member (first nums) seen) (helper (rest nums) seen)]\n      [else (cons (first nums) (helper (rest nums) (cons (first nums) seen)))]))\n  (helper nums empty))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond [(empty? nums) empty]\n        [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n        [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([unique_nums (list)]\n        [duplicate_nums (list)])\n    (for ([n nums])\n      (if (member n unique_nums)\n          (set! duplicate_nums (append duplicate_nums (list n)))\n          (set! unique_nums (append unique_nums (list n)))))\n    (list unique_nums duplicate_nums)))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (if (null? nums)\n      '()\n      (if (member (car nums) (cdr nums))\n          (two_unique_nums (cdr nums))\n          (cons (car nums) (two_unique_nums (cdr nums))))))\n",
    "  (cond\n    [(null? nums) '()]\n    [(member (car nums) (cdr nums)) (two_unique_nums (cdr nums))]\n    [else (cons (car nums) (two_unique_nums (cdr nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (let ([nums (sort nums <)])\n    (if (null? nums)\n        '()\n        (if (null? (cdr nums))\n            (list (car nums))\n            (if (= (car nums) (cadr nums))\n                (two_unique_nums (cdr nums))\n                (cons (car nums) (two_unique_nums (cdr nums))))))))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(member (first nums) (rest nums)) (two_unique_nums (rest nums))]\n    [else (cons (first nums) (two_unique_nums (rest nums)))]))\n"
  ]
}