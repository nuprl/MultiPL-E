{
  "name": "mbpp_12_sort_matrix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a given matrix in ascending order according to the sum of its rows.\n(define (sort_matrix M)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_matrix))\n    (check-equal? (candidate (list (list 1 2 3) (list 2 4 5) (list 1 1 1))) (list (list 1 1 1) (list 1 2 3) (list 2 4 5)))\n    (check-equal? (candidate (list (list 1 2 3) (list -2 4 -5) (list 1 -1 1))) (list (list -2 4 -5) (list 1 -1 1) (list 1 2 3)))\n    (check-equal? (candidate (list (list 5 8 9) (list 6 4 3) (list 2 1 4))) (list (list 2 1 4) (list 6 4 3) (list 5 8 9)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M\n        (lambda (row1 row2)\n          (< (apply + row1)\n             (apply + row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M\n        (lambda (row1 row2)\n          (< (apply + row1)\n             (apply + row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n",
    "  (sort (map sum M) M))\n",
    "  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons row (apply + row))) M)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n",
    "  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map vector-sum M) <))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n",
    "  (sort M (\u03bb (x y) (< (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n",
    "  (sort M (lambda (row1 row2)\n            (< (apply + row1)\n               (apply + row2)))))\n",
    "  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n",
    "  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (\u03bb (x y) (< (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n",
    "  (sort M (\u03bb (r1 r2) (&lt; (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (define (sum-row row)\n    (apply + row))\n  (sort (map sum-row M) <))\n",
    "  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n",
    "  (sort (for/list ([row M])\n          (cons (apply + row) row))\n        < #:key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort M (lambda (row1 row2)\n             (< (apply + row1) (apply + row2)))))\n",
    "  (sort (map (lambda (row)\n               (cons (apply + row) row))\n             M)\n        < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) < :key car))\n",
    "  (sort M (\u03bb (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (\u03bb (r1 r2)\n            (apply + r1)\n            (apply + r2))))\n",
    "  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map vector-sum M)\n        <\n        M))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n",
    "  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (&lt; (car r1) (car r2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort M (lambda (x y)\n            (< (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1)\n               (apply + r2)))))\n",
    "  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M) <))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        (lambda (r1 r2) (< (car r1) (car r2)))))\n",
    "  (sort (map (lambda (row) (list (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (lambda (row1 row2)\n            (let ((sum1 (apply + row1))\n                  (sum2 (apply + row2)))\n              (if (&lt; sum1 sum2)\n                  #t\n                  #f)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (\u03bb (r1 r2) (< (apply + r1) (apply + r2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (&lt; (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort M (lambda (x y)\n            (< (apply + x)\n               (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort M (\u03bb (a b) (&lt; (apply + a) (apply + b)))))\n",
    "  (sort M\n        (lambda (row1 row2)\n          (< (apply + row1)\n             (apply + row2)))))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (< (car a) (car b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (&lt; (car x) (car y)))))\n",
    "  (sort M (lambda (r1 r2)\n            (< (apply + r1) (apply + r2)))))\n",
    "  (sort M (\u03bb (x y) (&lt; (apply + x) (apply + y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (a b) (&lt; (car a) (car b)))))\n",
    "  (sort M\n        (lambda (a b)\n          (< (apply + a)\n             (apply + b)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (r) (cons (apply + r) r)) M)\n        <\n        :key car))\n",
    "  (sort (map (lambda (row) (cons row (apply + row))) M)\n        (lambda (a b) (&lt; (cdr a) (cdr b)))))\n</code>\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (x y) (< (car x) (car y)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        (lambda (row1 row2) (< (car row1) (car row2)))))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n",
    "  (sort (map vector-sum M) M))\n",
    "  (sort (map (lambda (row) (cons (apply + row) row)) M)\n        <\n        :key car))\n"
  ]
}