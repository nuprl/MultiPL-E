{
  "name": "mbpp_260_newman_prime",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n(define (newman_prime n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate newman_prime))\n    (check-equal? (candidate 3) 7)\n    (check-equal? (candidate 4) 17)\n    (check-equal? (candidate 5) 41)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1) (+ prime-count 1))))\n  (newman-prime-iter 1 1))\n",
    "  (define (is-prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (next-prime n)\n    (cond ((is-prime? n) n)\n          (else (next-prime (+ n 1)))))\n  (define (newman-prime-iter n count)\n    (cond ((= count n) n)\n          (else (newman-prime-iter (+ n 2) (+ count 1)))))\n  (newman-prime-iter (next-prime 2) 1))\n",
    "  (define (newman-prime-iter nth-prime i)\n    (if (= nth-prime n)\n        i\n        (newman-prime-iter (+ nth-prime 1) (+ i 2))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman-prime-iter nth-prime nth-prime-index)\n    (if (= nth-prime-index n)\n        nth-prime\n        (newman-prime-iter (next-newman-prime nth-prime) (+ nth-prime-index 1))))\n  (newman-prime-iter 2 1))\n",
    "  (define (newman_prime_iter i p)\n    (if (= i n)\n        p\n        (newman_prime_iter (+ i 1) (next-prime p))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman-prime-iter nth-prime prime-count)\n    (if (= nth-prime n)\n        prime-count\n        (newman-prime-iter (+ nth-prime 1)\n                           (+ prime-count (if (prime? (+ prime-count nth-prime)) 1 0)))))\n  (newman-prime-iter 1 1))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 1))\n",
    "  (define (newman_prime_iter n p)\n    (cond ((= n 1) p)\n          ((= (modulo p 2) 1) (newman_prime_iter (- n 1) (+ p 2)))\n          (else (newman_prime_iter n (+ p 2)))))\n  (newman_prime_iter n 3))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i n)\n        (newman_prime (+ i 1))\n        (if (is-prime? i)\n            (iter (+ i 1))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (newman-prime-iter nth-prime current-prime)\n    (cond ((= nth-prime 1) current-prime)\n          ((= (remainder current-prime 2) 0)\n           (newman-prime-iter nth-prime (+ current-prime 1)))\n          (else\n           (newman-prime-iter (- nth-prime 1) (+ current-prime 2)))))\n  (newman-prime-iter n 1))\n",
    "  (define (prime? n)\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((zero? (modulo n i)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i n) i)\n          ((prime? i) (iter (+ i 1)))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (newman-prime-iter n p)\n    (if (= n 1)\n        p\n        (newman-prime-iter (- n 1) (+ p 2))))\n  (newman-prime-iter n 2))\n",
    "  (let loop ([n n] [i 1])\n    (if (= n 1)\n        i\n        (loop (- n 1) (+ i 2)))))\n",
    "  (define (newman_prime_iter n acc)\n    (cond\n      [(= n 1) acc]\n      [else (newman_prime_iter (- n 1) (+ acc 2))]))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter n p)\n    (if (= n 1)\n        p\n        (newman_prime_iter (- n 1) (+ p 2))))\n  (newman_prime_iter n 3))\n",
    "  (define (newman_prime_iter nth-prime nth-prime-candidate)\n    (if (= nth-prime n)\n        nth-prime-candidate\n        (newman_prime_iter (+ nth-prime 1)\n                           (if (prime? nth-prime-candidate)\n                               (+ nth-prime-candidate 2)\n                               (+ nth-prime-candidate 4)))))\n  (newman_prime_iter 1 2))\n",
    "  (define (newman_prime_iter n i)\n    (if (= n i)\n        (newman_prime_iter n (+ i 1))\n      (if (prime? i)\n          (if (= (modulo i 2) 0)\n              (newman_prime_iter n (+ i 1))\n            (if (= (modulo i 3) 0)\n                (newman_prime_iter n (+ i 1))\n              (if (= (modulo i 5) 0)\n                  (newman_prime_iter n (+ i 1))\n                (if (= (modulo i 7) 0)\n                    (newman_prime_iter n (+ i 1))\n                    i)))))))\n  (newman_prime_iter n 1))\n",
    "  (define (newman_prime_iter nth p)\n    (cond ((= nth n) p)\n          (else (newman_prime_iter (+ nth 1) (+ p 2)))))\n  (newman_prime_iter 1 3))\n",
    "  (define (newman_prime_iter i p)\n    (cond\n      [(= i n) p]\n      [else\n       (newman_prime_iter (+ i 1)\n                          (let ([p (+ p 2)])\n                            (cond\n                              [(= (modulo p 3) 0) (+ p 2)]\n                              [(= (modulo p 5) 0) (+ p 4)]\n                              [else p])))]))\n  (newman_prime_iter 1 7))\n",
    "  (define (newman_prime_iter i n)\n    (if (= i n)\n        (newman_prime_iter (+ i 1) n)\n        (if (prime? i)\n            (if (= (modulo i 2) 0)\n                (newman_prime_iter (+ i 1) n)\n                (if (= (modulo i 3) 0)\n                    (newman_prime_iter (+ i 1) n)\n                    (if (= (modulo i 5) 0)\n                        (newman_prime_iter (+ i 1) n)\n                        i)))))\n  (newman_prime_iter 1 n))\n"
  ]
}