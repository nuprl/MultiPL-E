{
  "name": "mbpp_605_prime_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given integer is a prime number.\n(define (prime_num num)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_num))\n    (check-equal? (candidate 13) #t)\n    (check-equal? (candidate 7) #t)\n    (check-equal? (candidate -1010) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime-helper num div)\n    (cond ((= num 1) #f)\n          ((= num 2) #t)\n          ((= num div) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (+ div 1)))))\n  (prime-helper num 2))\n",
    "  (define (prime? num div)\n    (cond ((= num div) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime? num (+ div 1)))))\n  (prime? num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num div)\n    (cond\n      [(= num div) #t]\n      [(= (modulo num div) 0) #f]\n      [else (prime? num (+ div 1))]))\n  (prime? num 2))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #t\n      (if (= num 2)\n          #t\n          (if (= num 3)\n              #t\n              (if (= num 4)\n                  #f\n                  (if (= num 5)\n                      #t\n                      (if (= num 6)\n                          #f\n                          (if (= num 7)\n                              #t\n                              (if (= num 8)\n                                  #f\n                                  (if (= num 9)\n                                      #f\n                                      (if (= num 10)\n                                          #f\n                                          (if (= num 11)\n                                              #t\n                                              (if (= num 12)\n                                                  #f\n                                                  (if (= num 13)\n                                                      #t\n                                                      (if (= num 14)\n                                                          #f\n                                                          (if (= num 15)\n                                                              #f\n                                                              (if (= num 16)\n                                                                  #f\n                                                                  (if (= num 17)\n                                                                      #t\n                                                                      (if (= num 18)\n                                                                          #f\n                                                                          (if (= num 19)\n                                                                              #t\n                                                                              (if (= num 20)\n                                                                                  #f\n                                                                                  (if (= num 21)\n                                                                                      #f\n                                                                                      (if (= num 22)\n                                                                                          #f\n                                                                                          (if (= num 23)\n                                                                                              #t\n                                                                                              (if (= num 24)\n                                                                                                  #f\n                                                                                                  (if (= num 25)\n                                                                                                      #f\n                                                                                                      (if (= num 26)\n                                                                                                          #f\n                                                                                                          (if (= num 27)\n                                                                                                              #f\n                                                                                                              (if (= num 28)\n                                                                                                                  #f\n                                                                                                                  (if (= num 29)\n                                                                                                                      #t\n                ",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime? num)\n    (define (prime-helper num div)\n      (cond ((= div 1) #t)\n            ((= (modulo num div) 0) #f)\n            (else (prime-helper num (- div 1)))))\n    (prime-helper num (- num 1)))\n  (if (prime? num)\n      (printf \"~a is a prime number.\\n\" num)\n      (printf \"~a is not a prime number.\\n\" num)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (if (= num 1)\n      #f\n      (if (= num 2)\n          #t\n          (if (= (remainder num 2) 0)\n              #f\n              (let loop ((i 3))\n                (if (= i num)\n                    #t\n                    (if (= (remainder num i) 0)\n                        #f\n                        (loop (+ i 2)))))))))\n",
    "  (define (prime-helper num div)\n    (cond ((= div 1) #t)\n          ((= (modulo num div) 0) #f)\n          (else (prime-helper num (- div 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (let loop ([i 2])\n    (if (= i num)\n        #t\n        (if (= (remainder num i) 0)\n            #f\n            (loop (+ i 1))))))\n",
    "  (define (prime? num div)\n    (cond\n      [(= div 1) #t]\n      [(= (modulo num div) 0) #f]\n      [else (prime? num (- div 1))]))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= divisor 1) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (- divisor 1)))))\n  (prime-helper num (- num 1)))\n",
    "  (define (prime? num)\n    (define (prime-helper num div)\n      (if (= div 1)\n          #t\n          (if (= (modulo num div) 0)\n              #f\n              (prime-helper num (- div 1)))))\n    (prime-helper num (- num 1)))\n  (if (= num 1)\n      #f\n      (prime? num)))\n",
    "  (define (prime? num div)\n    (if (= div 1)\n        #t\n        (if (= (modulo num div) 0)\n            #f\n            (prime? num (- div 1)))))\n  (prime? num (- num 1)))\n",
    "  (define (prime-helper num divisor)\n    (cond ((= num divisor) #t)\n          ((= (modulo num divisor) 0) #f)\n          (else (prime-helper num (+ divisor 1)))))\n  (prime-helper num 2))\n"
  ]
}