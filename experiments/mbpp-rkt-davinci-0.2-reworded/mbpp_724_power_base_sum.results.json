{
  "name": "mbpp_724_power_base_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpy31gzmpy.rkt:8:6: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpy31gzmpy.rkt:8:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509814,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:14:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:15:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimxyu3bd.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimxyu3bd.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimxyu3bd.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_4kit57e.rkt:17:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_4kit57e.rkt:18:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_4kit57e.rkt:19:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (modulo base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:18:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:19:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 1) base]\n    [else\n     (sum-digits\n      (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpzhgcw3va.rkt:8:6: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpzhgcw3va.rkt:8:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (sub1 power) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0ld78uc.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond ((= power 0) 1)\n        ((= power 1) base)\n        (else (sum-digits (expt base power)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "/tmp/tmpn8aixl35.rkt:7:15: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpn8aixl35.rkt:7:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 1)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprdbp6tj.rkt:16:4\nactual:     198\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprdbp6tj.rkt:17:4\nactual:     72\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprdbp6tj.rkt:18:4\nactual:     112\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpprdbp6tj.rkt:19:4\nactual:     6\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbs9rwrh.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbs9rwrh.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbs9rwrh.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (modulo base 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx_izdi9.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx_izdi9.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx_izdi9.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws56cf6q.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))\n                (quotient base 10))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsup5w944.rkt:16:4\nactual:     0\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsup5w944.rkt:17:4\nactual:     0\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsup5w944.rkt:18:4\nactual:     0\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsup5w944.rkt:19:4\nactual:     0\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (expt base power)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum base))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs67bqp8.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs67bqp8.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs67bqp8.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond ((= power 0) acc)\n          ((= power 1) (sum-digits base acc))\n          (else (power_base_sum_helper base (- power 1) (sum-digits (expt base power) acc)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "/tmp/tmpxtkp9e1c.rkt:7:24: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpxtkp9e1c.rkt:7:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )\n    )\n  )\n  (power_base_sum_iter base power 0)\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:19:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:20:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps44f0tl9.rkt:21:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjgrpxvhy.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjgrpxvhy.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjgrpxvhy.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjgrpxvhy.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits\n      (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "/tmp/tmp3zz_93ru.rkt:8:6: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmp3zz_93ru.rkt:8:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power)\n    (if (= power 1)\n        base\n        (+ (remainder base 10)\n           (power_base_sum_helper (quotient base 10) (- power 1)))))\n  (power_base_sum_helper base power))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sru96w5.rkt:17:4\nactual:     2\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sru96w5.rkt:18:4\nactual:     8\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sru96w5.rkt:19:4\nactual:     8\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sru96w5.rkt:20:4\nactual:     3\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum_iter base (- power 1) (+ acc (base_sum base))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "/tmp/tmpj3_xk10s.rkt:7:62: base_sum: unbound identifier\n  in: base_sum\n  location...:\n   /tmp/tmpj3_xk10s.rkt:7:62\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power)\n    (cond ((= power 0) 1)\n          ((= power 1) base)\n          (else (* base (power_base_sum_helper base (- power 1))))))\n  (define (sum_digits number)\n    (cond ((= number 0) 0)\n          (else (+ (modulo number 10) (sum_digits (quotient number 10))))))\n  (sum_digits (power_base_sum_helper base power)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4iafgtd.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4iafgtd.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4iafgtd.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpttu71d22.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4iafgtd.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4iafgtd.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy4iafgtd.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_helper base (- power 1) (+ sum base)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82qp46s5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82qp46s5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82qp46s5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_xb9ua9.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_xb9ua9.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu_xb9ua9.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (sum_digits n)\n    (if (= n 0)\n        0\n        (+ (remainder n 10) (sum_digits (quotient n 10)))))\n  (sum_digits (expt base power)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond [(= power 0) sum]\n          [(= power 1) (+ sum base)]\n          [else (power_base_sum-iter base (- power 1) (+ sum base))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4n8kappj.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4n8kappj.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4n8kappj.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_helper base (- power 1) (+ acc (modulo base 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4d7rov03.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4d7rov03.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4d7rov03.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum-iter base (- power 1) (+ acc base))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpudse3txj.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpudse3txj.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpudse3txj.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg4xiuxk4.rkt:17:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg4xiuxk4.rkt:18:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg4xiuxk4.rkt:19:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg4xiuxk4.rkt:20:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (let ([base-power (* base (expt base (- power 1)))])\n       (cond\n         [(= base-power 0) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124179,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (pbs-helper base power)\n    (if (= power 0)\n        0\n        (+ (remainder (expt base power) 10)\n           (pbs-helper base (- power 1)))))\n  (pbs-helper base power))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpryd32zbz.rkt:17:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpryd32zbz.rkt:18:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpryd32zbz.rkt:19:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpryd32zbz.rkt:20:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (define (power_base_sum_iter base power sum)\n       (cond\n         [(= power 0) sum]\n         [else (power_base_sum_iter base (- power 1) (+ sum (expt base power)))]))\n     (power_base_sum_iter base power 0)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph9jeq9pj.rkt:19:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph9jeq9pj.rkt:20:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph9jeq9pj.rkt:21:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph9jeq9pj.rkt:22:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_iter base (- power 1) (+ acc base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpas03zhjf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprbc06l73.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6wrkbzw.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6wrkbzw.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6wrkbzw.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (expt base power)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6znma3o.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6znma3o.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6znma3o.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6znma3o.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpy31gzmpy.rkt:8:6: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpy31gzmpy.rkt:8:6\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [(= power 1) base]\n    [else\n     (let* ([base-str (number->string base)]\n            [base-str-len (string-length base-str)]\n            [base-str-len-1 (- base-str-len 1)]\n            [base-str-len-2 (- base-str-len 2)]\n            [base-str-len-3 (- base-str-len 3)]\n            [base-str-len-4 (- base-str-len 4)]\n            [base-str-len-5 (- base-str-len 5)]\n            [base-str-len-6 (- base-str-len 6)]\n            [base-str-len-7 (- base-str-len 7)]\n            [base-str-len-8 (- base-str-len 8)]\n            [base-str-len-9 (- base-str-len 9)]\n            [base-str-len-10 (- base-str-len 10)]\n            [base-str-len-11 (- base-str-len 11)]\n            [base-str-len-12 (- base-str-len 12)]\n            [base-str-len-13 (- base-str-len 13)]\n            [base-str-len-14 (- base-str-len 14)]\n            [base-str-len-15 (- base-str-len 15)]\n            [base-str-len-16 (- base-str-len 16)]\n            [base-str-len-17 (- base-str-len 17)]\n            [base-str-len-18 (- base-str-len 18)]\n            [base-str-len-19 (- base-str-len 19)]\n            [base-str-len-20 (- base-str-len 20)]\n            [base-str-len-21 (- base-str-len 21)]\n            [base-str-len-22 (- base-str-len 22)]\n            [base-str-len-23 (- base-str-len 23)]\n            [base-str-len-24 (- base-str-len 24)]\n            [base-str-len-25 (- base-str-len 25)]\n            [base-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "/tmp/tmpu7vr7_x7.rkt:36:12: read-syntax: expected a `]` to close `[`\n  possible cause: indentation suggests a missing `]` before line 37\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (if (= power 0)\n      1\n      (sum-digits (expt base power))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "/tmp/tmpy3m3nexs.rkt:7:7: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpy3m3nexs.rkt:7:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond [(= power 0) 1]\n        [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "/tmp/tmp489eod7o.rkt:6:15: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmp489eod7o.rkt:6:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp79y51k10.rkt:17:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp79y51k10.rkt:18:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp79y51k10.rkt:19:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp79y51k10.rkt:20:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqnz8_7u.rkt:17:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqnz8_7u.rkt:18:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqnz8_7u.rkt:19:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuqnz8_7u.rkt:20:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((zero? power) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo306_6c8.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo306_6c8.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo306_6c8.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo306_6c8.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (if (= power 0)\n        acc\n        (power_base_sum_helper base (- power 1) (+ acc (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy372al9_.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmw3zxkow.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let loop ([base base] [power power])\n       (cond\n         [(= power 1) base]\n         [else\n          (let ([new-base (modulo (* base base) 10)])\n            (loop new-base (- power 1)))\n          ]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjo2fxq6b.rkt:21:4\nactual:     6\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjo2fxq6b.rkt:22:4\nactual:     6\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjo2fxq6b.rkt:23:4\nactual:     6\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjo2fxq6b.rkt:24:4\nactual:     1\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7xkeageu.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_helper base (sub1 power) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq0u3jx1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5adcueg.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpforf09m9.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (helper base power)\n    (cond ((= power 0) 1)\n          ((= power 1) base)\n          (else (* base (helper base (- power 1))))))\n  (define (sum-digits n)\n    (cond ((= n 0) 0)\n          (else (+ (modulo n 10) (sum-digits (quotient n 10))))))\n  (sum-digits (helper base power)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (define (helper base power)\n       (cond\n         [(= power 0) 0]\n         [else\n          (+ (modulo base 10) (helper (quotient base 10) (- power 1)))]))\n     (helper base power)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh1v49y9.rkt:20:4\nactual:     2\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh1v49y9.rkt:21:4\nactual:     8\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh1v49y9.rkt:22:4\nactual:     8\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh1v49y9.rkt:23:4\nactual:     3\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power-base-sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4lh6lsyt.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa69heic1.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (remainder base 10)))\n          )))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl41bqq3y.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl41bqq3y.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl41bqq3y.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe8osoygw.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))\n               (quotient base 10))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmzty3spt.rkt:16:4\nactual:     0\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmzty3spt.rkt:17:4\nactual:     0\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmzty3spt.rkt:18:4\nactual:     0\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmzty3spt.rkt:19:4\nactual:     0\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum base))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskdncjkm.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskdncjkm.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskdncjkm.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 0]\n    [else (+ (remainder base 10) (power_base_sum base (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqh0ivas.rkt:14:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqh0ivas.rkt:15:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaqh0ivas.rkt:16:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 1)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp05mgsyzv.rkt:16:4\nactual:     498\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp05mgsyzv.rkt:17:4\nactual:     44\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp05mgsyzv.rkt:18:4\nactual:     66\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp05mgsyzv.rkt:19:4\nactual:     16\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (cond ((= power 0) result)\n          ((= power 1) (+ result base))\n          (else (power_base_sum_iter base (- power 1) (+ result base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp733_2vuf.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp733_2vuf.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp733_2vuf.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:18:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:19:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power result)\n    (if (= power 0)\n        result\n        (power_base_sum_iter base (- power 1) (+ result (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe027eg15.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([base-power (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(< base-power 10) base-power]\n         [else\n          (+ (modulo base-power 10) (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124180,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbifixom.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohh0vno1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohh0vno1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohh0vno1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohh0vno1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (remainder base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:16:4\n\nremainder: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:17:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:18:4\n\nremainder: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzwj9yyip.rkt:19:4\n\nremainder: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp94_ttpo5.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp94_ttpo5.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp94_ttpo5.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp94_ttpo5.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum-iter base (- power 1) (+ sum (expt base power))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4e7z2xnb.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (base_sum base)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "/tmp/tmp8ym2drj5.rkt:8:58: base_sum: unbound identifier\n  in: base_sum\n  location...:\n   /tmp/tmp8ym2drj5.rkt:8:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [(= power 1) base]\n    [else (+ (modulo base 10) (power_base_sum base (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4c41p88.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4c41p88.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4c41p88.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (modulo base 10) (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:14:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:15:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbipk_eom.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (cond\n      [(zero? power) acc]\n      [else (power_base_sum-iter base (- power 1) (+ acc (sum-digits (expt base power))))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "/tmp/tmpe3wrsn2y.rkt:8:58: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpe3wrsn2y.rkt:8:58\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power acc)\n    (cond ((= power 0) acc)\n          (else (power_base_sum-iter base (- power 1) (+ acc (remainder (expt base power) 10))))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3m9o2aw.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_helper base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wmimlzm.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-sum (sum-digits base)])\n       (sum-digits (* base-sum (power_base_sum base (- power 1)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "/tmp/tmpt7c4dn9v.rkt:8:22: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpt7c4dn9v.rkt:8:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10) (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(zero? power) 1]\n    [else\n     (let ([base-power (expt base power)])\n       (cond\n         [(zero? base-power) 0]\n         [else\n          (+ (remainder base-power 10)\n             (power_base_sum base (- power 1)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83rjpw_j.rkt:20:4\nactual:     501\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83rjpw_j.rkt:21:4\nactual:     53\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83rjpw_j.rkt:22:4\nactual:     75\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83rjpw_j.rkt:23:4\nactual:     20\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else\n     (+ (modulo base 10)\n        (power_base_sum (/ base 10) (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:16:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 1/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:17:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:18:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 4/5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8b4_sp1.rkt:19:4\n\nmodulo: contract violation\n  expected: integer?\n  given: 3/10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else\n       (power_base_sum-iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmiw1lj_.rkt:17:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmiw1lj_.rkt:18:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmiw1lj_.rkt:19:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcmiw1lj_.rkt:20:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 1) (sum_digits (+ base sum))]\n      [else (power_base_sum_iter base (- power 1) (+ base sum))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "/tmp/tmpfinyorwz.rkt:7:20: sum_digits: unbound identifier\n  in: sum_digits\n  location...:\n   /tmp/tmpfinyorwz.rkt:7:20\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond [(= power 0) sum]\n          [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqlgok7ad.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqlgok7ad.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqlgok7ad.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqlgok7ad.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (modulo (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuff0uoa.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy2akgzb7.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz6llajqs.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum-iter base (- power 1) (+ sum (modulo base 10)))\n          )))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6wrkbzw.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6wrkbzw.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6wrkbzw.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (remainder result 10)\n             (power_base_sum base power))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (if (= power 0)\n      0\n      (modulo (+ (* base (power_base_sum base (- power 1)))\n                (power_base_sum base (- power 1)))\n             10)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124181,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (modulo base 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzu93gln1.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power-base-sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power-base-sum-iter base (- power 1) (+ sum (expt base power)))]))\n  (power-base-sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyzdzq0t.rkt:16:4\nactual:     2535301200456458802993406410750\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyzdzq0t.rkt:17:4\nactual:     1227133512\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyzdzq0t.rkt:18:4\nactual:     40210710958664\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyzdzq0t.rkt:19:4\nactual:     39\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum-iter base power sum)\n    (cond\n      [(= power 0) sum]\n      [else (power_base_sum-iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum-iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55a3f290.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (cond ((= power 0) sum)\n          (else (power_base_sum_helper base (- power 1) (+ sum (modulo base 10))))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9rqljmlx.rkt:15:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9rqljmlx.rkt:16:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9rqljmlx.rkt:17:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond\n      [(zero? power) sum]\n      [else (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpziai7is8.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpziai7is8.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpziai7is8.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpziai7is8.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 0]\n    [else (+ (remainder (expt base power) 10)\n             (power_base_sum base (- power 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbxi10wp0.rkt:15:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbxi10wp0.rkt:16:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbxi10wp0.rkt:17:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbxi10wp0.rkt:18:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_helper base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_helper base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_helper base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptv189e6d.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (if (= power 0)\n        sum\n        (power_base_sum_iter base (- power 1) (+ sum (remainder (expt base power) 10)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpitp37mq1.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power sum)\n    (cond ((= power 0) sum)\n          ((= power 1) (+ sum base))\n          (else (power_base_sum_iter base (- power 1) (+ sum base)))))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124164,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:16:4\nactual:     200\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:17:4\nactual:     80\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl7g1efe5.rkt:18:4\nactual:     120\nexpected:   62\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else (sum-digits (expt base power))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1665509801,
      "stdout": "",
      "stderr": "/tmp/tmpw8agfitj.rkt:7:11: sum-digits: unbound identifier\n  in: sum-digits\n  location...:\n   /tmp/tmpw8agfitj.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (cond\n    [(= power 0) 1]\n    [else\n     (let ([result (* base (power_base_sum base (- power 1)))])\n       (cond\n         [(= result 0) 0]\n         [else\n          (+ (modulo result 10) (power_base_sum (/ result 10) 0))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124165,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:19:4\nactual:     1\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:20:4\nactual:     3\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:21:4\nactual:     5\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp597ndua3.rkt:22:4\nactual:     10\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n(define (power_base_sum base power)\n  (define (power_base_sum_iter base power acc)\n    (cond\n      [(= power 0) acc]\n      [else (power_base_sum_iter base (- power 1) (+ acc (remainder (expt base power) 10)))]))\n  (power_base_sum_iter base power 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate power_base_sum))\n    (check-equal? (candidate 2 100) 115)\n    (check-equal? (candidate 8 10) 37)\n    (check-equal? (candidate 8 15) 62)\n    (check-equal? (candidate 3 3) 9)\n))\n\n(test-humaneval)",
      "timestamp": 1666124167,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:16:4\nactual:     500\nexpected:   115\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:17:4\nactual:     52\nexpected:   37\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:18:4\nactual:     74\nexpected:   62\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbctgok5q.rkt:19:4\nactual:     19\nexpected:   9\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}