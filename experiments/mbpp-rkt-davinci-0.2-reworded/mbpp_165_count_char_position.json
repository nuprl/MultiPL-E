{
  "name": "mbpp_165_count_char_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n(define (count_char_position str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_char_position))\n    (check-equal? (candidate \"xbcefg\") 2)\n    (check-equal? (candidate \"ABcED\") 3)\n    (check-equal? (candidate \"AbgdeF\") 5)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([str2 (string-upcase str1)])\n    (for/fold ([count 0]) ([i (in-range (string-length str1))])\n      (if (char=? (string-ref str1 i) (string-ref str2 i))\n          (add1 count)\n          count))))\n",
    "  (define (count_char_position_iter str1 i)\n    (cond ((= i (string-length str1)) 0)\n          ((= (string-ref str1 i) (string-ref (string-downcase (number->string (+ i 97))) 0)) (+ 1 (count_char_position_iter str1 (+ i 1))))\n          (else (count_char_position_iter str1 (+ i 1)))))\n  (count_char_position_iter str1 0))\n",
    "  (let ([str2 (string-upcase str1)])\n    (for/sum ([i (in-range (string-length str2))])\n      (if (= (char-alphabetic? (string-ref str2 i))\n             (char-alphabetic? (string-ref str2 (- i (string-ci&gt;index \"a\")))))\n          1 0))))\n",
    "  (define (count_char_position_helper str1 str2)\n    (if (empty? str1)\n        0\n        (if (char=? (string-ref str1 0) (string-ref str2 0))\n            (+ 1 (count_char_position_helper (substring str1 1) (substring str2 1)))\n            (count_char_position_helper (substring str1 1) (substring str2 1)))))\n  (count_char_position_helper str1 \"abcdefghijklmnopqrstuvwxyz\"))\n",
    "  (define (count_char_position_iter str1 i)\n    (if (= i (string-length str1))\n        0\n        (+ (if (= (string-ref str1 i) (string-ref \"abcdefghijklmnopqrstuvwxyz\" i))\n               1\n               0)\n           (count_char_position_iter str1 (+ i 1)))))\n  (count_char_position_iter (string-downcase str1) 0))\n",
    "  (let ([str2 (string-downcase str1)])\n    (for/fold ([count 0]) ([i (in-range (string-length str1))])\n      (if (char=? (string-ref str1 i) (string-ref str2 i))\n          (add1 count)\n          count))))\n",
    "  (let ([str2 (string-upcase str1)])\n    (for/sum ([i (in-range (string-length str1))])\n      (if (equal? (string-ref str1 i) (string-ref str2 i))\n          1\n          0))))\n",
    "  (define (count_char_position_helper str1 i)\n    (if (= i (string-length str1))\n        0\n        (+ (if (= (char-upcase (string-ref str1 i)) (char-upcase (string-ref (string-append \"abcdefghijklmnopqrstuvwxyz\") i)))\n               1\n               0)\n           (count_char_position_helper str1 (+ i 1)))))\n  (count_char_position_helper str1 0))\n",
    "  (define (count_char_position_iter str1 i)\n    (if (= i (string-length str1))\n        0\n        (+ (if (= (char-upcase (string-ref str1 i)) (char-upcase (integer->char (+ i 97)))) 1 0)\n           (count_char_position_iter str1 (+ i 1)))))\n  (count_char_position_iter str1 0))\n",
    "  (let ((str2 (string-upcase str1)))\n    (let loop ((i 0) (count 0))\n      (if (&lt; i (string-length str2))\n          (let ((char (string-ref str2 i)))\n            (if (and (&gt;= char #\\A) (&lt;= char #\\Z))\n                (if (= char (+ #\\A (- i)))\n                    (loop (+ i 1) (+ count 1))\n                    (loop (+ i 1) count))\n                (loop (+ i 1) count)))\n          count))))\n",
    "  (define (count_char_position_helper str1 str2)\n    (if (string=? str1 \"\")\n        0\n        (if (char=? (string-ref str1 0) (string-ref str2 (string-index (string-upcase (string-ref str1 0)) str2)))\n            (+ 1 (count_char_position_helper (substring str1 1) str2))\n            (count_char_position_helper (substring str1 1) str2))))\n  (count_char_position_helper str1 \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n",
    "  (define (count_char_position_helper str1 str2)\n    (if (or (string=? str1 \"\") (string=? str2 \"\"))\n        0\n        (if (char=? (string-ref str1 0) (string-ref str2 0))\n            (+ 1 (count_char_position_helper (substring str1 1) (substring str2 1)))\n            (count_char_position_helper (substring str1 1) (substring str2 1)))))\n  (count_char_position_helper (string-upcase str1) (string-upcase \"abcdefghijklmnopqrstuvwxyz\")))\n",
    "  (define (count_char_position_helper str1 str2)\n    (if (string=? str1 \"\")\n        0\n        (if (char=? (string-ref str1 0) (string-ref str2 (string-index (string-upcase (string-ref str1 0)) str2)))\n            (+ 1 (count_char_position_helper (substring str1 1) str2))\n            (count_char_position_helper (substring str1 1) str2))))\n  (count_char_position_helper str1 \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n",
    "  (let ([str2 (string-upcase str1)])\n    (define (count_char_position_iter str1 str2 count)\n      (if (string-null? str1)\n          count\n          (if (char=? (string-ref str1 0) (string-ref str2 0))\n              (count_char_position_iter (string-drop str1 1) (string-drop str2 1) (+ count 1))\n              (count_char_position_iter (string-drop str1 1) (string-drop str2 1) count))))\n    (count_char_position_iter str1 str2 0)))\n",
    "  (let ([str2 (string-upcase str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str2))\n          count\n          (let ([char (string-ref str2 i)])\n            (if (and (&gt;= char #\\A) (&lt;= char #\\Z))\n                (if (= char (+ #\\A (- i)))\n                    (loop (+ i 1) (+ count 1))\n                    (loop (+ i 1) count))\n                (loop (+ i 1) count)))))))\n",
    "  (define (count_char_position_iter str1 i)\n    (if (= i (string-length str1))\n        0\n        (+ (if (= (char-alphabetic? (string-ref str1 i))\n                 (char-alphabetic? (string-ref (string-upcase str1) i)))\n               1\n               0)\n           (count_char_position_iter str1 (+ i 1)))))\n  (count_char_position_iter str1 0))\n",
    "  (define (count_char_position_helper str1 str2)\n    (if (or (string=? str1 \"\") (string=? str2 \"\"))\n        0\n        (if (char=? (string-ref str1 0) (string-ref str2 0))\n            (+ 1 (count_char_position_helper (substring str1 1) (substring str2 1)))\n            (count_char_position_helper (substring str1 1) (substring str2 1)))))\n  (count_char_position_helper (string-downcase str1) (string-downcase \"abcdefghijklmnopqrstuvwxyz\")))\n",
    "  (let ([str2 (string-upcase str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str2))\n          count\n          (let ([char (string-ref str2 i)])\n            (if (and (&lt;= #\\A char) (&lt;= char #\\Z))\n                (if (= char (+ #\\A (- i)))\n                    (loop (+ i 1) (+ count 1))\n                    (loop (+ i 1) count))\n                (loop (+ i 1) count)))))))\n</code>\n",
    "  (define (count_char_position_iter str1 str2 count)\n    (cond ((null? str1) count)\n          ((char=? (string-ref str1 0) (string-ref str2 0))\n           (count_char_position_iter (substring str1 1) (substring str2 1) (+ count 1)))\n          (else (count_char_position_iter (substring str1 1) (substring str2 1) count))))\n  (count_char_position_iter str1 (string->list \"abcdefghijklmnopqrstuvwxyz\") 0))\n",
    "  (define (count_char_position_iter str1 i)\n    (if (= i (string-length str1))\n        0\n        (+ (if (= (char-downcase (string-ref str1 i)) (char-downcase (integer->char (+ i 97))))\n               1\n               0)\n           (count_char_position_iter str1 (+ i 1)))))\n  (count_char_position_iter str1 0))\n"
  ]
}