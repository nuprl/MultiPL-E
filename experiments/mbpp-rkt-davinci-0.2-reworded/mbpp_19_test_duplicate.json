{
  "name": "mbpp_19_test_duplicate",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find whether a given list of integers contains any duplicate element.\n(define (test_duplicate arraynums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate test_duplicate))\n    (check-equal? (candidate (list 1 2 3 4 5)) #f)\n    (check-equal? (candidate (list 1 2 3 4 4)) #t)\n    (check-equal? (candidate (list 1 1 2 2 3 3 4 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (duplicate? arraynums)\n    (cond\n      [(empty? arraynums) #f]\n      [(member (first arraynums) (rest arraynums)) #t]\n      [else (duplicate? (rest arraynums))]))\n  (duplicate? arraynums))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (cond [(empty? arraynums) duplicate]\n          [(member (first arraynums) (rest arraynums)) #t]\n          [else (loop (rest arraynums) duplicate)])))\n",
    "  (let ([duplicate? (lambda (arraynums)\n                      (cond\n                        [(empty? arraynums) #f]\n                        [(member (first arraynums) (rest arraynums)) #t]\n                        [else (duplicate? (rest arraynums))]))])\n    (duplicate? arraynums)))\n",
    "  (let ((duplicate? #f))\n    (for/or ([i (in-list arraynums)])\n      (for/or ([j (in-list arraynums)])\n        (if (and (not (= i j)) (= i j))\n            (set! duplicate? #t))))\n    duplicate?))\n",
    "  (let loop ([arraynums arraynums])\n    (if (null? arraynums)\n        #f\n        (if (member (car arraynums) (cdr arraynums))\n            #t\n            (loop (cdr arraynums))))))\n",
    "  (cond\n    [(empty? arraynums) #f]\n    [(member (first arraynums) (rest arraynums)) #t]\n    [else (test_duplicate (rest arraynums))]))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) duplicate)))))\n",
    "  (let loop ([arraynums arraynums] [result #f])\n    (if (null? arraynums)\n        result\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) result)))))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (if (null? arraynums)\n        duplicate\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) duplicate)))))\n",
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length arraynums)))]\n             #:when (equal? (list-ref arraynums i) (list-ref arraynums (add1 i))))\n      #t)))\n",
    "  (cond\n    [(empty? arraynums) #f]\n    [(member (first arraynums) (rest arraynums)) #t]\n    [else (test_duplicate (rest arraynums))]))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (cond\n      [(empty? arraynums) duplicate]\n      [(member (first arraynums) (rest arraynums)) #t]\n      [else (loop (rest arraynums) duplicate)])))\n",
    "  (let loop ([arraynums arraynums]\n             [duplicate #f])\n    (cond [(empty? arraynums) duplicate]\n          [(member (first arraynums) (rest arraynums)) (loop (rest arraynums) #t)]\n          [else (loop (rest arraynums) duplicate)])))\n",
    "  (let loop ((arraynums arraynums) (duplicate? #f))\n    (if (null? arraynums)\n        duplicate?\n        (if (member (car arraynums) (cdr arraynums))\n            (loop (cdr arraynums) #t)\n            (loop (cdr arraynums) duplicate?)))))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (cond\n      [(empty? arraynums) duplicate]\n      [(member (first arraynums) (rest arraynums)) (loop (rest arraynums) #t)]\n      [else (loop (rest arraynums) duplicate)])))\n",
    "  (let ((nums (sort arraynums <)))\n    (for/or ([i (in-range (sub1 (length nums)))]\n             [j (in-range (add1 i) (length nums))])\n      (equal? (list-ref nums i) (list-ref nums j)))))\n",
    "  (let loop ([arraynums arraynums] [duplicate #f])\n    (cond [(empty? arraynums) duplicate]\n          [(member (first arraynums) (rest arraynums)) (loop (rest arraynums) #t)]\n          [else (loop (rest arraynums) duplicate)])))\n",
    "  (let ([arraynums (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length arraynums)))])\n      (equal? (list-ref arraynums i) (list-ref arraynums (add1 i))))))\n",
    "  (let ([array (sort arraynums <)])\n    (for/or ([i (in-range (sub1 (length array)))]\n             [j (in-range (add1 i) (length array))])\n      (equal? (list-ref array i) (list-ref array j)))))\n",
    "  (let ([len (length arraynums)])\n    (let loop ([i 0])\n      (if (= i len)\n          #f\n          (if (member (list-ref arraynums i) (sublist arraynums (+ i 1) len))\n              #t\n              (loop (+ i 1)))))))\n"
  ]
}