{
  "name": "mbpp_113_check_integer",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_integer))\n    (check-equal? (candidate \"python\") #f)\n    (check-equal? (candidate \"1\") #t)\n    (check-equal? (candidate \"12345\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (string-&gt;number text)\n      #t\n      #f))\n",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [(string-contains text #\\+) #f]\n    [(string-contains text #\\-) #f]\n    [else #t]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text #\\vt))\n       (not (string-contains text #\\ff))\n       (not (string-contains text #\\cr))\n       (not (string-contains text #\\so))\n       (not (string",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) true]\n      [(char=? (first text) #\\0) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\1) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\2) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\3) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\4) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\5) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\6) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\7) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\8) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\9) (check-integer-helper (rest text))]\n      [else false]))\n  (check-integer-helper text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (let ([first (string-ref text 0)])\n        (if (or (char=? first #\\0)\n                (char=? first #\\1)\n                (char=? first #\\2)\n                (char=? first #\\3)\n                (char=? first #\\4)\n                (char=? first #\\5)\n                (char=? first #\\6)\n                (char=? first #\\7)\n                (char=? first #\\8)\n                (char=? first #\\9))\n            (check_integer (substring text 1))\n            #f))))\n",
    "  (let ((len (string-length text)))\n    (if (= len 0)\n        #f\n        (let ((first-char (string-ref text 0)))\n          (if (or (= first-char #\\-) (= first-char #\\+))\n              (if (= len 1)\n                  #f\n                  (check-integer-helper (substring text 1) #t))\n              (check-integer-helper text #f))))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text \".\")\n          #f\n          (if (string-contains text \"e\")\n              #f\n              (if (string-contains text \"E\")\n                  #f\n                  (if (string-contains text \" \")\n                      #f\n                      (if (string-contains text \"-\")\n                          (if (string-contains text \"+\")\n                              #f\n                              (if (string-contains text \"--\")\n                                  #f\n                                  (if (string-contains text \"++\")\n                                      #f\n                                      (if (string-contains text \"-+\")\n                                          #f\n                                          (if (string-contains text \"+-\")\n                                              #f\n                                              (if (string-contains text \"-+-\")\n                                                  #f\n                                                  (if (string-contains text \"++-\")\n                                                      #f\n                                                      (if (string-contains text \"--+\")\n                                                          #f\n                                                          (if (string-contains text \"+--\")\n                                                              #f\n                                                              (if (string-contains text \"-+-\")\n                                                                  #f\n                                                                  (if (string-contains text \"-+-\")\n                                                                      #f\n                                                                      (if (string-contains text \"-+-\")\n                                                                          #f\n                                                                          (if (string-contains text \"-+-\")\n                                                                              #f\n                                                                              (if (string-contains text \"-+-\")\n                                                                                  #f\n                                                                                  (if (string-contains text \"-+-\")\n                                                                                      #f\n                                                                                      (if (string-contains text \"-+-\")\n                                                                                          #f\n                                                                                          (if (string-contains text \"-+-\")\n                                                                                              #f\n                                                                                              (if (string-contains text \"-+-\")\n                                                                                ",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\x7f))\n       (not (string-contains text #\\x1b))\n       (not (string-contains text #\\x08))\n       (not (string-contains text #\\x7f))\n       (not (string-contains text #\\x0d))\n       (not (string-contains text #\\x20))\n       (not (string-contains text #\\x09))\n       (not (string-contains text #\\x0b))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (",
    "  (define (check-integer-helper text)\n    (if (empty? text)\n        #t\n        (if (char-numeric? (first text))\n            (check-integer-helper (rest text))\n            #f)))\n  (if (empty? text)\n      #f\n      (check-integer-helper text)))\n",
    "  (let ((text-length (string-length text)))\n    (if (and (not (string-empty? text))\n             (not (string-contains text #\\.))\n             (not (string-contains text #\\e))\n             (not (string-contains text #\\E))\n             (not (string-contains text #\\+))\n             (not (string-contains text #\\-))\n             (not (string-contains text #\\,))\n             (not (string-contains text #\\space))\n             (not (string-contains text #\\tab))\n             (not (string-contains text #\\newline))\n             (not (string-contains text #\\return))\n             (not (string-contains text #\\backspace))\n             (not (string-contains text #\\rubout))\n             (not (string-contains text #\\page))\n             (not (string-contains text #\\escape))\n             (not (string-contains text #\\delete))\n             (not (string-contains text #\\nul))\n             (not (string-contains text #\\alarm))\n             (not (string-contains text #\\backspace))\n             (not (string-contains text #\\rubout))\n             (not (string-contains text #\\vtab))\n             (not (string-contains text #\\formfeed))\n             (not (string-contains text #\\linefeed))\n             (not (string-contains text #\\return))\n             (not (string-contains text #\\tab))\n             (not (string-contains text #\\space))\n             (not (string-contains text #\\delete))\n             (not (string-contains text #\\escape))\n             (not (string-contains text #\\nul))\n             (not (string-contains text #\\alarm))\n             (not (string-contains text #\\backspace))\n             (not (string-contains text #\\rubout))\n             (not (string-contains text #\\vtab))\n             (not (string-contains text #\\formfeed))\n             (not (string",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backslash))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text #\\vt))\n       (not (string-contains text #\\ff))\n       (not (string-contains text #\\cr",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) #t]\n      [(char-numeric? (first text)) (check-integer-helper (rest text))]\n      [else #f]))\n  (check-integer-helper text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\g))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\k))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\m))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\q))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\u))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\y))\n       (not (string-contains text #\\z))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\D))",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text 1)))\n       (not (char-numeric? (string-ref text 2)))\n       (not (char-numeric? (string-ref text 3)))\n       (not (char-numeric? (string-ref text 4)))\n       (not (char-numeric? (string-ref text 5)))\n       (not (char-numeric? (string-ref text 6)))\n       (not (char-numeric? (string-ref text 7)))\n       (not (char-numeric? (string-ref text 8)))\n       (not (char-numeric? (string-ref text 9)))\n       (not (char-numeric? (string-ref text 10)))\n       (not (char-numeric? (string-ref text 11)))\n       (not (char-numeric? (string-ref text 12)))\n       (not (char-numeric? (string-ref text 13)))\n       (not (char-numeric? (string-ref text 14)))\n       (not (char-numeric? (string-ref text 15)))\n       (not (char-numeric? (string-ref text 16)))\n       (not (char-numeric? (string-ref text 17)))\n       (not (char-numeric? (string-ref text 18)))\n       (not (char-numeric? (string-ref text 19)))\n       (not (char-numeric? (string-ref text 20)))\n       (not (char-numeric? (string-ref text 21)))\n       (not (char-numeric? (string-ref text 22)))\n       (not (char-numeric? (string-ref text 23)))\n       (not (char-numeric? (string-ref text 24)))\n       (not (char-numeric? (string-ref text 25)))\n       (not (char-numeric? (string-ref text 26)))\n       (not (char-numeric? (string-ref text 27)))\n       (not (char-numeric? (string-ref text 28)))\n       (not (char-n",
    "  (let ((n (string->number text)))\n    (and (number? n)\n         (integer? n))))\n",
    "  (and (string? text)\n       (not (null? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\space))\n       (not (string-contains text",
    "  (let ((integer? (regexp-match #rx\"^[+-]?[0-9]+$\" text)))\n    (if integer?\n        (string->number text)\n        (error \"Not an integer\"))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (let ([text (string-&gt;number text)])\n    (and (number? text)\n         (integer? text))))\n",
    "  (let ([text (string->number text)])\n    (if (number? text)\n        (displayln \"It is an integer\")\n        (displayln \"It is not an integer\"))))\n",
    "  (let ([num (string->number text)])\n    (and (number? num)\n         (= (number->string num) text))))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\\\))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\g))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\k))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\m))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\q))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\u))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\y))",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))))\n</code>\nI'm sure there's a better way to do this.\n\n\nA:\n\nYou can use <code>string-&gt;number</code> to convert a string to a number, and then check if the result is an integer:\n<code>(define (check-integer text)\n  (and (string? text)\n       (integer? (string-&gt;number text))))\n</code>\n",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;void&gt;\n  arguments...:\n   #&lt;void&gt;\n</code>\nI am not sure what is wrong with my code.\n\n\nA:\n\n<code>string-&gt;number</code> returns <code>#&lt;void&gt;</code> when the string is not a number. You can use <code>string-&gt;number/s</code> instead, which returns <code>#f</code> in that case.\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (string-&gt;number text)]))\n",
    "  (and (string? text)\n       (not (null? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\u))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text #\\vt))\n       (not (string-contains text #\\ff))\n       (not (string-contains text #\\cr))\n       (not (string-contains text #\\so))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\g))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\k))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\m))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\q))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\u))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\x))\n       (",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\null))))\n",
    "  (regexp-match? #rx\"^[-+]?[0-9]+$\" text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (string-&gt;number text)]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string-contains \"0123456789\" (substring text 0 1))\n     (check_integer (substring text 1 (string-length text)))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\nbsp))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\del))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\eof))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (number? (string->number text))]))\n",
    "  (and (string? text)\n       (regexp-match #rx\"^[-+]?[0-9]+$\" text)))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\line",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [(string-contains text #\\+) #f]\n    [(string-contains text #\\-) #f]\n    [else #t]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\return",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)))\n       (not (member (string-ref text 0) '(#\\A #\\B #\\C #\\D #\\E #\\F #\\G #\\H #\\I #\\J #\\K #\\L #\\M #\\N #\\O #\\P #\\Q #\\R #\\S #\\T #\\U #\\V #\\W #\\X #\\Y #\\Z)))\n       (not (member (string-ref text 0) '(#\\! #\\@ #\\# #\\$ #\\% #\\^ #\\& #\\* #\\( #\\) #\\_ #\\+ #\\= #\\{ #\\} #\\[ #\\] #\\| #\\\\ #\\: #\\; #\\\" #\\' #\\< #\\> #\\? #\\/)))\n       (not (member (string-ref text 0) '(#\\~ #\\`)))\n       (not (member (string-ref text 0) '(#\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #\\  #",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\:))\n       (not (string-contains text #\\;))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\())\n       (not (string-contains text #\\)))\n       (not (string-contains text #\\[))\n       (not (string-contains text #\\]))\n       (not (string-contains text #\\{))\n       (not (string-contains text #\\}))\n       (not (string-contains text #\\|))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\/))\n       (not (string-contains text #\\?))\n       (not (string-contains text #\\<))\n       (not (string-contains text #\\>))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\'))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\~))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n",
    "  (let ([text (string-&gt;number text)])\n    (and (number? text)\n         (integer? text))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (define (is-integer? text)\n    (and (not (empty? text))\n         (not (char-numeric? (string-ref text 0)))\n         (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n  (is-integer? text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? text \"0\") #t]\n    [(string=? text \"-0\") #t]\n    [(string=? text \"+0\") #t]\n    [(string=? text \"1\") #t]\n    [(string=? text \"-1\") #t]\n    [(string=? text \"+1\") #t]\n    [(string=? text \"2\") #t]\n    [(string=? text \"-2\") #t]\n    [(string=? text \"+2\") #t]\n    [(string=? text \"3\") #t]\n    [(string=? text \"-3\") #t]\n    [(string=? text \"+3\") #t]\n    [(string=? text \"4\") #t]\n    [(string=? text \"-4\") #t]\n    [(string=? text \"+4\") #t]\n    [(string=? text \"5\") #t]\n    [(string=? text \"-5\") #t]\n    [(string=? text \"+5\") #t]\n    [(string=? text \"6\") #t]\n    [(string=? text \"-6\") #t]\n    [(string=? text \"+6\") #t]\n    [(string=? text \"7\") #t]\n    [(string=? text \"-7\") #t]\n    [(string=? text \"+7\") #t]\n    [(string=? text \"8\") #t]\n    [(string=? text \"-8\") #t]\n    [(string=? text \"+8\") #t]\n    [(string=? text \"9\") #t]\n    [(string=? text \"-9\") #t]\n    [(string=? text \"+9\") #t]\n    [(string=? text \"10\") #t]\n    [(string=? text \"-10\") #t]\n    [(string=? text \"+10\") #t]\n    [(string=? text \"11\") #t]\n    [(string=? text \"-11\") #t]\n    [(string=? text \"+11\") #t]\n    [(string=? text \"12\") #t]\n    [(string=? text \"-12\") #t]\n   ",
    "  (and (not (string-empty? text))\n       (not (string-contains text \".\"))\n       (not (string-contains text \"-\"))\n       (not (string-contains text \"+\"))\n       (not (string-contains text \"e\"))\n       (not (string-contains text \"E\"))))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (define (check-integer-helper text)\n    (if (string-empty? text)\n        #t\n        (if (char-numeric? (string-ref text 0))\n            (check-integer-helper (substring text 1))\n            #f)))\n  (if (string-empty? text)\n      #f\n      (check-integer-helper text)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else #t]))\n",
    "  (let ([text (string-&gt;number text)])\n    (if (integer? text)\n        (printf \"~a is an integer.~n\" text)\n        (printf \"~a is not an integer.~n\" text))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (if (string-&gt;number text)\n      #t\n      #f))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (let ([text (string-&gt;number text)])\n    (if (integer? text)\n        (printf \"~a is an integer.~n\" text)\n        (printf \"~a is not an integer.~n\" text))))\n</code>\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (first text)))\n       (check-integer (rest text))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string-integer? text)\n      (displayln \"The string represents an integer.\")\n      (displayln \"The string does not represent an integer.\")))\n",
    "  (define (check_integer_helper text)\n    (if (string-empty? text)\n        #t\n        (if (char-numeric? (string-ref text 0))\n            (check_integer_helper (substring text 1))\n            #f)))\n  (if (string-empty? text)\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer_helper (substring text 1))\n          #f)))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string",
    "  (define (check-integer-helper text)\n    (if (empty? text)\n        #t\n        (if (char-numeric? (first text))\n            (check-integer-helper (rest text))\n            #f)))\n  (if (empty? text)\n      #f\n      (check-integer-helper text)))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\M))",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (let ((len (string-length text)))\n    (if (string=? text \"\")\n        #f\n        (if (string=? (substring text 0 1) \"-\")\n            (if (string=? (substring text 1 len) \"\")\n                #f\n                (check_integer (substring text 1 len)))\n            (if (string=? (substring text 0 1) \"+\")\n                (if (string=? (substring text 1 len) \"\")\n                    #f\n                    (check_integer (substring text 1 len)))\n                (if (string=? (substring text 0 1) \"0\")\n                    (if (string=? (substring text 1 len) \"\")\n                        #t\n                        (check_integer (substring text 1 len)))\n                    (if (string=? (substring text 0 1) \"1\")\n                        (if (string=? (substring text 1 len) \"\")\n                            #t\n                            (check_integer (substring text 1 len)))\n                        (if (string=? (substring text 0 1) \"2\")\n                            (if (string=? (substring text 1 len) \"\")\n                                #t\n                                (check_integer (substring text 1 len)))\n                            (if (string=? (substring text 0 1) \"3\")\n                                (if (string=? (substring text 1 len) \"\")\n                                    #t\n                                    (check_integer (substring text 1 len)))\n                                (if (string=? (substring text 0 1) \"4\")\n                                    (if (string=? (substring text 1 len) \"\")\n                                        #t\n                                        (check_integer (substring text 1 len)))\n                                    (if (string=? (substring text 0 1) \"5\")\n                                        (if (string=? (substring text 1 len) \"\")\n                                            #t\n                                            (check_integer (substring text 1 len)))\n                                        (if (string=? (substring text 0 1) \"6\")\n                                            (if (string=? (substring text 1 len) \"\")\n                                                #t\n                                                (check_integer",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\+))",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\",
    "  (and (string? text)\n       (not (string-contains text \".\"))\n       (not (string-contains text \"e\"))\n       (not (string-contains text \"E\"))\n       (not (string-contains text \"-\"))\n       (not (string-contains text \"+\"))\n       (not (string-contains text \" \"))\n       (not (string-contains text \",\"))\n       (not (string-contains text \":\"))\n       (not (string-contains text \";\"))\n       (not (string-contains text \"!\"))\n       (not (string-contains text \"?\"))\n       (not (string-contains text \"(\"))\n       (not (string-contains text \")\"))\n       (not (string-contains text \"[\"))\n       (not (string-contains text \"]\"))\n       (not (string-contains text \"{\"))\n       (not (string-contains text \"}\"))\n       (not (string-contains text \"&\"))\n       (not (string-contains text \"|\"))\n       (not (string-contains text \"^\"))\n       (not (string-contains text \"~\"))\n       (not (string-contains text \"*\"))\n       (not (string-contains text \"/\"))\n       (not (string-contains text \"%\"))\n       (not (string-contains text \"=\"))\n       (not (string-contains text \"<\"))\n       (not (string-contains text \">\"))\n       (not (string-contains text \"\\\\\"))\n       (not (string-contains text \"`\"))\n       (not (string-contains text \"\\\"\"))\n       (not (string-contains text \"'\"))\n       (not (string-contains text \".\"))\n       (not (string-contains text \",\"))\n       (not (string-contains text \";\"))\n       (not (string-contains text \":\"))\n       (not (string-contains text \"!\"))\n       (not (string-contains text \"?\"))\n       (not (string-contains text \"(\"))\n       (not (string-contains text \")\"))\n      ",
    "  (and (string? text)\n       (not (empty? text))\n       (not (regexp-match #rx\"^[0-9]+$\" text))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string-&gt;number text)\n      \"It's an integer\"\n      \"It's not an integer\"))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\N))\n       (not (",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1 (string-length text)))]\n    [(char-numeric? (string-ref text 0))\n     (check_integer (substring text 1 (string-length text)))]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\u))\n       (not (string-contains text #\\U))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\g))\n       (not (string-contains text #\\G))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\k))\n       (not (string-contains text #\\K))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\L))\n       (not (string-contains text #\\m))\n       (not (string-contains text #\\M))\n       (not (string-contains text #\\n))",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (let ((len (string-length text)))\n    (if (or (equal? len 0)\n            (equal? (string-ref text 0) #\\-)\n            (equal? (string-ref text 0) #\\+))\n        #f\n        (let loop ((i 1))\n          (if (= i len)\n              #t\n              (if (char-numeric? (string-ref text i))\n                  (loop (+ i 1))\n                  #f))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (define (check-integer-helper text)\n    (if (string-empty? text)\n        #t\n        (if (char-numeric? (string-ref text 0))\n            (check-integer-helper (substring text 1))\n            #f)))\n  (if (string-empty? text)\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check-integer-helper (substring text 1))\n          #f)))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [else (string-&gt;number text)]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (define (check-integer-helper text)\n    (if (string-empty? text)\n        #t\n        (if (char-numeric? (string-ref text 0))\n            (check-integer-helper (substring text 1))\n            #f)))\n  (if (string-empty? text)\n      #f\n      (check-integer-helper text)))\n",
    "  (if (string-integer? text)\n      (displayln \"The string represents an integer\")\n      (displayln \"The string does not represent an integer\")))\n",
    "  (let ((len (string-length text)))\n    (cond\n      ((= len 0) #f)\n      ((= len 1) (char-numeric? (string-ref text 0)))\n      ((char-numeric? (string-ref text 0))\n       (check_integer (substring text 1)))\n      (else #f))))\n",
    "  (if (string-integer? text)\n      (string->number text)\n      (displayln \"Not an integer\")))\n",
    "  (define (helper text)\n    (if (empty? text)\n        #t\n        (and (char-numeric? (first text))\n             (helper (rest text)))))\n  (if (empty? text)\n      #f\n      (if (char-numeric? (first text))\n          (helper (rest text))\n          #f)))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (and (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\y))\n       (not (string-contains text #\\Y))\n       (not (string-contains text #\\z))\n       (not (string-contains text #\\Z))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\()))\n       (not (string-contains text #\\)))\n",
    "  (let ([text (string-&gt;number text)])\n    (if (number? text)\n        (printf \"~a is an integer.\\n\" text)\n        (printf \"~a is not an integer.\\n\" text))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (and (not (null? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (if (string-&gt;number text)\n      (display \"It's an integer\")\n      (display \"It's not an integer\")))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (and (string? text)\n       (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\N))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\g))\n       (not (string-contains text #\\G))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\k))\n       (not (string-contains text #\\K))\n       (not (string-contains text #\\l))\n       (not (string-contains text #\\L))\n       (not (string-contains text #\\m))\n       (not (string-contains text #\\M))\n       (",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) #t]\n      [(char-numeric? (first text)) (check-integer-helper (rest text))]\n      [else #f]))\n  (check-integer-helper text))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\-) #t]\n    [(string-contains text #\\+) #t]\n    [else (string-integer? text)]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string-integer? text)\n      (string->number text)\n      (error \"Not an integer\")))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (null? text))\n       (or (char=? (string-ref text 0) #\\+)\n           (char=? (string-ref text 0) #\\-))\n       (andmap char-numeric? (string-&gt;list (substring text 1)))))\n</code>\n",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (if (string=? text \"\")\n      #f\n      (let ([first-char (substring text 0 1)])\n        (if (or (string=? first-char \"-\")\n                (string=? first-char \"+\"))\n            (check_integer (substring text 1))\n            (if (string-ci=? first-char \"0\")\n                (if (string=? (substring text 1) \"\")\n                    #t\n                    #f)\n                (if (string-ci=? first-char \"1\")\n                    (check_integer (substring text 1))\n                    (if (string-ci=? first-char \"2\")\n                        (check_integer (substring text 1))\n                        (if (string-ci=? first-char \"3\")\n                            (check_integer (substring text 1))\n                            (if (string-ci=? first-char \"4\")\n                                (check_integer (substring text 1))\n                                (if (string-ci=? first-char \"5\")\n                                    (check_integer (substring text 1))\n                                    (if (string-ci=? first-char \"6\")\n                                        (check_integer (substring text 1))\n                                        (if (string-ci=? first-char \"7\")\n                                            (check_integer (substring text 1))\n                                            (if (string-ci=? first-char \"8\")\n                                                (check_integer (substring text 1))\n                                                (if (string-ci=? first-char \"9\")\n                                                    (check_integer (substring text 1))\n                                                    #f)))))))))))))))\n",
    "  (and (string? text)\n       (not (regexp-match #rx\"^[0-9]+$\" text))))\n",
    "  (define (check-integer-helper text)\n    (cond ((null? text) #t)\n          ((char-numeric? (car text)) (check-integer-helper (cdr text)))\n          (else #f)))\n  (check-integer-helper (string->list text)))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (member (string-ref text 0) '(#\\+ #\\-)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #\\3 #\\4 #\\5 #\\6 #\\7 #\\8 #\\9)))\n       (not (member (string-ref text 0) '(#\\0 #\\1 #\\2 #",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-&gt;number text) #t]\n    [else #f]))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (regexp-match #rx\"^[+-]?[0-9]+$\" text))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  (if (string-contains text #\\+)\n                      #f\n                      (if (string-contains text #\\-)\n                          #f\n                          #t)))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text #\\.)\n          #f\n          (if (string-contains text #\\e)\n              #f\n              (if (string-contains text #\\E)\n                  #f\n                  (if (string-contains text #\\+)\n                      #f\n                      (if (string-contains text #\\-)\n                          #f\n                          #t)))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (sub1 (string-length text)))))))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))))\n",
    "  (cond\n    [(string=? text \"\") #t]\n    [(string=? text \"-\") #t]\n    [(string=? text \"+\") #t]\n    [(string=? text \"0\") #t]\n    [(string=? text \"1\") #t]\n    [(string=? text \"2\") #t]\n    [(string=? text \"3\") #t]\n    [(string=? text \"4\") #t]\n    [(string=? text \"5\") #t]\n    [(string=? text \"6\") #t]\n    [(string=? text \"7\") #t]\n    [(string=? text \"8\") #t]\n    [(string=? text \"9\") #t]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (and (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (define (check-integer-helper text)\n    (if (empty? text)\n        #t\n        (if (char-numeric? (first text))\n            (check-integer-helper (rest text))\n            #f)))\n  (if (empty? text)\n      #f\n      (if (char-numeric? (first text))\n          (check-integer-helper (rest text))\n          #f)))\n",
    "  (and (not (null? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (first text)))\n       (check_integer (rest text))))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\_))\n       (not (string-contains text #\\$))\n       (not (string-contains text #\\@))\n       (not (string-contains text #\\#))\n       (not (string-contains text #\\%))\n       (not (string-contains text #\\^))\n       (not (string-contains text #\\&))\n       (not (string-contains text #\\*))\n       (not (string-contains text #\\!))\n       (not (string-contains text #\\?))\n       (not (string-contains text #\\~))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\))\n       (not (string-contains text #\\())\n       (not (string-contains text #\\[))\n       (not (string-contains text #\\]))\n       (not (string-contains text #\\{))\n       (not (string-contains text #\\}))\n       (not (string-contains text #\\|))\n       (not (string-contains text #\\\\))\n       (not (string-contains text #\\/))\n       (not (string-contains text #\\:))\n       (not (string-contains text #\\;))\n       (not (string-contains text #\\\"))\n       (not (string-contains text #\\'))\n       (not (string-contains text #\\<))\n       (not (string-contains text #\\>))\n       (not (string-contains text #\\`))\n       (not (string-contains text #\\ ))\n       (not (string-contains text #\\",
    "  (let ((len (string-length text)))\n    (if (and (> len 0)\n             (string-ref text 0)\n             (string-ref text (- len 1)))\n        #t\n        #f)))\n",
    "  (let ([x (string->number text)])\n    (if (and (integer? x) (not (nan? x)))\n        #t\n        #f)))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (not (string-contains text #\\.))))\n",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([i (in-range (string-length text))])\n         (char-numeric? (string-ref text i)))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (char-numeric? (string-ref text 0))\n          (check_integer (substring text 1))\n          #f)))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (and (not (string-empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n"
  ]
}