{
  "name": "mbpp_113_check_integer",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if a string represents an integer or not.\n(define (check_integer text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_integer))\n    (check-equal? (candidate \"python\") #f)\n    (check-equal? (candidate \"1\") #t)\n    (check-equal? (candidate \"12345\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (string-&gt;number text)\n      #t\n      #f))\n",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string-contains text #\\.) #f]\n    [(string-contains text #\\e) #f]\n    [(string-contains text #\\E) #f]\n    [(string-contains text #\\+) #f]\n    [(string-contains text #\\-) #f]\n    [else #t]))\n",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\i))\n       (not (string-contains text #\\I))\n       (not (string-contains text #\\j))\n       (not (string-contains text #\\J))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\+))\n       (not",
    "  (if (string-&gt;number text)\n      (display \"It is an integer\")\n      (display \"It is not an integer\")))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text #\\vt))\n       (not (string-contains text #\\ff))\n       (not (string-contains text #\\cr))\n       (not (string-contains text #\\so))\n       (not (string",
    "  (and (not (empty? text))\n       (not (char-numeric? (string-ref text 0)))\n       (not (char-numeric? (string-ref text (- (string-length text) 1))))\n       (for/and ([c (in-string text)])\n         (char-numeric? c))))\n",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) true]\n      [(char=? (first text) #\\0) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\1) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\2) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\3) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\4) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\5) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\6) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\7) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\8) (check-integer-helper (rest text))]\n      [(char=? (first text) #\\9) (check-integer-helper (rest text))]\n      [else false]))\n  (check-integer-helper text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\")\n     (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\")\n     (check_integer (substring text 1))]\n    [else #f]))\n",
    "  (if (string=? text \"\")\n      #f\n      (let ([first (string-ref text 0)])\n        (if (or (char=? first #\\0)\n                (char=? first #\\1)\n                (char=? first #\\2)\n                (char=? first #\\3)\n                (char=? first #\\4)\n                (char=? first #\\5)\n                (char=? first #\\6)\n                (char=? first #\\7)\n                (char=? first #\\8)\n                (char=? first #\\9))\n            (check_integer (substring text 1))\n            #f))))\n",
    "  (let ((len (string-length text)))\n    (if (= len 0)\n        #f\n        (let ((first-char (string-ref text 0)))\n          (if (or (= first-char #\\-) (= first-char #\\+))\n              (if (= len 1)\n                  #f\n                  (check-integer-helper (substring text 1) #t))\n              (check-integer-helper text #f))))))\n",
    "  (if (string=? text \"\")\n      #f\n      (if (string-contains text \".\")\n          #f\n          (if (string-contains text \"e\")\n              #f\n              (if (string-contains text \"E\")\n                  #f\n                  (if (string-contains text \" \")\n                      #f\n                      (if (string-contains text \"-\")\n                          (if (string-contains text \"+\")\n                              #f\n                              (if (string-contains text \"--\")\n                                  #f\n                                  (if (string-contains text \"++\")\n                                      #f\n                                      (if (string-contains text \"-+\")\n                                          #f\n                                          (if (string-contains text \"+-\")\n                                              #f\n                                              (if (string-contains text \"-+-\")\n                                                  #f\n                                                  (if (string-contains text \"++-\")\n                                                      #f\n                                                      (if (string-contains text \"--+\")\n                                                          #f\n                                                          (if (string-contains text \"+--\")\n                                                              #f\n                                                              (if (string-contains text \"-+-\")\n                                                                  #f\n                                                                  (if (string-contains text \"-+-\")\n                                                                      #f\n                                                                      (if (string-contains text \"-+-\")\n                                                                          #f\n                                                                          (if (string-contains text \"-+-\")\n                                                                              #f\n                                                                              (if (string-contains text \"-+-\")\n                                                                                  #f\n                                                                                  (if (string-contains text \"-+-\")\n                                                                                      #f\n                                                                                      (if (string-contains text \"-+-\")\n                                                                                          #f\n                                                                                          (if (string-contains text \"-+-\")\n                                                                                              #f\n                                                                                              (if (string-contains text \"-+-\")\n                                                                                ",
    "  (and (not (string=? text \"\"))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\esc))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\x7f))\n       (not (string-contains text #\\x1b))\n       (not (string-contains text #\\x08))\n       (not (string-contains text #\\x7f))\n       (not (string-contains text #\\x0d))\n       (not (string-contains text #\\x20))\n       (not (string-contains text #\\x09))\n       (not (string-contains text #\\x0b))\n",
    "  (and (string? text)\n       (not (empty? text))\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\x))\n       (not (string-contains text #\\X))\n       (not (string-contains text #\\o))\n       (not (string-contains text #\\O))\n       (not (string-contains text #\\b))\n       (not (string-contains text #\\B))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\A))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\F))\n       (not (string-contains text #\\d))\n       (not (string-contains text #\\D))\n       (not (string-contains text #\\s))\n       (not (string-contains text #\\S))\n       (not (string-contains text #\\c))\n       (not (string-contains text #\\C))\n       (not (string-contains text #\\w))\n       (not (string-contains text #\\W))\n       (not (string-contains text #\\p))\n       (not (string-contains text #\\P))\n       (not (string-contains text #\\h))\n       (not (string-contains text #\\H))\n       (not (string-contains text #\\v))\n       (not (string-contains text #\\V))\n       (not (string-contains text #\\n))\n       (not (string-contains text #\\t))\n       (not (string-contains text #\\r))\n       (not (string-contains text #\\f))\n       (not (string-contains text #\\a))\n       (not (string-contains text #\\e))\n       (not (",
    "  (define (check-integer-helper text)\n    (if (empty? text)\n        #t\n        (if (char-numeric? (first text))\n            (check-integer-helper (rest text))\n            #f)))\n  (if (empty? text)\n      #f\n      (check-integer-helper text)))\n",
    "  (let ((text-length (string-length text)))\n    (if (and (not (string-empty? text))\n             (not (string-contains text #\\.))\n             (not (string-contains text #\\e))\n             (not (string-contains text #\\E))\n             (not (string-contains text #\\+))\n             (not (string-contains text #\\-))\n             (not (string-contains text #\\,))\n             (not (string-contains text #\\space))\n             (not (string-contains text #\\tab))\n             (not (string-contains text #\\newline))\n             (not (string-contains text #\\return))\n             (not (string-contains text #\\backspace))\n             (not (string-contains text #\\rubout))\n             (not (string-contains text #\\page))\n             (not (string-contains text #\\escape))\n             (not (string-contains text #\\delete))\n             (not (string-contains text #\\nul))\n             (not (string-contains text #\\alarm))\n             (not (string-contains text #\\backspace))\n             (not (string-contains text #\\rubout))\n             (not (string-contains text #\\vtab))\n             (not (string-contains text #\\formfeed))\n             (not (string-contains text #\\linefeed))\n             (not (string-contains text #\\return))\n             (not (string-contains text #\\tab))\n             (not (string-contains text #\\space))\n             (not (string-contains text #\\delete))\n             (not (string-contains text #\\escape))\n             (not (string-contains text #\\nul))\n             (not (string-contains text #\\alarm))\n             (not (string-contains text #\\backspace))\n             (not (string-contains text #\\rubout))\n             (not (string-contains text #\\vtab))\n             (not (string-contains text #\\formfeed))\n             (not (string",
    "  (and (string? text)\n       (not (string-contains text #\\.))\n       (not (string-contains text #\\e))\n       (not (string-contains text #\\E))\n       (not (string-contains text #\\+))\n       (not (string-contains text #\\-))\n       (not (string-contains text #\\,))\n       (not (string-contains text #\\space))\n       (not (string-contains text #\\tab))\n       (not (string-contains text #\\newline))\n       (not (string-contains text #\\return))\n       (not (string-contains text #\\linefeed))\n       (not (string-contains text #\\page))\n       (not (string-contains text #\\backspace))\n       (not (string-contains text #\\rubout))\n       (not (string-contains text #\\escape))\n       (not (string-contains text #\\delete))\n       (not (string-contains text #\\null))\n       (not (string-contains text #\\alarm))\n       (not (string-contains text #\\backslash))\n       (not (string-contains text #\\formfeed))\n       (not (string-contains text #\\vtab))\n       (not (string-contains text #\\nul))\n       (not (string-contains text #\\soh))\n       (not (string-contains text #\\stx))\n       (not (string-contains text #\\etx))\n       (not (string-contains text #\\eot))\n       (not (string-contains text #\\enq))\n       (not (string-contains text #\\ack))\n       (not (string-contains text #\\bel))\n       (not (string-contains text #\\bs))\n       (not (string-contains text #\\ht))\n       (not (string-contains text #\\lf))\n       (not (string-contains text #\\vt))\n       (not (string-contains text #\\ff))\n       (not (string-contains text #\\cr",
    "  (define (check-integer-helper text)\n    (cond\n      [(empty? text) #t]\n      [(char-numeric? (first text)) (check-integer-helper (rest text))]\n      [else #f]))\n  (check-integer-helper text))\n",
    "  (cond\n    [(string=? text \"\") #f]\n    [(string=? (substring text 0 1) \"-\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"+\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"0\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"1\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"2\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"3\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"4\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"5\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"6\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"7\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"8\") (check_integer (substring text 1))]\n    [(string=? (substring text 0 1) \"9\") (check_integer (substring text 1))]\n    [else #f]))\n"
  ]
}