{
  "name": "mbpp_252_convert",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to convert complex numbers to polar coordinates.\n(define (convert numbers)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate convert))\n    (check-equal? (candidate 1) (list 1.0 0.0))\n    (check-equal? (candidate 4) (list 4.0 0.0))\n    (check-equal? (candidate 5) (list 5.0 0.0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (convert-helper number)\n    (define (polar-to-cartesian r theta)\n      (define (real-part r theta)\n        (* r (cos theta)))\n      (define (imaginary-part r theta)\n        (* r (sin theta)))\n      (list (real-part r theta) (imaginary-part r theta)))\n    (define (cartesian-to-polar x y)\n      (define (magnitude x y)\n        (sqrt (+ (* x x) (* y y))))\n      (define (angle x y)\n        (atan y x))\n      (list (magnitude x y) (angle x y)))\n    (cond ((number? number) (cartesian-to-polar number 0))\n          ((list? number) (cartesian-to-polar (car number) (cadr number)))\n          ((complex? number) (cartesian-to-polar (real-part number) (imag-part number)))\n          ((polar? number) number)\n          (else (error \"Invalid input\"))))\n  (if (list? numbers)\n      (map convert-helper numbers)\n      (convert-helper numbers)))\n",
    "  (let ([real (car numbers)]\n        [imag (cdr numbers)])\n    (list (sqrt (+ (* real real) (* imag imag)))\n          (atan real imag))))\n",
    "  (define (convert-helper number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (define (angle x) (atan (imag-part x) (real-part x)))\n    (cons (abs number) (angle number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper number)\n    (define (polar-coordinates x y)\n      (define (square x) (* x x))\n      (define (sqrt x) (expt x 0.5))\n      (define (polar-coordinates-helper x y)\n        (define (angle x y)\n          (define (angle-helper x y)\n            (cond ((= x 0) (if (&gt; y 0) (/ pi 2) (- (/ pi 2))))\n                  ((&gt; x 0) (if (&gt; y 0) (/ pi 2) (- (/ pi 2))))\n                  ((&lt; x 0) (if (&gt; y 0) (/ pi 2) (- (/ pi 2))))))\n          (angle-helper x y))\n        (define (radius x y)\n          (define (radius-helper x y)\n            (sqrt (+ (square x) (square y))))\n          (radius-helper x y))\n        (list (radius x y) (angle x y)))\n      (polar-coordinates-helper x y))\n    (polar-coordinates (real-part number) (imag-part number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (angle x) (atan (/ (imag-part number) (real-part number))))\n    (list (abs number) (angle number)))\n  (map convert-helper numbers))\n",
    "  (let ([x (car numbers)]\n        [y (cadr numbers)])\n    (list (sqrt (+ (* x x) (* y y)))\n          (atan y x))))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (define (make-from-mag-ang r a) (make-polar r a))\n    (make-from-mag-ang (abs number) (phase number)))\n  (map convert-one numbers))\n",
    "  (let ([x (real-part numbers)]\n        [y (imag-part numbers)])\n    (list (sqrt (+ (* x x) (* y y)))\n          (atan y x))))\n",
    "  (define (convert-helper number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (define (angle x) (atan (imag-part x) (real-part x)))\n    (list (abs number) (angle number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (angle x) (atan (/ (imag-part number) (real-part number))))\n    (list (abs number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (define (get-angle number)\n      (cond [(> (real-part number) 0)\n             (atan (imag-part number) (real-part number))]\n            [(< (real-part number) 0)\n             (+ (atan (imag-part number) (real-part number)) (/ pi 2))]\n            [(> (imag-part number) 0) (/ pi 2)]\n            [(< (imag-part number) 0) (- (/ pi 2))]\n            [else 0]))\n    (define (get-radius number)\n      (sqrt (+ (expt (real-part number) 2) (expt (imag-part number) 2))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (angle x) (atan (/ (imag-part x) (real-part x))))\n    (define (magnitude x) (sqrt (+ (square (real-part x)) (square (imag-part x)))))\n    (list (magnitude number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (let* ([real (real-part number)]\n           [imag (imag-part number)]\n           [r (sqrt (+ (* real real) (* imag imag)))])\n      (list r (atan real imag))))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper number)\n    (define (polar-helper number)\n      (define (polar-helper-helper number)\n        (define (polar-helper-helper-helper number)\n          (define (polar-helper-helper-helper-helper number)\n            (define (polar-helper-helper-helper-helper-helper number)\n              (define (polar-helper-helper-helper-helper-helper-helper number)\n                (define (polar-helper-helper-helper-helper-helper-helper-helper number)\n                  (define (polar-helper-helper-helper-helper-helper-helper-helper-helper number)\n                    (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                      (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                        (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                          (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                            (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                              (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n                                (define (polar-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper number)\n",
    "  (define (convert-helper number)\n    (define (get-angle number)\n      (define (get-angle-helper number)\n        (if (and (not (zero? (imag-part number)))\n                 (not (zero? (real-part number))))\n            (if (and (positive? (imag-part number))\n                     (positive? (real-part number)))\n                (/ (atan (imag-part number) (real-part number))\n                   pi)\n                (/ (atan (imag-part number) (real-part number))\n                   pi))\n            (if (and (positive? (imag-part number))\n                     (negative? (real-part number)))\n                (/ (atan (imag-part number) (real-part number))\n                   pi)\n                (/ (atan (imag-part number) (real-part number))\n                   pi))))\n      (if (and (not (zero? (imag-part number)))\n               (not (zero? (real-part number))))\n          (get-angle-helper number)\n          (if (and (positive? (imag-part number))\n                   (zero? (real-part number)))\n              (/ pi 2)\n              (/ pi 2))))\n    (define (get-radius number)\n      (sqrt (+ (expt (real-part number) 2)\n               (expt (imag-part number) 2))))\n    (list (get-radius number) (get-angle number)))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper num)\n    (define (get-angle num)\n      (if (negative? (imag-part num))\n          (- (angle num))\n          (angle num)))\n    (define (get-radius num)\n      (sqrt (+ (sqr (real-part num))\n               (sqr (imag-part num)))))\n    (list (get-radius num) (get-angle num)))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper number)\n    (define (square n) (* n n))\n    (define (sqrt n) (expt n 0.5))\n    (define (abs n) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (arg n) (atan (/ (imag-part number) (real-part number))))\n    (list (abs n) (arg n)))\n  (map convert-helper numbers))\n",
    "  (define (convert-helper num)\n    (define (get-angle num)\n      (define (get-angle-helper num)\n        (if (and (positive? (real-part num)) (positive? (imag-part num)))\n            (atan (imag-part num) (real-part num))\n            (if (and (positive? (real-part num)) (negative? (imag-part num)))\n                (+ (atan (imag-part num) (real-part num)) (* 2 pi))\n                (if (and (negative? (real-part num)) (negative? (imag-part num)))\n                    (+ (atan (imag-part num) (real-part num)) (* 2 pi))\n                    (if (and (negative? (real-part num)) (positive? (imag-part num)))\n                        (+ (atan (imag-part num) (real-part num)) (* 4 pi)))))))\n      (get-angle-helper num))\n    (define (get-radius num)\n      (sqrt (+ (sqr (real-part num)) (sqr (imag-part num)))))\n    (list (get-radius num) (get-angle num)))\n  (map convert-helper numbers))\n",
    "  (define (convert-one number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number))\n                             (square (imag-part number)))))\n    (define (angle x) (atan (imag-part number) (real-part number)))\n    (cons (abs number) (angle number)))\n  (map convert-one numbers))\n",
    "  (define (convert-helper number)\n    (define (square x) (* x x))\n    (define (sqrt x) (expt x 0.5))\n    (define (abs x) (sqrt (+ (square (real-part number)) (square (imag-part number)))))\n    (define (phase x) (atan (imag-part number) (real-part number)))\n    (list abs phase))\n  (map convert-helper numbers))\n"
  ]
}