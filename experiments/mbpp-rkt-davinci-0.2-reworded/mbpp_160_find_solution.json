{
  "name": "mbpp_160_find_solution",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that returns integers x and y that satisfy ax + by = n as a list, or return #f if no solution exists.\n(define (find_solution a b n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_solution))\n    (check-equal? (candidate 2 3 7) (list 2 1))\n    (check-equal? (candidate 4 2 7) #f)\n    (check-equal? (candidate 1 13 17) (list 4 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x 1) (- y 1)))))\n  (iter 0 n))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter b (- a 1)))\n",
    "  (let loop ((x 0) (y 0))\n    (cond ((= (modulo n a) 0) (list x (/ n a)))\n          ((= (modulo n b) 0) (list (/ n b) y))\n          ((= x b) #f)\n          (else (loop (+ x 1) (- y 1))))))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n</code>\nI'm not sure how to go about this. I've tried to look at the solution, but I'm still not sure how to go about this.\n\n\nA:\n\nThe problem is that you're not using the <code>a</code> and <code>b</code> parameters in the <code>iter</code> procedure.\nHere's a hint:\n<code>(define (find-solution a b n)\n  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (let loop ((x 0) (y 0))\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (loop (+ x 1) y))\n          ((&lt; n (* a x)) (loop (- x 1) (- y 1)))\n          (else #f))))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (let loop ((x 0) (y 0))\n    (cond ((= a (* x n)) (list x y))\n          ((= b (* y n)) (list x y))\n          ((&lt; a (* x n)) #f)\n          ((&lt; b (* y n)) #f)\n          (else (loop (+ x 1) (+ y 1))))))\n</code>\n",
    "  (define (iter a b n x y)\n    (cond ((= n 0) (list x y))\n          ((&lt; n 0) #f)\n          (else (iter a b (- n a) (+ x 1) y))))\n  (iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (#t #f)))\n  (find_solution_iter n 0))\n</code>\nI'm not sure if this is the best way to do it, but it seems to work.\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x a) (+ y b)))))\n  (iter 0 0))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x n) #f)\n          (else (find_solution_iter (+ x 1) (- n (* a x))))))\n  (find_solution_iter 0 n))\n",
    "  (let loop ((x 0) (y 0))\n    (cond ((= (modulo n a) 0) (list x (/ n a)))\n          ((= (modulo n b) 0) (list (/ n b) y))\n          ((&gt; x n) #f)\n          (else (loop (+ x 1) (- y 1))))))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&lt; n (+ (* a x) (* b y))) #f)\n          (else (find-solution-iter a b n (+ x 1) (- y 1)))))\n  (find-solution-iter a b n 0 n))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (if (= (* a x) (+ (* b y) n))\n        (list x y)\n        (if (&gt; x 0)\n            (find_solution_iter (- x 1) (+ y 1))\n            #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&lt; n (+ (* a x) (* b y))) #f)\n          (else (find-solution-iter a b n (+ x 1) (- y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&lt; n (* a x)) #f)\n          (else (find-solution-iter a b n (+ x 1) (- y 1)))))\n  (find-solution-iter a b n 0 0))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&lt; x 0) #f)\n          (else (iter (- x 1) (+ y 1)))))\n  (iter n 0))\n</code>\nI'm not sure how to approach this problem. I'm trying to understand how the iter function works. I know that the first line of the function is the base case, but I'm not sure how it works. I know that the second line is the recursive case, but I'm not sure how it works. I know that the third line is the recursive case, but I'm not sure how it works. \nI'm not sure how to approach this problem. I'm trying to understand how the iter function works. I know that the first line of the function is the base case, but I'm not sure how it works. I know that the second line is the recursive case, but I'm not sure how it works. I know that the third line is the recursive case, but I'm not sure how it works. \nI'm not sure how to approach this problem. I'm trying to understand how the iter function works. I know that the first line of the function is the base case, but I'm not sure how it works. I know that the second line is the recursive case, but I'm not sure how it works. I know that the third line is the recursive case, but I'm not sure how it works. \nI'm not sure how to approach this problem. I'm trying to understand how the iter function works. I know that the first line of the function is the base case, but I'm not sure how it works. I know that the second line is the recursive case, but I'm not sure how it works. I know that the third line is the recursive case, but I'm not sure how it works. \nI'm not sure how to approach this problem. I'm trying to understand how the iter function works. I know that the first line of the function is the base case, but I'm not sure how it works. I know that the second line is the recursive case, but I'm not sure how it works. I know that the third line is the recursive case, but I'm not sure how it works. \nI'm not sure how to approach this problem. I'm",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((= n (+ (* a (+ x 1)) (* b y))) (list (+ x 1) y))\n          ((= n (+ (* a x) (* b (+ y 1)))) (list x (+ y 1)))\n          ((= n (+ (* a (+ x 1)) (* b (+ y 1)))) (list (+ x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n</code>\nI'm not sure how to approach this problem. I'm not sure how to use the <code>iter</code> function to find the solution. I'm not sure how to use the <code>cond</code> function to find the solution. I'm not sure how to use the <code>list</code> function to find the solution. I'm not sure how to use the <code>define</code> function to find the solution. I'm not sure how to use the <code>+</code> function to find the solution. I'm not sure how to use the <code>-</code> function to find the solution. I'm not sure how to use the <code>&lt;</code> function to find the solution. I'm not sure how to use the <code>=</code> function to find the solution. I'm not sure how to use the <code>else</code> function to find the solution. I'm not sure how to use the <code>#f</code> function to find the solution. I'm not sure how to use the <code>a</code> function to find the solution. I'm not sure how to use the <code>b</code> function to find the solution. I'm not sure how to use the <code>n</code> function to find the solution. I'm not sure how to use the <code>x</code> function to find the solution. I'm not sure how to use the <code>y</code> function to find the solution. I'm not sure how to use the <code>find_solution</code> function to find the solution. I'm not sure how to use the <code>iter</code> function to find the solution. I'm not sure how to use the <code>cond</code> function to find the solution. I'm not sure how to use the <code>list</code> function to find the solution. I'm not sure how to use the <code>define</code> function to find the solution. I'm not sure how to use the <code>+</code>",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n</code>\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (if (= n (+ (* a x) (* b y)))\n        (list x y)\n        (if (&lt; n (+ (* a x) (* b y)))\n            #f\n            (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (#t #f)))\n  (iter b (- a 1)))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (cond ((= n 0) (list 0 0))\n        ((= n a) (list 1 0))\n        ((= n b) (list 0 1))\n        ((&lt; n a) (find_solution a (- b 1) (- n a)))\n        ((&lt; n b) (find_solution (- a 1) b (- n b)))\n        (else #f)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (cond ((= n 0) (list 0 0))\n        ((= n 1) (list 1 0))\n        ((= n 2) (list 0 1))\n        (else\n         (let ([x (find_solution a b (- n 1))]\n               [y (find_solution a b (- n 2))])\n           (if (and x y)\n               (list (+ (car x) (car y)) (+ (cadr x) (cadr y)))\n               #f)))))\n",
    "  (define (find_solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution-iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; (* a x) (+ (* b y) n)) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; (* a x) (+ (* b y) n)) (find_solution_iter a b n x (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (iter x y)\n    (cond ((= (remainder (* a x) b) n) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter (/ n b) 0))\n</code>\nI'm not sure what the \"iter\" function is doing. I understand that it's a helper function, but I don't understand what it's doing.\nI don't understand the first line of the \"iter\" function.\n<code>(cond ((= (remainder (* a x) b) n) (list x y))\n</code>\nI understand the second line of the \"iter\" function.\n<code>((&gt; x 0) (iter (- x 1) (+ y 1)))\n</code>\nI understand the third line of the \"iter\" function.\n<code>(else #f)))\n</code>\nI understand the first line of the \"find_solution\" function.\n<code>(define (find_solution a b n)\n</code>\nI understand the second line of the \"find_solution\" function.\n<code>(define (iter x y)\n</code>\nI understand the third line of the \"find_solution\" function.\n<code>(iter (/ n b) 0))\n</code>\nI don't understand the \"cond\" function. I don't understand what it's doing.\nI don't understand the \"remainder\" function. I don't understand what it's doing.\nI don't understand the \"list\" function. I don't understand what it's doing.\nI don't understand the \">\" function. I don't understand what it's doing.\nI don't understand the \"-\" function. I don't understand what it's doing.\nI don't understand the \"+\" function. I don't understand what it's doing.\nI don't understand the \"else\" function. I don't understand what it's doing.\nI don't understand the \"/\" function. I don't understand what it's doing.\nI don't understand the \"0\" function. I don't understand what it's doing.\nI don't understand the \")\" function. I don't understand what it's doing.\nI don't understand the \"(\" function",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter (/ n a) 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((> (* a x) (+ (* b y) n)) (find_solution_iter (- x 1) (+ y 1)))\n          (else (find_solution_iter (+ x 1) (- y 1)))))\n  (find_solution_iter 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x a) (+ y b)))))\n  (iter 0 0))\n",
    "  (cond ((= n 0) (list 0 0))\n        ((= n a) (list 1 0))\n        ((= n b) (list 0 1))\n        ((&lt; n a) (find_solution a b (- n a)))\n        ((&lt; n b) (find_solution a b (- n b)))\n        (else (find_solution a b (- n b)))))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((= n (* b y)) (list x y))\n          ((&lt; n (* a x)) #f)\n          ((&lt; n (* b y)) #f)\n          (else (find_solution_iter a b n (+ x 1) (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((= n (* b y)) (list x y))\n          ((&gt; n (* a x)) (find_solution_iter a b n (+ x 1) y))\n          ((&gt; n (* b y)) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (let loop ([x 0] [y 0])\n    (cond [(= (modulo n a) 0) (list x (/ n a))]\n          [(= (modulo n b) 0) (list (/ n b) y)]\n          [(zero? x) (loop (+ 1 x) y)]\n          [(zero? y) (loop x (+ 1 y))]\n          [else (loop (- x 1) (+ y 1))])))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((= n (* b y)) (list x y))\n          ((&lt; n (* a x)) #f)\n          ((&lt; n (* b y)) #f)\n          (else (find_solution_iter a b n (+ x 1) (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((< x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (let loop ([x 0] [y 0])\n    (cond\n      [(= (modulo n a) 0) (list x (/ n a) y)]\n      [(= (modulo n b) 0) (list (/ n b) x y)]\n      [(= x b) #f]\n      [else (loop (+ x 1) (- y 1))])))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter (+ n b) 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (modulo n a) 0) (list x (/ n a) y))\n          ((= (modulo n b) 0) (list (/ n b) x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter (/ n a) 0))\n</code>\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (helper a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (helper a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (helper a b n x (+ y 1)))\n          (else #f)))\n  (helper a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n</code>\nI would like to know how to write this function in a more functional way.\n\n\nA:\n\nYou can use <code>for/fold</code> to iterate over the values of <code>x</code> and <code>y</code> and return the first solution that satisfies the equation.\n<code>(define (find-solution a b n)\n  (for/fold ([solution #f]) ([x b] [y (- a 1)])\n    (when (and (not solution) (= (* a x) (+ (* b y) n)))\n      (set! solution (list x y)))\n    solution))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((< n (+ (* a x) (* b y))) #f)\n          (else (iter (+ x 1) (- y 1)))))\n  (iter 0 n))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n 0) (list x y))\n          ((&lt; n 0) #f)\n          (else (find-solution-iter a b (- n a) (+ x 1) y))))\n  (find-solution-iter a b n 0 0))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) (find_solution_iter a b n x (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (if (= n (+ (* a x) (* b y)))\n        (list x y)\n        (if (&lt; n (+ (* a x) (* b y)))\n            #f\n            (find-solution-iter a b n (+ x 1) (- y 1)))))\n  (find-solution-iter a b n 0 0))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          ((&gt; y 0) (find_solution_iter (+ x 1) (- y 1)))\n          (else #f)))\n  (find_solution_iter 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x n) #f)\n          (else (find_solution_iter (+ x 1) y))))\n  (find_solution_iter 0 0))\n",
    "  (define (iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter a b n x (+ y 1)))\n          (else #f)))\n  (iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((< n (+ (* a x) (* b y))) #f)\n          (else (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (let loop ([x 0] [y 0])\n    (cond\n      [(= (modulo n a) 0) (list x (/ n a))]\n      [(= (modulo n b) 0) (list (/ n b) y)]\n      [(= (modulo n a) (modulo n b)) #f]\n      [(> (modulo n a) (modulo n b)) (loop (+ x 1) y)]\n      [else (loop x (+ y 1))])))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n</code>\nI'm trying to understand how this works. I understand that the function iter is being called recursively, but I'm not sure how the x and y values are being passed to it. I know that the first time it's called, x and y are both 0, but how does it know to increment x or y by 1?\n\n\nA:\n\n<code>iter</code> is a function that takes two arguments, <code>x</code> and <code>y</code>. The first time it's called, it's called with <code>0</code> and <code>0</code> as arguments. The second time it's called, it's called with <code>1</code> and <code>0</code> as arguments. The third time it's called, it's called with <code>1</code> and <code>1</code> as arguments.\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (iter a b n (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (iter a b n x (+ y 1)))\n          (else #f)))\n  (iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n</code>\nI'm not sure how to write the function in the same way in Scheme. I tried the following:\n<code>(define (find_solution a b n)\n  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n</code>\nBut I get the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: -\n  arguments...:\n   1\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nIn Racket, <code>-</code> is a function that takes two arguments, but in Scheme, it's a function that takes one argument. You can use <code>(sub1 y)</code> instead.\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&lt; n (+ (* a x) (* b y))) #f)\n          (else (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nYou're on the right track, but your <code>find_solution_iter</code> function is not correct. The problem is that you're not checking the case when <code>y</code> is negative, and you're not checking the case when <code>x</code> is negative.\nHere's a fixed version:\n<code>(define (find_solution a b n)\n  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&lt; n (+ (* a x) (* b y))) #f)\n          ((&lt; y 0) #f)\n          ((&lt; x 0) (find_solution_iter a b n (+ x 1) (- y 1)))\n          (else (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((< x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n",
    "  (define (iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter a b n x (+ y 1)))\n          (else #f)))\n  (iter a b n 0 0))\n",
    "  (let loop ([x 0] [y 0])\n    (cond [(= (modulo n a) 0) (list x (/ n a))]\n          [(= (modulo n b) 0) (list (/ n b) y)]\n          [(= n (+ (* a x) (* b y))) (list x y)]\n          [(< n (+ (* a x) (* b y))) (loop (+ x 1) y)]\n          [(> n (+ (* a x) (* b y))) (loop x (+ y 1))])))\n",
    "  (define (find-solution-iter a b n x y)\n    (if (= n (+ (* a x) (* b y)))\n        (list x y)\n        (if (&lt; n (+ (* a x) (* b y)))\n            #f\n            (find-solution-iter a b n (+ x 1) (- y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter n 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n 0) (list x y))\n          ((&lt; n 0) #f)\n          (else (find-solution-iter a b (- n a) (+ x 1) y))))\n  (find-solution-iter a b n 0 0))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter n 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&lt; n (* a x)) #f)\n          (else (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (cond ((= n 0) (list 0 0))\n        ((= n 1) (list 1 0))\n        ((= n 2) (list 0 1))\n        ((= n 3) (list 1 1))\n        ((= n 4) (list 2 0))\n        ((= n 5) (list 0 2))\n        ((= n 6) (list 1 2))\n        ((= n 7) (list 2 1))\n        ((= n 8) (list 3 0))\n        ((= n 9) (list 0 3))\n        ((= n 10) (list 1 3))\n        ((= n 11) (list 2 2))\n        ((= n 12) (list 3 1))\n        ((= n 13) (list 4 0))\n        ((= n 14) (list 0 4))\n        ((= n 15) (list 1 4))\n        ((= n 16) (list 2 3))\n        ((= n 17) (list 3 2))\n        ((= n 18) (list 4 1))\n        ((= n 19) (list 5 0))\n        ((= n 20) (list 0 5))\n        ((= n 21) (list 1 5))\n        ((= n 22) (list 2 4))\n        ((= n 23) (list 3 3))\n        ((= n 24) (list 4 2))\n        ((= n 25) (list 5 1))\n        ((= n 26) (list 6 0))\n        ((= n 27) (list 0 6))\n        ((= n 28) (list 1 6))\n        ((= n 29) (list 2 5))\n        ((= n 30) (list 3 4))\n        ((= n 31) (list 4 3))\n        ((= n 32) (list 5 2))\n        ((= n 33) (list 6 1))\n        ((= n 34) (list 7 0))\n        ((= n 35) (list 0 7))\n        ((= n 36) (list 1 7))\n        ((= n 37) (list 2 6))\n        ((= n 38) (list 3 5))\n        ((= n 39) (list 4 4))\n        ((= n 40) (list 5 3))\n        ((= n 41) (list 6 2))\n        ((= n 42",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter n 0))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find_solution_iter x y)\n    (if (= (* a x) (+ (* b y) n))\n        (list x y)\n        (if (&lt; x n)\n            (find_solution_iter (+ x 1) y)\n            (if (&lt; y n)\n                (find_solution_iter 1 (+ y 1))\n                #f))))\n  (find_solution_iter 1 1))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((> n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((< n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) (find_solution_iter a b n x (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((= n (* b y)) (list x y))\n          ((&lt; n (* a x)) #f)\n          ((&lt; n (* b y)) #f)\n          (else (find-solution-iter a b n (+ x 1) (+ y 1)))))\n  (find-solution-iter a b n 0 0))\n</code>\nI'm not sure how to write the test cases for this function. I'm not sure how to test for the #f case.\n\n\nA:\n\nYou can use <code>check-expect</code> to test your function.\n<code>#lang racket\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; x n) #f)\n          (else (find-solution-iter a b n (+ x 1) (- n (* a x))))))\n  (find-solution-iter a b n 0 n))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; x n) #f)\n          (else (find_solution_iter (+ x 1) (- n (* a x))))))\n  (find_solution_iter 0 n))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n</code>\nI'm not sure if this is the most efficient way to do it, but it works.\n",
    "  (cond ((= n 0) (list 0 0))\n        ((= n a) (list 1 0))\n        ((= n b) (list 0 1))\n        ((&lt; n a) (find_solution a (- b 1) (- n a)))\n        ((&lt; n b) (find_solution (- a 1) b (- n b)))\n        (else #f)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n</code>\nThis works for small numbers, but for large numbers it takes a long time. I'm wondering if there is a better way to do this.\n\n\nA:\n\nYou can use the extended Euclidean algorithm to find the solution.\n<code>(define (find-solution a b n)\n  (define (extended-gcd a b)\n    (if (= b 0)\n        (list a 1 0)\n        (let* ((q (quotient a b))\n               (r (remainder a b))\n               (gcd (extended-gcd b r)))\n          (list (car gcd)\n                (caddr gcd)\n                (- (cadr gcd) (* q (caddr gcd)))))))\n  (let ((gcd (extended-gcd a b)))\n    (if (= (modulo n (car gcd)) 0)\n        (list (/ n (car gcd))\n              (* (cadr gcd) (/ n (car gcd)))\n              (* (caddr gcd) (/ n (car gcd))))\n        #f)))\n</code>\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&lt; n (+ (* a x) (* b y))) #f)\n          (else (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n</code>\n",
    "  (cond\n    [(= n 0) (list 0 0)]\n    [(= n 1) (list 1 0)]\n    [(= n 2) (list 0 1)]\n    [else\n     (let* ([x (find_solution a b (- n 1))]\n            [y (find_solution a b (- n 2))])\n       (cond\n         [(and (not (null? x)) (not (null? y))) (list (+ (car x) (car y)) (+ (cadr x) (cadr y)))]\n         [(not (null? x)) x]\n         [(not (null? y)) y]\n         [else #f]))]))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (iter x y)\n    (if (= n (+ (* a x) (* b y)))\n        (list x y)\n        (if (&lt; n (+ (* a x) (* b y)))\n            (iter x (- y 1))\n            (iter (+ x 1) y))))\n  (if (&lt; n (* a b))\n      (iter 0 b)\n      (if (&gt; n (* a b))\n          (iter a 0)\n          (list a b))))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&lt; x 0) #f)\n          (else (find_solution_iter (- x 1) (+ y 1)))))\n  (find_solution_iter n 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond\n      ((= n (+ (* a x) (* b y))) (list x y))\n      ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n      ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n      (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter n 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (let loop ((x 0) (y 0))\n    (cond ((= (modulo n a) 0) (list x (/ n a)))\n          ((= (modulo n b) 0) (list (/ n b) y))\n          ((= x y) (loop (+ x 1) 0))\n          (else (loop x (+ y 1))))))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nI think you're on the right track.  I would change the <code>cond</code> to use <code>else</code> instead of <code>#f</code> and I would change the <code>&gt;</code> to <code>&lt;</code> so that you're not going into negative numbers.\n<code>(define (find_solution a b n)\n  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&lt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n</code>\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter n 0))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) (find_solution_iter a b n x (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((< n (+ (* a x) (* b y))) #f)\n          (else (find-solution-iter a b n (+ x 1) (- y 1)))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((= n (* b y)) (list x y))\n          ((&lt; n (* a x)) #f)\n          ((&lt; n (* b y)) #f)\n          (else (iter a b n (+ x 1) (+ y 1)))))\n  (iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n",
    "  (define (find-solution-iter a b n x y)\n    (if (= n (+ (* a x) (* b y)))\n        (list x y)\n        (if (&lt; x n)\n            (find-solution-iter a b n (+ x 1) y)\n            (if (&lt; y n)\n                (find-solution-iter a b n 0 (+ y 1))\n                #f))))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (iter (+ x 1) (- y 1)))\n          (else #f)))\n  (iter 0 n))\n</code>\nThis works fine for <code>(find_solution 2 3 10)</code> and <code>(find_solution 2 3 11)</code> but not for <code>(find_solution 2 3 12)</code>.\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're not doing anything wrong. The problem is that there is no solution for <code>12 = 2x + 3y</code> with <code>x</code> and <code>y</code> integers.\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&lt; (* a x) (+ (* b y) n)) (find_solution_iter (+ x 1) y))\n          ((&gt; (* a x) (+ (* b y) n)) (find_solution_iter x (+ y 1)))\n          (else #f)))\n  (find_solution_iter 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n</code>\nI'm trying to understand the <code>cond</code> statement in the <code>find_solution_iter</code> function. I understand that the first condition is checking if <code>ax + by = n</code> is true, and if it is, it returns a list of <code>x</code> and <code>y</code>.\nI'm not sure what the second condition is doing. I know that <code>&gt;</code> is the greater than operator, but I don't understand what <code>(&gt; x 0)</code> is doing.\nI also don't understand what the third condition is doing. I know that <code>else</code> is a catch-all, but I don't understand what <code>(else #f)</code> is doing.\nI've tried to look up the documentation for <code>cond</code>, but I'm still not sure what it's doing.\n\n\nA:\n\n<code>(&gt; x 0)</code> is checking if <code>x</code> is greater than <code>0</code>.\n<code>(else #f)</code> is returning <code>#f</code> if none of the other conditions are met.\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find-solution-iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find-solution-iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find-solution-iter n 0))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond\n      ((= n (* a x)) (list x y))\n      ((= n (* b y)) (list x y))\n      ((&gt; n (* a x)) (find_solution_iter a b n (+ x 1) y))\n      ((&gt; n (* b y)) (find_solution_iter a b n x (+ y 1)))\n      (else #f)))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= x n) (list x y))\n          ((&lt; x n) (iter (+ x a) (- y b)))\n          (else #f)))\n  (iter 0 n))\n</code>\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n</code>\nI'm not sure if this is the best way to do it, but it seems to work.\n\n\nA:\n\nI think your solution is fine.  I would just add a few comments to make it easier to understand.\n<code>;; Write a function that returns integers x and y that satisfy ax + by = n as a list, or return #f if no solution exists.",
    "  (define (find_solution_iter a b n x y)\n    (if (= n (+ (* a x) (* b y)))\n        (list x y)\n        (if (&lt; n (+ (* a x) (* b y)))\n            #f\n            (find_solution_iter a b n (+ x 1) (- y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (cond ((= n 0) (list 0 0))\n        ((= n a) (list 1 0))\n        ((= n b) (list 0 1))\n        ((&lt; n a) (find_solution a b (- n a)))\n        ((&lt; n b) (find_solution a b (- n b)))\n        (else (find_solution a b (- n b)))))\n</code>\nThis is the error I get:\n<code>find_solution: expects type &lt;number&gt; as 2nd argument, given: 'b; other arguments were: 5 2\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're missing the parentheses around the arguments in the recursive calls.\n<code>(find_solution a b (- n a))\n</code>\nshould be\n<code>(find_solution a b (- n a))\n</code>\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a 1)))\n",
    "  (define (iter x y)\n    (cond ((= (modulo n a) 0) (list x y))\n          ((= (modulo n b) 0) (list x y))\n          ((&gt; x n) #f)\n          (else (iter (+ x 1) (- n (* a x))))))\n  (iter 0 n))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; (* a x) (+ (* b y) n)) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; (* a x) (+ (* b y) n)) (find_solution_iter a b n x (+ y 1)))))\n  (find_solution_iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a)))\n",
    "  (define (iter x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (iter (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (iter x (+ y 1)))\n          (else #f)))\n  (iter 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((= n (* b y)) (list x y))\n          ((&gt; n (* a x)) (find-solution-iter a b n (+ x 1) y))\n          ((&gt; n (* b y)) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (iter (- x 1) (+ y 1)))\n          (else #f)))\n  (iter b (- a)))\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find-solution-iter a b n x (+ y 1)))\n          (else #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (let loop ((x 0) (y 0))\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((< n (+ (* a x) (* b y))) #f)\n          (else (loop (+ x 1) (+ y 1))))))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter n 0))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
    "  (define (find-solution-iter a b n x y)\n    (cond ((= n (* a x)) (list x y))\n          ((&gt; n (* a x)) (find-solution-iter a b n (+ x 1) y))\n          ((&lt; n (* a x)) #f)))\n  (find-solution-iter a b n 0 0))\n",
    "  (define (find_solution_iter x y)\n    (cond ((= (* a x) (+ (* b y) n)) (list x y))\n          ((&gt; x 0) (find_solution_iter (- x 1) (+ y 1)))\n          (else #f)))\n  (find_solution_iter b (- a 1)))\n",
    "  (define (find_solution_iter a b n x y)\n    (cond ((= n (+ (* a x) (* b y))) (list x y))\n          ((&gt; n (+ (* a x) (* b y))) (find_solution_iter a b n (+ x 1) y))\n          ((&lt; n (+ (* a x) (* b y))) (find_solution_iter a b n x (+ y 1)))\n          (else #f)))\n  (find_solution_iter a b n 0 0))\n"
  ]
}