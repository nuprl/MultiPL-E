{
  "name": "mbpp_606_radian_degree",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* (/ pi 180) degree))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* (/ pi 180) degree))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* (/ pi 180.0) degree))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* (/ degree 180) pi))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1666123139,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* (/ pi 180) degree))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to convert degrees to radians.\n(define (radian_degree degree)\n  (* degree (/ pi 180)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate radian_degree))\n    (check-equal? (candidate 90) 1.5707963267948966)\n    (check-equal? (candidate 60) 1.0471975511965976)\n    (check-equal? (candidate 120) 2.0943951023931953)\n))\n\n(test-humaneval)",
      "timestamp": 1665510309,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}