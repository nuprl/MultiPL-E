{
  "name": "mbpp_426_filter_oddnumbers",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to filter odd numbers.\n(define (filter_oddnumbers nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate filter_oddnumbers))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10)) (list 1 3 5 7 9))\n    (check-equal? (candidate (list 10 20 45 67 84 93)) (list 45 67 93))\n    (check-equal? (candidate (list 5 7 9 8 6 4 3)) (list 5 7 9 3))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [else\n     (cond\n       [(odd? (first nums))\n        (cons (first nums) (filter_oddnumbers (rest nums)))]\n       [else\n        (filter_oddnumbers (rest nums))])]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond [(empty? nums) empty]\n        [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n        [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (cond\n    [(empty? nums) empty]\n    [(odd? (first nums)) (cons (first nums) (filter_oddnumbers (rest nums)))]\n    [else (filter_oddnumbers (rest nums))]))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n",
    "  (filter odd? nums))\n"
  ]
}