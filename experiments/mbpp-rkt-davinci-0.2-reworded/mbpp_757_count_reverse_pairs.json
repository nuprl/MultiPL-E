{
  "name": "mbpp_757_count_reverse_pairs",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/rktthon-program-to-count-the-pairs-of-reverse-strings/\n(define (count_reverse_pairs test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_reverse_pairs))\n    (check-equal? (candidate (list \"julia\" \"best\" \"tseb\" \"for\" \"ailuj\")) 2)\n    (check-equal? (candidate (list \"geeks\" \"best\" \"for\" \"skeeg\")) 1)\n    (check-equal? (candidate (list \"makes\" \"best\" \"sekam\" \"for\" \"rof\")) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (empty? str)\n          result\n          (reverse_string_helper (rest str) (string-append (string (first str)) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (first test_list) (reverse_string (second test_list)))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest (rest test_list)) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str1 str2)\n      (if (null? str1)\n          str2\n          (reverse_string_helper (rest str1) (string-append (string (first str1)) str2))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (equal? (reverse_string (first test_list)) (second test_list))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (string-join (reverse (string-split str))))\n  (define (is_reverse_pair str1 str2)\n    (string=? (reverse_string str1) str2))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define str1 (first test_list))\n       (define str2 (second test_list))\n       (cond\n         [(is_reverse_pair str1 str2) (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))]\n         [else (count_reverse_pairs_list (rest (rest test_list)) count)])]))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (string=? str \"\")\n          result\n          (reverse_string_helper (substring str 1) (string-append (substring str 0 1) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (string=? (car test_list) (reverse_string (car test_list)))\n            (count_reverse_pairs_helper (cdr test_list) (+ count 1))\n            (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (string=? str \"\")\n          result\n          (reverse_string_helper (substring str 1) (string-append (substring str 0 1) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (string=? (car test_list) (reverse_string (car test_list)))\n            (count_reverse_pairs_helper (cdr test_list) (+ count 1))\n            (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (string-empty? str)\n          result\n          (reverse_string_helper (substring str 1) (string-append (substring str 0 1) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (equal? (car test_list) (reverse_string (cadr test_list)))\n            (count_reverse_pairs_helper (cdr test_list) (+ count 1))\n            (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((string=? (car test_list) (reverse (cadr test_list))) (loop (cdr test_list) (+ count 1)))\n          (else (loop (cdr test_list) count)))))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (string-empty? str)\n          result\n          (reverse_string_helper (substring str 1) (string-append (substring str 0 1) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (equal? (car test_list) (reverse_string (cadr test_list)))\n            (count_reverse_pairs_helper (cdr test_list) (+ count 1))\n            (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (count_reverse_pairs_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [else\n       (define (reverse_string str)\n         (define (reverse_string_helper str result)\n           (cond\n             [(empty? str) result]\n             [else (reverse_string_helper (rest str) (string-append (string (first str)) result))]))\n         (reverse_string_helper str \"\"))\n       (define (is_reverse_pair str1 str2)\n         (string=? (reverse_string str1) str2))\n       (define (count_reverse_pair_in_list str test_list)\n         (define (count_reverse_pair_in_list_helper str test_list count)\n           (cond\n             [(empty? test_list) count]\n             [(is_reverse_pair str (first test_list)) (count_reverse_pair_in_list_helper str (rest test_list) (+ count 1))]\n             [else (count_reverse_pair_in_list_helper str (rest test_list) count)]))\n         (count_reverse_pair_in_list_helper str test_list 0))\n       (count_reverse_pairs_helper (rest test_list) (+ count (count_reverse_pair_in_list (first test_list) (rest test_list))))]))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (is_reverse? str1 str2)\n    (define (helper str1 str2)\n      (cond\n        [(empty? str1) true]\n        [(empty? str2) false]\n        [(char=? (first str1) (first str2)) (helper (rest str1) (rest str2))]\n        [else false]))\n    (and (equal? (string-length str1) (string-length str2)) (helper (string-reverse str1) str2)))\n  (define (helper test_list)\n    (cond\n      [(empty? test_list) 0]\n      [(empty? (rest test_list)) 0]\n      [else (+ (if (is_reverse? (first test_list) (second test_list)) 1 0) (helper (rest test_list)))]))\n  (helper test_list))\n",
    "  (define (reverse_string str)\n    (define (helper str result)\n      (if (empty? str)\n          result\n          (helper (rest str) (string-append (string (first str)) result))))\n    (helper str \"\"))\n  (define (helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (first test_list) (reverse_string (second test_list)))\n            (helper (rest (rest test_list)) (+ count 1))\n            (helper (rest test_list) count))))\n  (helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (string=? str \"\")\n          result\n          (reverse_string_helper (substring str 1) (string-append (substring str 0 1) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list result)\n    (if (null? test_list)\n        result\n        (if (string=? (car test_list) (reverse_string (car test_list)))\n            (count_reverse_pairs_helper (cdr test_list) (+ 1 result))\n            (count_reverse_pairs_helper (cdr test_list) result))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (let loop ([str str] [rev_str (string)])\n      (if (string=? str (string))\n          rev_str\n          (loop (substring str 1) (string-append (substring str 0 1) rev_str)))))\n  (define (count_pairs lst)\n    (cond [(empty? lst) 0]\n          [(empty? (rest lst)) 0]\n          [(string=? (reverse_string (first lst)) (second lst)) (+ 1 (count_pairs (rest lst)))]\n          [else (count_pairs (rest lst))]))\n  (count_pairs test_list))\n",
    "  (define (is_reverse? str1 str2)\n    (and (equal? (string-length str1) (string-length str2))\n         (equal? (string-reverse str1) str2)))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond ((null? test_list) count)\n          ((is_reverse? (car test_list) (cadr test_list))\n           (count_reverse_pairs_helper (cdr test_list) (+ count 1)))\n          (else (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_string_helper str result)\n      (if (empty? str)\n          result\n          (reverse_string_helper (rest str) (string-append (string (first str)) result))))\n    (reverse_string_helper str \"\"))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (if (equal? (first test_list) (reverse_string (second test_list)))\n            (count_reverse_pairs_helper (rest (rest test_list)) (+ count 1))\n            (count_reverse_pairs_helper (rest (rest test_list)) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_pair? str1 str2)\n    (equal? (reverse str1) str2))\n  (define (count_reverse_pairs_helper test_list count)\n    (cond ((null? test_list) count)\n          ((reverse_pair? (car test_list) (cadr test_list))\n           (count_reverse_pairs_helper (cddr test_list) (+ count 1)))\n          (else (count_reverse_pairs_helper (cdr test_list) count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (let loop ((test_list test_list) (count 0))\n    (cond ((null? test_list) count)\n          ((equal? (reverse (car test_list)) (cadr test_list))\n           (loop (cdr test_list) (+ count 1)))\n          (else (loop (cdr test_list) count)))))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(null? test_list) count]\n          [(null? (cdr test_list)) count]\n          [else (let ([first (car test_list)]\n                      [second (cadr test_list)])\n                  (if (equal? (reverse first) second)\n                      (loop (cdr test_list) (+ count 1))\n                      (loop (cdr test_list) count)))])))\n",
    "  (define (reverse_string str)\n    (define (reverse_helper str result)\n      (if (empty? str)\n          result\n          (reverse_helper (rest str) (cons (first str) result))))\n    (reverse_helper str '()))\n  (define (count_reverse_pairs_helper test_list count)\n    (if (empty? test_list)\n        count\n        (count_reverse_pairs_helper (rest test_list)\n                                    (if (equal? (reverse_string (first test_list)) (second test_list))\n                                        (+ count 1)\n                                        count))))\n  (count_reverse_pairs_helper test_list 0))\n",
    "  (define (reverse_string str)\n    (define (reverse_helper str result)\n      (if (string-empty? str)\n          result\n          (reverse_helper (substring str 1) (string-append result (string (string-ref str 0))))))\n    (reverse_helper str \"\"))\n  (define (count_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (equal? (car test_list) (reverse_string (car test_list)))\n            (count_helper (cdr test_list) (+ count 1))\n            (count_helper (cdr test_list) count))))\n  (count_helper test_list 0))\n"
  ]
}