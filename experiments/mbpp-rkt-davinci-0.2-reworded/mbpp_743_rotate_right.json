{
  "name": "mbpp_743_rotate_right",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/rktthon-program-right-rotate-list-n/\n(define (rotate_right list m)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rotate_right))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 3) (list 8 9 10 1 2 3 4 5 6 7))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 2) (list 9 10 1 2 3 4 5 6 7 8))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10) 5) (list 6 7 8 9 10 1 2 3 4 5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (cdr (append list (take list m)))\n          (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (cdr (append list (take list m))) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (cdr (append list (take list m))) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (if (null? list)\n      list\n      (append (cdr list) (list (car list)))))\n",
    "  (append (drop list m) (take list m)))\n",
    "  (append (drop list m) (take list m)))\n"
  ]
}