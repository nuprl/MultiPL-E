{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n(define (maxAverageOfPath cost)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maxAverageOfPath))\n    (check-equal? (candidate (list (list 1 2 3) (list 6 5 4) (list 7 3 9))) 5.2)\n    (check-equal? (candidate (list (list 2 3 4) (list 7 6 5) (list 8 4 10))) 6.2)\n    (check-equal? (candidate (list (list 3 4 5) (list 8 7 6) (list 9 5 11))) 7.2)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6) (list 7 8 9))) 5.8)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (maxAverageOfPath-helper cost row col)\n    (if (and (= row (length cost)) (= col (length (car cost))))\n        (list (list (list row col)) (list (list (list row col)) (list (list row col)) (list (list row col))))\n        (if (= row (length cost))\n            (maxAverageOfPath-helper cost row (+ col 1))\n            (if (= col (length (car cost)))\n                (maxAverageOfPath-helper cost (+ row 1) col)\n                (let* ((right (maxAverageOfPath-helper cost row (+ col 1)))\n                       (down (maxAverageOfPath-helper cost (+ row 1) col))\n                       (right-cost (car right))\n                       (right-path (cadr right))\n                       (down-cost (car down))\n                       (down-path (cadr down)))\n                  (if (> right-cost down-cost)\n                      (list (+ right-cost (list-ref (list-ref cost row) col)) (cons (list row col) right-path))\n                      (list (+ down-cost (list-ref (list-ref cost row) col)) (cons (list row col) down-path))))))))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list (list i j) 0)) 0)]\n      [(= j (length (car cost))) (list (list (list (list i j) 0)) 0)]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-cost (car (cdr right)))\n              [down-cost (car (cdr down))]\n              [right-paths (car right)]\n              [down-paths (car down)]\n              [right-paths-costs (map (lambda (path) (+ right-cost (car (cdr path)))) right-paths)]\n              [down-paths-costs (map (lambda (path) (+ down-cost (car (cdr path)))) down-paths)]\n              [right-paths-costs-with-paths (map (lambda (path) (cons (cons (list i j) (car path)) path)) right-paths-costs)]\n              [down-paths-costs-with-paths (map (lambda (path) (cons (cons (list i j) (car path)) path)) down-paths-costs)]\n              [paths (append right-paths-costs-with-paths down-paths-costs-with-paths)]\n              [costs (append right-paths-costs down-paths-costs)]\n              [max-cost (apply max costs)]\n              [max-paths (filter (lambda (path) (= max-cost (car path))) paths)])\n         (list max-paths max-cost))]))\n  (let* ([paths (car (maxAverageOfPath-helper cost 0 0))]\n         [costs (map (lambda (path) (car path)) paths)]\n         [max-cost (apply max costs)]\n         [max-paths (filter (lambda (path) (= max-cost (car path))) paths)]\n         [max-path (car max-paths",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) 0]\n      [(= j (length (car cost))) 0]\n      [else (max (+ (maxAverageOfPath-helper cost (add1 i) j) (list-ref (list-ref cost i) j))\n                 (+ (maxAverageOfPath-helper cost i (add1 j)) (list-ref (list-ref cost i) j)))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (if (and (= i (- (length cost) 1)) (= j (- (length (car cost)) 1)))\n        (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else\n       (let* ([down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down-avg (/ (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car down))) (length (car down)))]\n              [right-avg (/ (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car right))) (length (car right)))])\n         (if (> down-avg right-avg)\n             (cons (cons (list i j) (car down)) down-avg)\n             (cons (cons (list i j) (car right)) right-avg)))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) 0)]\n      [(= j (length (car cost))) (list (list (list i j)) 0)]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-avg (/ (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car right))) (- (length (car right)) 1))]\n              [down-avg (/ (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car down))) (- (length (car down)) 1))])\n         (if (> right-avg down-avg)\n             (list (cons (list i j) (car right)) right-avg)\n             (list (cons (list i j) (car down)) down-avg)))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-iter cost i j)\n    (cond\n      [(and (= i (- (length cost) 1)) (= j (- (length (car cost)) 1)))\n       (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(and (= i (- (length cost) 1)) (= j (- (length (car cost)) 1)))\n       (cons (list (list i j)) (/ (list-ref (list-ref cost i) j) 2))]\n      [(= i (- (length cost) 1))\n       (let ([right (maxAverageOfPath-helper cost i (+ j 1))])\n         (cons (cons (list i j) (car right))\n               (/ (+ (list-ref (list-ref cost i) j) (cdr right)) (+ (length (car right)) 1))))]\n      [(= j (- (length (car cost)) 1))\n       (let ([down (maxAverageOfPath-helper cost (+ i 1) j)])\n         (cons (cons (list i j) (car down))\n               (/ (+ (list-ref (list-ref cost i) j) (cdr down)) (+ (length (car down)) 1))))]\n      [else\n       (let ([right (maxAverageOfPath-helper cost i (+ j 1))]\n             [down (maxAverageOfPath-helper cost (+ i 1) j)])\n         (if (> (cdr right) (cdr down))\n             (cons (cons (list i j) (car right))\n                   (/ (+ (list-ref (list-ref cost i) j) (cdr right)) (+ (length (car right)) 1)))\n             (cons (cons (list i j) (car down))\n                   (/ (+ (list-ref (list-ref cost i) j) (cdr down)) (+ (length (car down)) 1))))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (if (and (= i (- (length cost) 1)) (= j (- (length (car cost)) 1)))\n        (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j) (list (list i j",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list 0 0)]\n      [(= j (length (car cost))) (list 0 0)]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-cost (+ (car right) (list-ref (list-ref cost i) j))]\n              [down-cost (+ (car down) (list-ref (list-ref cost i) j))]\n              [right-count (+ (cadr right) 1)]\n              [down-count (+ (cadr down) 1)])\n         (if (> (/ right-cost right-count) (/ down-cost down-count))\n             (list right-cost right-count)\n             (list down-cost down-count)))]))\n  (let* ([result (maxAverageOfPath-helper cost 0 0)]\n         [cost (car result)]\n         [count (cadr result)])\n    (/ cost count)))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (- (length cost) 1))\n       (list (list (list i j)) (list (list (list i j) (list (- i 1) j)) (list (list i j) (list i (- j 1)))))]\n      [(= j (- (length (car cost)) 1))\n       (list (list (list i j)) (list (list (list i j) (list (- i 1) j)) (list (list i j) (list i (- j 1)))))]\n      [else\n       (let* ([down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down-paths (car down)]\n              [down-next (cadr down)]\n              [right-paths (car right)]\n              [right-next (cadr right)])\n         (list (append (map (lambda (path) (cons (list i j) path)) down-paths)\n                       (map (lambda (path) (cons (list i j) path)) right-paths))\n               (append (map (lambda (path) (cons (list i j) path)) down-next)\n                       (map (lambda (path) (cons (list i j) path)) right-next)))))]))\n  (define (cost-of-path path)\n    (let loop ([path path]\n               [cost 0])\n      (if (null? path)\n          cost\n          (loop (cdr path) (+ cost (list-ref (list-ref cost (car (car path))) (cadr (car path)))))))\n  (define (average-of-path path)\n    (/ (cost-of-path path) (length path)))\n  (define (max-average-of-paths paths)\n    (let loop ([paths paths]\n               [max-average 0])\n      (if (null? paths)\n          max-average\n          (let ([average (average-of-path (car paths))])\n            (if (> average max-average)\n                (loop (cdr paths) average)\n                (loop (cdr",
    "  (define (maxAverageOfPathHelper cost i j)\n    (if (or (= i (length cost)) (= j (length (car cost))))\n        0\n        (let ([down (maxAverageOfPathHelper cost (+ i 1) j)]\n              [right (maxAverageOfPathHelper cost i (+ j 1))])\n          (if (&gt; down right)\n              (+ down (list-ref (list-ref cost i) j))\n              (+ right (list-ref (list-ref cost i) j))))))\n  (/ (maxAverageOfPathHelper cost 0 0) (+ (length cost) (length (car cost)))))\n</code>\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list i j)) (/ (list-ref (list-ref cost i) j) (+ i j)))]\n      [(= j (length (list-ref cost i))) (list (list (list i j)) (/ (list-ref (list-ref cost i) j) (+ i j)))]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost (+ i 1) j)]\n              [down (maxAverageOfPath-helper cost i (+ j 1))])\n         (if (> (cadr right) (cadr down))\n             right\n             down))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost)) (list (list i j) 0)]\n      [(= j (length (car cost))) (list (list i j) 0)]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-cost (+ (second right) (list-ref (list-ref cost i) j))]\n              [down-cost (+ (second down) (list-ref (list-ref cost i) j))]\n              [right-avg (/ right-cost (+ 1 (length (first right))))]\n              [down-avg (/ down-cost (+ 1 (length (first down))))])\n         (if (> right-avg down-avg)\n             (cons (cons i j) (first right))\n             (cons (cons i j) (first down)))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost))\n       (list (list (list i j)) (list (list i j)))]\n      [(= j (length (car cost)))\n       (list (list (list i j)) (list (list i j)))]\n      [else\n       (let* ([right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right-cost (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (car right))))\n              [down-cost (apply + (map (lambda (x) (list-ref (list-ref cost (car x)) (cadr x))) (cadr down)))])\n         (if (> right-cost down-cost)\n             (list (cons (list i j) (car right)) (cons (list i j) (cadr right)))\n             (list (cons (list i j) (car down)) (cons (list i j) (cadr down)))))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPathHelper cost i j)\n    (cond\n      [(= i (length cost)) (list (list (list (list i j) (list i j)) (/ (list-ref (list-ref cost i) j) 2)))\n                               (list (list (list (list i j) (list i j)) (/ (list-ref (list-ref cost i) j) 2)))]\n      [(= j (length (list-ref cost i))) (list (list (list (list i j) (list i j)) (/ (list-ref (list-ref cost i) j) 2)))\n                                          (list (list (list (list i j) (list i j)) (/ (list-ref (list-ref cost i) j) 2)))]\n      [else (let ([right (maxAverageOfPathHelper cost (+ i 1) j)]\n                  [down (maxAverageOfPathHelper cost i (+ j 1))])\n              (if (> (average (car right)) (average (car down)))\n                  right\n                  down))]))\n  (maxAverageOfPathHelper cost 0 0))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (length cost))\n       (list (list (list i j)) 0)]\n      [(= j (length (car cost)))\n       (list (list (list i j)) 0)]\n      [else\n       (let* ([down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right (maxAverageOfPath-helper cost i (+ j 1))]\n              [down-cost (+ (cadr down) (list-ref (list-ref cost i) j))]\n              [right-cost (+ (cadr right) (list-ref (list-ref cost i) j))])\n         (if (> down-cost right-cost)\n             (list (cons (list i j) (car down)) down-cost)\n             (list (cons (list i j) (car right)) right-cost)))]))\n  (let* ([result (maxAverageOfPath-helper cost 0 0)]\n         [cost (cadr result)]\n         [path (car result)])\n    (cons (/ cost (length path)) path)))\n",
    "  (define (maxAverageOfPath' cost i j)\n    (cond\n      [(= i (length cost)) (list 0 0)]\n      [(= j (length (car cost))) (list 0 0)]\n      [else (let ([down (maxAverageOfPath' cost (+ i 1) j)]\n                 [right (maxAverageOfPath' cost i (+ j 1))])\n               (let ([down-cost (+ (car down) (list-ref (list-ref cost i) j))]\n                     [down-count (+ (cadr down) 1)]\n                     [right-cost (+ (car right) (list-ref (list-ref cost i) j))]\n                     [right-count (+ (cadr right) 1)])\n                 (if (> (/ down-cost down-count) (/ right-cost right-count))\n                     (list down-cost down-count)\n                     (list right-cost right-count)))))]))\n  (let ([result (maxAverageOfPath' cost 0 0)])\n    (/ (car result) (cadr result))))\n",
    "  (define (maxAverageOfPath-helper cost i j)\n    (cond\n      [(= i (- (length cost) 1))\n       (list (list (list i j))\n             (/ (list-ref (list-ref cost i) j) (+ i j)))]\n      [(= j (- (length (list-ref cost 0)) 1))\n       (list (list (list i j))\n             (/ (list-ref (list-ref cost i) j) (+ i j)))]\n      [else\n       (let* ([down (maxAverageOfPath-helper cost (+ i 1) j)]\n              [right (maxAverageOfPath-helper cost i (+ j 1))])\n         (if (> (cadr down) (cadr right))\n             down\n             right))]))\n  (maxAverageOfPath-helper cost 0 0))\n",
    "  (define (maxAverageOfPathHelper cost row col)\n    (cond\n      [(= row (length cost)) (list (list row col) (/ (list-ref (list-ref cost row) col) (+ row col)))]\n      [(= col (length cost)) (list (list row col) (/ (list-ref (list-ref cost row) col) (+ row col)))]\n      [else\n       (let* ([right (maxAverageOfPathHelper cost (+ row 1) col)]\n              [down (maxAverageOfPathHelper cost row (+ col 1))])\n         (if (> (cadr right) (cadr down))\n             right\n             down))]))\n  (maxAverageOfPathHelper cost 0 0))\n"
  ]
}