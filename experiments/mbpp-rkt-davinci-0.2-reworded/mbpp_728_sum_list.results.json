{
  "name": "mbpp_728_sum_list",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond [(empty? lst1) empty]\n        [(empty? lst2) empty]\n        [else (cons (+ (first lst1) (first lst2))\n                     (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (or (null? lst1) (null? lst2))\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond [(empty? lst1) empty]\n        [(empty? lst2) empty]\n        [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (or (null? lst1) (null? lst2))\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1666123151,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond [(empty? lst1) empty]\n        [(empty? lst2) empty]\n        [else (cons (+ (first lst1) (first lst2))\n                     (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (cond\n    [(empty? lst1) empty]\n    [(empty? lst2) empty]\n    [else (cons (+ (first lst1) (first lst2)) (sum_list (rest lst1) (rest lst2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2))\n            (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n(define (sum_list lst1 lst2)\n  (if (null? lst1)\n      '()\n      (cons (+ (car lst1) (car lst2)) (sum_list (cdr lst1) (cdr lst2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_list))\n    (check-equal? (candidate (list 10 20 30) (list 15 25 35)) (list 25 45 65))\n    (check-equal? (candidate (list 1 2 3) (list 5 6 7)) (list 6 8 10))\n    (check-equal? (candidate (list 15 20 30) (list 15 45 75)) (list 30 65 105))\n))\n\n(test-humaneval)",
      "timestamp": 1665510090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}