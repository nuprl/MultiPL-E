{
  "name": "mbpp_120_max_product_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map list list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (* y z)) x)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n9hrwox.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n9hrwox.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n9hrwox.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (list (abs (car x)) (abs (cadr x)))) (partition 2 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja5mi3qk.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja5mi3qk.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpja5mi3qk.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cadr x) (cadr y))) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph48qhdjd.rkt:12:4\n\ncar: contract violation\n  expected: pair?\n  given: 7\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph48qhdjd.rkt:13:4\n\ncar: contract violation\n  expected: pair?\n  given: 20\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph48qhdjd.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 44\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) (map (lambda (x) (list x (cdr x))) list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpirhca5dw.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '((2 7) (7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpirhca5dw.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '((10 20) (20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpirhca5dw.rkt:15:4\n\nabs: contract violation\n  expected: real?\n  given: '((11 44) (44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y))) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_8k_er1.rkt:12:4\n\ncar: contract violation\n  expected: pair?\n  given: 7\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_8k_er1.rkt:13:4\n\ncar: contract violation\n  expected: pair?\n  given: 20\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_8k_er1.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 44\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) x)) (map (lambda (x) (map (lambda (y) (cons (car x) y)) (cdr x))) list1)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "/tmp/tmpm6m2xw8b.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 6\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y))) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_8k_er1.rkt:12:4\n\ncar: contract violation\n  expected: pair?\n  given: 7\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_8k_er1.rkt:13:4\n\ncar: contract violation\n  expected: pair?\n  given: 20\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_8k_er1.rkt:14:4\n\ncar: contract violation\n  expected: pair?\n  given: 44\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) (cdr list1))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjio3eh8i.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 2 (7) (6))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjio3eh8i.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 15 (20) (2))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjio3eh8i.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 10 (44) (15))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n</code>\nI'm not sure if this is the most efficient way to do this, but it works.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "/tmp/tmp_ievuu7e.rkt:8:50: do: bad syntax\n  in: do\n  location...:\n   /tmp/tmp_ievuu7e.rkt:8:50\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map list list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map list list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdv5eb3se.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdv5eb3se.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdv5eb3se.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (list (list-ref x 0) (list-ref y 0) (list-ref z 0))) (cdr x))) (cdr y))) (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "/tmp/tmpee054w_z.rkt:5:192: y: unbound identifier\n  in: y\n  location...:\n   /tmp/tmpee054w_z.rkt:5:192\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) (map (lambda (x) (list x (cdr x))) list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpirhca5dw.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '((2 7) (7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpirhca5dw.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '((10 20) (20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpirhca5dw.rkt:15:4\n\nabs: contract violation\n  expected: real?\n  given: '((11 44) (44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:15:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6gsr47o.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6gsr47o.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx6gsr47o.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (let loop ([list1 list1]\n             [max-product 0])\n    (cond [(empty? list1) max-product]\n          [else (let* ([tuple (first list1)]\n                       [list2 (second tuple)]\n                       [list3 (third tuple)]\n                       [product (apply * (map abs (append list2 list3)))]\n                       [max-product (if (> product max-product) product max-product)])\n                  (loop (rest list1) max-product))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dmqt6nv.rkt:20:4\n\nthird: list contains too few elements\n  list: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dmqt6nv.rkt:21:4\n\nthird: list contains too few elements\n  list: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2dmqt6nv.rkt:22:4\n\nthird: list contains too few elements\n  list: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (cond\n    [(empty? list1) 0]\n    [else\n     (max (apply * (car list1))\n          (max_product_tuple (cdr list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (* y z)) x)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n9hrwox.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n9hrwox.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8n9hrwox.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (combinations 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c790spj.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c790spj.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c790spj.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5x99738l.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5x99738l.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5x99738l.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map * x)) (map (lambda (x) (map list (cdr x))) (map (lambda (x) (map list x)) (map (lambda (x) (map list x)) list1))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi330vcnk.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(((7)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi330vcnk.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(((20)))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi330vcnk.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(((44)))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (combinations 2 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pa4f6gl.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr82xec_l.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 2 (7) (7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr82xec_l.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 10 (20) (20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr82xec_l.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 11 (44) (44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (combinations 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c790spj.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c790spj.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c790spj.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (let loop ([list1 list1]\n             [max-product 0])\n    (if (null? list1)\n        max-product\n        (let* ([tuple (car list1)]\n               [product (* (abs (car tuple)) (abs (cadr tuple)))])\n          (if (&gt; product max-product)\n              (loop (cdr list1) product)\n              (loop (cdr list1) max-product))))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "/tmp/tmpd6isk9vf.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:15:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi5nh2jr9.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let* ((tuple (car list1))\n               (product (abs (* (car tuple) (cadr tuple)))))\n          (if (> product max)\n              (max_product_tuple_helper (cdr list1) product)\n              (max_product_tuple_helper (cdr list1) max)))))\n  (max_product_tuple_helper list1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptldiirxs.rkt:15:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) (partition 2 1 list1)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmo2hvp0i.rkt:15:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbpu6xgc.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * (map abs x))) (map list list1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2d2jcpw.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2d2jcpw.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj2d2jcpw.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "/tmp/tmp_pgi3dsy.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 6\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs x) (abs (cdr x)))) (map (lambda (x) (cons (car x) (car (cdr x)))) list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmparncvmhw.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 . 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmparncvmhw.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 . 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmparncvmhw.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 . 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (apply append (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) (map (lambda (x) (sort x '>)) (map (lambda (x) (map abs x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgln7c3us.rkt:12:4\n\nsort: contract violation\n  expected: (any/c any/c . -> . any/c)\n  given: '>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgln7c3us.rkt:13:4\n\nsort: contract violation\n  expected: (any/c any/c . -> . any/c)\n  given: '>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgln7c3us.rkt:14:4\n\nsort: contract violation\n  expected: (any/c any/c . -> . any/c)\n  given: '>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (map list list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhvyq9dz.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (list (list-ref x 0) (list-ref x 1) (list-ref y 0) (list-ref y 1) (list-ref z 0) (list-ref z 1))) (cdr x))) (cdr y))) (cdr list1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "/tmp/tmpkyq3b0cm.rkt:5:237: y: unbound identifier\n  in: y\n  location...:\n   /tmp/tmpkyq3b0cm.rkt:5:237\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x)\n                    (apply * x))\n                  (map (lambda (x)\n                         (map abs x))\n                       (map (lambda (x)\n                              (map (lambda (y)\n                                     (list (car x) (car y)))\n                                   (cdr x)))\n                            (map (lambda (x)\n                                   (cons (car list1) x))\n                                (cdr list1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmmw53bu.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmmw53bu.rkt:23:4\n\ncar: contract violation\n  expected: pair?\n  given: 15\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmmw53bu.rkt:24:4\n\ncar: contract violation\n  expected: pair?\n  given: 10\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list (abs x) (abs y))) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq_wga25.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_40sd6f_.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_40sd6f_.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_40sd6f_.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (map (lambda (z) (* y z)) x)) x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ex6y4ze.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(4 14)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ex6y4ze.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(100 200)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ex6y4ze.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(121 484)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (cond\n    [(empty? list1) 0]\n    [else\n     (let*\n         ([list2 (rest list1)]\n          [max-product (max_product_tuple list2)]\n          [product (apply * (car list1))]\n          [product2 (apply * (car list2))])\n       (max max-product (max product product2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98w7in2a.rkt:20:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98w7in2a.rkt:21:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98w7in2a.rkt:22:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (define (max_product_tuple_helper list1 max)\n    (if (null? list1)\n        max\n        (let* ([tuple (car list1)]\n               [product (abs (* (car tuple) (cadr tuple)))]\n               [max (if (&gt; product max) product max)])\n          (max_product_tuple_helper (cdr list1) max))))\n  (max_product_tuple_helper list1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "/tmp/tmprmnmo6ze.rkt:11:54: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) (car y) (cdr x) (cdr y))) (cdr list1))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjio3eh8i.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 2 (7) (6))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjio3eh8i.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 15 (20) (2))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjio3eh8i.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 10 (44) (15))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (map (lambda (y) (list (car x) y)) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:12:4\n\nabs: contract violation\n  expected: real?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:13:4\n\nabs: contract violation\n  expected: real?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqvqinjg.rkt:14:4\n\nabs: contract violation\n  expected: real?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:12:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((2 7) (2 6) (1 8) (4 9))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:13:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((10 20) (15 2) (5 10))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprm7h5i6s.rkt:14:4\n\npartition: contract violation\n  expected: (any/c . -> . any/c)\n  given: 2\n  argument position: 1st\n  other arguments...:\n   '((11 44) (10 15) (20 5) (12 9))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (define (max_product_tuple_helper list1 list2 max)\n    (cond ((null? list1) max)\n          ((null? list2) (max_product_tuple_helper (cdr list1) (cdr list1) max))\n          ((> (* (car list1) (car list2)) max) (max_product_tuple_helper list1 (cdr list2) (* (car list1) (car list2))))\n          (else (max_product_tuple_helper list1 (cdr list2) max))))\n  (max_product_tuple_helper list1 list1 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp024nqhpy.rkt:17:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp024nqhpy.rkt:18:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp024nqhpy.rkt:19:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x y) (* (abs x) (abs y))) list1 (cdr list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpov140z22.rkt:12:4\n\nmap: all lists must have same size\n  first list length: 4\n  other list length: 3\n  procedure: #<procedure:...tmp/tmpov140z22.rkt:5:18>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpov140z22.rkt:13:4\n\nmap: all lists must have same size\n  first list length: 3\n  other list length: 2\n  procedure: #<procedure:...tmp/tmpov140z22.rkt:5:18>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpov140z22.rkt:14:4\n\nmap: all lists must have same size\n  first list length: 4\n  other list length: 3\n  procedure: #<procedure:...tmp/tmpov140z22.rkt:5:18>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02zc7mf.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map (lambda (x) (map abs x)) (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (apply * x)) (map list list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdv5eb3se.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdv5eb3se.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdv5eb3se.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the maximum absolute product between numbers in pairs of lists within a given list.\n(define (max_product_tuple list1)\n  (apply max (map (lambda (x) (* (abs (car x)) (abs (cadr x)))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 36)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 200)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 484)\n))\n\n(test-humaneval)",
      "timestamp": 1665509684,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp50ayf470.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}