{
  "name": "mbpp_595_min_Swaps",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\n(define (min_Swaps str1 str2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_Swaps))\n    (check-equal? (candidate \"1101\" \"1110\") 1)\n    (check-equal? (candidate \"111\" \"000\") \"Not Possible\")\n    (check-equal? (candidate \"111\" \"110\") \"Not Possible\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (swap_count str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (swap_count (rest str1) (rest str2))]\n      [else (+ 1 (swap_count (rest str1) (rest str2)))]))\n  (swap_count str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? (string-ref str1 0) (string-ref str2 0)) (helper (substring str1 1) (substring str2 1) count)]\n      [else (min (helper (string-append (substring str1 1) (string (string-ref str1 0))) str2 (+ count 1))\n                 (helper (string-append (string (string-ref str2 0)) (substring str1 0 (- (string-length str1) 1))) (substring str2 1) (+ count 1)))]))\n  (helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [else\n       (if (char=? (first str1) (first str2))\n           (count_diff (rest str1) (rest str2))\n           (+ 1 (count_diff (rest str1) (rest str2))))]))\n  (count_diff str1 str2))\n",
    "  (define (swap_count s1 s2)\n    (if (or (string=? s1 s2) (string=? s1 \"\") (string=? s2 \"\"))\n        0\n        (+ (if (string-ci=? (substring s1 0 1) (substring s2 0 1))\n               0\n               1)\n           (swap_count (substring s1 1) (substring s2 1)))))\n  (swap_count str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(and (char=? (string-ref str1 i) #\\1)\n              (char=? (string-ref str2 i) #\\0))\n         (loop (+ i 1) (+ count 1))]\n        [(and (char=? (string-ref str1 i) #\\0)\n              (char=? (string-ref str2 i) #\\1))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(char=? (first str1) (first str2)) (count-diff-helper (rest str1) (rest str2) count)]\n        [else (count-diff-helper (rest str1) (rest str2) (+ count 1))]))\n    (count-diff-helper str1 str2 0))\n  (count-diff str1 str2))\n",
    "  (define (count-differences str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count-differences (rest str1) (rest str2))]\n      [else (+ 1 (count-differences (rest str1) (rest str2)))]))\n  (count-differences str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(not (equal? (string-ref str1 i) (string-ref str2 i)))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (swap str1 str2)\n    (cond\n      [(string=? str1 str2) 0]\n      [(string=? (string-append str1 \"0\") str2) 1]\n      [(string=? (string-append str1 \"1\") str2) 1]\n      [(string=? (string-append str1 \"00\") str2) 2]\n      [(string=? (string-append str1 \"01\") str2) 2]\n      [(string=? (string-append str1 \"10\") str2) 2]\n      [(string=? (string-append str1 \"11\") str2) 2]\n      [(string=? (string-append str1 \"000\") str2) 3]\n      [(string=? (string-append str1 \"001\") str2) 3]\n      [(string=? (string-append str1 \"010\") str2) 3]\n      [(string=? (string-append str1 \"011\") str2) 3]\n      [(string=? (string-append str1 \"100\") str2) 3]\n      [(string=? (string-append str1 \"101\") str2) 3]\n      [(string=? (string-append str1 \"110\") str2) 3]\n      [(string=? (string-append str1 \"111\") str2) 3]\n      [else (swap (string-append str1 \"0\") str2) + (swap (string-append str1 \"1\") str2)]))\n  (swap str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 acc)\n      (if (or (null? str1) (null? str2))\n          acc\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) acc)\n              (count_diff_helper (cdr str1) (cdr str2) (+ acc 1)))))\n    (count_diff_helper (string->list str1) (string->list str2) 0))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (swap str1 str2)\n    (define (swap-helper str1 str2 count)\n      (if (equal? str1 str2)\n          count\n          (swap-helper (string-replace str1 #\\1 #\\0) (string-replace str2 #\\1 #\\0) (+ count 1))))\n    (swap-helper str1 str2 0))\n  (swap str1 str2))\n",
    "  (define (swap-count str1 str2)\n    (define (swap-count-helper str1 str2 count)\n      (if (or (string=? str1 str2) (string=? str1 \"\"))\n          count\n          (swap-count-helper (string-drop str1 1) (string-drop str2 1) (+ count (if (string=? (string-ref str1 0) (string-ref str2 0)) 0 1)))))\n    (swap-count-helper str1 str2 0))\n  (if (string=? str1 str2)\n      0\n      (swap-count str1 str2)))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (count_Swaps str1 str2 i j)\n    (cond\n      [(= i j) 0]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (+ 1 (count_Swaps str1 str2 (+ i 1) j))]\n      [else (count_Swaps str1 str2 (+ i 1) j)]))\n  (count_Swaps str1 str2 0 (string-length str1)))\n",
    "  (define (count-diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [else (+ (if (equal? (first str1) (first str2)) 0 1) (count-diff (rest str1) (rest str2)))]))\n  (count-diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (string=? str1 \"\") (string=? str2 \"\"))\n        0\n        (if (string=? (string-ref str1 0) (string-ref str2 0))\n            (count_diff (substring str1 1) (substring str2 1))\n            (+ 1 (count_diff (substring str1 1) (substring str2 1))))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [else (cond\n                [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n                [else (count_diff_helper (rest str1) (rest str2) (+ count 1))])]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(and (char=? (string-ref str1 i) #\\1) (char=? (string-ref str2 i) #\\0))\n         (loop (+ i 1) (+ count 1))]\n        [(and (char=? (string-ref str1 i) #\\0) (char=? (string-ref str2 i) #\\1))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (swap_count str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(and (char=? (first str1) #\\1) (char=? (first str2) #\\0)) (+ 1 (swap_count (rest str1) (rest str2)))]\n      [(and (char=? (first str1) #\\0) (char=? (first str2) #\\1)) (+ 1 (swap_count (rest str1) (rest str2)))]\n      [else (swap_count (rest str1) (rest str2))]))\n  (swap_count str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (define (swap_count i)\n      (if (= i len)\n          0\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (+ 1 (swap_count (+ i 1)))\n              (swap_count (+ i 1)))))\n    (swap_count 0)))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff s1 s2)\n    (cond\n      [(empty? s1) 0]\n      [(empty? s2) 0]\n      [(char=? (first s1) (first s2)) (count_diff (rest s1) (rest s2))]\n      [else (+ 1 (count_diff (rest s1) (rest s2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (empty? str1) (empty? str2))\n        0\n        (+ (if (equal? (first str1) (first str2)) 0 1)\n           (count_diff (rest str1) (rest str2)))))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? (string-ref str1 0) (string-ref str2 0)) (helper (substring str1 1) (substring str2 1) count)]\n      [else (min (helper (string-replace str1 #\\1 #\\0) str2 (+ count 1))\n                 (helper (string-replace str1 #\\0 #\\1) str2 (+ count 1)))]))\n  (helper str1 str2 0))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(char=? (first str1) (first str2)) (count-diff-helper (rest str1) (rest str2) count)]\n        [else (count-diff-helper (rest str1) (rest str2) (+ count 1))]))\n    (count-diff-helper str1 str2 0))\n  (define (min-swaps-helper str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(char=? (first str1) (first str2)) (min-swaps-helper (rest str1) (rest str2) count)]\n      [else (min-swaps-helper (rest str1) (rest str2) (+ count 1))]))\n  (min-swaps-helper str1 str2 0))\n",
    "  (define (count-1 str)\n    (cond [(empty? str) 0]\n          [(equal? (first str) #\\1) (+ 1 (count-1 (rest str)))]\n          [else (count-1 (rest str))]))\n  (- (count-1 str1) (count-1 str2)))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count-diff-helper (rest str1) (rest str2) count)]\n        [else (count-diff-helper (rest str1) (rest str2) (+ count 1))]))\n    (count-diff-helper str1 str2 0))\n  (count-diff str1 str2))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (count_swaps str1 str2 i)\n    (cond\n      [(= i (string-length str1)) 0]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (+ 1 (count_swaps str1 str2 (+ i 1)))]\n      [else (count_swaps str1 str2 (+ i 1))]))\n  (define (swap_str str1 str2 i)\n    (cond\n      [(= i (string-length str1)) str1]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (swap str1 i (+ i 1))]\n      [else (swap_str str1 str2 (+ i 1))]))\n  (define (min_swaps str1 str2 i)\n    (cond\n      [(= i (string-length str1)) 0]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (+ 1 (min_swaps (swap_str str1 str2 i) str2 (+ i 1)))]\n      [else (min_swaps str1 str2 (+ i 1))]))\n  (min_swaps str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (cond [(empty? str1) 0]\n          [(empty? str2) 0]\n          [(char=? (first str1) (first str2)) (count-diff (rest str1) (rest str2))]\n          [else (+ 1 (count-diff (rest str1) (rest str2)))]))\n  (count-diff str1 str2))\n",
    "  (define (swap_count str1 str2)\n    (cond [(string=? str1 str2) 0]\n          [else (add1 (swap_count (swap_char str1) str2))]))\n  (define (swap_char str)\n    (string-append (substring str 0 1)\n                   (string-append (string #\\1)\n                                  (substring str 2 (string-length str)))))\n  (swap_count str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count_diff str1 str2))\n",
    "  (define (count-differences str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count-differences (cdr str1) (cdr str2)))))\n  (count-differences str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count-differences str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count-differences (cdr str1) (cdr str2)))))\n  (count-differences str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (equal? str1 str2)\n        0\n        (+ 1 (count_diff (rest str1) (rest str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count-diff-helper (cdr str1) (cdr str2) count)\n              (count-diff-helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count-diff-helper (string->list str1) (string->list str2) 0))\n  (count-diff str1 str2))\n",
    "  (define (swap_count str1 str2)\n    (cond [(empty? str1) 0]\n          [(empty? str2) 0]\n          [(and (equal? (first str1) #\\0) (equal? (first str2) #\\1)) (+ 1 (swap_count (rest str1) (rest str2)))]\n          [(and (equal? (first str1) #\\1) (equal? (first str2) #\\0)) (+ 1 (swap_count (rest str1) (rest str2)))]\n          [else (swap_count (rest str1) (rest str2))]))\n  (swap_count (string->list str1) (string->list str2)))\n",
    "  (define (count_diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count_diff str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (cond ((or (null? str1) (null? str2)) 0)\n          ((not (equal? (car str1) (car str2))) (+ 1 (count-diff (cdr str1) (cdr str2))))\n          (else (count-diff (cdr str1) (cdr str2)))))\n  (count-diff (string->list str1) (string->list str2)))\n",
    "  (let ([l1 (string-&gt;list str1)]\n        [l2 (string-&gt;list str2)])\n    (if (equal? l1 l2)\n        0\n        (let ([diff (difference l1 l2)])\n          (if (equal? diff '())\n              0\n              (let ([diff1 (car diff)]\n                    [diff2 (cadr diff)])\n                (if (equal? diff1 diff2)\n                    1\n                    (let ([l1 (string-&gt;list str1)]\n                          [l2 (string-&gt;list str2)])\n                      (let ([l1 (replace l1 diff1 diff2)]\n                            [l2 (replace l2 diff2 diff1)])\n                        (min_Swaps (list-&gt;string l1) (list-&gt;string l2)))))))))))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff_bits str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(equal? (first str1) (first str2)) (count_diff_bits (rest str1) (rest str2))]\n      [else (+ 1 (count_diff_bits (rest str1) (rest str2)))]))\n  (count_diff_bits (string->list str1) (string->list str2)))\n",
    "  (define (count-diff str1 str2)\n    (cond [(empty? str1) 0]\n          [(empty? str2) 0]\n          [(char=? (first str1) (first str2)) (count-diff (rest str1) (rest str2))]\n          [else (+ 1 (count-diff (rest str1) (rest str2)))]))\n  (count-diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(empty? str2) count]\n      [(char=? (first str1) (first str2)) (helper (rest str1) (rest str2) count)]\n      [else (helper (rest str1) (rest str2) (+ count 1))]))\n  (helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (define (swap_helper str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(empty? str2) count]\n      [(char=? (first str1) (first str2)) (swap_helper (rest str1) (rest str2) count)]\n      [(char=? (first str1) #\\0) (swap_helper (rest str1) (rest str2) (+ count 1))]\n      [(char=? (first str1) #\\1) (swap_helper (rest str1) (rest str2) (+ count 1))]))\n  (define (swap_helper2 str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(empty? str2) count]\n      [(char=? (first str1) (first str2)) (swap_helper2 (rest str1) (rest str2) count)]\n      [(char=? (first str1) #\\0) (swap_helper2 (rest str1) (rest str2) (+ count 1))]\n      [(char=? (first str1) #\\1) (swap_helper2 (rest str1) (rest str2) (+ count 1))]))\n  (define (swap_helper3 str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(empty? str2) count]\n      [(char=? (first str1) (first str2)) (swap_helper3 (rest str1) (rest str2) count)]\n      [(char=? (",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [else (+ (if (equal? (first str1) (first str2)) 0 1) (count_diff (rest str1) (rest str2)))]))\n  (define (min_Swaps_helper str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [else (min (count_diff str1 str2) (min_Swaps_helper (rest str1) (rest str2)))]))\n  (min_Swaps_helper str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count_diff str1 str2))\n",
    "  (define (swap-positions str1 str2)\n    (cond [(string=? str1 str2) 0]\n          [else (define (swap-positions-helper str1 str2 pos)\n                 (cond [(string=? str1 str2) pos]\n                       [else (swap-positions-helper (string-set! str1 pos (string-ref str2 pos))\n                                                    (string-set! str2 pos (string-ref str1 pos))\n                                                    (+ pos 1))]))\n                 (swap-positions-helper str1 str2 0)]))\n  (swap-positions str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (cond [(string=? str1 str2) count]\n          [else (helper (string-replace str1 #\\1 #\\0) (string-replace str2 #\\1 #\\0) (+ count 1))]))\n  (helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (if (string=? str1 str2)\n        0\n        (+ 1 (count_diff (string-replace str1 #\\1 #\\0) (string-replace str2 #\\1 #\\0)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count-1s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (char=? (string-ref str 0) #\\1) 1 0) (count-1s (substring str 1)))))\n  (- (count-1s str1) (count-1s str2)))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [else\n       (define (swap_helper str1 str2 count i)\n         (cond\n           [(string=? str1 str2) count]\n           [else\n            (define (swap_helper_helper str1 str2 count i j)\n              (cond\n                [(string=? str1 str2) count]\n                [else\n                 (min_Swaps_helper (swap str1 i j) str2 (+ count 1))]))\n            (swap_helper_helper str1 str2 count i (+ i 1))]))\n       (swap_helper str1 str2 count 0)]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n",
    "  (define (swap-helper str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(equal? (first str1) (first str2)) (swap-helper (rest str1) (rest str2))]\n      [else (+ 1 (swap-helper (rest str1) (rest str2)))]))\n  (swap-helper (string->list str1) (string->list str2)))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (if (and (string-ref str1 i) (string-ref str2 i))\n              (loop (+ i 1) count)\n              (loop (+ i 1) (+ count 1)))))))\n",
    "  (define (count_1s str)\n    (cond\n      [(empty? str) 0]\n      [(equal? (first str) #\\1) (+ 1 (count_1s (rest str)))]\n      [else (count_1s (rest str))]))\n  (define (count_0s str)\n    (cond\n      [(empty? str) 0]\n      [(equal? (first str) #\\0) (+ 1 (count_0s (rest str)))]\n      [else (count_0s (rest str))]))\n  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(equal? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (define (count_swaps str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(equal? (first str1) (first str2)) (count_swaps (rest str1) (rest str2))]\n      [(equal? (first str1) #\\0) (count_swaps (rest str1) (rest str2))]\n      [else (+ 1 (count_swaps (rest str1) (rest str2)))]))\n  (cond\n    [(equal? (count_1s str1) (count_1s str2)) (count_diff str1 str2)]\n    [(equal? (count_0s str1) (count_0s str2)) (count_swaps str1 str2)]\n    [else (count_diff str1 str2)]))\n",
    "  (define (count_diff str1 str2)\n    (if (string=? str1 str2)\n        0\n        (+ 1 (count_diff (string-tail str1) (string-tail str2)))))\n  (count_diff str1 str2))\n",
    "  (let ((str1 (string->list str1))\n        (str2 (string->list str2)))\n    (let loop ((str1 str1)\n               (str2 str2)\n               (count 0))\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (car str1) (car str2)) (loop (cdr str1) (cdr str2) count)]\n        [else (loop (cdr str1) (cdr str2) (+ count 1))]))))\n",
    "  (define (count_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (string=? (substring str 0 1) \"1\") 1 0) (count_1s (substring str 1)))))\n  (define (count_0s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (string=? (substring str 0 1) \"0\") 1 0) (count_0s (substring str 1)))))\n  (define (count_1s_0s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (and (string=? (substring str 0 1) \"1\") (string=? (substring str 1 1) \"0\")) 1 0) (count_1s_0s (substring str 1)))))\n  (define (count_0s_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (and (string=? (substring str 0 1) \"0\") (string=? (substring str 1 1) \"1\")) 1 0) (count_0s_1s (substring str 1)))))\n  (define (count_1s_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (and (string=? (substring str 0 1) \"1\") (string=? (substring str 1 1) \"1\")) 1 0) (count_1s_1s (substring str 1)))))\n  (define (count_0s_0s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (and (string=? (substring str 0 1) \"0\") (string=? (substring str 1 1) \"0\")) 1 0) (count_0s_0s (substring str 1)))))\n  (define (count_1s_0s_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (if (and (string=? (substring str 0 1) \"1\") (string=? (substring str 1 1) \"0\") (string=?",
    "  (let ([len (string-length str1)]\n        [count 0])\n    (for ([i (in-range len)])\n      (when (not (equal? (string-ref str1 i) (string-ref str2 i)))\n        (set! count (+ count 1))))\n    count))\n",
    "  (define (count_1 str)\n    (cond\n      [(empty? str) 0]\n      [(equal? (first str) #\\1) (+ 1 (count_1 (rest str)))]\n      [else (count_1 (rest str))]))\n  (define (count_0 str)\n    (cond\n      [(empty? str) 0]\n      [(equal? (first str) #\\0) (+ 1 (count_0 (rest str)))]\n      [else (count_0 (rest str))]))\n  (define (min_swap str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(equal? (first str1) (first str2)) (min_swap (rest str1) (rest str2))]\n      [else (+ 1 (min_swap (rest str1) (rest str2)))]))\n  (cond\n    [(equal? (count_1 str1) (count_1 str2)) (min_swap str1 str2)]\n    [(> (count_1 str1) (count_1 str2)) (+ (count_1 str1) (count_0 str2))]\n    [else (+ (count_1 str2) (count_0 str1))]))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (swap_count str1 str2)\n    (define (swap_count_helper str1 str2 i)\n      (if (&lt; i (string-length str1))\n          (if (equal? (string-ref str1 i) (string-ref str2 i))\n              (swap_count_helper str1 str2 (+ i 1))\n              (swap_count_helper (swap str1 i (+ i 1)) str2 (+ i 1)))\n          0))\n    (swap_count_helper str1 str2 0))\n  (swap_count str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_iter str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(not (equal? (first str1) (first str2))) (count_diff_iter (rest str1) (rest str2) (+ count 1))]\n        [else (count_diff_iter (rest str1) (rest str2) count)]))\n    (count_diff_iter str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (let loop ([i 0] [diff 0])\n      (if (= i (string-length str1))\n          diff\n          (if (not (equal? (string-ref str1 i) (string-ref str2 i)))\n              (loop (+ i 1) (+ diff 1))\n              (loop (+ i 1) diff)))))\n  (count-diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (empty? str1) (empty? str2))\n        0\n        (+ (if (equal? (first str1) (first str2)) 0 1)\n           (count_diff (rest str1) (rest str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [else (+ (if (equal? (first str1) (first str2)) 0 1) (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(empty? str2) count]\n      [(char=? (first str1) (first str2)) (min_Swaps_helper (rest str1) (rest str2) count)]\n      [else (min_Swaps_helper (rest str1) (rest str2) (+ count 1))]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (define (swap str1 str2)\n    (cond\n      [(string=? str1 str2) 0]\n      [(string=? str1 \"0\") (swap (string-append \"1\" (substring str1 1)) str2)]\n      [(string=? str1 \"1\") (swap (string-append \"0\" (substring str1 1)) str2)]\n      [(string=? str2 \"0\") (swap str1 (string-append \"1\" (substring str2 1)))]\n      [(string=? str2 \"1\") (swap str1 (string-append \"0\" (substring str2 1)))]))\n  (swap str1 str2))\n",
    "  (let ([l1 (string-length str1)]\n        [l2 (string-length str2)]\n        [count 0])\n    (cond [(and (= l1 l2) (= (string-ref str1 0) (string-ref str2 0)))\n           (for ([i (in-range 1 l1)])\n             (when (not (= (string-ref str1 i) (string-ref str2 i)))\n               (set! count (add1 count))))\n           count]\n          [else (error \"Strings are not of equal length or do not start with the same character\")])))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(string=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (if (or (equal? str1 str2) (equal? str1 \"\") (equal? str2 \"\"))\n        count\n        (if (equal? (first str1) (first str2))\n            (helper (rest str1) (rest str2) count)\n            (if (equal? (first str1) #\\0)\n                (helper (rest str1) (rest str2) (+ count 1))\n                (helper (rest str1) (rest str2) (+ count 2))))))\n  (helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (if (or (zero? (string-length str1)) (zero? (string-length str2)))\n        0\n        (+ (if (equal? (string-ref str1 0) (string-ref str2 0)) 0 1)\n           (count_diff (substring str1 1) (substring str2 1)))))\n  (count_diff str1 str2))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (swap_count str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1) (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define (swap_count_2 str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\0) (char=? (string-ref str2 i) #\\1))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (cond [(= (swap_count str1 str2) (swap_count_2 str1 str2)) (swap_count str1 str2)]\n        [(> (swap_count str1 str2) (swap_count_2 str1 str2)) (swap_count_2 str1 str2)]\n        [else (swap_count str1 str2)]))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond [(empty? str1) count]\n            [(empty? str2) count]\n            [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n            [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (if (or (string=? str1 str2) (string=? str1 \"\"))\n        count\n        (helper (substring str1 1) (substring str2 1) (+ count (if (string=? (substring str1 0 1) (substring str2 0 1)) 0 1)))))\n  (helper str1 str2 0))\n",
    "  (let ([len (string-length str1)])\n    (if (= len 0)\n        0\n        (if (and (char=? (string-ref str1 0) #\\1)\n                 (char=? (string-ref str2 0) #\\0))\n            (+ 1 (min_Swaps (substring str1 1 len) (substring str2 1 len)))\n            (if (and (char=? (string-ref str1 0) #\\0)\n                     (char=? (string-ref str2 0) #\\1))\n                (+ 1 (min_Swaps (substring str1 1 len) (substring str2 1 len)))\n                (min_Swaps (substring str1 1 len) (substring str2 1 len)))))))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond [(empty? str1) 0]\n          [(empty? str2) 0]\n          [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n          [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? (string-ref str1 0) (string-ref str2 0)) (min_Swaps_helper (substring str1 1) (substring str2 1) count)]\n      [else (min_Swaps_helper (substring str1 1) (substring str2 1) (+ count 1))]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (cond\n    [(string=? str1 str2) 0]\n    [else\n     (let*\n         ([str1-list (string-&gt;list str1)]\n          [str2-list (string-&gt;list str2)]\n          [str1-list-len (length str1-list)]\n          [str2-list-len (length str2-list)]\n          [str1-list-len-1 (- str1-list-len 1)]\n          [str2-list-len-1 (- str2-list-len 1)]\n          [str1-list-len-2 (- str1-list-len 2)]\n          [str2-list-len-2 (- str2-list-len 2)]\n          [str1-list-len-3 (- str1-list-len 3)]\n          [str2-list-len-3 (- str2-list-len 3)]\n          [str1-list-len-4 (- str1-list-len 4)]\n          [str2-list-len-4 (- str2-list-len 4)]\n          [str1-list-len-5 (- str1-list-len 5)]\n          [str2-list-len-5 (- str2-list-len 5)]\n          [str1-list-len-6 (- str1-list-len 6)]\n          [str2-list-len-6 (- str2-list-len 6)]\n          [str1-list-len-7 (- str1-list-len 7)]\n          [str2-list-len-7 (- str2-list-len 7)]\n          [str1-list-len-8 (- str1-list-len 8)]\n          [str2-list-len-8 (- str2-list-len 8)]\n          [str1-list-len-9 (- str1-list-len 9)]\n          [str2-list-len-9 (- str2-list-len 9)]\n          [str1-list-len-10 (- str1-list-len 10)]\n          [str2-list-len-10 (- str2-list-len 10)]\n          [str1-list-len-11 (- str1-list-len 11)]",
    "  (define (swap_count str1 str2)\n    (define (swap_count_helper str1 str2 count)\n      (cond\n        [(string=? str1 str2) count]\n        [(string=? (string-ref str1 0) \"1\") (swap_count_helper (string-append (string-replace str1 \"1\" \"0\") (string-drop str1 1)) str2 (+ count 1))]\n        [(string=? (string-ref str1 0) \"0\") (swap_count_helper (string-append (string-replace str1 \"0\" \"1\") (string-drop str1 1)) str2 (+ count 1))]))\n    (swap_count_helper str1 str2 0))\n  (swap_count str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (if (equal? (car str1) (car str2))\n            (count_diff (cdr str1) (cdr str2))\n            (+ 1 (count_diff (cdr str1) (cdr str2))))))\n  (count_diff (string->list str1) (string->list str2)))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (if (string=? str1 str2)\n        count\n        (if (string=? (string-ref str1 0) (string-ref str2 0))\n            (helper (substring str1 1) (substring str2 1) count)\n            (helper (substring str1 1) (substring str2 1) (+ count 1)))))\n  (helper str1 str2 0))\n",
    "  (define (swap-count str1 str2)\n    (define (swap-count-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (swap-count-helper (rest str1) (rest str2) count)]\n        [else (swap-count-helper (rest str1) (rest str2) (+ count 1))]))\n    (swap-count-helper str1 str2 0))\n  (swap-count str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [else (helper (string-replace str1 \"0\" \"x\") (string-replace str2 \"1\" \"x\") (+ count 1))]))\n  (helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [else (+ (if (equal? (first str1) (first str2)) 0 1) (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? (string-ref str1 0) \"0\") (min_Swaps_helper (string-append \"1\" (substring str1 1)) str2 (+ count 1))]\n      [(string=? (string-ref str1 0) \"1\") (min_Swaps_helper (string-append \"0\" (substring str1 1)) str2 (+ count 1))]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond [(empty? str1) count]\n            [(empty? str2) count]\n            [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n            [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [swaps 0])\n      (if (= i len)\n          swaps\n          (let ([c1 (string-ref str1 i)]\n                [c2 (string-ref str2 i)])\n            (if (and (char=? c1 #\\1) (char=? c2 #\\0))\n                (loop (+ i 1) (+ swaps 1))\n                (loop (+ i 1) swaps)))))))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(not (= (string-ref str1 i) (string-ref str2 i)))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (min_swaps_helper str1 str2 i swaps)\n    (cond\n      [(= i (string-length str1)) swaps]\n      [(char=? (string-ref str1 i) (string-ref str2 i)) (min_swaps_helper str1 str2 (+ i 1) swaps)]\n      [(char=? (string-ref str1 i) (string-ref str2 (+ i 1))) (min_swaps_helper (swap str1 i (+ i 1)) str2 (+ i 1) (+ swaps 1))]\n      [(char=? (string-ref str1 (+ i 1)) (string-ref str2 i)) (min_swaps_helper (swap str1 (+ i 1) i) str2 (+ i 1) (+ swaps 1))]\n      [else (min_swaps_helper str1 str2 (+ i 1) (+ swaps 1))]))\n  (min_swaps_helper str1 str2 0 0))\n",
    "  (define (count_diff str1 str2)\n    (if (or (empty? str1) (empty? str2))\n        0\n        (+ (if (equal? (first str1) (first str2)) 0 1)\n           (count_diff (rest str1) (rest str2)))))\n  (count_diff str1 str2))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (count_swaps str1 str2 i)\n    (cond\n      [(= i (string-length str1)) 0]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (+ 1 (count_swaps str1 str2 (+ i 1)))]\n      [else (count_swaps str1 str2 (+ i 1))]))\n  (define (swap_str str1 str2 i)\n    (cond\n      [(= i (string-length str1)) str1]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (swap str1 i (+ i 1))]\n      [else (swap_str str1 str2 (+ i 1))]))\n  (define (min_swaps str1 str2 i)\n    (cond\n      [(= i (string-length str1)) 0]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (+ 1 (min_swaps (swap_str str1 str2 i) str2 (+ i 1)))]\n      [else (min_swaps str1 str2 (+ i 1))]))\n  (min_swaps str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_iter str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_iter (cdr str1) (cdr str2) count)\n              (count_diff_iter (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_iter str1 str2 0))\n  (define (get_index str1 str2)\n    (define (get_index_iter str1 str2 index)\n      (if (or (null? str1) (null? str2))\n          index\n          (if (equal? (car str1) (car str2))\n              (get_index_iter (cdr str1) (cdr str2) (+ index 1))\n              (get_index_iter (cdr str1) (cdr str2) index))))\n    (get_index_iter str1 str2 0))\n  (define (get_char str index)\n    (if (equal? index 0)\n        (car str)\n        (get_char (cdr str) (- index 1))))\n  (define (get_index_char str char)\n    (define (get_index_char_iter str char index)\n      (if (null? str)\n          index\n          (if (equal? (car str) char)\n              index\n              (get_index_char_iter (cdr str) char (+ index 1)))))\n    (get_index_char_iter str char 0))\n  (define (swap_char str index1 index2)\n    (define (swap_char_iter str index1 index2)\n      (if (null? str)\n          '()\n          (if (equal? index1 0)\n              (cons (get_char str index2) (swap_char_iter (cdr str) (- index1 1) (- index2 1)))\n              (cons (car str) (swap_char_iter (cdr str) (- index1 1) (- index2 1))))))\n   ",
    "  (local [(define (min_Swaps_helper str1 str2 count)\n            (cond [(empty? str1) count]\n                  [(empty? str2) count]\n                  [(and (char=? (first str1) #\\1) (char=? (first str2) #\\0)) (min_Swaps_helper (rest str1) (rest str2) (+ count 1))]\n                  [(and (char=? (first str1) #\\0) (char=? (first str2) #\\1)) (min_Swaps_helper (rest str1) (rest str2) (+ count 1))]\n                  [else (min_Swaps_helper (rest str1) (rest str2) count)]))]\n    (min_Swaps_helper str1 str2 0)))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(char=? (first str1) (first str2)) (count-diff-helper (rest str1) (rest str2) count)]\n        [else (count-diff-helper (rest str1) (rest str2) (+ count 1))]))\n    (count-diff-helper str1 str2 0))\n  (count-diff str1 str2))\n",
    "  (define (count_differences str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_differences (rest str1) (rest str2))]\n      [else (+ 1 (count_differences (rest str1) (rest str2)))]))\n  (count_differences str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 acc)\n      (if (or (empty? str1) (empty? str2))\n          acc\n          (if (equal? (first str1) (first str2))\n              (count_diff_helper (rest str1) (rest str2) acc)\n              (count_diff_helper (rest str1) (rest str2) (+ acc 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count_ones str)\n    (if (string=? str \"\")\n        0\n        (+ (if (string=? (substring str 0 1) \"1\") 1 0)\n           (count_ones (substring str 1)))))\n  (define (swap_ones str)\n    (if (string=? str \"\")\n        \"\"\n        (string-append (if (string=? (substring str 0 1) \"1\") \"0\" \"1\")\n                        (swap_ones (substring str 1)))))\n  (define (min_swaps str1 str2)\n    (if (string=? str1 str2)\n        0\n        (+ 1 (min_swaps (swap_ones str1) str2))))\n  (min_swaps str1 str2))\n",
    "  (let ([n (string-length str1)])\n    (define (count_diff str1 str2)\n      (let loop ([i 0] [count 0])\n        (if (= i n)\n            count\n            (if (and (char=? (string-ref str1 i) #\\1)\n                     (char=? (string-ref str2 i) #\\0))\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))\n    (count_diff str1 str2)))\n",
    "  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? str1 \"\") count]\n      [(string=? str2 \"\") count]\n      [else (min_Swaps_helper (substring str1 1) (substring str2 1) (+ count (if (char=? (string-ref str1 0) (string-ref str2 0)) 0 1)))]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (define (count-diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count-diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [swaps 0])\n      (cond\n        [(= i len) swaps]\n        [(and (char=? (string-ref str1 i) #\\1) (char=? (string-ref str2 i) #\\0)) (loop (+ i 1) (+ swaps 1))]\n        [(and (char=? (string-ref str1 i) #\\0) (char=? (string-ref str2 i) #\\1)) (loop (+ i 1) (+ swaps 1))]\n        [else (loop (+ i 1) swaps)]))))\n",
    "  (define (helper str1 str2 count)\n    (if (or (string=? str1 str2) (string=? str1 \"\"))\n        count\n        (if (string=? (substring str1 0 1) \"1\")\n            (helper (substring str1 1) (string-append \"0\" str2) (+ count 1))\n            (helper (substring str1 1) (string-append \"1\" str2) (+ count 1)))))\n  (helper str1 str2 0))\n",
    "  (define (swap str1 str2)\n    (define (swap-helper str1 str2 count)\n      (if (or (string=? str1 str2) (string=? str1 \"\") (string=? str2 \"\"))\n          count\n          (if (string=? (substring str1 0 1) (substring str2 0 1))\n              (swap-helper (substring str1 1) (substring str2 1) count)\n              (swap-helper (substring str1 1) (substring str2 1) (+ count 1)))))\n    (swap-helper str1 str2 0))\n  (swap str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (if (not (= len (string-length str2)))\n        (error \"Strings must be of equal length\")\n        (let loop ([i 0] [count 0])\n          (if (= i len)\n              count\n              (if (and (char=? (string-ref str1 i) #\\1)\n                       (char=? (string-ref str2 i) #\\0))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count)))))))\n",
    "  (define (swap_count str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(and (char=? (first str1) #\\1) (char=? (first str2) #\\0)) (+ 1 (swap_count (rest str1) (rest str2)))]\n      [(and (char=? (first str1) #\\0) (char=? (first str2) #\\1)) (+ 1 (swap_count (rest str1) (rest str2)))]\n      [else (swap_count (rest str1) (rest str2))]))\n  (swap_count str1 str2))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (swap_count str1 str2)\n    (let loop ([i 0] [count 0])\n      (cond [(= i (string-length str1)) count]\n            [(char=? (string-ref str1 i) (string-ref str2 i)) (loop (+ i 1) count)]\n            [else (loop (+ i 1) (+ count 1))])))\n  (define (swap_count_helper str1 str2 i j)\n    (swap str1 i j)\n    (let ([count (swap_count str1 str2)])\n      (swap str1 i j)\n      count))\n  (define (min_swap_count str1 str2 i j)\n    (let loop ([i i] [j j] [count (swap_count_helper str1 str2 i j)])\n      (cond [(= i j) count]\n            [(< count (min_swap_count str1 str2 i (+ j 1))) count]\n            [else (min_swap_count str1 str2 i (+ j 1))])))\n  (min_swap_count str1 str2 0 (string-length str1)))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count-diff-helper (cdr str1) (cdr str2) count)\n              (count-diff-helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count-diff-helper str1 str2 0))\n  (count-diff str1 str2))\n",
    "  (define (count_diff_bits str1 str2)\n    (define (count_diff_bits_helper str1 str2)\n      (if (or (null? str1) (null? str2))\n          0\n          (if (not (= (string-&gt;number (string-ref str1 0)) (string-&gt;number (string-ref str2 0))))\n              (+ 1 (count_diff_bits_helper (substring str1 1) (substring str2 1)))\n              (count_diff_bits_helper (substring str1 1) (substring str2 1)))))\n    (count_diff_bits_helper (string-&gt;list str1) (string-&gt;list str2)))\n  (define (count_consecutive_ones str)\n    (define (count_consecutive_ones_helper str)\n      (if (null? str)\n          0\n          (if (= (string-&gt;number (string-ref str 0)) 1)\n              (+ 1 (count_consecutive_ones_helper (substring str 1)))\n              (count_consecutive_ones_helper (substring str 1)))))\n    (count_consecutive_ones_helper (string-&gt;list str)))\n  (define (count_consecutive_zeros str)\n    (define (count_consecutive_zeros_helper str)\n      (if (null? str)\n          0\n          (if (= (string-&gt;number (string-ref str 0)) 0)\n              (+ 1 (count_consecutive_zeros_helper (substring str 1)))\n              (count_consecutive_zeros_helper (substring str 1)))))\n    (count_consecutive_zeros_helper (string-&gt;list str)))\n  (define (min_Swaps_helper str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (if (and (= (string-&gt;number (string-ref str1 0)) 1) (= (string-&gt;number (string-ref str2 0))",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count-diff-helper (cdr str1) (cdr str2) count)\n              (count-diff-helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count-diff-helper (string->list str1) (string->list str2) 0))\n  (count-diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (cond\n      [(string=? str1 str2) 0]\n      [(= len 1) 1]\n      [else\n       (let* ([mid (/ len 2)]\n              [str1-left (substring str1 0 mid)]\n              [str1-right (substring str1 mid)]\n              [str2-left (substring str2 0 mid)]\n              [str2-right (substring str2 mid)]\n              [swaps-left (min_Swaps str1-left str2-left)]\n              [swaps-right (min_Swaps str1-right str2-right)])\n         (+ swaps-left swaps-right))])))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper (string->list str1) (string->list str2) 0))\n  (count_diff str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count-diff str1 str2))\n",
    "  (define (count-bits str)\n    (define (count-bits-helper str count)\n      (cond\n        [(empty? str) count]\n        [(equal? (first str) #\\1) (count-bits-helper (rest str) (+ count 1))]\n        [else (count-bits-helper (rest str) count)]))\n    (count-bits-helper str 0))\n  (define (swap-bits str1 str2)\n    (define (swap-bits-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(equal? (first str1) (first str2)) (swap-bits-helper (rest str1) (rest str2) count)]\n        [else (swap-bits-helper (rest str1) (rest str2) (+ count 1))]))\n    (swap-bits-helper str1 str2 0))\n  (define (min-swaps str1 str2)\n    (define (min-swaps-helper str1 str2)\n      (cond\n        [(empty? str1) 0]\n        [(equal? (first str1) (first str2)) (min-swaps-helper (rest str1) (rest str2))]\n        [else (min-swaps-helper (rest str1) (rest str2))]))\n    (min-swaps-helper str1 str2))\n  (define (min-swaps-helper str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(equal? (first str1) (first str2)) (min-swaps-helper (rest str1) (rest str2))]\n      [else (min-swaps-helper (rest str1) (rest str2))]))\n  (min-swaps-helper str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (char=? (string-ref str1 i) (string-ref str2 i))\n              (loop (+ i 1) count)\n              (loop (+ i 1) (+ count 1))))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper (string->list str1) (string->list str2) 0))\n  (count_diff str1 str2))\n",
    "  (define (count_diff_bits str1 str2)\n    (define (count_diff_bits-iter str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_bits-iter (cdr str1) (cdr str2) count)\n              (count_diff_bits-iter (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_bits-iter str1 str2 0))\n  (count_diff_bits str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (cond [(empty? str1) count]\n            [(empty? str2) count]\n            [(char=? (first str1) (first str2)) (count-diff-helper (rest str1) (rest str2) count)]\n            [else (count-diff-helper (rest str1) (rest str2) (+ count 1))]))\n    (count-diff-helper str1 str2 0))\n  (count-diff str1 str2))\n",
    "  (define (swap-count str1 str2)\n    (define (swap-count-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(equal? (first str1) (first str2)) (swap-count-helper (rest str1) (rest str2) count)]\n        [else (swap-count-helper (rest str1) (rest str2) (+ count 1))]))\n    (swap-count-helper str1 str2 0))\n  (swap-count str1 str2))\n",
    "  (define (count_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1))\n           (count_1s (substring str 1)))))\n  (define (count_0s str)\n    (- (string-length str) (count_1s str)))\n  (define (min_swaps_helper str1 str2)\n    (if (string=? str1 str2)\n        0\n        (if (string=? (substring str1 0 1) \"1\")\n            (if (string=? (substring str2 0 1) \"0\")\n                (+ (min_swaps_helper (substring str1 1) (substring str2 1)) 1)\n                (min_swaps_helper (substring str1 1) (substring str2 1)))\n            (if (string=? (substring str2 0 1) \"1\")\n                (+ (min_swaps_helper (substring str1 1) (substring str2 1)) 1)\n                (min_swaps_helper (substring str1 1) (substring str2 1))))))\n  (if (&gt; (count_1s str1) (count_1s str2))\n      (min_swaps_helper str2 str1)\n      (min_swaps_helper str1 str2)))\n</code>\n",
    "  (define (count_diff str1 str2)\n    (if (string=? str1 str2)\n        0\n        (+ 1 (count_diff (string-tail str1) (string-tail str2)))))\n  (count_diff str1 str2))\n",
    "  (define (swap-char str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (count-swaps str1 str2 i j)\n    (if (or (= i (string-length str1)) (= j (string-length str2)))\n        0\n        (if (not (char=? (string-ref str1 i) (string-ref str2 j)))\n            (+ 1 (count-swaps str1 str2 (+ i 1) (+ j 1)))\n            (count-swaps str1 str2 (+ i 1) (+ j 1)))))\n  (count-swaps str1 str2 0 0))\n",
    "  (define (count_diff str1 str2)\n    (cond ((or (null? str1) (null? str2)) 0)\n          ((not (= (string-length str1) (string-length str2))) 0)\n          ((not (string=? (string-ref str1 0) (string-ref str2 0))) 1)\n          (else (+ (count_diff (substring str1 1) (substring str2 1)) 1))))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (if (or (null? str1) (null? str2))\n        count\n        (if (equal? (first str1) (first str2))\n            (helper (rest str1) (rest str2) count)\n            (helper (rest str1) (rest str2) (+ 1 count)))))\n  (helper (string->list str1) (string->list str2) 0))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(equal? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (swap-count str1 str2)\n    (define (swap-count-helper str1 str2 count)\n      (cond ((or (string=? str1 str2) (string=? str1 \"\")) count)\n            ((string=? (substring str1 0 1) \"1\") (swap-count-helper (substring str1 1) (substring str2 1) count))\n            ((string=? (substring str2 0 1) \"0\") (swap-count-helper (substring str1 1) (substring str2 1) count))\n            (else (swap-count-helper (substring str1 1) (substring str2 1) (+ count 1)))))\n    (swap-count-helper str1 str2 0))\n  (swap-count str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count-diff-helper (cdr str1) (cdr str2) count)\n              (count-diff-helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count-diff-helper (string->list str1) (string->list str2) 0))\n  (count-diff str1 str2))\n",
    "  (define (count_diff_bits str1 str2)\n    (let loop ((i 0) (count 0))\n      (if (= i (string-length str1))\n          count\n          (if (not (char=? (string-ref str1 i) (string-ref str2 i)))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count_diff_bits str1 str2))\n",
    "  (define (count-differences str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(equal? (first str1) (first str2)) (count-differences (rest str1) (rest str2))]\n      [else (+ 1 (count-differences (rest str1) (rest str2)))]))\n  (count-differences str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (string=? str1 str2)\n          count\n          (count_diff_helper (string-replace str1 #\\1 #\\0) (string-replace str2 #\\1 #\\0) (+ count 1))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count_1 str)\n    (cond\n      [(empty? str) 0]\n      [(equal? (first str) #\\1) (+ 1 (count_1 (rest str)))]\n      [else (count_1 (rest str))]))\n  (define (count_0 str)\n    (cond\n      [(empty? str) 0]\n      [(equal? (first str) #\\0) (+ 1 (count_0 (rest str)))]\n      [else (count_0 (rest str))]))\n  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(equal? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (define (min_swaps str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(equal? (first str1) (first str2)) (min_swaps (rest str1) (rest str2))]\n      [else (+ 1 (min_swaps (rest str1) (rest str2)))]))\n  (cond\n    [(equal? (count_1 str1) (count_1 str2)) (min_swaps str1 str2)]\n    [(> (count_1 str1) (count_1 str2)) (+ (count_diff str1 str2) (count_0 str2))]\n    [else (+ (count_diff str1 str2) (count_1 str2))]))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(not (equal? (first str1) (first str2))) (count_diff_helper (rest str1) (rest str2) (+ count 1))]\n        [else (count_diff_helper (rest str1) (rest str2) count)]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (swap_count str1 str2)\n    (define (swap_count_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (swap_count_helper (rest str1) (rest str2) count)]\n        [else (swap_count_helper (rest str1) (rest str2) (+ count 1))]))\n    (swap_count_helper str1 str2 0))\n  (swap_count str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (define (count-1s str)\n    (let loop ([str str] [count 0])\n      (if (string-empty? str)\n          count\n          (loop (substring str 1)\n                (if (char=? (string-ref str 0) #\\1)\n                    (+ count 1)\n                    count)))))\n  (let ([diff (- (count-1s str1) (count-1s str2))])\n    (if (positive? diff)\n        (quotient diff 2)\n        (quotient (- diff) 2))))\n",
    "  (define (count-differences str1 str2)\n    (define (count-differences-iter str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count-differences-iter (rest str1) (rest str2) count)]\n        [else (count-differences-iter (rest str1) (rest str2) (+ count 1))]))\n    (count-differences-iter str1 str2 0))\n  (define (count-ones str)\n    (define (count-ones-iter str count)\n      (cond\n        [(empty? str) count]\n        [(char=? (first str) #\\1) (count-ones-iter (rest str) (+ count 1))]\n        [else (count-ones-iter (rest str) count)]))\n    (count-ones-iter str 0))\n  (define (count-zeros str)\n    (define (count-zeros-iter str count)\n      (cond\n        [(empty? str) count]\n        [(char=? (first str) #\\0) (count-zeros-iter (rest str) (+ count 1))]\n        [else (count-zeros-iter (rest str) count)]))\n    (count-zeros-iter str 0))\n  (define (min-swaps-iter str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(empty? str2) count]\n      [(char=? (first str1) (first str2)) (min-swaps-iter (rest str1) (rest str2) count)]\n      [(char=? (first str1) #\\1) (min-swaps-iter (rest str1) (rest str2) (+ count (count-zeros str2)))]\n      [(char=? (first str1) #\\0) (min-swaps-iter (rest str1) (rest str2) (+ count (count-ones str2)))]))\n  (min-swaps-iter str1 str2 0))\n",
    "  (cond\n    [(string=? str1 str2) 0]\n    [(string=? str1 \"\") (string-length str2)]\n    [(string=? str2 \"\") (string-length str1)]\n    [else\n     (let* ([str1-first (string-ref str1 0)]\n            [str2-first (string-ref str2 0)]\n            [str1-rest (substring str1 1)]\n            [str2-rest (substring str2 1)])\n       (cond\n         [(char=? str1-first str2-first) (min_Swaps str1-rest str2-rest)]\n         [else\n          (let* ([str1-rest-swap (string-append (string str2-first) str1-rest)]\n                 [str2-rest-swap (string-append (string str1-first) str2-rest)]\n                 [str1-rest-swap-count (min_Swaps str1-rest-swap str2)]\n                 [str2-rest-swap-count (min_Swaps str1 str2-rest-swap)])\n            (min str1-rest-swap-count str2-rest-swap-count))]))]))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (if (or (equal? str1 \"\") (equal? str2 \"\"))\n          count\n          (if (equal? (first str1) (first str2))\n              (count-diff-helper (rest str1) (rest str2) count)\n              (count-diff-helper (rest str1) (rest str2) (+ count 1)))))\n    (count-diff-helper str1 str2 0))\n  (define (min-swaps-helper str1 str2 count)\n    (if (or (equal? str1 \"\") (equal? str2 \"\"))\n        count\n        (if (equal? (first str1) (first str2))\n            (min-swaps-helper (rest str1) (rest str2) count)\n            (min-swaps-helper (rest str1) (rest str2) (+ count 1)))))\n  (min-swaps-helper str1 str2 0))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(not (equal? (string-ref str1 i) (string-ref str2 i)))\n         (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? (string-ref str1 0) \"1\") (min_Swaps_helper (string-append (string-ref str1 1) \"0\") str2 (+ count 1))]\n      [(string=? (string-ref str1 0) \"0\") (min_Swaps_helper (string-append (string-ref str1 1) \"1\") str2 (+ count 1))]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (let ([len (string-length str1)])\n    (define (count-diff-bits str1 str2)\n      (let loop ([i 0] [count 0])\n        (if (= i len)\n            count\n            (if (not (equal? (string-ref str1 i) (string-ref str2 i)))\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))\n    (define (count-set-bits str)\n      (let loop ([i 0] [count 0])\n        (if (= i len)\n            count\n            (if (equal? (string-ref str i) #\\1)\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))\n    (- (count-set-bits str1) (count-diff-bits str1 str2))))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(and (char=? (string-ref str1 i) #\\1) (char=? (string-ref str2 i) #\\0)) (loop (+ i 1) (+ count 1))]\n        [(and (char=? (string-ref str1 i) #\\0) (char=? (string-ref str2 i) #\\1)) (loop (+ i 1) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (if (and (char=? (string-ref str1 i) #\\1) (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (define (count-diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (&gt;= i (string-length str1))\n          count\n          (if (char=? (string-ref str1 i) (string-ref str2 i))\n              (loop (+ i 1) count)\n              (loop (+ i 1) (+ count 1))))))\n  (count-diff str1 str2))\n",
    "  (define (count_1s str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\1) (+ 1 (count_1s (rest str)))]\n      [else (count_1s (rest str))]))\n  (define (count_0s str)\n    (cond\n      [(empty? str) 0]\n      [(char=? (first str) #\\0) (+ 1 (count_0s (rest str)))]\n      [else (count_0s (rest str))]))\n  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (define (count_1s_after_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(char=? (first str1) (first str2)) (count_1s_after_diff (rest str1) (rest str2))]\n      [else (count_1s (rest str1))]))\n  (define (count_0s_after_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(char=? (first str1) (first str2)) (count_0s_after_diff (rest str1) (rest str2))]\n      [else (count_0s (rest str1))]))\n  (define (count_1s_before_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(char=? (first str1) (first str2)) (count_1s_before_diff (rest str1) (rest str2))]\n      [else (count_1s (rest str1))]))\n  (define (count_0s_before_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(char=? (first str1) (first str2)) (count",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (empty? str1) (empty? str2))\n          count\n          (if (equal? (first str1) (first str2))\n              (count_diff_helper (rest str1) (rest str2) count)\n              (count_diff_helper (rest str1) (rest str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (if (not (= len (string-length str2)))\n        (error \"Strings must be the same length\")\n        (let loop ([i 0] [count 0])\n          (if (= i len)\n              count\n              (if (and (char=? (string-ref str1 i) #\\1)\n                       (char=? (string-ref str2 i) #\\0))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count)))))))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (if (and (char=? (string-ref str1 i) #\\1) (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count))))))\n",
    "  (define (swaps str1 str2)\n    (cond\n      [(equal? str1 str2) 0]\n      [(equal? (string-length str1) 1) 1]\n      [else\n       (let* ([len (string-length str1)]\n              [mid (quotient len 2)]\n              [str1-left (substring str1 0 mid)]\n              [str1-right (substring str1 mid)]\n              [str2-left (substring str2 0 mid)]\n              [str2-right (substring str2 mid)])\n         (+ (swaps str1-left str2-left) (swaps str1-right str2-right)))]))\n  (swaps str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str1))\n          count\n          (if (and (char=? (string-ref str1 i) #\\1)\n                   (char=? (string-ref str2 i) #\\0))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (count_diff str1 str2))\n",
    "  (cond [(string=? str1 str2) 0]\n        [else (min_Swaps_helper str1 str2 0)]))\n",
    "  (let ([len (string-length str1)])\n    (if (not (equal? len (string-length str2)))\n        (error \"Strings are not of equal length\")\n        (let loop ([i 0] [count 0])\n          (if (= i len)\n              count\n              (if (and (char=? (string-ref str1 i) #\\1)\n                       (char=? (string-ref str2 i) #\\0))\n                  (loop (+ i 1) (+ count 1))\n                  (loop (+ i 1) count)))))))\n",
    "  (let ([len (string-length str1)])\n    (define (helper i)\n      (if (= i len)\n          0\n          (+ (if (and (char=? (string-ref str1 i) #\\1)\n                      (char=? (string-ref str2 i) #\\0))\n                 1\n                 0)\n             (helper (+ i 1)))))\n    (helper 0)))\n",
    "  (define (helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [(string=? (string-ref str1 0) \"1\") (helper (string-append (string-append \"0\" (substring str1 1 (string-length str1))) \"0\") str2 (+ count 1))]\n      [(string=? (string-ref str1 0) \"0\") (helper (string-append (string-append \"1\" (substring str1 1 (string-length str1))) \"1\") str2 (+ count 1))]))\n  (helper str1 str2 0))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (string=? str1 \"\") (string=? str2 \"\"))\n          count\n          (if (string=? (substring str1 0 1) (substring str2 0 1))\n              (count_diff_helper (substring str1 1) (substring str2 1) count)\n              (count_diff_helper (substring str1 1) (substring str2 1) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (define (min_Swaps_helper str1 str2 count)\n    (if (or (string=? str1 \"\") (string=? str2 \"\"))\n        count\n        (if (string=? (substring str1 0 1) (substring str2 0 1))\n            (min_Swaps_helper (substring str1 1) (substring str2 1) count)\n            (min_Swaps_helper (substring str1 1) (substring str2 1) (+ count 1)))))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (define (count_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (count_1s (substring str 1)))))\n  (define (swap_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (swap_1s (substring str 1)))))\n  (define (swap_0s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (swap_0s (substring str 1)))))\n  (define (swap_1s_to_0s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (swap_1s_to_0s (substring str 1)))))\n  (define (swap_0s_to_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (swap_0s_to_1s (substring str 1)))))\n  (define (swap_1s_to_0s_and_0s_to_1s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (swap_1s_to_0s_and_0s_to_1s (substring str 1)))))\n  (define (swap_0s_to_1s_and_1s_to_0s str)\n    (if (string=? str \"\")\n        0\n        (+ (string-&gt;number (substring str 0 1)) (swap_0s_to_1s_and_1s_to_0s (substring str 1)))))\n  (define (swap_1s_to_0s_and_0s_to_1s_and_1s_to_0s str)\n    (if (",
    "  (define (count_diff str1 str2)\n    (if (or (empty? str1) (empty? str2))\n        0\n        (+ (if (= (first str1) (first str2)) 0 1)\n           (count_diff (rest str1) (rest str2)))))\n  (count_diff str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (cond [(string=? str1 str2) count]\n          [(string=? (string-ref str1 0) (string-ref str2 0)) (helper (string-drop str1 1) (string-drop str2 1) count)]\n          [else (min (helper (string-drop str1 1) (string-drop str2 1) (+ count 1))\n                     (helper (string-drop str1 1) (string-drop str2 1) (+ count 1)))]))\n  (helper str1 str2 0))\n",
    "  (cond [(string=? str1 str2) 0]\n        [else (min_Swaps_helper str1 str2 0)]))\n",
    "  (define (swap str i j)\n    (string-set! str i (string-ref str j))\n    (string-set! str j (string-ref str i))\n    str)\n  (define (count_swaps str1 str2 i)\n    (cond\n      [(= i (string-length str1)) 0]\n      [(not (char=? (string-ref str1 i) (string-ref str2 i)))\n       (if (char=? (string-ref str1 (+ i 1)) (string-ref str2 i))\n           (begin\n             (swap str1 i (+ i 1))\n             (+ 1 (count_swaps str1 str2 (+ i 1))))\n           (begin\n             (swap str1 i (+ i 2))\n             (+ 1 (count_swaps str1 str2 (+ i 1)))))\n       )]\n      [else (count_swaps str1 str2 (+ i 1))]))\n  (count_swaps str1 str2 0))\n",
    "  (define (swap str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(equal? (first str1) (first str2)) (swap (rest str1) (rest str2))]\n      [else (+ 1 (swap (rest str1) (rest str2)))]))\n  (swap str1 str2))\n",
    "  (define (count-diff str1 str2)\n    (define (count-diff-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(char=? (first str1) (first str2)) (count-diff-helper (rest str1) (rest str2) count)]\n        [else (count-diff-helper (rest str1) (rest str2) (+ count 1))]))\n    (count-diff-helper str1 str2 0))\n  (count-diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(string=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (if (or (null? str1) (null? str2))\n          count\n          (if (equal? (car str1) (car str2))\n              (count_diff_helper (cdr str1) (cdr str2) count)\n              (count_diff_helper (cdr str1) (cdr str2) (+ count 1)))))\n    (count_diff_helper str1 str2 0))\n  (count_diff str1 str2))\n",
    "  (define (swap-count str1 str2)\n    (define (swap-count-helper str1 str2 count)\n      (cond\n        [(equal? str1 str2) count]\n        [(not (equal? (string-ref str1 0) (string-ref str2 0)))\n         (swap-count-helper (substring str1 1) (substring str2 1) (+ count 1))]\n        [else (swap-count-helper (substring str1 1) (substring str2 1) count)]))\n    (swap-count-helper str1 str2 0))\n  (swap-count str1 str2))\n",
    "  (define (count-differences str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (eq? (car str1) (car str2)) 0 1)\n           (count-differences (cdr str1) (cdr str2)))))\n  (count-differences str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (if (= i len)\n          count\n          (let ([c1 (string-ref str1 i)]\n                [c2 (string-ref str2 i)])\n            (if (and (char=? c1 #\\1) (char=? c2 #\\0))\n                (loop (+ i 1) (+ count 1))\n                (loop (+ i 1) count)))))))\n",
    "  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(string=? str1 str2) count]\n      [else\n       (define (swap_helper str1 str2 count)\n         (cond\n           [(string=? str1 str2) count]\n           [else\n            (define (swap_helper_helper str1 str2 count)\n              (cond\n                [(string=? str1 str2) count]\n                [else\n                 (define (swap_helper_helper_helper str1 str2 count)\n                   (cond\n                     [(string=? str1 str2) count]\n                     [else\n                      (define (swap_helper_helper_helper_helper str1 str2 count)\n                        (cond\n                          [(string=? str1 str2) count]\n                          [else\n                           (define (swap_helper_helper_helper_helper_helper str1 str2 count)\n                             (cond\n                               [(string=? str1 str2) count]\n                               [else\n                                (define (swap_helper_helper_helper_helper_helper_helper str1 str2 count)\n                                  (cond\n                                    [(string=? str1 str2) count]\n                                    [else\n                                     (define (swap_helper_helper_helper_helper_helper_helper_helper str1 str2 count)\n                                       (cond\n                                         [(string=? str1 str2) count]\n                                         [else\n                                          (define (swap_helper_helper_helper_helper_helper_helper_helper_helper str1 str2 count)\n                                            (cond\n                                              [(string=? str1 str2) count]\n                                              [else\n                                               (define (swap_helper_helper_helper_helper_helper_helper_helper_helper_helper str1 str2 count)\n                                                 (cond\n                                                   [(string=? str1 str2) count]\n                                                   [else\n                ",
    "  (define (swap-count str1 str2)\n    (define (swap-count-helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(empty? str2) count]\n        [(and (char=? (first str1) #\\1) (char=? (first str2) #\\0)) (swap-count-helper (rest str1) (rest str2) (+ count 1))]\n        [(and (char=? (first str1) #\\0) (char=? (first str2) #\\1)) (swap-count-helper (rest str1) (rest str2) (+ count 1))]\n        [else (swap-count-helper (rest str1) (rest str2) count)]))\n    (swap-count-helper str1 str2 0))\n  (swap-count str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (define (count_diff_helper str1 str2 count)\n      (cond\n        [(empty? str1) count]\n        [(char=? (first str1) (first str2)) (count_diff_helper (rest str1) (rest str2) count)]\n        [else (count_diff_helper (rest str1) (rest str2) (+ count 1))]))\n    (count_diff_helper str1 str2 0))\n  (define (min_Swaps_helper str1 str2 count)\n    (cond\n      [(empty? str1) count]\n      [(char=? (first str1) (first str2)) (min_Swaps_helper (rest str1) (rest str2) count)]\n      [else (min_Swaps_helper (rest str1) (rest str2) (+ count 1))]))\n  (min_Swaps_helper str1 str2 0))\n",
    "  (define (count-1 str)\n    (if (string=? str \"\")\n        0\n        (+ (if (string=? (substring str 0 1) \"1\") 1 0)\n           (count-1 (substring str 1)))))\n  (define (count-0 str)\n    (if (string=? str \"\")\n        0\n        (+ (if (string=? (substring str 0 1) \"0\") 1 0)\n           (count-0 (substring str 1)))))\n  (define (min-swaps str1 str2)\n    (if (string=? str1 str2)\n        0\n        (if (string=? (substring str1 0 1) \"1\")\n            (min-swaps (substring str1 1) (substring str2 1))\n            (+ 1 (min-swaps (substring str1 1) (substring str2 1))))))\n  (min-swaps str1 str2))\n",
    "  (define (helper str1 str2 count)\n    (if (or (equal? str1 str2) (equal? str1 \"\"))\n        count\n        (if (equal? (string-ref str1 0) (string-ref str2 0))\n            (helper (substring str1 1) (substring str2 1) count)\n            (helper (substring str1 1) (substring str2 1) (+ count 1)))))\n  (helper str1 str2 0))\n",
    "  (define (swap-count str1 str2)\n    (if (equal? str1 str2)\n        0\n        (if (equal? (string-length str1) (string-length str2))\n            (if (equal? (string-ref str1 0) (string-ref str2 0))\n                (swap-count (substring str1 1) (substring str2 1))\n                (add1 (swap-count (substring str1 1) (substring str2 1))))\n            (error \"Strings are not of equal length\"))))\n  (swap-count str1 str2))\n",
    "  (let ([len (string-length str1)])\n    (let loop ([i 0] [count 0])\n      (cond\n        [(= i len) count]\n        [(char=? (string-ref str1 i) (string-ref str2 i)) (loop (+ i 1) count)]\n        [else (loop (+ i 1) (+ count 1))]))))\n",
    "  (define (count-differences str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(equal? (first str1) (first str2)) (count-differences (rest str1) (rest str2))]\n      [else (+ 1 (count-differences (rest str1) (rest str2)))]))\n  (count-differences str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1) (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (cond\n      [(empty? str1) 0]\n      [(empty? str2) 0]\n      [(char=? (first str1) (first str2)) (count_diff (rest str1) (rest str2))]\n      [else (+ 1 (count_diff (rest str1) (rest str2)))]))\n  (count_diff str1 str2))\n",
    "  (define (count_diff str1 str2)\n    (if (or (null? str1) (null? str2))\n        0\n        (+ (if (equal? (car str1) (car str2)) 0 1)\n           (count_diff (cdr str1) (cdr str2)))))\n  (count_diff str1 str2))\n"
  ]
}