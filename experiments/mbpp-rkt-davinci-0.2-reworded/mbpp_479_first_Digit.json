{
  "name": "mbpp_479_first_Digit",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (/ n 10))))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (if (zero? (remainder n 10))\n      (first_Digit (/ n 10))\n      (remainder n 10)))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) \"0\"]\n    [(< n 10) (number->string n)]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) n]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond [(< n 10) n]\n        [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(negative? n) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (first_Digit (quotient n 10)))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (/ n 10))))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- 0 n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (positive? n)\n          (first_Digit (quotient n 10))\n          (first_Digit (quotient (- n) 10)))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) (display \"0\")]\n    [(< n 10) (display n)]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (zero? (remainder n 10))\n              (first_Digit (/ n 10))\n              (remainder n 10)))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (< n 10)\n          n\n          (first_Digit (quotient n 10)))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (positive? n)\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10)))\n          (if (< n -10)\n              (first_Digit (quotient n 10))\n              (- n)))))\n",
    "  (cond [(zero? n) n]\n        [(< n 10) n]\n        [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) (display \"0\")]\n    [(= n 1) (display \"1\")]\n    [(= n 2) (display \"2\")]\n    [(= n 3) (display \"3\")]\n    [(= n 4) (display \"4\")]\n    [(= n 5) (display \"5\")]\n    [(= n 6) (display \"6\")]\n    [(= n 7) (display \"7\")]\n    [(= n 8) (display \"8\")]\n    [(= n 9) (display \"9\")]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) n]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (remainder (abs n) 10)]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (first_Digit (quotient n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) \"0\"]\n    [(negative? n) (first_Digit (- n))]\n    [(< n 10) (number->string n)]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond ((< n 10) n)\n        (else (first_Digit (/ n 10)))))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (negative? n)\n          (first_Digit (- n))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(= n 0) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond ((< n 10) n)\n        (else (first_Digit (quotient n 10)))))\n",
    "  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n",
    "  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n"
  ]
}