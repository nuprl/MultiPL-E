{
  "name": "mbpp_470_add_pairwise",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ffzsdka.rkt:14:4\n\nsecond: list contains too few elements\n  list: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ffzsdka.rkt:15:4\n\nsecond: list contains too few elements\n  list: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2ffzsdka.rkt:16:4\n\nsecond: list contains too few elements\n  list: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      (car test_tup)\n      (+ (car test_tup) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi7dioj69.rkt:14:4\nactual:     31\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi7dioj69.rkt:15:4\nactual:     36\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi7dioj69.rkt:16:4\nactual:     41\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      (list (car test_tup))\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]\n    )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgaxbteq9.rkt:17:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgaxbteq9.rkt:18:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgaxbteq9.rkt:19:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt9abztm.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt9abztm.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt9abztm.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   1\n</code>\nI am not sure what I am doing wrong. I am new to Racket.\n\n\nA:\n\nYou are using <code>first</code> and <code>second</code> on a list, but those functions are only defined for pairs.\nYou can use <code>car</code> and <code>cadr</code> instead.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "/tmp/tmpz9l6s9u5.rkt:17:42: new: bad syntax\n  in: new\n  location...:\n   /tmp/tmpz9l6s9u5.rkt:17:42\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) '())\n        (else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) (list (car test_tup))]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp59bhdk17.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp59bhdk17.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp59bhdk17.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [else\n     (cons (+ (first test_tup) (second test_tup))\n           (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04cmrqu_.rkt:16:4\n\nsecond: list contains too few elements\n  list: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04cmrqu_.rkt:17:4\n\nsecond: list contains too few elements\n  list: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04cmrqu_.rkt:18:4\n\nsecond: list contains too few elements\n  list: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      (list (car test_tup))\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond [(empty? test_tup) empty]\n        [else (cons (+ (first test_tup) (second test_tup))\n                     (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ln4g3fk.rkt:14:4\n\nsecond: list contains too few elements\n  list: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ln4g3fk.rkt:15:4\n\nsecond: list contains too few elements\n  list: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ln4g3fk.rkt:16:4\n\nsecond: list contains too few elements\n  list: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond [(empty? test_tup) empty]\n        [(empty? (rest test_tup)) empty]\n        [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) test_tup]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxwaybu7.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxwaybu7.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphxwaybu7.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) test_tup)\n        (else (cons (+ (car test_tup) (cadr test_tup))\n                     (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvf4yrn3_.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvf4yrn3_.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvf4yrn3_.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      test_tup\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:15:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:16:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61wmpvfb.rkt:17:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      (list (car test_tup))\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      (list (car test_tup))\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      (list (car test_tup))\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:14:4\nactual:     '(6 12 15 18 10)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:15:4\nactual:     '(8 14 17 20 11)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdvunnfst.rkt:16:4\nactual:     '(10 16 19 22 12)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup))\n                 (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:16:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:17:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp43gfb0rc.rkt:18:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup)))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) '())\n        (else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond ((null? test_tup) '())\n        ((null? (cdr test_tup)) '())\n        (else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? (cdr test_tup))\n      '()\n      (cons (+ (car test_tup) (car (cdr test_tup))) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1666124261,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup))\n            (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplvj7i59w.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(null? test_tup) '()]\n    [(null? (cdr test_tup)) '()]\n    [else (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (+ (first test_tup) (second test_tup)) (add_pairwise (rest (rest test_tup))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:15:4\nactual:     '(6 15)\nexpected:   '(6 12 15 18)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:16:4\nactual:     '(8 17)\nexpected:   '(8 14 17 20)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kwbkmk8.rkt:17:4\nactual:     '(10 19)\nexpected:   '(10 16 19 22)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the pairwise addition of the neighboring elements of the given list.\n(define (add_pairwise test_tup)\n  (if (null? test_tup)\n      '()\n      (cons (+ (car test_tup) (cadr test_tup)) (add_pairwise (cdr test_tup)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_pairwise))\n    (check-equal? (candidate (list 1 5 7 8 10)) (list 6 12 15 18))\n    (check-equal? (candidate (list 2 6 8 9 11)) (list 8 14 17 20))\n    (check-equal? (candidate (list 3 7 9 10 12)) (list 10 16 19 22))\n))\n\n(test-humaneval)",
      "timestamp": 1665509741,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:14:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(11)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvlpjmpi9.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(12)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}