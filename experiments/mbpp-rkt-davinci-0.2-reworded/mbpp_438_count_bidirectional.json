{
  "name": "mbpp_438_count_bidirectional",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count bidirectional list pairs.\n(define (count_bidirectional test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_bidirectional))\n    (check-equal? (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 3)\n    (check-equal? (candidate (list (list 5 6) (list 1 3) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 2)\n    (check-equal? (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 2) (list 6 5) (list 2 1))) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (eq? (car test_list) (cdr test_list))\n            (count_bidirectional_iter (cddr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((and (pair? (car test_list)) (pair? (cdr test_list))\n              (eq? (car test_list) (cdr test_list)))\n         (+ 1 (count_bidirectional (cdr (cdr test_list)))))\n        (else (count_bidirectional (cdr test_list)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (cdddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (+ (if (equal? (car test_list) (cddr test_list)) 1 0)\n        (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (cond ((null? test_list) counter)\n          ((null? (cdr test_list)) counter)\n          ((equal? (car test_list) (cadr test_list))\n           (count_bidirectional_iter (cddr test_list) (+ counter 1)))\n          (else (count_bidirectional_iter (cdr test_list) counter))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (count_bidirectional_iter (cdr test_list)\n                                  (+ count (if (equal? (car test_list) (cadr test_list))\n                                               1\n                                               0)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (cond\n         [(empty? (rest test_list)) 0]\n         [(equal? first (first (rest test_list)))\n          (+ 1 (count_bidirectional (rest (rest test_list))))]\n         [else\n          (count_bidirectional (rest test_list))]))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [(null? (cddddr test_list)) count]\n      [else (count_bidirectional_helper (cddddr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((and (pair? test_list) (pair? (cdr test_list)))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count (if (equal? (car test_list) (cadr test_list)) 1 0)))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((null? (cddr test_list)) 0)\n        ((and (equal? (car test_list) (caddr test_list))\n              (equal? (cadr test_list) (cadddr test_list)))\n         (+ 1 (count_bidirectional (cddr test_list))))\n        (else (count_bidirectional (cdr test_list)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else\n       (cond\n         [(and (equal? (car test_list) (cddr test_list))\n               (equal? (cadr test_list) (caddr test_list)))\n          (count_bidirectional_iter (cddr test_list) (+ count 1))]\n         [else (count_bidirectional_iter (cdr test_list) count)])]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (cond\n       [(equal? (car test_list) (cddr test_list)) (+ 1 (count_bidirectional (cdr test_list)))]\n       [else (count_bidirectional (cdr test_list))])]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (cdr test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_helper (cdr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [(empty? (rest (rest test_list))) 0]\n    [else (+ 1 (count_bidirectional (rest (rest test_list))))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          (else (count_bidirectional_iter (cddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (let ([first (car test_list)]\n           [rest (cdr test_list)])\n       (if (and (pair? first) (pair? rest))\n           (+ 1 (count_bidirectional rest))\n           (count_bidirectional rest)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ (count_bidirectional (cdr test_list))\n             (if (equal? (car test_list) (cadr test_list)) 1 0))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (equal? (car test_list) (cdr test_list))\n            (count_bidirectional_iter (cddr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (and (pair? (car test_list))\n                 (pair? (cdr test_list))\n                 (eq? (cdr (car test_list)) (car (cdr test_list))))\n            (count_bidirectional_helper (cdr (cdr test_list)) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (rest test_list)) count]\n      [(empty? (rest (rest test_list))) count]\n      [else (count_bidirectional_iter (rest test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ (count_bidirectional (cdr test_list))\n             (if (equal? (car test_list) (cadr test_list)) 1 0))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [else (count_bidirectional_iter (cddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [else (count_bidirectional_iter (cddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((and (equal? (car test_list) (caddr test_list))\n                (equal? (cadr test_list) (cadddr test_list)))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cddr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (cond ((null? test_list) counter)\n          ((null? (cdr test_list)) counter)\n          ((equal? (car test_list) (cadr test_list))\n           (count_bidirectional_iter (cdr test_list) (+ counter 1)))\n          (else (count_bidirectional_iter (cdr test_list) counter))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (let loop ([test_list test_list]\n             [count 0])\n    (if (null? test_list)\n        count\n        (loop (cdr test_list)\n              (+ count (if (eq? (car test_list) (cdr test_list))\n                           1\n                           0))))))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (cond\n         [(empty? (rest test_list)) 0]\n         [(equal? first (first (rest test_list)))\n          (+ 1 (count_bidirectional (rest (rest test_list))))]\n         [else (count_bidirectional (rest test_list))]))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [else (count_bidirectional_iter (cddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (null? (cdr test_list))\n            count\n            (count_bidirectional_iter (cdr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((eq? (car test_list) (caddr test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (count_bidirectional_iter (cdr test_list)\n                                  (+ count\n                                     (if (eq? (cdr test_list)\n                                              (car test_list))\n                                         1\n                                         0)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((null? (cddddr test_list)) count)\n          ((and (equal? (car test_list) (cdddr test_list))\n                (equal? (cadr test_list) (cddr test_list))\n                (equal? (caddr test_list) (cdr test_list)))\n           (count_bidirectional_helper (cddddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (and (pair? (car test_list))\n                 (pair? (cdr test_list))\n                 (eq? (car (car test_list)) (cdr (cdr test_list))))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((and (eq? (car test_list) (cadr test_list))\n                (eq? (cadr test_list) (car test_list)))\n           (count_bidirectional_helper (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_iter (cdddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((pair? (car test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (if (equal? (car test_list) (cdr test_list))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((null? (cddddr test_list)) count)\n          ((null? (cdddddr test_list)) count)\n          ((null? (cddddddr test_list)) count)\n          ((null? (cdddddddr test_list)) count)\n          ((null? (cddddddddr test_list)) count)\n          ((null? (cdddddddddr test_list)) count)\n          ((null? (cddddddddddr test_list)) count)\n          ((null? (cdddddddddddr test_list)) count)\n          ((null? (cddddddddddddr test_list)) count)\n          ((null? (cdddddddddddddr test_list)) count)\n          ((null? (cddddddddddddddr test_list)) count)\n          ((null? (cdddddddddddddddr test_list)) count)\n          ((null? (cddddddddddddddddr test_list)) count)\n          ((null? (cdddddddddddddddddr test_list)) count)\n          ((null? (cddddddddddddddddddr test_list)) count)\n          ((null? (cdddddddddddddddddddr test_list)) count)\n          ((null? (cddddddddddddddddddddr test_list)) count)\n          ((null? (cdddddddddddddddddddddr test_list)) count)\n          ((null? (cddddddddddddddddddddddr test_list)) count)\n          ((null? (cdddddddddddddddddddddddr test_list)) count)\n          ((null? (cddddddddddddddddddddddddr test_list)) count)\n         ",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (cdr test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            count)))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      ((null? test_list) count)\n      ((null? (cdr test_list)) count)\n      ((null? (cddr test_list)) count)\n      ((null? (cdddr test_list)) count)\n      (else (count_bidirectional_helper (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (null? (cdr test_list))\n            count\n            (count_bidirectional_iter (cdr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else\n       (cond\n         [(equal? (car test_list) (cddr test_list))\n          (count_bidirectional_iter (cdr test_list) (+ count 1))]\n         [else\n          (count_bidirectional_iter (cdr test_list) count)])]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((pair? (cdr test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (let loop ([lst test_list] [count 0])\n    (if (null? lst)\n        count\n        (loop (cdr lst) (+ count (if (eq? (car lst) (cdr lst)) 1 0))))))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (if (equal? (car test_list) (caddr test_list))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(and (eq? (car test_list) (cadr test_list))\n          (eq? (car test_list) (caddr test_list)))\n     (+ 1 (count_bidirectional (cdr test_list)))]\n    [else (count_bidirectional (cdr test_list))]))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [(bidirectional? test_list) (+ 1 (count_bidirectional (rest test_list)))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((pair? (car test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (rest test_list)) count]\n      [else (count_bidirectional_iter (rest (rest test_list)) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [(and (equal? (car test_list) (cddr test_list))\n            (equal? (cadr test_list) (caddr test_list)))\n       (count_bidirectional_iter (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cdr (cdr test_list))) 0]\n    [else\n     (if (equal? (car test_list) (cadr (cdr test_list)))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [else (+ 1 (count_bidirectional (rest (rest test_list))))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(bidirectional? test_list) (+ 1 (count_bidirectional (cdr test_list)))]\n    [else (count_bidirectional (cdr test_list))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [else (count_bidirectional_iter (cddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_iter (cdddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [(null? (cdddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdddr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [(null? (cdddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdddr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cddr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((equal? (car test_list) (caddr test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((null? (cddr test_list)) 0)\n        ((null? (cdddr test_list)) 0)\n        (else (+ (count_bidirectional (cdddr test_list))\n                 (if (equal? (car test_list) (caddr test_list)) 1 0)))))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((null? (cddr test_list)) 0)\n        (else (+ (count_bidirectional (cddr test_list))\n                 (if (equal? (car test_list) (caddr test_list)) 1 0)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cdr test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (if (null? test_list)\n      0\n      (+ (count_bidirectional (cdr test_list))\n         (if (pair? (car test_list))\n             1\n             0))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (cond\n       [(empty? (cdr test_list)) 0]\n       [else\n        (+ (if (equal? (car test_list) (cadr test_list)) 1 0)\n           (count_bidirectional (cdr test_list)))]\n       )]\n    ))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (rest test_list)) count]\n      [(and (equal? (first test_list) (first (rest test_list)))\n            (equal? (first test_list) (first (rest (rest test_list)))))\n       (count_bidirectional_helper (rest (rest (rest test_list))) (+ count 1))]\n      [else (count_bidirectional_helper (rest (rest test_list)) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (and (pair? (car test_list))\n                 (pair? (cdr test_list))\n                 (eq? (car (car test_list)) (cdr (cdr test_list))))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else\n     (let* ([first (car test_list)]\n            [rest (cdr test_list)]\n            [second (car rest)])\n       (if (equal? first second)\n           (+ 1 (count_bidirectional (cdr rest)))\n           (count_bidirectional (cdr rest))))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ (count_bidirectional (cdr test_list))\n             (if (equal? (car test_list) (cadr test_list)) 1 0))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((and (eq? (car test_list) (cadr test_list))\n                (eq? (cadr test_list) (car test_list)))\n           (count_bidirectional_helper (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [(bidirectional? test_list) (+ 1 (count_bidirectional (rest test_list)))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (cond\n      [(null? test_list) counter]\n      [(null? (cdr test_list)) counter]\n      [(null? (cddr test_list)) counter]\n      [(null? (cdddr test_list)) counter]\n      [else (count_bidirectional_iter (cdddr test_list) (+ counter 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (if (null? test_list)\n      0\n      (+ (count_bidirectional (cdr test_list))\n         (if (pair? (car test_list))\n             1\n             0))))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)]\n           [rest (rest test_list)])\n       (cond\n         [(empty? rest) 0]\n         [else\n          (+ (if (equal? first (first rest)) 1 0)\n             (count_bidirectional rest))]))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cddr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(and (pair? test_list) (pair? (cdr test_list)))\n       (count_bidirectional_iter (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((pair? (car test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [else (+ (count_bidirectional (rest test_list))\n             (count_bidirectional (rest (rest test_list))))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (cadr (cdr test_list))))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_helper (cdddr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((equal? (car test_list) (cadr test_list))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cddr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (cadr (cdr test_list))))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          (else (count_bidirectional_iter (cddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (if (equal? (car test_list) (caddr test_list))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((pair? (car test_list))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ (if (eq? (car test_list) (cadr test_list)) 1 0)\n             (count_bidirectional (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (+ (if (equal? (car test_list) (cddr test_list)) 1 0)\n        (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ 1 count))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list counter)\n    (if (null? test_list)\n        counter\n        (if (null? (cdr test_list))\n            counter\n            (if (eq? (car test_list) (cadr test_list))\n                (count_bidirectional_helper (cdr test_list) (+ counter 1))\n                (count_bidirectional_helper (cdr test_list) counter)))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(pair? (first test_list))\n       (count_bidirectional_iter (rest test_list) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else\n     (+ (if (eq? (car test_list) (cadr test_list)) 1 0)\n        (count_bidirectional (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ (count_bidirectional (cdr test_list))\n             (if (equal? (car test_list)\n                         (cadr test_list))\n                 1\n                 0))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(eq? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((and (pair? (car test_list)) (pair? (cdr test_list))\n                (eq? (car (car test_list)) (cdr (cdr test_list))))\n           (count_bidirectional_iter (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((null? (cddr test_list)) 0)\n        (else (+ (count_bidirectional (cddr test_list))\n                 (if (equal? (car test_list) (caddr test_list)) 1 0)))))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [(null? (cdddr test_list)) 0]\n    [else (+ (count_bidirectional (cdddr test_list))\n             (if (and (equal? (car test_list) (cddr test_list))\n                      (equal? (cadr test_list) (caddr test_list)))\n                 1\n                 0))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [else (count_bidirectional_helper (cdr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(and (pair? (first test_list))\n            (pair? (second test_list))\n            (equal? (first (first test_list))\n                    (second (second test_list)))\n            (equal? (second (first test_list))\n                    (first (second test_list))))\n       (count_bidirectional_iter (rest (rest test_list)) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [else (if (eq? (car test_list) (cdr test_list))\n             (+ 1 (count_bidirectional (cdr (cdr test_list))))\n             (count_bidirectional (cdr test_list)))]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cddr test_list)))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (cadr (cdr test_list))))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((equal? (car test_list) (cddr test_list))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(pair? (cdr test_list))\n     (+ (count_bidirectional (cdr test_list)) 1)]\n    [else 0]))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else\n     (+ (if (equal? (car test_list) (cadr test_list)) 1 0)\n        (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (eq? (car test_list) (cddr test_list))\n                (eq? (cadr test_list) (cdddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (cond\n      [(null? test_list) counter]\n      [(null? (cdr test_list)) counter]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cddr test_list) (+ counter 1))]\n      [else (count_bidirectional_iter (cdr test_list) counter)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (let loop ([test_list test_list] [count 0])\n    (cond [(null? test_list) count]\n          [(null? (cdr test_list)) count]\n          [(null? (cddr test_list)) count]\n          [(null? (cdddr test_list)) count]\n          [(and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (loop (cddr test_list) (+ count 1))]\n          [else (loop (cdr test_list) count)])))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [(bidirectional? test_list) (+ 1 (count_bidirectional (rest test_list)))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [(null? (cddddr test_list)) count]\n      [else (count_bidirectional_helper (cddddr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (if (null? test_list)\n        counter\n        (count_bidirectional_iter (cdr test_list) (+ counter 1))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (if (null? test_list)\n      0\n      (+ (count_bidirectional (cdr test_list))\n         (if (pair? (car test_list))\n             1\n             0))))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(equal? (car test_list) (cadr test_list)) (+ 1 (count_bidirectional (cdr test_list)))]\n    [else (count_bidirectional (cdr test_list))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((and (equal? (car test_list) (cadr test_list))\n                (equal? (cadr test_list) (car test_list)))\n           (count_bidirectional_helper (cdr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ (count_bidirectional (cdr test_list))\n             (if (equal? (car test_list) (cadr test_list)) 1 0))]))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((and (pair? (car test_list)) (pair? (cdr test_list)))\n         (+ 1 (count_bidirectional (cdr test_list))))\n        (else (count_bidirectional (cdr test_list)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_iter (cdddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list counter)\n    (if (null? test_list)\n        counter\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ counter 1))\n            (count_bidirectional_helper (cdr test_list) counter))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          (else (count_bidirectional_iter (cdr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((and (pair? test_list) (pair? (cdr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (let loop ([lst test_list] [count 0])\n    (if (null? lst)\n        count\n        (loop (cdr lst) (+ count (if (eq? (car lst) (cdr lst)) 1 0))))))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (if (equal? (car test_list) (cddr test_list))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (count_bidirectional_iter (cdr test_list) (+ count (count_bidirectional_iter (cdr (car test_list)) 0)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (cdr test_list)) count]\n      [else\n       (if (equal? (car test_list) (cadr test_list))\n           (count_bidirectional_iter (cddr test_list) (+ count 1))\n           (count_bidirectional_iter (cdr test_list) count))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((null? (cddr test_list)) 0)\n        ((null? (cdddr test_list)) 0)\n        (else (+ (if (equal? (car test_list) (cddr test_list)) 1 0)\n                 (count_bidirectional (cdr test_list))))))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (cond\n      [(empty? test_list) counter]\n      [(empty? (rest test_list)) counter]\n      [(equal? (first test_list) (first (rest test_list)))\n       (count_bidirectional_iter (rest (rest test_list)) (+ counter 1))]\n      [else (count_bidirectional_iter (rest test_list) counter)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list counter)\n    (if (null? test_list)\n        counter\n        (if (and (pair? (car test_list))\n                 (pair? (cdr test_list))\n                 (eq? (cdr (car test_list)) (car (cdr test_list))))\n            (count_bidirectional_helper (cdr test_list) (+ counter 1))\n            (count_bidirectional_helper (cdr test_list) counter))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [(null? (cddddr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_iter (cdddr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (if (equal? (first test_list) (last test_list))\n         (+ 1 (count_bidirectional (rest (rest test_list))))\n         (count_bidirectional (rest (rest test_list))))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (cdr test_list))\n            (if (eq? (car test_list) (cadr test_list))\n                (count_bidirectional_iter (cdr test_list) (+ count 1))\n                (count_bidirectional_iter (cdr test_list) count))\n            count)))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else\n     (if (equal? (car test_list) (cadr test_list))\n         (+ 1 (count_bidirectional (cdr test_list)))\n         (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(and (equal? (car test_list) (cadr test_list))\n            (equal? (car test_list) (caddr test_list)))\n       (count_bidirectional_helper (cdr test_list) (+ count 1))]\n      [else (count_bidirectional_helper (cdr test_list) count)]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(empty? (rest test_list)) count]\n      [(equal? (first test_list) (first (rest test_list)))\n       (count_bidirectional_iter (rest (rest test_list)) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else (count_bidirectional_helper (cdr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [else (+ 1 (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (count_bidirectional_iter (cdr test_list) (+ count (count_bidirectional_iter (cdr (car test_list)) 0)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (let loop ((list test_list) (count 0))\n    (if (null? list)\n        count\n        (loop (cdr list) (+ count (if (eq? (car list) (cadr list)) 1 0))))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(equal? (car test_list) (cadr test_list))\n       (count_bidirectional_iter (cddr test_list) (+ count 1))]\n      [else (count_bidirectional_iter (cdr test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (let loop ((list test_list)\n             (count 0))\n    (if (null? list)\n        count\n        (loop (cdr list)\n              (+ count (if (eq? (car list) (cadr list)) 1 0))))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (null? (cdr test_list))\n            count\n            (count_bidirectional_iter (cdr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list counter)\n    (cond ((null? test_list) counter)\n          ((null? (cdr test_list)) counter)\n          ((equal? (car test_list) (cdr test_list))\n           (count_bidirectional_helper (cdr test_list) (+ counter 1)))\n          (else (count_bidirectional_helper (cdr test_list) counter))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [(empty? (rest test_list)) 0]\n    [(bidirectional? test_list) (+ 1 (count_bidirectional (rest (rest test_list))))]\n    [else (count_bidirectional (rest test_list))]))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(empty? test_list) count]\n      [(and (pair? (first test_list))\n            (pair? (first (first test_list)))\n            (equal? (first (first test_list)) (rest test_list)))\n       (count_bidirectional_iter (rest test_list) (+ count 1))]\n      [else (count_bidirectional_iter (rest test_list) count)]))\n  (count_bidirectional_iter test_list 0))\n"
  ]
}