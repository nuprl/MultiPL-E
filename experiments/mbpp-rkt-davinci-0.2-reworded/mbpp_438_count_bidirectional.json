{
  "name": "mbpp_438_count_bidirectional",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to count bidirectional list pairs.\n(define (count_bidirectional test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_bidirectional))\n    (check-equal? (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 3)\n    (check-equal? (candidate (list (list 5 6) (list 1 3) (list 6 5) (list 9 1) (list 6 5) (list 2 1))) 2)\n    (check-equal? (candidate (list (list 5 6) (list 1 2) (list 6 5) (list 9 2) (list 6 5) (list 2 1))) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (eq? (car test_list) (cdr test_list))\n            (count_bidirectional_iter (cddr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (caddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          (else (count_bidirectional_iter (cdddr test_list) (+ count 1)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((and (pair? (car test_list)) (pair? (cdr test_list))\n              (eq? (car test_list) (cdr test_list)))\n         (+ 1 (count_bidirectional (cdr (cdr test_list)))))\n        (else (count_bidirectional (cdr test_list)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond ((null? test_list) count)\n          ((null? (cdr test_list)) count)\n          ((null? (cddr test_list)) count)\n          ((null? (cdddr test_list)) count)\n          ((and (equal? (car test_list) (cddr test_list))\n                (equal? (cadr test_list) (cdddr test_list)))\n           (count_bidirectional_iter (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (+ (if (equal? (car test_list) (cddr test_list)) 1 0)\n        (count_bidirectional (cdr test_list)))]))\n",
    "  (define (count_bidirectional_iter test_list counter)\n    (cond ((null? test_list) counter)\n          ((null? (cdr test_list)) counter)\n          ((equal? (car test_list) (cadr test_list))\n           (count_bidirectional_iter (cddr test_list) (+ counter 1)))\n          (else (count_bidirectional_iter (cdr test_list) counter))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (count_bidirectional_iter (cdr test_list)\n                                  (+ count (if (equal? (car test_list) (cadr test_list))\n                                               1\n                                               0)))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(empty? test_list) 0]\n    [else\n     (let ([first (first test_list)])\n       (cond\n         [(empty? (rest test_list)) 0]\n         [(equal? first (first (rest test_list)))\n          (+ 1 (count_bidirectional (rest (rest test_list))))]\n         [else\n          (count_bidirectional (rest test_list))]))]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [(null? (cddddr test_list)) count]\n      [else (count_bidirectional_helper (cddddr test_list) (+ count 1))]))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (cond ((null? test_list) count)\n          ((and (pair? test_list) (pair? (cdr test_list)))\n           (count_bidirectional_helper (cddr test_list) (+ count 1)))\n          (else (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count (if (equal? (car test_list) (cadr test_list)) 1 0)))]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (car test_list))\n            (count_bidirectional_iter (cdr test_list) (+ count 1))\n            (count_bidirectional_iter (cdr test_list) count))))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond ((null? test_list) 0)\n        ((null? (cdr test_list)) 0)\n        ((null? (cddr test_list)) 0)\n        ((and (equal? (car test_list) (caddr test_list))\n              (equal? (cadr test_list) (cadddr test_list)))\n         (+ 1 (count_bidirectional (cddr test_list))))\n        (else (count_bidirectional (cdr test_list)))))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [(null? (cddr test_list)) count]\n      [(null? (cdddr test_list)) count]\n      [else\n       (cond\n         [(and (equal? (car test_list) (cddr test_list))\n               (equal? (cadr test_list) (caddr test_list)))\n          (count_bidirectional_iter (cddr test_list) (+ count 1))]\n         [else (count_bidirectional_iter (cdr test_list) count)])]))\n  (count_bidirectional_iter test_list 0))\n",
    "  (cond\n    [(null? test_list) 0]\n    [(null? (cdr test_list)) 0]\n    [(null? (cddr test_list)) 0]\n    [else\n     (cond\n       [(equal? (car test_list) (cddr test_list)) (+ 1 (count_bidirectional (cdr test_list)))]\n       [else (count_bidirectional (cdr test_list))])]))\n",
    "  (define (count_bidirectional_helper test_list count)\n    (if (null? test_list)\n        count\n        (if (pair? (cdr test_list))\n            (count_bidirectional_helper (cdr test_list) (+ count 1))\n            (count_bidirectional_helper (cdr test_list) count))))\n  (count_bidirectional_helper test_list 0))\n",
    "  (define (count_bidirectional_iter test_list count)\n    (cond\n      [(null? test_list) count]\n      [(null? (cdr test_list)) count]\n      [else (count_bidirectional_iter (cdr test_list) (+ count 1))]))\n  (count_bidirectional_iter test_list 0))\n"
  ]
}