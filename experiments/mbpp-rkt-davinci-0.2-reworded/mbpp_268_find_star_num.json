{
  "name": "mbpp_268_find_star_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the n'th star number.\n(define (find_star_num n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_star_num))\n    (check-equal? (candidate 3) 37)\n    (check-equal? (candidate 4) 73)\n    (check-equal? (candidate 5) 121)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper i)\n    (if (= i n)\n        (expt 3 i)\n        (* (expt 3 i) (helper (+ i 1)))))\n  (helper 0))\n",
    "  (define (find_star_num_iter n curr)\n    (if (= n 1)\n        curr\n        (find_star_num_iter (- n 1) (+ curr (* 2 curr)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n count)\n    (if (= n count)\n        (expt 2 count)\n        (find_star_num_iter n (+ count 1))))\n  (find_star_num_iter n 0))\n",
    "  (define (find_star_num-iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num-iter n (+ i 1))))\n  (find_star_num-iter n 0))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (* 2 (find_star_num (- n 1))) 3)))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* 2 n))]))\n",
    "  (define (find-star-num-iter n acc)\n    (if (= n 1)\n        acc\n        (find-star-num-iter (- n 1) (+ acc (* 2 n)))))\n  (find-star-num-iter n 1))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 0)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 acc)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        1\n        (+ (* 2 i)\n           (find_star_num_iter n (+ i 1)))))\n  (find_star_num_iter n 1))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (find_star_num (- n 1)) (* n 2))]))\n",
    "  (define (find_star_num-iter n counter)\n    (cond ((= n counter) counter)\n          ((= (remainder counter 2) 0) (find_star_num-iter n (+ counter 1)))\n          ((= (remainder counter 5) 0) (find_star_num-iter n (+ counter 1)))\n          (else (find_star_num-iter n (+ counter 1)))))\n  (find_star_num-iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 1))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (+ acc (* 2 acc)))))\n  (helper n 1))\n",
    "  (if (= n 1)\n      5\n      (+ (find_star_num (- n 1)) (* 2 (find_star_num (- n 1))))))\n",
    "  (define (find_star_num_iter n acc)\n    (if (= n 1)\n        acc\n        (find_star_num_iter (- n 1) (+ acc (* 2 n)))))\n  (find_star_num_iter n 1))\n",
    "  (define (find_star_num_iter n i)\n    (if (= n i)\n        (expt 2 i)\n        (find_star_num_iter n (+ i 1))))\n  (find_star_num_iter n 0))\n"
  ]
}