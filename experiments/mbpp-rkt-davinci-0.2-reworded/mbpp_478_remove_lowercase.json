{
  "name": "mbpp_478_remove_lowercase",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove lowercase substrings from a given string.\n(define (remove_lowercase str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_lowercase))\n    (check-equal? (candidate \"PYTHon\") \"PYTH\")\n    (check-equal? (candidate \"FInD\") \"FID\")\n    (check-equal? (candidate \"STRinG\") \"STRG\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")\n                 (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (string-join (filter (lambda (x) (not (char-lower-case? (string-ref x 0)))) (string-split str1 #\\space)) \" \"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \" \"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"\\w+\" str1 \"\"))\n",
    "  (define (remove_lowercase_helper str1 str2)\n    (cond ((string=? str1 \"\") str2)\n          ((char-lower-case? (string-ref str1 0))\n           (remove_lowercase_helper (substring str1 1) str2))\n          (else (remove_lowercase_helper (substring str1 1)\n                                         (string-append str2 (string (string-ref str1 0)))))))\n  (remove_lowercase_helper str1 \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (letrec ([remove_lowercase_helper (lambda (str2)\n                                      (if (empty? str2)\n                                          empty\n                                          (if (char-lower-case? (first str2))\n                                              (remove_lowercase_helper (rest str2))\n                                              (cons (first str2) (remove_lowercase_helper (rest str2))))))])\n    (remove_lowercase_helper str1)))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join (filter (lambda (x) (not (char-lower-case? (string->char x)))) (string-split str1 #\\space)) \" \"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"\\w+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   #\\space))\n",
    "  (string-append\n   (filter (lambda (x) (char-upper-case? x))\n           (string->list str1))))\n",
    "  (define (remove_lowercase_iter str1 str2)\n    (cond\n      ((string=? str1 \"\") str2)\n      ((char-lower-case? (string-ref str1 0))\n       (remove_lowercase_iter (substring str1 1) str2))\n      (else (remove_lowercase_iter (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (remove_lowercase_iter str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (not (char-lower-case? x)))\n           (string->list str1))))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (not (char-lower-case? x))) str1)))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (not (char-lower-case? x))) str1)))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   \" \"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[a-z]+\" str1 \"\")\n   (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (char-upper-case? x)) str1)))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   \" \"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-match* #rx\"[A-Z]+\" str1)))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (define (remove_lowercase_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(char-lower-case? (first str1)) (remove_lowercase_helper (rest str1) str2)]\n      [else (remove_lowercase_helper (rest str1) (string-append str2 (string (first str1))))]))\n  (remove_lowercase_helper str1 \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[a-z]+\" str1 \"\")\n   (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   \" \"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")\n                 (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join\n   (filter (lambda (x) (not (char-lower-case? (string-ref x 0))))\n           (string-split str1 #\\space))\n   \" \"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (char-upper-case? x)) str1)))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"\\b[a-z]+\\b\" str1 \"\")\n   (regexp-replace* #rx\"\\b[a-z]+\\b\" (string-upcase str1) \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"\\w+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join (filter (lambda (x) (not (char-lower-case? (string-ref x 0)))) (string-split str1))))\n",
    "  (regexp-replace* #rx\"\\\\b[a-z]+\\\\b\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"\\w+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (define (remove_lowercase_iter str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(char-lower-case? (first str1)) (remove_lowercase_iter (rest str1) str2)]\n      [else (remove_lowercase_iter (rest str1) (string-append str2 (string (first str1))))]))\n  (remove_lowercase_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\") \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"\\\\b[a-z]+\\\\b\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[a-z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (string-join (filter (lambda (x) (not (char-lower-case? x))) (string->list str1))))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (define (remove_lowercase_helper str1 str2)\n    (cond\n      [(empty? str1) str2]\n      [(char-lower-case? (first str1)) (remove_lowercase_helper (rest str1) str2)]\n      [else (remove_lowercase_helper (rest str1) (string-append str2 (string (first str1))))]))\n  (remove_lowercase_helper str1 \"\"))\n",
    "  (define (remove_lowercase_helper str2)\n    (if (empty? str2)\n        \"\"\n        (if (char-lower-case? (first str2))\n            (remove_lowercase_helper (rest str2))\n            (string-append (string (first str2))\n                           (remove_lowercase_helper (rest str2))))))\n  (remove_lowercase_helper str1))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[a-z]+\" str1 \"\"))\n"
  ]
}