{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to reverse a list upto a given position.\n(define (reverse_Array_Upto_K input k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_Array_Upto_K))\n    (check-equal? (candidate (list 1 2 3 4 5 6) 4) (list 4 3 2 1 5 6))\n    (check-equal? (candidate (list 4 5 6 7) 2) (list 5 4 6 7))\n    (check-equal? (candidate (list 9 8 7 6 5) 3) (list 7 8 9 6 5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((temp (reverse_Array_Upto_K (cdr input) (- k 1))))\n        (if (= k 1)\n            (append temp (list (car input)))\n            (append (list (car input)) temp)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ((first (car input))\n             (rest (cdr input))\n             (reversed (reverse_Array_Upto_K rest k))\n             (reversed-rest (cdr reversed)))\n        (if (or (null? reversed-rest) (= k 1))\n            (cons first reversed)\n            (cons (car reversed-rest) (cons first reversed-rest))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((last (reverse_Array_Upto_K (cdr input) (- k 1))))\n        (if (zero? k)\n            input\n            (append (list (car input)) last)))))\n",
    "  (let ([len (length input)])\n    (if (= k len)\n        input\n        (reverse_Array_Upto_K (append (list (list-ref input (- len 1))) (sublist input 0 (- len 1))) (- k 1)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_helper input k result)\n    (if (or (= k 0) (null? input))\n        result\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (&lt;= k 0))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n"
  ]
}