{
  "name": "mbpp_644_reverse_Array_Upto_K",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to reverse a list upto a given position.\n(define (reverse_Array_Upto_K input k)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate reverse_Array_Upto_K))\n    (check-equal? (candidate (list 1 2 3 4 5 6) 4) (list 4 3 2 1 5 6))\n    (check-equal? (candidate (list 4 5 6 7) 2) (list 5 4 6 7))\n    (check-equal? (candidate (list 9 8 7 6 5) 3) (list 7 8 9 6 5))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((temp (reverse_Array_Upto_K (cdr input) (- k 1))))\n        (if (= k 1)\n            (append temp (list (car input)))\n            (append (list (car input)) temp)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ((first (car input))\n             (rest (cdr input))\n             (reversed (reverse_Array_Upto_K rest k))\n             (reversed-rest (cdr reversed)))\n        (if (or (null? reversed-rest) (= k 1))\n            (cons first reversed)\n            (cons (car reversed-rest) (cons first reversed-rest))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((last (reverse_Array_Upto_K (cdr input) (- k 1))))\n        (if (zero? k)\n            input\n            (append (list (car input)) last)))))\n",
    "  (let ([len (length input)])\n    (if (= k len)\n        input\n        (reverse_Array_Upto_K (append (list (list-ref input (- len 1))) (sublist input 0 (- len 1))) (- k 1)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (define (reverse_Array_Upto_K_helper input k result)\n    (if (or (= k 0) (null? input))\n        result\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (&lt;= k 0))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)) (zero? k))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (append (reverse_Array_Upto_K rest (- k 1)) (list first)))))\n",
    "  (if (or (null? input) (zero? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (reverse_Array_Upto_K (cdr input) (- k 1)))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else\n     (append (reverse_Array_Upto_K (rest input) (- k 1))\n             (list (first input)))]))\n",
    "  (define (reverse_Array_Upto_K_helper input k result)\n    (if (or (null? input) (&gt;= k 0))\n        result\n        (reverse_Array_Upto_K_helper (cdr input) (- k 1) (cons (car input) result))))\n  (reverse_Array_Upto_K_helper input k '()))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (reverse_Array_Upto_K (cdr input) (- k 1))\n      (cons (car input) '())\n      )\n  )\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [reversed (reverse_Array_Upto_K rest (- k 1))])\n        (if (zero? k)\n            (cons first reversed)\n            (append (reverse_Array_Upto_K reversed (- k 1)) (list first))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 1)\n          (cons (car input) (reverse_Array_Upto_K (cdr input) (- k 1)))\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (zero? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      input\n      (reverse_Array_Upto_K (append (list (car input)) (reverse_Array_Upto_K (cdr input) (- k 1))) (- k 1))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (= k 1)\n            (append (reverse rest) (list first))\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 1)\n          (cons (car input) (reverse_Array_Upto_K (cdr input) (- k 1)))\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (empty? input)\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (cdr input) (list (car input))) (- k 1))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([temp (reverse_Array_Upto_K (cdr input) (- k 1))])\n        (if (= k 1)\n            (cons (car input) temp)\n            (cons (car temp) (cons (car input) (cdr temp)))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (zero? k)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (sub1 k))\n                    (list first))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((first (car input))\n            (rest (cdr input)))\n        (if (&lt;= k (length input))\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))\n            (append (reverse_Array_Upto_K rest k) (list first))))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (if (or (null? input)\n          (zero? k))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input (- k 1))) (sublist input 0 (- k 1))) (- k 1))))\n",
    "  (define (reverse_Array_Upto_K_helper input k)\n    (if (or (= k 0) (null? input))\n        '()\n        (append (reverse_Array_Upto_K_helper (cdr input) (- k 1)) (list (car input)))))\n  (reverse_Array_Upto_K_helper input k))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ((first (car input))\n             (rest (cdr input))\n             (reversed (reverse_Array_Upto_K rest (- k 1)))\n             (last (car reversed)))\n        (if (= k 1)\n            (append (list first) reversed)\n            (append (list last) (cons first (cdr reversed)))))))\n",
    "  (if (or (null? input) (null? k))\n      (error \"Invalid input\")\n      (if (or (not (list? input)) (not (number? k)))\n          (error \"Invalid input\")\n          (if (not (integer? k))\n              (error \"Invalid input\")\n              (if (not (>= k 0))\n                  (error \"Invalid input\")\n                  (if (not (<= k (length input)))\n                      (error \"Invalid input\")\n                      (if (= k 0)\n                          input\n                          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input)\n          (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (zero? k)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (null? input)\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (append (reverse_Array_Upto_K rest (- k 1)) (list first)))))\n",
    "  (if (empty? input)\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (rest input) (- k 1))\n                  (list (first input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 1)\n          (cons (car input) (cdr input))\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (= k 1)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (- k 1))\n                    (list first))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (reverse_Array_Upto_K (append (list (car input)) (reverse_Array_Upto_K (cdr input) (- k 1))) (- k 1)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input)\n          (zero? k))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 1)\n          (cons (car input) (cdr input))\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (zero? k)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([x (car input)]\n            [xs (cdr input)])\n        (if (zero? k)\n            (cons x input)\n            (append (reverse_Array_Upto_K xs (- k 1)) (list x))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((k-1 (sub1 k)))\n        (if (zero? k-1)\n            input\n            (append (reverse_Array_Upto_K (cdr input) k-1) (list (car input)))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([x (car input)]\n            [xs (cdr input)])\n        (if (zero? k)\n            (cons x input)\n            (append (reverse_Array_Upto_K xs (sub1 k)) (list x))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (reverse_Array_Upto_K (append (list (car input)) (reverse_Array_Upto_K (cdr input) (- k 1))) (- k 1)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (zero? k)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [reversed (reverse_Array_Upto_K rest (sub1 k))])\n        (if (zero? k)\n            (cons first reversed)\n            (append (cdr reversed) (list first))))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([x (car input)]\n            [xs (cdr input)])\n        (if (zero? k)\n            (cons x input)\n            (append (reverse_Array_Upto_K xs (- k 1)) (list x))))))\n",
    "  (if (or (empty? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [reversed (reverse_Array_Upto_K rest (sub1 k))])\n        (if (zero? k)\n            (cons first reversed)\n            (append (reverse_Array_Upto_K reversed (sub1 k)) (list first))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (reverse (sublist input 0 k)))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (equal? k 1)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [reversed (reverse_Array_Upto_K rest (- k 1))])\n        (if (or (null? reversed) (= k 0))\n            input\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input)\n          (null? (cdr input))\n          (= k 0))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (append (reverse_Array_Upto_K rest (- k 1))\n                (list first)))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [reversed (reverse_Array_Upto_K rest (- k 1))])\n        (if (zero? k)\n            (cons first reversed)\n            (append reversed (list first))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (equal? k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (reverse (take input k)))\n",
    "  (define (reverse_Array_Upto_K_iter input k result)\n    (cond ((= k 0) result)\n          ((null? input) result)\n          (else (reverse_Array_Upto_K_iter (cdr input) (- k 1) (cons (car input) result)))))\n  (reverse_Array_Upto_K_iter input k '()))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (empty? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  (list (car input))\n                  '()))))\n",
    "  (if (null? input)\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (car input))))))\n",
    "  (if (empty? input)\n      '()\n      (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))))\n",
    "  (reverse (take input k)))\n",
    "  (if (zero? k)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (list-ref input (- k 1))) (- k 2))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 1)\n          (reverse_Array_Upto_K (cdr input) k)\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (define (reverse_Array_Upto_K_iter input k output)\n    (cond\n      [(empty? input) output]\n      [(= k 0) (append output input)]\n      [else (reverse_Array_Upto_K_iter (rest input) (- k 1) (cons (first input) output))]))\n  (reverse_Array_Upto_K_iter input k empty))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (null? input)\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (zero? k)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (if (equal? k 0)\n      input\n      (reverse_Array_Upto_K (append (list (list-ref input k)) (sublist input 0 k)) (- k 1))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (null? input)\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  '()\n                  (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (if (= k 1)\n                  (list (car input))\n                  '()))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [rest-reversed (reverse_Array_Upto_K rest (- k 1))])\n        (if (= k 1)\n            (cons first rest-reversed)\n            (append rest-reversed (list first))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (if (= k 1)\n          (cons (car input) (reverse_Array_Upto_K (cdr input) (- k 1)))\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ((first (car input))\n             (rest (cdr input))\n             (reversed (reverse_Array_Upto_K rest (- k 1)))\n             (last (car reversed)))\n        (if (= k 1)\n            (cons first reversed)\n            (cons last (cons first (cdr reversed)))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1))\n                  (list (car input))))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (empty? input)\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (rest input) (- k 1))\n                  (list (first input))))))\n",
    "  (if (or (= k 0) (= k (length input)))\n      input\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (equal? k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let* ([first (car input)]\n             [rest (cdr input)]\n             [reversed (reverse_Array_Upto_K rest (- k 1))])\n        (if (= k 0)\n            (cons first reversed)\n            (append (reverse_Array_Upto_K reversed (- k 1)) (list first))))))\n",
    "  (if (or (null? input) (zero? k))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1))\n              (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (if (zero? k)\n            (cons first input)\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([temp (reverse_Array_Upto_K (cdr input) (- k 1))])\n        (if (zero? k)\n            input\n            (append (list (car input)) temp)))))\n",
    "  (if (or (= k 0) (null? input))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ([first (car input)]\n            [rest (cdr input)])\n        (append (reverse_Array_Upto_K rest (- k 1)) (list first)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (zero? k)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (cond\n    [(empty? input) empty]\n    [(= k 0) input]\n    [else (append (reverse_Array_Upto_K (rest input) (- k 1)) (list (first input)))]))\n",
    "  (let loop ([input input] [k k] [output '()])\n    (cond\n      [(empty? input) output]\n      [(= k 0) output]\n      [else (loop (rest input) (- k 1) (cons (first input) output))])))\n",
    "  (if (or (null? input) (null? (cdr input)))\n      input\n      (let ((first (car input))\n            (rest (cdr input)))\n        (if (&lt; k (length input))\n            (append (reverse_Array_Upto_K rest (- k 1)) (list first))\n            (append (reverse_Array_Upto_K rest k) (list first))))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (= k 0))\n      '()\n      (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input)))))\n",
    "  (if (or (null? input) (null? k))\n      '()\n      (if (= k 0)\n          input\n          (append (reverse_Array_Upto_K (cdr input) (- k 1)) (list (car input))))))\n",
    "  (reverse (take input k)))\n"
  ]
}