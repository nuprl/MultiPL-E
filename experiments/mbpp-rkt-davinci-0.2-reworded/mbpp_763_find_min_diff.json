{
  "name": "mbpp_763_find_min_diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the minimum difference between any two elements in a given list. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n(define (find_min_diff arr n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_min_diff))\n    (check-equal? (candidate (list 1 5 3 19 18 25) 6) 1)\n    (check-equal? (candidate (list 4 3 2 6) 4) 1)\n    (check-equal? (candidate (list 30 5 20 9) 4) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([min_diff (abs (- (car arr) (cadr arr)))])\n    (for ([i (in-range 0 (- n 2))])\n      (let ([diff (abs (- (list-ref arr i) (list-ref arr (+ i 1))))])\n        (if (< diff min_diff)\n            (set! min_diff diff))))\n    min_diff))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min_diff (if (< diff min_diff) diff min_diff)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min_diff))))\n  (find_min_diff_helper (sort arr <) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (- (list-ref arr 1) (list-ref arr 0)) min) (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min)]))\n  (find_min_diff_helper arr n (list-ref arr 1) (- (list-ref arr 1) (list-ref arr 0))))\n",
    "  (define (helper arr n min)\n    (cond\n      [(= n 1) min]\n      [(< (abs (- (car arr) (cadr arr))) min) (helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (helper (cdr arr) (- n 1) min)]))\n  (helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff arr n)\n    (define (min_diff_helper arr n min_diff)\n      (cond\n        [(= n 1) min_diff]\n        [(< (abs (- (car arr) (cadr arr))) min_diff) (min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n        [else (min_diff_helper (cdr arr) (- n 1) min_diff)]))\n    (min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n  (min_diff arr n))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new_min (if (&lt; diff min) diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new_min))))\n  (find_min_diff_helper (sort arr &lt;) n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff)\n       (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (list-ref arr 0) (list-ref arr 1))) min_diff)\n           (find_min_diff_helper (cdr arr) (- n 1) (- (list-ref arr 0) (list-ref arr 1)))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (list-ref arr 0) (list-ref arr 1)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new-min (if (&lt; diff min) diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new-min))))\n  (find_min_diff_helper arr n (car arr)))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n      [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (zero? n)\n        min\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (abs x)\n    (if (&lt; x 0) (- x) x))\n  (define (min_diff_util arr n)\n    (if (= n 1)\n        (abs (- (car arr) (cadr arr)))\n        (min (abs (- (car arr) (cadr arr))) (min_diff_util (cdr arr) (- n 1)))))\n  (min_diff_util (sort arr &lt;) n))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (cond [(= n 1) min_diff]\n          [(< (abs (- (car arr) (cadr arr))) min_diff) (find_min_diff_helper (cdr arr) (- n 1) (abs (- (car arr) (cadr arr))))]\n          [else (find_min_diff_helper (cdr arr) (- n 1) min_diff)]))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (min_diff_util arr n min_diff)\n    (cond\n      [(= n 1) min_diff]\n      [(< min_diff (- (list-ref arr 1) (list-ref arr 0))) (min_diff_util (cdr arr) (- n 1) (- (list-ref arr 1) (list-ref arr 0)))]\n      [else (min_diff_util (cdr arr) (- n 1) min_diff)]))\n  (min_diff_util arr n (abs (- (list-ref arr 1) (list-ref arr 0)))))\n",
    "  (define (find_min_diff_helper arr n min_diff)\n    (if (= n 1)\n        min_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (< diff min_diff)\n              (find_min_diff_helper (cdr arr) (- n 1) diff)\n              (find_min_diff_helper (cdr arr) (- n 1) min_diff)))))\n  (find_min_diff_helper arr n (abs (- (car arr) (cadr arr)))))\n",
    "  (define (find_min_diff_helper arr n min)\n    (if (= n 1)\n        min\n        (let* ([diff (abs (- (car arr) (cadr arr)))]\n               [new-min (if (&lt; diff min) diff min)])\n          (find_min_diff_helper (cdr arr) (- n 1) new-min))))\n  (find_min_diff_helper (sort arr &lt;) n (abs (- (car arr) (cadr arr)))))\n"
  ]
}