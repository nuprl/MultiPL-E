{
  "name": "mbpp_764_number_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count number of digits in a given string.\n(define (number_ctr str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_ctr))\n    (check-equal? (candidate \"program2bedone\") 1)\n    (check-equal? (candidate \"3wonders\") 1)\n    (check-equal? (candidate \"123\") 3)\n    (check-equal? (candidate \"3wond-1ers2\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond [(empty? str) ctr]\n          [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n          [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (if (empty? str)\n      0\n      (if (char-numeric? (first str))\n          (+ 1 (number_ctr (rest str)))\n          (number_ctr (rest str)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (if (string=? str \"\")\n      0\n      (if (char-numeric? (string-ref str 0))\n          (+ 1 (number_ctr (substring str 1)))\n          (number_ctr (substring str 1)))))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0))) (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str counter)\n    (if (string-empty? str)\n        counter\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ counter 1))\n            (helper (substring str 1) counter))))\n  (helper str 0))\n"
  ]
}