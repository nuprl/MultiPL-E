{
  "name": "mbpp_764_number_ctr",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to count number of digits in a given string.\n(define (number_ctr str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate number_ctr))\n    (check-equal? (candidate \"program2bedone\") 1)\n    (check-equal? (candidate \"3wonders\") 1)\n    (check-equal? (candidate \"123\") 3)\n    (check-equal? (candidate \"3wond-1ers2\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond [(empty? str) ctr]\n          [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n          [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (if (empty? str)\n      0\n      (if (char-numeric? (first str))\n          (+ 1 (number_ctr (rest str)))\n          (number_ctr (rest str)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (if (string=? str \"\")\n      0\n      (if (char-numeric? (string-ref str 0))\n          (+ 1 (number_ctr (substring str 1)))\n          (number_ctr (substring str 1)))))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0))) (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str counter)\n    (if (string-empty? str)\n        counter\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ counter 1))\n            (helper (substring str 1) counter))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (first str)))\n     (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string=? str \"\")\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond [(empty? str) 0]\n        [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n        [else (number_ctr (rest str))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond [(empty? str) ctr]\n          [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n          [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (string-empty? str)\n        count\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ count 1))\n            (helper (substring str 1) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond ((null? str) ctr)\n          ((char-numeric? (car str)) (helper (cdr str) (+ ctr 1)))\n          (else (helper (cdr str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (string-empty? str)\n        acc\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ acc 1))\n            (helper (substring str 1) acc))))\n  (helper str 0))\n",
    "  (length (regexp-match #rx\"[0-9]\" str)))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (let loop ((i 0) (ctr 0))\n    (if (= i (string-length str))\n        ctr\n        (if (char-numeric? (string-ref str i))\n            (loop (+ i 1) (+ ctr 1))\n            (loop (+ i 1) ctr)))))\n",
    "  (define (helper str ctr)\n    (cond ((null? str) ctr)\n          ((char-numeric? (car str)) (helper (cdr str) (+ ctr 1)))\n          (else (helper (cdr str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (null? str)\n        ctr\n        (if (char-numeric? (car str))\n            (helper (cdr str) (+ ctr 1))\n            (helper (cdr str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (let loop ([str str] [ctr 0])\n    (if (empty? str)\n        ctr\n        (loop (rest str) (+ ctr 1)))))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str num)\n    (cond\n      [(empty? str) num]\n      [(char-numeric? (first str)) (helper (rest str) (+ num 1))]\n      [else (helper (rest str) num)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (if (char-numeric? (first str))\n         (+ 1 (number_ctr (rest str)))\n         (number_ctr (rest str)))]))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (define (helper str counter)\n    (if (eq? str \"\")\n        counter\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ counter 1))\n            (helper (substring str 1) counter))))\n  (helper str 0))\n",
    "  (define (iter count str)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (iter (+ count 1) (rest str))\n            (iter count (rest str)))))\n  (iter 0 str))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str n)\n    (if (string-empty? str)\n        n\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ n 1))\n            (helper (substring str 1) n))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ count 1))\n            (helper (rest str) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (if (empty? str)\n      0\n      (+ (if (char-numeric? (first str)) 1 0)\n         (number_ctr (rest str)))))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (string-empty? str)\n        count\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ 1 count))\n            (helper (substring str 1) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0))) (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str i)\n    (cond\n      [(empty? str) i]\n      [(char-numeric? (first str)) (helper (rest str) (+ i 1))]\n      [else (helper (rest str) i)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (string-empty? str)\n        count\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ count 1))\n            (helper (substring str 1) count))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ count 1))\n            (helper (rest str) count))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (string-empty? str)\n        acc\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ acc 1))\n            (helper (substring str 1) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond ((null? str) ctr)\n          ((char-numeric? (car str)) (helper (cdr str) (+ ctr 1)))\n          (else (helper (cdr str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (length (string-split str #rx\"[0-9]\")))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (if (empty? str)\n        count\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ count 1))\n            (helper (rest str) count))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (number_ctr_iter str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (number_ctr_iter (rest str) (+ ctr 1))]\n      [else (number_ctr_iter (rest str) ctr)]))\n  (number_ctr_iter str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (first str)))\n     (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond ((empty? str) ctr)\n          ((char-numeric? (first str)) (helper (rest str) (+ ctr 1)))\n          (else (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (eq? (string-length str) 0)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-&gt;list (first str))))\n     (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond [(empty? str) 0]\n        [else (+ 1 (number_ctr (rest str)))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (cond ((null? str) 0)\n        ((char-numeric? (car str)) (+ 1 (number_ctr (cdr str))))\n        (else (number_ctr (cdr str)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (cond ((string=? str \"\") count)\n          ((char-numeric? (string-ref str 0)) (helper (substring str 1) (+ count 1)))\n          (else (helper (substring str 1) count))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(string=? str \"\") 0]\n    [(char-numeric? (string-ref str 0)) (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond ((null? str) ctr)\n          ((char-numeric? (car str)) (helper (cdr str) (+ ctr 1)))\n          (else (helper (cdr str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str))\n       (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (cond\n       [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n       [else (number_ctr (rest str))])]))\n",
    "  (define (helper str ctr)\n    (if (string=? str \"\")\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (length (regexp-match #rx\"[0-9]\" str)))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (first str))) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (null? str)\n        acc\n        (if (char-numeric? (car str))\n            (helper (cdr str) (+ acc 1))\n            (helper (cdr str) acc))))\n  (helper str 0))\n",
    "  (define (helper str i)\n    (if (string=? str \"\")\n        i\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ i 1))\n            (helper (substring str 1) i))))\n  (helper str 0))\n",
    "  (if (string=? str \"\")\n      0\n      (+ 1 (number_ctr (substring str 1)))))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ (number_ctr (substring str 1)) 1)]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (first str)))\n     (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (substring str 0 1)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str acc)\n    (cond\n      [(empty? str) acc]\n      [(char-numeric? (first str)) (helper (rest str) (+ acc 1))]\n      [else (helper (rest str) acc)]))\n  (helper str 0))\n",
    "  (define (helper str acc)\n    (if (empty? str)\n        acc\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ acc 1))\n            (helper (rest str) acc))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(char-numeric? (first str)) (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (if (char-numeric? (first str))\n         (+ 1 (number_ctr (rest str)))\n         (number_ctr (rest str)))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string->number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [else\n     (if (char-numeric? (first str))\n         (+ 1 (number_ctr (rest str)))\n         (number_ctr (rest str)))]))\n",
    "  (define (helper str counter)\n    (if (string-empty? str)\n        counter\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ counter 1))\n            (helper (substring str 1) counter))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [else (if (char-numeric? (first str))\n              (+ 1 (number_ctr (rest str)))\n              (number_ctr (rest str)))]))\n",
    "  (cond\n    [(string=? str \"\") 0]\n    [(char-numeric? (string-ref str 0)) (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (define (helper str ctr)\n    (cond\n      [(empty? str) ctr]\n      [(char-numeric? (first str)) (helper (rest str) (+ ctr 1))]\n      [else (helper (rest str) ctr)]))\n  (helper str 0))\n",
    "  (define (helper str ctr)\n    (if (empty? str)\n        ctr\n        (if (char-numeric? (first str))\n            (helper (rest str) (+ ctr 1))\n            (helper (rest str) ctr))))\n  (helper str 0))\n",
    "  (define (helper str count)\n    (cond\n      [(empty? str) count]\n      [(char-numeric? (first str)) (helper (rest str) (+ count 1))]\n      [else (helper (rest str) count)]))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-&gt;list (first str))))\n     (+ 1 (number_ctr (rest str)))]\n    [else (number_ctr (rest str))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-take str 1)))\n     (+ 1 (number_ctr (string-drop str 1)))]\n    [else (number_ctr (string-drop str 1))]))\n",
    "  (define (helper str ctr)\n    (if (string-empty? str)\n        ctr\n        (if (char-numeric? (string-ref str 0))\n            (helper (substring str 1) (+ ctr 1))\n            (helper (substring str 1) ctr))))\n  (helper str 0))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n",
    "  (cond\n    [(empty? str) 0]\n    [(number? (string-&gt;number (string-ref str 0)))\n     (+ 1 (number_ctr (substring str 1)))]\n    [else (number_ctr (substring str 1))]))\n"
  ]
}