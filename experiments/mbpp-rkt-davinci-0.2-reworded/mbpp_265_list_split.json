{
  "name": "mbpp_265_list_split",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n(define (list_split S step)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate list_split))\n    (check-equal? (candidate (list \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\") 3) (list (list \"a\" \"d\" \"g\" \"j\" \"m\") (list \"b\" \"e\" \"h\" \"k\" \"n\") (list \"c\" \"f\" \"i\" \"l\")))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14) 3) (list (list 1 4 7 10 13) (list 2 5 8 11 14) (list 3 6 9 12)))\n    (check-equal? (candidate (list \"python\" \"java\" \"C\" \"C++\" \"DBMS\" \"SQL\") 2) (list (list \"python\" \"C\" \"DBMS\") (list \"java\" \"C++\" \"SQL\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (define (list_split_helper S step acc)\n    (if (null? S)\n        acc\n        (list_split_helper (cdr S) step (cons (take S step) acc))))\n  (reverse (list_split_helper S step '())))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (define (helper S step acc)\n    (if (empty? S)\n        (reverse acc)\n        (helper (rest S) step (cons (take S step) acc))))\n  (helper S step '()))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (cond\n    [(empty? S) empty]\n    [(= step 0) empty]\n    [else (cons (take S step) (list_split (drop S step) step))]))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (define (list_split_iter S step acc)\n    (if (null? S)\n        acc\n        (list_split_iter (cdr S) step (cons (take S step) acc))))\n  (reverse (list_split_iter S step '())))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (cond\n    [(empty? S) empty]\n    [else (cons (take S step) (list_split (drop S step) step))]))\n",
    "  (cond\n    [(empty? S) empty]\n    [else (cons (take S step) (list_split (drop S step) step))]))\n",
    "  (define (list_split_iter S step acc)\n    (if (null? S)\n        acc\n        (list_split_iter (cdr S) step (cons (take S step) acc))))\n  (reverse (list_split_iter S step '())))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (define (list_split_helper S step acc)\n    (cond\n      [(empty? S) (reverse acc)]\n      [(zero? step) (list_split_helper (rest S) step (cons (list (first S)) acc))]\n      [else (list_split_helper (rest S) (- step 1) (cons (cons (first S) (first acc)) (rest acc)))]))\n  (list_split_helper S step (list (list))))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n",
    "  (if (null? S)\n      '()\n      (cons (take S step) (list_split (drop S step) step))))\n"
  ]
}