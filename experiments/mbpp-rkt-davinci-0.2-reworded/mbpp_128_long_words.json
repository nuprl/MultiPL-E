{
  "name": "mbpp_128_long_words",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find words that are longer than n characters from a given list of words.\n(define (long_words n str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate long_words))\n    (check-equal? (candidate 3 \"python is a programming language\") (list \"python\" \"programming\" \"language\"))\n    (check-equal? (candidate 2 \"writing a program\") (list \"writing\" \"program\"))\n    (check-equal? (candidate 5 \"sorting list\") (list \"sorting\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n))\n          (string-split str)))\n",
    "  (filter (lambda (x)\n            (> (string-length x) n))\n          str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n))\n          (string-split str #\\space)))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (word) (&gt; (string-length word) n))\n          (string-split str)))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) (string-split str)))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n",
    "  (filter (lambda (x) (> (string-length x) n)) str))\n",
    "  (filter (lambda (x) (&gt; (string-length x) n)) str))\n"
  ]
}