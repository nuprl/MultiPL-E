{
  "name": "mbpp_460_Extract",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to get the first element of each sublist.\n(define (Extract lst)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Extract))\n    (check-equal? (candidate (list (list 1 2) (list 3 4 5) (list 6 7 8 9))) (list 1 3 6))\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5))) (list 1 4))\n    (check-equal? (candidate (list (list 9 8 1) (list 1 2))) (list 9 1))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map car lst))\n",
    "  (map car lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (car (car lst)) (Extract (cdr lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (first (first lst))\n                    (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst))\n            (Extract (cdr lst)))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (first (first lst))\n           (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst)) (Extract (cdr lst)))))\n",
    "  (map first lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst)) (Extract (cdr lst)))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n</code>\nI am not sure if this is the best way to do it.\n\n\nA:\n\nYou can use <code>map</code> to apply a function to each element of a list.\n<code>(define (Extract lst)\n  (map first lst))\n</code>\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst)) (Extract (cdr lst)))))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst))\n            (Extract (cdr lst)))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n</code>\nI'm getting an error:\n<code>Extract: expects argument of type &lt;listof (listof any)&gt;; given '(1 2 3)\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're getting the error because you're passing a list of numbers to <code>Extract</code> instead of a list of lists.\n<code>(Extract '(1 2 3))\n</code>\nshould be\n<code>(Extract '((1 2 3) (4 5 6) (7 8 9)))\n</code>\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst))\n            (Extract (cdr lst)))))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst)) (Extract (cdr lst)))))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else\n     (cons (first (first lst))\n           (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [(empty? (first lst)) (Extract (rest lst))]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map car lst))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (first (first lst)) (Extract (rest lst)))]))",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (car (car lst)) (Extract (cdr lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst)) (Extract (cdr lst)))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map (lambda (x) (car x)) lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst)) (Extract (cdr lst)))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (if (null? lst)\n      '()\n      (cons (car (car lst))\n            (Extract (cdr lst)))))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (cond [(empty? lst) empty]\n        [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map car lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (map first lst))\n",
    "  (cond\n    [(empty? lst) empty]\n    [else (cons (first (first lst)) (Extract (rest lst)))]))\n"
  ]
}