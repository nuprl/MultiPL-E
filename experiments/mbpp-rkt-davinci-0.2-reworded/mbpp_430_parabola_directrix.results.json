{
  "name": "mbpp_430_parabola_directrix",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y y) (* c y y y)))\n    (define (derivative y)\n      (+ (* b 2) (* c 3 y)))\n    (define (newton-raphson y)\n      (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) 0.001))\n    (define (try guess)\n      (let ((next (newton-guess guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (define (newton-guess x)\n      (- x (/ (parabola x) (derivative x))))\n    (try x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "/tmp/tmp_44dgctf.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 23\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b 2) (* a x) (* b x) c))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17qt336j.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17qt336j.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17qt336j.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((discriminant (- (* b b) (* 4 a c))))\n    (cond ((< discriminant 0) #f)\n          ((= discriminant 0) (/ (- b) (* 2 a)))\n          (else (/ (- b) (* 2 a))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kcmbh8g.rkt:15:4\nactual:     #f\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kcmbh8g.rkt:16:4\nactual:     #f\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kcmbh8g.rkt:17:4\nactual:     #f\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (f x) (* 2 a x)))\n  (define (h x)\n    (- (g x) (* 2 b x)))\n  (define (i x)\n    (- (h x) (* 2 b)))\n  (define (j x)\n    (- (i x) (* 2 a)))\n  (define (k x)\n    (- (j x) (* 2 a)))\n  (define (l x)\n    (- (k x) (* 2 b)))\n  (define (m x)\n    (- (l x) (* 2 b)))\n  (define (n x)\n    (- (m x) (* 2 a)))\n  (define (o x)\n    (- (n x) (* 2 a)))\n  (define (p x)\n    (- (o x) (* 2 b)))\n  (define (q x)\n    (- (p x) (* 2 b)))\n  (define (r x)\n    (- (q x) (* 2 a)))\n  (define (s x)\n    (- (r x) (* 2 a)))\n  (define (t x)\n    (- (s x) (* 2 b)))\n  (define (u x)\n    (- (t x) (* 2 b)))\n  (define (v x)\n    (- (u x) (* 2 a)))\n  (define (w x)\n    (- (v x) (* 2 a)))\n  (define (x x)\n    (- (w x) (* 2 b)))\n  (define (y x)\n    (- (x x) (* 2 b)))\n  (define (z x)\n    (- (y x) (* 2 a)))\n  (define (aa x)\n    (- (z x) (* 2 a)))\n  (define (bb x)\n    (- (aa x) (* 2 b)))\n  (define (cc x)\n    (- (bb x) (* 2 b)))\n  (define (dd x)\n    (- (cc x) (* 2 a)))\n  (define (ee x)\n    (- (dd x) (* 2 a)))\n  (define (ff x)\n    (- (ee\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "/tmp/tmp7rzhb9jv.rkt:58:7: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 59\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (if (zero? a)\n        (error \"a cannot be zero\")\n        (- (/ c) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprre9uxk5.rkt:15:4\nactual:     4/5\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprre9uxk5.rkt:16:4\nactual:     25/36\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprre9uxk5.rkt:17:4\nactual:     7/6\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (/ (- c) b))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmyjxohtg.rkt:14:4\nactual:     -2/3\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmyjxohtg.rkt:15:4\nactual:     -1/2\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmyjxohtg.rkt:16:4\nactual:     -3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (+ c (* a (sqr x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7956g0p9.rkt:13:4\nactual:     49/20\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7956g0p9.rkt:14:4\nactual:     52/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7956g0p9.rkt:15:4\nactual:     8\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* a 1) (* b 2 x)))\n  (define (newton f df guess)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.001))\n    (define (try guess)\n      (let ((next (newton-transform guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (define (newton-transform x)\n      (- x (/ (f x) (df x))))\n    (try guess))\n  (newton f df 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510387,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rkn0qq0.rkt:27:4\nactual:     -1235342497600598/1853015893884545\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (cons x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprfxbudz3.rkt:16:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprfxbudz3.rkt:17:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprfxbudz3.rkt:18:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (positive? a)\n        (- (/ c (+ (* a (sqr x)) (* b x) c)))\n        (+ (/ c (+ (* a (sqr x)) (* b x) c))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvje74_4.rkt:15:4\nactual:     -40/31\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvje74_4.rkt:16:4\nactual:     -9/5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvje74_4.rkt:17:4\nactual:     -3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (f x) (* b x)))\n  (define (h x)\n    (- (g x) (* a x)))\n  (define (i x)\n    (- (h x) c))\n  (define (j x)\n    (/ (i x) (* -2 b)))\n  (j 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7avjic2q.rkt:22:4\nactual:     0\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7avjic2q.rkt:23:4\nactual:     0\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7avjic2q.rkt:24:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-intercept (/ (- b) (* 2 a))))\n    (define (directrix x)\n      (- (/ c) (* a x)))\n    (directrix x-intercept)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_i2woqy5.rkt:15:4\nactual:     2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_i2woqy5.rkt:16:4\nactual:     17/4\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_i2woqy5.rkt:17:4\nactual:     13/6\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ c x) b))\n  (define (h x)\n    (- (/ c x) a))\n  (define (i x)\n    (- (/ c x) (* a x)))\n  (define (j x)\n    (- (/ c x) (* b x)))\n  (define (k x)\n    (- (/ c x) (* a x x)))\n  (define (l x)\n    (- (/ c x) (* b x x)))\n  (define (m x)\n    (- (/ c x) (* a x x x)))\n  (define (n x)\n    (- (/ c x) (* b x x x)))\n  (define (o x)\n    (- (/ c x) (* a x x x x)))\n  (define (p x)\n    (- (/ c x) (* b x x x x)))\n  (define (q x)\n    (- (/ c x) (* a x x x x x)))\n  (define (r x)\n    (- (/ c x) (* b x x x x x)))\n  (define (s x)\n    (- (/ c x) (* a x x x x x x)))\n  (define (t x)\n    (- (/ c x) (* b x x x x x x)))\n  (define (u x)\n    (- (/ c x) (* a x x x x x x x)))\n  (define (v x)\n    (- (/ c x) (* b x x x x x x x)))\n  (define (w x)\n    (- (/ c x) (* a x x x x x x x x)))\n  (define (x1 x)\n    (- (/ c x) (* b x x x x x x x x)))\n  (define (y x)\n    (- (/ c x) (* a x x x x x x x x x)))\n  (define (z x)\n    (- (/ c x) (* b x x x x x x x x x)))\n  (define (aa x)\n    (- (/ c x) (* a x x x x x x x x x x)))\n  (define (bb x)\n    (- (/ c\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "/tmp/tmp9y9077ir.rkt:50:7: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 51\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* (* 2 a) x) b))\n  (define (newton f df x)\n    (define (newton-iter f df x)\n      (if (close-enough? x (f x))\n          x\n          (newton-iter f df (f x))))\n    (newton-iter f df x))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.001))\n  (define (f-of-x x)\n    (define (f x)\n      (+ (* a x) (* b x x) c))\n    (define (df x)\n      (+ (* (* 2 a) x) b))\n    (define (newton f df x)\n      (define (newton-iter f df x)\n        (if (close-enough? x (f x))\n            x\n            (newton-iter f df (f x))))\n      (newton-iter f df x))\n    (define (close-enough? x y)\n      (< (abs (- x y)) 0.001))\n    (newton f df x))\n  (define (x-of-y y)\n    (f-of-x (/ (- y c) b)))\n  (define (y-of-x x)\n    (f x))\n  (define (y-of-x-plus-h x h)\n    (f (+ x h)))\n  (define (slope-of-line x1 x2 y1 y2)\n    (/ (- y2 y1) (- x2 x1)))\n  (define (slope-of-tangent x)\n    (slope-of-line x (+ x 0.001) (y-of-x x) (y-of-x-plus-h x 0.001)))\n  (define (slope-of-normal x)\n    (- (/ 1 (slope-of-tangent x))))\n  (define (slope-of-directrix x)\n    (- (/ 1 (slope-of-normal x))))\n  (define (y-intercept-of\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "/tmp/tmpiem7dkw9.rkt:45:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 46\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (/ (- c (* b b)) (* 2 a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31qy_axg.rkt:14:4\nactual:     -7/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31qy_axg.rkt:15:4\nactual:     -10/3\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31qy_axg.rkt:16:4\nactual:     -5/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (* a x) (* b x x) c))\n  (define (h x)\n    (- (* a x) (* b x x) c))\n  (define (i x)\n    (+ (* a x) (* b x x) c))\n  (define (j x)\n    (- (* a x) (* b x x) c))\n  (define (k x)\n    (+ (* a x) (* b x x) c))\n  (define (l x)\n    (- (* a x) (* b x x) c))\n  (define (m x)\n    (+ (* a x) (* b x x) c))\n  (define (n x)\n    (- (* a x) (* b x x) c))\n  (define (o x)\n    (+ (* a x) (* b x x) c))\n  (define (p x)\n    (- (* a x) (* b x x) c))\n  (define (q x)\n    (+ (* a x) (* b x x) c))\n  (define (r x)\n    (- (* a x) (* b x x) c))\n  (define (s x)\n    (+ (* a x) (* b x x) c))\n  (define (t x)\n    (- (* a x) (* b x x) c))\n  (define (u x)\n    (+ (* a x) (* b x x) c))\n  (define (v x)\n    (- (* a x) (* b x x) c))\n  (define (w x)\n    (+ (* a x) (* b x x) c))\n  (define (x x)\n    (- (* a x) (* b x x) c))\n  (define (y x)\n    (+ (* a x) (* b x x) c))\n  (define (z x)\n    (- (* a x) (* b x x) c))\n  (define (aa x)\n    (+ (* a x) (* b x x) c))\n  (define (bb x)\n    (- (* a x) (* b x x) c))\n  (define (cc\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510372,
      "stdout": "",
      "stderr": "/tmp/tmpr71n9bb0.rkt:51:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (* (/ (- (* b b) (* 4 a c)) (* 4 a)) x)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qsl9dsw.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qsl9dsw.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qsl9dsw.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu86p0jlq.rkt:15:4\n\nNo directrix\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu86p0jlq.rkt:16:4\n\nNo directrix\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu86p0jlq.rkt:17:4\n\nNo directrix\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-vertex (/ (- b) (* 2 a))]\n         [y-vertex (- (+ (* a (expt x-vertex 2)) (* b x-vertex) c))])\n    (let ([slope (/ (- y-vertex) (- x-vertex))])\n      (let ([y-intercept (- y-vertex (* slope x-vertex))])\n        (list slope y-intercept)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpylhekkjk.rkt:16:4\nactual:     '(31/6 0)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpylhekkjk.rkt:17:4\nactual:     '(5 0)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpylhekkjk.rkt:18:4\nactual:     '(4 0)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ 1 (* 2 a)) x))\n  (define (h x)\n    (- (/ b (* 2 a)) x))\n  (define (i x)\n    (- (/ c (* 2 a)) x))\n  (define (j x)\n    (- (/ 1 (* 2 b)) x))\n  (define (k x)\n    (- (/ a (* 2 b)) x))\n  (define (l x)\n    (- (/ c (* 2 b)) x))\n  (define (m x)\n    (- (/ 1 (* 2 c)) x))\n  (define (n x)\n    (- (/ a (* 2 c)) x))\n  (define (o x)\n    (- (/ b (* 2 c)) x))\n  (cond ((= a 0) (g (f 0)))\n        ((= b 0) (j (f 0)))\n        ((= c 0) (m (f 0)))\n        (else (h (f 0)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21g1l1f9.rkt:35:4\nactual:     -17/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21g1l1f9.rkt:36:4\nactual:     -32/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp21g1l1f9.rkt:37:4\nactual:     -5\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (- x a)) (/ b 2))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (- x a)) (/ (- (sqr b) (* 4 a c)) (* 4 a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3q1qjpi.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3q1qjpi.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt3q1qjpi.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (* a x) c)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihnd8tx9.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihnd8tx9.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihnd8tx9.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help x (f x) (df x)))\n  (define (newton-help x f df)\n    (if (close-enough? f 0)\n        x\n        (newton-help (- x (/ f df)) (f x) (df x))))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqhrcmgf.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqhrcmgf.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqhrcmgf.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (/ (- b) (* 2 a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (deriv x)\n    (+ (* b x) b))\n  (define (newton x)\n    (newton-help f deriv x))\n  (define (newton-help f fprime guess)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.001))\n    (define (improve guess)\n      (newton-help f fprime\n                   (- guess (/ (f guess) (fprime guess)))))\n    (if (close-enough? (f guess) 0)\n        guess\n        (improve guess)))\n  (newton (/ -b 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpv_qa6eai.rkt:20:13: -b: unbound identifier\n  in: -b\n  location...:\n   /tmp/tmpv_qa6eai.rkt:20:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (sqrt (/ (- b) (* 2 a))))\n  (define (y)\n    (- (/ c (* 2 a))))\n  (define (d)\n    (sqrt (+ (sqr x) (sqr y))))\n  (define (theta)\n    (acos (/ x d)))\n  (define (phi)\n    (acos (/ y d)))\n  (define (delta)\n    (- theta phi))\n  (define (delta-deg)\n    (* 180 (/ delta pi)))\n  (define (delta-rad)\n    (* pi (/ delta 180)))\n  (define (directrix)\n    (- y (* d (sin delta-rad))))\n  (list (list x y) (list d theta phi delta delta-deg delta-rad) directrix))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoz5h9tv.rkt:30:4\nactual:\n  '((#<procedure:x> #<procedure:y>)\n    (#<procedure:d>\n     #<procedure:theta>\n     #<procedure:phi>\n     #<procedure:delta>\n     #<procedure:delta-deg>\n     #<procedure:delta-rad>)\n    #<procedure:directrix>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoz5h9tv.rkt:31:4\nactual:\n  '((#<procedure:x> #<procedure:y>)\n    (#<procedure:d>\n     #<procedure:theta>\n     #<procedure:phi>\n     #<procedure:delta>\n     #<procedure:delta-deg>\n     #<procedure:delta-rad>)\n    #<procedure:directrix>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkoz5h9tv.rkt:32:4\nactual:\n  '((#<procedure:x> #<procedure:y>)\n    (#<procedure:d>\n     #<procedure:theta>\n     #<procedure:phi>\n     #<procedure:delta>\n     #<procedure:delta-deg>\n     #<procedure:delta-rad>)\n    #<procedure:directrix>)\nexpected:   -1",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (- b) (* 2 a))))\n    (if (zero? a)\n        (error \"a cannot be zero\")\n        (if (positive? a)\n            (- d)\n            (+ d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekxav80z.rkt:17:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekxav80z.rkt:18:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpekxav80z.rkt:19:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (+ (* -1 (/ b (* 2 a))) (/ c (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6tpg008v.rkt:12:4\nactual:     -1/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6tpg008v.rkt:13:4\nactual:     -2/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6tpg008v.rkt:14:4\nactual:     1/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (sqrt (/ (- b) (* 2 a))))\n  (define (y)\n    (- (/ c (* 2 a))))\n  (define (d)\n    (- y (* x x)))\n  (list x y d))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1_yi2nx.rkt:18:4\nactual:     '(#<procedure:x> #<procedure:y> #<procedure:d>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1_yi2nx.rkt:19:4\nactual:     '(#<procedure:x> #<procedure:y> #<procedure:d>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1_yi2nx.rkt:20:4\nactual:     '(#<procedure:x> #<procedure:y> #<procedure:d>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help f df x))\n  (define (newton-help f df guess)\n    (let ((next (newton-transform f df guess)))\n      (if (good-enough? guess next)\n          next\n          (newton-help f df next))))\n  (define (newton-transform f df guess)\n    (- guess (/ (f guess) (df guess))))\n  (define (good-enough? guess next)\n    (< (abs (- guess next)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123513,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps4ovqkpm.rkt:27:4\nactual:\n  -3788267678718265286463805862111635723296674775558500373104834155422692766077649702887155044421679846272576865032145909687868767873875300742760646432429926924274611683228738838741767467721732453662989949339320423608176703298618184104613697699900614150389294697002819057581832777249253623406545204299156734504150260460791775084751350837295254811490417558378624034323584558115669233427459498193262886672471877227967585492023549370327868640374030359206351233596451560962177068857030070918180544284626897369643295393541023494754201184272123705458181214733854076240336222604886462977879259722431027242652763035638708626561511236857647238346926580527065139662328671381962759041939743189157587853489242425767116357717072220859698660308658824997011372564473081315666962107178665189180834786877334650008588854143414087837004885525154030853773941686022804253748028242770497989597702483373578202385082146414312985541331548804177191502456642969481181169399157797745498585409836694490579169116029595357429818079453708747688783302057731311908519448108425638571188994516983913272477342440588696786503405017765919347414193161809016998962332212576108858546819513604116376492994390019862285484328963961989905129916656599694538394281289198778552897684998045757366460063984395273447274984111583403916790138685112189152839802534345713292185692194651410560989438833696593796159959592733519771471053856359671334907164164128317409205236581162198022400841365330947109028406799393147784992994758629548869284918490109962292781200700378954098658468062753257991597499618520217987165944915535508109768098583423852268895239774971890280705821263682179282783025864986503520556555140467492720795637858597361870052198571160512993211806416021826210890322620734130351236648261694261205673350719643515090151741433624979498821107402665103532819550803304378521103578106425044165867892303422708361394728318146726201582637275457360127736586828490892834109257477770075689173123847866088897",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp745nwx6.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp745nwx6.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp745nwx6.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (sqrt (- (* b b) (* 4 a c)))))\n    (/ (- -b d) (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpv24kehf8.rkt:6:10: -b: unbound identifier\n  in: -b\n  location...:\n   /tmp/tmpv24kehf8.rkt:6:10\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a)) (sqrt (- (sqr (- x (/ b (* 2 a)))) (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1x10jw6.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1x10jw6.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1x10jw6.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (sqrt (- (* b b) (* 4 a c)))))\n    (/ (- b d) (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3040fjk.rkt:13:4\nactual:     0.3-0.5567764362830021i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3040fjk.rkt:14:4\nactual:     0.4444444444444444-0.4969039949999533i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3040fjk.rkt:15:4\nactual:     1.0-1.4142135623730951i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd05svj07.rkt:15:4\nactual:     0.3+5.5677643628300215i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd05svj07.rkt:16:4\nactual:     0.4444444444444444+8.94427190999916i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd05svj07.rkt:17:4\nactual:     1.0+5.656854249492381i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (* 4 (/ c a))))))\n  (directrix (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfa3d37t.rkt:16:4\nactual:     0.3+1.2649110640673518i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfa3d37t.rkt:17:4\nactual:     4/9+4/3i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnfa3d37t.rkt:18:4\nactual:     1.0+3.4641016151377544i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        (list x)\n        '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplusb_ryv.rkt:15:4\nactual:     '()\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplusb_ryv.rkt:16:4\nactual:     '()\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplusb_ryv.rkt:17:4\nactual:     '()\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr (- (/ b (* 2 a)) x))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxbinxt2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxbinxt2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxbinxt2.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr (- (/ b (* 2 a))))\n                (/ c a)))))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp_814f84.rkt:16:4\nactual:     0.3-0.5567764362830022i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp_814f84.rkt:17:4\nactual:     0.4444444444444444-0.49690399499995325i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp_814f84.rkt:18:4\nactual:     1.0-1.4142135623730951i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (define (parabola_directrix_helper_helper y)\n      (define (parabola_directrix_helper_helper_helper z)\n        (define (parabola_directrix_helper_helper_helper_helper w)\n          (define (parabola_directrix_helper_helper_helper_helper_helper u)\n            (define (parabola_directrix_helper_helper_helper_helper_helper_helper v)\n              (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper t)\n                (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper s)\n                  (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper r)\n                    (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper q)\n                      (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper p)\n                        (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper o)\n                          (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper n)\n                            (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper m)\n                              (define (parabola_directrix_\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp2st4bjjs.rkt:19:38: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (sqrt (+ (* b b) (* 4 a c) (* 4 a x))) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton x)\n    (newton-help x (df x) 0.00001))\n  (define (newton-help guess df dx)\n    (if (&lt; (abs (- guess (/ (f guess) df))) dx)\n        guess\n        (newton-help (- guess (/ (f guess) df)) df dx)))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmpu6p0d25s.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* a (sqr x)) (* b x) c)\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (sqrt (+ (* b b) (* 4 a c) (* 4 a x)))\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0b1npri7.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0b1npri7.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0b1npri7.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (cons x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprfxbudz3.rkt:16:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprfxbudz3.rkt:17:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprfxbudz3.rkt:18:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (cond [(= a 0) (error \"Not a parabola\")]\n        [else (- (/ b (* 2 a)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplhsot59b.rkt:13:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplhsot59b.rkt:14:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplhsot59b.rkt:15:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ c a)))\n  (cons x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposhqrdv8.rkt:16:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposhqrdv8.rkt:17:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmposhqrdv8.rkt:18:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ c a) (* a (x) (x))))\n  (list (x) (y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplymhzmez.rkt:16:4\nactual:     '(-3/10 -1/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplymhzmez.rkt:17:4\nactual:     '(-4/9 -4/3)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplymhzmez.rkt:18:4\nactual:     '(-1 1)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh_x5soo.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh_x5soo.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh_x5soo.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (sqrt (+ (* b b) (* 4 a c) (* 4 a x))) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppvuiqywv.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (+ (* -1 a) (* -1 b)) (* 2 c))))\n    (if (= d 0)\n        (error \"The parabola is vertical\")\n        d)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cjf3z0v.rkt:15:4\nactual:     -2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cjf3z0v.rkt:16:4\nactual:     -17/8\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cjf3z0v.rkt:17:4\nactual:     -1/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (y x)\n      (+ (* a x) (* b x x) c))\n    (define (derivative x)\n      (+ (* a 1) (* b 2 x)))\n    (define (newton-raphson x)\n      (if (&lt; (abs (- (y x) 0)) 0.00001)\n          x\n          (newton-raphson (- x (/ (y x) (derivative x))))))\n    (newton-raphson x))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmp25f76bvr.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 17\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((discriminant (- (* b b) (* 4 a c))))\n    (cond ((> discriminant 0)\n           (let ((x1 (/ (+ (- b) (sqrt discriminant)) (* 2 a)))\n                 (x2 (/ (- (- b) (sqrt discriminant)) (* 2 a))))\n             (cond ((> x1 x2) x1)\n                   (else x2))))\n          ((= discriminant 0)\n           (/ (- b) (* 2 a)))\n          (else\n           (error \"No directrix exists.\")))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq26rb_s.rkt:21:4\n\nNo directrix exists.\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq26rb_s.rkt:22:4\n\nNo directrix exists.\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplq26rb_s.rkt:23:4\n\nNo directrix exists.\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (positive? a)\n        (- (/ c (+ (* a (sqr x)) (* b x) c)))\n        (- (/ c (+ (* a (sqr x)) (* b x) c))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphm7ynw0m.rkt:15:4\nactual:     -40/31\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphm7ynw0m.rkt:16:4\nactual:     -9/5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphm7ynw0m.rkt:17:4\nactual:     -3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (- (/ c a) (* x x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:13:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:14:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:15:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (- x a)) (/ b 2))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([d (- (* b b) (* 4 a c))]\n         [x1 (/ (+ b (sqrt d)) (* 2 a))]\n         [x2 (/ (- b (sqrt d)) (* 2 a))])\n    (if (and (number? x1) (number? x2))\n        (if (&lt; x1 x2) x1 x2)\n        (error \"No real solution.\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "/tmp/tmph1s71bgo.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 12\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x1 (/ (- b) (* 2 a))]\n         [y1 (+ (* a (sqr x1)) (* b x1) c)])\n    (line-through x1 y1 (sqr x1) (- y1 (sqr x1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpca610q31.rkt:7:5: line-through: unbound identifier\n  in: line-through\n  location...:\n   /tmp/tmpca610q31.rkt:7:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x-intercept (parabola_x-intercept a b c)])\n    (- (/ b (* 2 a)) x-intercept)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpfwkfh93z.rkt:5:22: parabola_x-intercept: unbound identifier\n  in: parabola_x-intercept\n  location...:\n   /tmp/tmpfwkfh93z.rkt:5:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (if (positive? a)\n        (- (/ c (+ (* a (sqr x)) (* b x) c)))\n        (+ (/ c (+ (* a (sqr x)) (* b x) c)))))\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgi3py86o.rkt:16:4\nactual:     -40/31\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgi3py86o.rkt:17:4\nactual:     -9/5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgi3py86o.rkt:18:4\nactual:     -3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x) (/ (* -1 b) (* 2 a)))\n  (define (y) (/ (* -1 c) (* 2 a)))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6mgxkdic.rkt:14:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6mgxkdic.rkt:15:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6mgxkdic.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr (- (/ b (* 2 a))))\n                (* 4 (/ c a))))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_znada0.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_znada0.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa_znada0.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- b (/ (sqrt (* b b (- 4 (* 4 a c)))) (* 2 a)))))\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49pzte07.rkt:15:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49pzte07.rkt:16:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp49pzte07.rkt:17:4\n\nNo real solution\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- b (/ (sqrt (* b b (- 4 (* 4 a c)))) (* 2 a)))))\n    (let ((y (+ (/ b (* 2 a)) (* a x x))))\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhrdkrls.rkt:14:4\nactual:     '(3-9/5i 291/10-54i)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhrdkrls.rkt:15:4\nactual:     '(8.0-5.258737584977436i 327.55555555555554-757.2582122367509i)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvhrdkrls.rkt:16:4\nactual:     '(4.0-6.6332495807108i -55.0-106.1319932913728i)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (- (/ c a) (* x x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:13:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:14:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:15:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (- b) (* 2 a))))\n    (- (/ c b) d)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp65rdc_0o.rkt:13:4\nactual:     29/30\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp65rdc_0o.rkt:14:4\nactual:     17/18\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp65rdc_0o.rkt:15:4\nactual:     5/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ (- b) (* 2 a))\n       (* x x (/ c a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjcrpaqv.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjcrpaqv.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjcrpaqv.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b 2) (* a x) (* x x)))\n  (directrix (- (/ b 2) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqw90_erc.rkt:14:4\nactual:     10.94-4.454211490264017i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqw90_erc.rkt:15:4\nactual:     55.75308641975309-8.447367914999205i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqw90_erc.rkt:16:4\nactual:     8.0-8.485281374238571i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (if (zero? a)\n      (error \"Not a parabola\")\n      (let ((d (/ b (* 2 a))))\n        (- (/ c (* 2 a)) (* d d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1oz6hxoi.rkt:15:4\nactual:     11/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1oz6hxoi.rkt:16:4\nactual:     2/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1oz6hxoi.rkt:17:4\nactual:     1/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-axis-intercept (/ (- b) (* 2 a))))\n    (define (directrix-y-value x)\n      (- (/ (+ (* a (sqr x-axis-intercept)) (* b x-axis-intercept) c)\n            a)\n         (sqr x-axis-intercept)))\n    directrix-y-value))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplsrpss2c.rkt:17:4\nactual:     #<procedure:directrix-y-value>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplsrpss2c.rkt:18:4\nactual:     #<procedure:directrix-y-value>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplsrpss2c.rkt:19:4\nactual:     #<procedure:directrix-y-value>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (* -1 (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1rpb4mr.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1rpb4mr.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu1rpb4mr.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- b (/ (* 4 a) 3))])\n    (list x (- (/ (* a x x) 4) (/ b 2) c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6vkgmpi.rkt:13:4\nactual:     '(-11/3 479/36)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6vkgmpi.rkt:14:4\nactual:     '(-4 28)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe6vkgmpi.rkt:15:4\nactual:     '(4/3 -64/9)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x1 (/ (- b) (* 2 a)))\n        (x2 (/ (+ b) (* 2 a))))\n    (if (and (number? x1) (number? x2))\n        (if (< x1 x2)\n            x1\n            x2)\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi5lks7bl.rkt:18:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi5lks7bl.rkt:19:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi5lks7bl.rkt:20:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper a b c x)\n    (- (/ b 2) (* a x)))\n  (define (parabola_directrix_helper_helper\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpaawtj7a0.rkt:27:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 28\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (sqrt (+ (* a x x) (* b x) c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4708tsjj.rkt:13:4\nactual:     1.2449899597988732\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4708tsjj.rkt:14:4\nactual:     1.4907119849998598\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4708tsjj.rkt:15:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b 2)\n       (sqrt (- (sqr b)\n                (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe32mxhth.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe32mxhth.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe32mxhth.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (sqrt (- (sqr b) (* 4 a c))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwgza6vn0.rkt:12:4\nactual:     0.0+5.5677643628300215i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwgza6vn0.rkt:13:4\nactual:     0.0+8.94427190999916i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwgza6vn0.rkt:14:4\nactual:     0.0+5.656854249492381i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (define (parabola y)\n      (+ (* a y) (* b y) c))\n    (define (deriv y)\n      (+ (* a 2) b))\n    (define (newton-transform g)\n      (lambda (x)\n        (- x (/ (g x) (deriv x)))))\n    (define (try guess)\n      (let ((next (newton-transform parabola guess)))\n        (if (good-enough? guess (next guess))\n            guess\n            (try (next guess)))))\n    (define (good-enough? guess next)\n      (< (abs (- guess next)) 0.0001))\n    (try x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx11u4lto.rkt:28:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx11u4lto.rkt:29:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx11u4lto.rkt:30:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) (df x)))))\n  (define (fixed-point f x)\n    (if (close-enough? (f x) x)\n        x\n        (fixed-point f (f x))))\n  (define (close-enough? v1 v2)\n    (< (abs (- v1 v2)) 0.00001))\n  (define (find-zero f)\n    (fixed-point (newton-transform f) 1.0))\n  (define (directrix f)\n    (define (y x)\n      (- (f x) x))\n    (define (dy x)\n      (- (df x) 1))\n    (define (newton-transform g)\n      (lambda (x)\n        (- x (/ (g x) (dy x)))))\n    (define (fixed-point f x)\n      (if (close-enough? (f x) x)\n          x\n          (fixed-point f (f x))))\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (find-zero f)\n      (fixed-point (newton-transform f) 1.0))\n    (find-zero y))\n  (directrix f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x-intercept (parabola_x-intercept a b c)])\n    (- (/ b (* 2 a)) x-intercept)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpfwkfh93z.rkt:5:22: parabola_x-intercept: unbound identifier\n  in: parabola_x-intercept\n  location...:\n   /tmp/tmpfwkfh93z.rkt:5:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:15:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:16:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:17:4\n\nNo real solution\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (x-intercept x)\n    (- (/ c x) (/ b x x)))\n  (define (y-intercept x)\n    (- (/ c x) (/ b x x)))\n  (define (x-intercept-of-tangent x)\n    (x-intercept (/ (- (* b x) c) a)))\n  (define (y-intercept-of-tangent x)\n    (y-intercept (/ (- (* b x) c) a)))\n  (define (x-intercept-of-tangent-of-tangent x)\n    (x-intercept (/ (- (* b x) c) a)))\n  (define (y-intercept-of-tangent-of-tangent x)\n    (y-intercept (/ (- (* b x) c) a)))\n  (define (x-intercept-of-tangent-of-tangent-of-tangent x)\n    (x-intercept (/ (- (* b x) c) a)))\n  (define (y-intercept-of-tangent-of-tangent-of-tangent x)\n    (y-intercept (/ (- (* b x) c) a)))\n  (define (x-intercept-of-tangent-of-tangent-of-tangent-of-tangent x)\n    (x-intercept (/ (- (* b x) c) a)))\n  (define (y-intercept-of-tangent-of-tangent-of-tangent-of-tangent x)\n    (y-intercept (/ (- (* b x) c) a)))\n  (define (x-intercept-of-tangent-of-tangent-of-tangent-of-tangent-of-tangent x)\n    (x-intercept (/ (- (* b x) c) a)))\n  (define (y-intercept-of-tangent-of-tangent-of-t\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpup697gn0.rkt:31:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 32\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (- (/ c a) (* x x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:13:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:14:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:15:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- b (/ (sqrt (* (- (* b b) (* 4 a c)) (* 4 a)))))\n        (y (+ c (* a x x))))\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmp8ljyhq4u.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help x (df x)))\n  (define (newton-help x dx)\n    (if (close-enough? x (newton-update x dx))\n        x\n        (newton-help (newton-update x dx) dx)))\n  (define (newton-update x dx)\n    (- x (/ (f x) dx)))\n  (define (close-enough? x y)\n    (< (abs (- x y)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123516,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (+ (* -1 b) (* -1 (sqrt (- (* b b) (* 4 a c)))) ) (* 2 a)))\n  (define (y)\n    (/ (+ (* -1 b) (* (sqrt (- (* b b) (* 4 a c)))) ) (* 2 a)))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu7mj2olg.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu7mj2olg.rkt:17:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu7mj2olg.rkt:18:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (* x x (/ b (* 2 a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnn138s2.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnn138s2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnn138s2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (* a x) b))\n  (directrix (/ (* -1 c) (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31lmsxto.rkt:14:4\nactual:     2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31lmsxto.rkt:15:4\nactual:     6\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp31lmsxto.rkt:16:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (* a x) (* b x x) c))\n  (define (h x)\n    (/ (- c (* a x)) b))\n  (define (i x)\n    (/ (+ c (* a x)) b))\n  (define (j x)\n    (/ (- c (* b x x)) a))\n  (define (k x)\n    (/ (+ c (* b x x)) a))\n  (define (l x)\n    (/ (- c (* b x x)) (* a x)))\n  (define (m x)\n    (/ (+ c (* b x x)) (* a x)))\n  (define (n x)\n    (/ (- c (* a x)) (* b x x)))\n  (define (o x)\n    (/ (+ c (* a x)) (* b x x)))\n  (cond ((and (not (zero? a)) (not (zero? b))) (h 0))\n        ((and (not (zero? a)) (not (zero? c))) (i 0))\n        ((and (not (zero? b)) (not (zero? c))) (j 0))\n        ((and (not (zero? a)) (not (zero? b)) (not (zero? c))) (k 0))\n        ((and (not (zero? a)) (not (zero? b)) (not (zero? c))) (l 0))\n        ((and (not (zero? a)) (not (zero? b)) (not (zero? c))) (m 0))\n        ((and (not (zero? a)) (not (zero? b)) (not (zero? c))) (n 0))\n        ((and (not (zero? a)) (not (zero? b)) (not (zero? c))) (o 0))\n        (else (error \"Invalid input\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8lor080n.rkt:40:4\nactual:     2/3\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8lor080n.rkt:41:4\nactual:     1/2\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8lor080n.rkt:42:4\nactual:     3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (/ (* b b) (* 4 a)) c)])\n      (let ([m (/ (- y c) (- x 0))])\n        (let ([b (- y (* m x))])\n          (let ([d (- (/ b m) x)])\n            (let ([e (+ (* m d) b)])\n              (list d e)))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmp_mqvecsa.rkt:11:31: read-syntax: unexpected `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x1 (- (/ b 2) (sqrt (- (* b b) (* 4 a c))))]\n         [x2 (- (/ b 2) (sqrt (- (* b b) (* 4 a c))))])\n    (if (and (number? x1) (number? x2))\n        (if (< x1 x2) x1 x2)\n        (error \"No real roots\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrelu_rf.rkt:16:4\n\n<: contract violation\n  expected: real?\n  given: 1.5-5.5677643628300215i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrelu_rf.rkt:17:4\n\n<: contract violation\n  expected: real?\n  given: 4.0-8.94427190999916i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqrelu_rf.rkt:18:4\n\n<: contract violation\n  expected: real?\n  given: 2.0-5.656854249492381i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help x 0.00001))\n  (define (newton-help x epsilon)\n    (if (&lt; (abs (- x (newton-step x))) epsilon)\n        x\n        (newton-help (newton-step x) epsilon)))\n  (define (newton-step x)\n    (- x (/ (f x) (df x))))\n  (newton 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmp7gmooyuj.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 18\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* 4 a c) (sqr b))))\n    (if (&lt; d 0)\n        (error \"No real solution\")\n        (let ((x (/ (+ (* -1 b) (sqrt d)) (* 2 a))))\n          (if (&lt; x 0)\n              (error \"No real solution\")\n              (sqrt x))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpy8agdtgu.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkah99_bt.rkt:14:4\nactual:     0.3+5.5677643628300215i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkah99_bt.rkt:15:4\nactual:     0.4444444444444444+8.94427190999916i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkah99_bt.rkt:16:4\nactual:     1.0+5.656854249492381i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x-intercept (parabola_x-intercept a b c)])\n    (- (/ b (* 2 a)) x-intercept)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "/tmp/tmpfwkfh93z.rkt:5:22: parabola_x-intercept: unbound identifier\n  in: parabola_x-intercept\n  location...:\n   /tmp/tmpfwkfh93z.rkt:5:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* x x) (* b x) c) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf1skpmyj.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (/ (* -1 b) (* 2 a))))\n    (if (zero? a)\n        (error \"Not a parabola\")\n        (cons d (parabola_y a b c d)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp_jx23iot.rkt:8:17: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmp_jx23iot.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (+ (sqr (- a x)) (sqr b))))\n  (directrix (- (/ c a) (/ (sqr b) (sqr a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp81wj65b2.rkt:14:4\nactual:     5.79668870994467\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp81wj65b2.rkt:15:4\nactual:     12.302102104998093\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp81wj65b2.rkt:16:4\nactual:     5\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ c x) (/ b x)))\n  (define (h x)\n    (- (/ c x) (/ b x)))\n  (define (i x)\n    (- (/ c x) (/ b x)))\n  (define (j x)\n    (- (/ c x) (/ b x)))\n  (define (k x)\n    (- (/ c x) (/ b x)))\n  (define (l x)\n    (- (/ c x) (/ b x)))\n  (define (m x)\n    (- (/ c x) (/ b x)))\n  (define (n x)\n    (- (/ c x) (/ b x)))\n  (define (o x)\n    (- (/ c x) (/ b x)))\n  (define (p x)\n    (- (/ c x) (/ b x)))\n  (define (q x)\n    (- (/ c x) (/ b x)))\n  (define (r x)\n    (- (/ c x) (/ b x)))\n  (define (s x)\n    (- (/ c x) (/ b x)))\n  (define (t x)\n    (- (/ c x) (/ b x)))\n  (define (u x)\n    (- (/ c x) (/ b x)))\n  (define (v x)\n    (- (/ c x) (/ b x)))\n  (define (w x)\n    (- (/ c x) (/ b x)))\n  (define (x x)\n    (- (/ c x) (/ b x)))\n  (define (y x)\n    (- (/ c x) (/ b x)))\n  (define (z x)\n    (- (/ c x) (/ b x)))\n  (define (aa x)\n    (- (/ c x) (/ b x)))\n  (define (ab x)\n    (- (/ c x) (/ b x)))\n  (define (ac x)\n    (- (/ c x) (/ b x)))\n  (define (ad x)\n    (- (/ c x) (/ b x)))\n  (define (ae x)\n    (- (/ c x) (/ b x)))\n  (define (af x)\n    (- (/ c x)\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpmeb0uwkd.rkt:58:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 59\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (- x a)) (/ b 2))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolhwbejg.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (sqrt (- (sqr b) (* 4 a c)))))\n    (if (negative? x)\n        (error \"No real solution\")\n        (let ((x1 (/ (+ b x) (* 2 a)))\n              (x2 (/ (- b x) (* 2 a))))\n          (if (positive? a)\n              (if (positive? x1)\n                  x1\n                  x2)\n              (if (positive? x1)\n                  x2\n                  x1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6atojs8v.rkt:23:4\n\nnegative?: contract violation\n  expected: real?\n  given: 0.0+5.5677643628300215i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6atojs8v.rkt:24:4\n\nnegative?: contract violation\n  expected: real?\n  given: 0.0+8.94427190999916i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6atojs8v.rkt:25:4\n\nnegative?: contract violation\n  expected: real?\n  given: 0.0+5.656854249492381i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* 2 a) (* 4 b x)))\n  (define (newton x)\n    (newton-help x (f x) (df x)))\n  (define (newton-help x fx dfx)\n    (if (close-enough? x (- fx (/ (fx) (dfx))))\n        x\n        (newton-help (- x (/ (fx) (dfx))) (f x) (df x))))\n  (define (close-enough? v1 v2)\n    (< (abs (- v1 v2)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_m_dwkzt.rkt:24:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_m_dwkzt.rkt:25:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_m_dwkzt.rkt:26:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (+ (sqr (- x a)) (sqr c))))\n  (directrix b))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxxhuseq.rkt:14:4\nactual:     2.8284271247461903\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxxhuseq.rkt:15:4\nactual:     4.123105625617661\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxxhuseq.rkt:16:4\nactual:     6.324555320336759\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ (- b) (* 2 a))\n       (* x x (/ c a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjcrpaqv.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjcrpaqv.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjcrpaqv.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (* a x)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4z4axel6.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4z4axel6.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4z4axel6.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No directrix\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg7_4s51a.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp684ag1km.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp684ag1km.rkt:17:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp684ag1km.rkt:18:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton x)\n    (newton-help f df x))\n  (define (newton-help f df guess)\n    (let ((next (newton-transform f df guess)))\n      (if (good-enough? guess next)\n          next\n          (newton-help f df next))))\n  (define (newton-transform f df guess)\n    (- guess (/ (f guess) (df guess))))\n  (define (good-enough? guess next)\n    (< (abs (- guess next)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_axj7na.rkt:27:4\nactual:     -2/3\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b 2) a))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:12:4\nactual:     -7/2\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:13:4\nactual:     -5\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqvqkruo8.rkt:14:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x-intercept (parabola_x-intercept a b c)])\n    (if (zero? a)\n        (error \"Not a parabola\")\n        (let ([slope (/ b (* 2 a))])\n          (let ([y-intercept (+ c (* slope x-intercept))])\n            (let ([y-directrix (- y-intercept (* slope slope))])\n              y-directrix)))))\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpcg4079un.rkt:5:22: parabola_x-intercept: unbound identifier\n  in: parabola_x-intercept\n  location...:\n   /tmp/tmpcg4079un.rkt:5:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (- b) (* 2 a)))\n  (define (y)\n    (/ (+ (* a (x)) (sqr (x)) b) (* -2 a)))\n  (define (slope)\n    (/ (* -1 a) b))\n  (define (y-intercept)\n    (- (y) (* (slope) (x))))\n  (define (directrix)\n    (cons (x) (y-intercept)))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7rdebhs.rkt:22:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7rdebhs.rkt:23:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7rdebhs.rkt:24:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-squared (/ (* -1 a) b)))\n    (if (positive? b)\n        (- (/ c b))\n        (+ x-squared (/ c b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp175_u4_g.rkt:15:4\nactual:     -2/3\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp175_u4_g.rkt:16:4\nactual:     -1/2\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp175_u4_g.rkt:17:4\nactual:     -3/2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (- (/ c b))])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1665510373,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:14:4\nactual:     '(-3/10 -2/3)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:15:4\nactual:     '(-4/9 -1/2)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmt26u0si.rkt:16:4\nactual:     '(-1 -3/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (let ((y (- (/ (+ (* a (sqr x)) (* b x) c) (* a))))))\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpo5uft24x.rkt:6:4: let: bad syntax (missing binding pairs or body)\n  in: (let ((y (- (/ (+ (* a (sqr x)) (* b x) c) (* a))))))\n  location...:\n   /tmp/tmpo5uft24x.rkt:6:4\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:50:20: go\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ b (* 2 a)) x))\n  (define (h x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (i x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (j x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (k x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (l x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (m x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (n x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (o x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (p x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (q x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (r x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (s x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (t x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (u x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (v x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (w x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (x x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (y x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (z x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (aa x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (ab x)\n    (-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpgc16s0s5.rkt:50:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 51\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton x)\n    (newton-help f df x))\n  (define (newton-help f df guess)\n    (let ((next (newton-transform f df guess)))\n      (if (good-enough? guess next)\n          next\n          (newton-help f df next))))\n  (define (newton-transform f df guess)\n    (- guess (/ (f guess) (df guess))))\n  (define (good-enough? guess next)\n    (< (abs (- guess next)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123517,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6_axj7na.rkt:27:4\nactual:     -2/3\nexpected:   -198\n--------------------\n",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a))))\n  (define y (- (/ c (* 2 a)) (* a x x)))\n  (define m (/ (- y 0) (- x 0)))\n  (define b (- 0 (* m 0)))\n  (define m2 (/ (- 0 1) (- m 0)))\n  (define b2 (- y (* m2 x)))\n  (define x2 (/ (+ b2 b) (- m2 m)))\n  (define y2 (- (* m2 x2) b2))\n  (define m3 (/ (- y2 0) (- x2 0)))\n  (define b3 (- 0 (* m3 0)))\n  (define x3 (/ (+ b3 b2) (- m3 m2)))\n  (define y3 (- (* m3 x3) b3)))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nYou can use the <code>solve</code> function from the <code>math/root</code> library to solve the quadratic equation.\n<code>#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmp5b7vi0ue.rkt:18:40: do: bad syntax\n  in: do\n  location...:\n   /tmp/tmp5b7vi0ue.rkt:18:40\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x1 (/ (+ (* -1 b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a))]\n         [x2 (/ (- (* -1 b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a))]\n         [y1 (* a (expt x1 2)) (+ (* b x1) c)]\n         [y2 (* a (expt x2 2)) (+ (* b x2) c)])\n    (if (< y1 y2)\n        y1\n        y2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpkfb90day.rkt:7:9: let*: bad syntax (not an identifier and expression for a binding)\n  at: (y1 (* a (expt x1 2)) (+ (* b x1) c))\n  in: (let* ((x1 (/ (+ (* -1 b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a))) (x2 (/ (- (* -1 b) (sqrt (- (* b b) (* 4 a c)))) (* 2 a))) (y1 (* a (expt x1 2)) (+ (* b x1) c)) (y2 (* a (expt x2 2)) (+ (* b x2) c))) (if (< y1 y2) y1 y2))\n  location...:\n   /tmp/tmpkfb90day.rkt:7:9\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:101:61: loop\n   [repeats 2 more times]\n   /work/arjunguha-research-group/software/racket/collects/racket/private/qq-and-or.rkt:50:20: go\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) x))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t63mn_e.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* b b) (* 4 a c))))\n    (if (negative? d)\n        (error \"The parabola does not have a directrix.\")\n        (let ((x1 (/ (+ b) (* -2 a)))\n              (x2 (/ (- b) (* -2 a))))\n          (if (positive? a)\n              (list x1 x2)\n              (list x2 x1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gb6mk3a.rkt:19:4\n\nThe parabola does not have a directrix.\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gb6mk3a.rkt:20:4\n\nThe parabola does not have a directrix.\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7gb6mk3a.rkt:21:4\n\nThe parabola does not have a directrix.\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (sqrt (- (sqr (- x a)) (* b b))))\n  (directrix c))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnczfm2e0.rkt:14:4\nactual:     0\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnczfm2e0.rkt:15:4\nactual:     0.0+6.244997998398398i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnczfm2e0.rkt:16:4\nactual:     0\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let* ([x-axis-intercept (- (/ b (* 2 a))))\n         [y-axis-intercept (- c (* a (sqr x-axis-intercept)))])\n    (list x-axis-intercept y-axis-intercept)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpcmufy6f3.rkt:5:44: read-syntax: missing `]` to close preceding `[`, found instead `)`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (* x x (/ b (* 2 a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnn138s2.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnn138s2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcnn138s2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (sqrt (/ (- b) (* 2 a))))\n  (define (y)\n    (- (/ c) (* a (x) (x))))\n  (list (x) (y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkz5x2dfy.rkt:16:4\nactual:     '(0.0+0.5477225575051661i 1.9999999999999996-0.0i)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkz5x2dfy.rkt:17:4\nactual:     '(0+2/3i 17/4)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkz5x2dfy.rkt:18:4\nactual:     '(0+1i 13/6)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (- (* 4 a c) (sqr b))))\n    (if (negative? d)\n        (error \"No directrix exists.\")\n        (let ((y (/ (+ (* -1 b) (sqrt d)) (* 2 a))))\n          (if (negative? a)\n              (- y)\n              y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0mxhli34.rkt:18:4\nactual:     0.2567764362830022\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0mxhli34.rkt:19:4\nactual:     0.05245955055550885\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0mxhli34.rkt:20:4\nactual:     0.41421356237309515\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  (directrix 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1hugorcz.rkt:15:4\nactual:     0.3-5.5677643628300215i\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1hugorcz.rkt:16:4\nactual:     0.4444444444444444-8.94427190999916i\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1hugorcz.rkt:17:4\nactual:     1.0-5.656854249492381i\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (g x)\n    (- (/ b (* 2 a)) x))\n  (define (h x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (i x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (j x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (k x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (l x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (m x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (n x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (o x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (p x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (q x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (r x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (s x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (t x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (u x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (v x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (w x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (x x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (y x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (z x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (aa x)\n    (- (/ c a) (* b x) (* x x)))\n  (define (ab x)\n    (-\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "/tmp/tmpgc16s0s5.rkt:50:4: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 51\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (positive? a)\n        (list x (parabola_y a b c x))\n        (list (parabola_y a b c x) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmph37xpnky.rkt:7:17: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmph37xpnky.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x) (/ (- b) (* 2 a)))\n  (define (y) (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (cons x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj9h4drw9.rkt:14:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj9h4drw9.rkt:15:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj9h4drw9.rkt:16:4\nactual:     '(#<procedure:x> . #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x) (/ (- b) (* 2 a)))\n  (define (y) (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lie6ui8.rkt:14:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lie6ui8.rkt:15:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_lie6ui8.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (* a (sqr x)) (* b x) c)])\n      (let ([d (- y (/ b (* 2 a)))])\n        d))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtsp1nas.rkt:15:4\nactual:     5/4\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtsp1nas.rkt:16:4\nactual:     16/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqtsp1nas.rkt:17:4\nactual:     3\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (nan? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh_x5soo.rkt:15:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.3-0.5567764362830021i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh_x5soo.rkt:16:4\n\nnan?: contract violation\n  expected: real?\n  given: 0.4444444444444444-0.4969039949999533i\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh_x5soo.rkt:17:4\n\nnan?: contract violation\n  expected: real?\n  given: 1.0-1.4142135623730951i\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (/ (- b) (* 2 a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (* a x) b))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphlu1ju03.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphlu1ju03.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphlu1ju03.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (/ (- b) (* 2 a)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjx70f50w.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* -2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2lzd7wc.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2lzd7wc.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl2lzd7wc.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (let ([y (- (/ b (* 2 a)) (* a (sqr x)) (+ c))])\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wboczq5.rkt:14:4\nactual:     '(-3/10 -43/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wboczq5.rkt:15:4\nactual:     '(-4/9 -16/3)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wboczq5.rkt:16:4\nactual:     '(-1 -7)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (x0 x)\n    (- x (/ (f x) (df x))))\n  (define (find-root a b)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (x0 guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try b))\n  (define (find-root-2 a b)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (x0 guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try b))\n  (define (find-root-3 a b)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (x0 guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try b))\n  (define (find-root-4 a b)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (x0 guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try b))\n  (define (find-root-5 a b)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (x0 guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try b))\n  (define (find-root\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmp5e2crsff.rkt:56:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 57\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (- (/ b (* 2 a))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:12:4\nactual:     -3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:13:4\nactual:     -4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeect3fy1.rkt:14:4\nactual:     -1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)))]\n        [y (+ (* a (sqr x)) (* b x) c)])\n    (list x y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmp32hfi4bg.rkt:6:24: x: unbound identifier\n  in: x\n  location...:\n   /tmp/tmp32hfi4bg.rkt:6:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (* -2 a)))\n    (if (positive? d)\n        (let ((x (/ (+ (* -1 b) (sqrt (- (* b b) (* 4 a c)))) d)))\n          (list x (parabola_y a b c x)))\n        (list (parabola_x a b c (/ b d)) 0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmp6zn9_b6h.rkt:8:19: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmp6zn9_b6h.rkt:8:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((d (* -2 a)))\n    (if (zero? d)\n        (error \"The directrix is a vertical line.\")\n        (let ((e (* -1 b))\n              (f (* -1 c)))\n          (let ((x (/ (+ (* -1 e) (sqrt (- (* e e) (* 4 d f)))) (* 2 d)))\n                (y (/ (+ (* -1 e) (sqrt (- (* e e) (* 4 d f)))) (* 2 d))))\n            (list x y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplc8iqhww.rkt:19:4\nactual:     '(-0.15-0.42130748865881795i -0.15-0.42130748865881795i)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplc8iqhww.rkt:20:4\nactual:\n  '(-0.2222222222222222-0.41573970964154905i\n    -0.2222222222222222-0.41573970964154905i)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplc8iqhww.rkt:21:4\nactual:     '(-0.5-1.118033988749895i -0.5-1.118033988749895i)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (/ (+ (* a (sqr x)) (* b x) c)\n          (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk__tdcr5.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqjox7qx2.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (- (/ b (* 2 a)) (/ (sqrt (- (* b b) (* 4 a c))) (* 2 a)))])\n    (if (and (number? x) (not (complex? x)))\n        x\n        (error \"No real solution\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123502,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:15:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:16:4\n\nNo real solution\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53tlnrb9.rkt:17:4\n\nNo real solution\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (- (/ c a) (* x x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:13:4\nactual:     31/100\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:14:4\nactual:     20/81\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6veai_f.rkt:15:4\nactual:     2\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbwci46my.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x-axis-intercept (/ (- b) (* 2 a))))\n    (let ((y-axis-intercept (+ c (* a (sqr x-axis-intercept)) (* b x-axis-intercept))))\n      (let ((slope (/ a (- b))))\n        (let ((y-intercept (- y-axis-intercept (* slope x-axis-intercept))))\n          (let ((intercept-x-coord (/ (- y-intercept) slope)))\n            (let ((intercept-y-coord (* slope intercept-x-coord)))\n              (list intercept-x-coord intercept-y-coord))))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwnpi3tu.rkt:18:4\nactual:     '(63/100 -21/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwnpi3tu.rkt:19:4\nactual:     '(124/81 -31/18)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwnpi3tu.rkt:20:4\nactual:     '(7 -7/2)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((discriminant (- (* b b) (* 4 a c))))\n    (if (&lt; discriminant 0)\n        (error \"No real solution\")\n        (let ((x1 (/ (+ (- b) (sqrt discriminant)) (* 2 a)))\n              (x2 (/ (- (- b) (sqrt discriminant)) (* 2 a))))\n          (if (&lt; x1 x2)\n              (- (/ b 2))\n              (- (/ b 2)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmpas3x05xg.rkt:5:2: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x) (+ (* a x) (* b x x) c))\n  (define (df x) (+ (* a 1) (* b 2 x)))\n  (define (newton-transform g)\n    (lambda (x)\n      (- x (/ (g x) (df x)))))\n  (define (fixed-point f x)\n    (define (close-enough? v1 v2)\n      (< (abs (- v1 v2)) 0.00001))\n    (define (try guess)\n      (let ((next (f guess)))\n        (if (close-enough? guess next)\n            next\n            (try next))))\n    (try x))\n  (define (find-zero f)\n    (fixed-point (newton-transform f) 1.0))\n  (define (find-root a b c)\n    (/ (- b) (* 2 a)))\n  (define (find-y a b c x)\n    (- (/ b (* 2 a)) (* x x)))\n  (define (find-x a b c y)\n    (sqrt (- (/ b (* 2 a)) y)))\n  (define (find-directrix a b c)\n    (define (f x) (+ (* a x) (* b x x) c))\n    (define (df x) (+ (* a 1) (* b 2 x)))\n    (define (newton-transform g)\n      (lambda (x)\n        (- x (/ (g x) (df x)))))\n    (define (fixed-point f x)\n      (define (close-enough? v1 v2)\n        (< (abs (- v1 v2)) 0.00001))\n      (define (try guess)\n        (let ((next (f guess)))\n          (if (close-enough? guess next)\n              next\n              (try next))))\n      (try x))\n    (define (find-zero f)\n      (fixed-point (newton-transform f) 1.0))\n    (define (find-root a b c)\n      (/ (- b) (* 2 a)))\n    (define (find-y a b c x)\n      (- (/ b (* 2 a)) (* x x)))\n    (define (find-x a b\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmprpifov4l.rkt:48:12: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 49\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (newton f df x)\n    (define (iter x)\n      (let ((x1 (- x (/ (f x) (df x)))))\n        (if (close-enough? x x1)\n            x1\n            (iter x1))))\n    (iter x))\n  (newton f df 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmpu0h0z902.rkt:12:13: close-enough?: unbound identifier\n  in: close-enough?\n  location...:\n   /tmp/tmpu0h0z902.rkt:12:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x)\n    (/ (* -1 a) (* 2 b)))\n  (define (y)\n    (- (/ c b) (* a (/ a 2))))\n  (list x y))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwdw362t.rkt:16:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwdw362t.rkt:17:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcwdw362t.rkt:18:4\nactual:     '(#<procedure:x> #<procedure:y>)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ((x (- (/ b (* 2 a)))))\n    (if (positive? a)\n        (list x (parabola_y a b c x))\n        (list x (parabola_y a b c x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmplsaezrpx.rkt:7:17: parabola_y: unbound identifier\n  in: parabola_y\n  location...:\n   /tmp/tmplsaezrpx.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([d (/ (* -1 b) (* 2 a))])\n    (if (positive? a)\n        (- d)\n        (+ d))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyn6_8do.rkt:15:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyn6_8do.rkt:16:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjyn6_8do.rkt:17:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (sqrt (- (sqr (- x (/ b (* 2 a))))\n                (/ c a)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123500,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrpr7u8g.rkt:18:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (f x)\n    (+ (* a x) (* b x x) c))\n  (define (df x)\n    (+ (* b x) b))\n  (define (ddf x)\n    b)\n  (define (newton x)\n    (newton-help x (f x) (df x) (ddf x)))\n  (define (newton-help x f df ddf)\n    (if (close-enough? f df ddf)\n        x\n        (newton-help (improve x f df)\n                     (f (improve x f df))\n                     (df (improve x f df))\n                     (ddf (improve x f df)))))\n  (define (improve x f df)\n    (- x (/ f df)))\n  (define (close-enough? f df ddf)\n    (< (abs (/ f ddf)) 0.001))\n  (newton 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhde4d31.rkt:31:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhde4d31.rkt:32:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 4\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnhde4d31.rkt:33:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 6\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (/ (- c (* a x)) b))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk653dq_.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk653dq_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnk653dq_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a)) (/ (sqr x) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmj956qv.rkt:14:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmj956qv.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmj956qv.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 (* a c))))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4eazlqv5.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4eazlqv5.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4eazlqv5.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (+ (/ b (* 2 a))\n       (/ (- (sqrt (- (* b b) (* 4 a c))) b) (* 2 a))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7qkf73fb.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7qkf73fb.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7qkf73fb.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (x) (/ (- b) (* 2 a)))\n  (define (y) (- (/ c a) (* a (x) (x))))\n  (list (x) (y)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkr07mgs_.rkt:14:4\nactual:     '(-3/10 -1/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkr07mgs_.rkt:15:4\nactual:     '(-4/9 -4/3)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkr07mgs_.rkt:16:4\nactual:     '(-1 1)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (directrix x)\n    (- (/ b (* 2 a))\n       (sqrt (- (sqr b) (* 4 a c)))))\n  directrix)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123501,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:15:4\nactual:     #<procedure:directrix>\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:16:4\nactual:     #<procedure:directrix>\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2uezcp0_.rkt:17:4\nactual:     #<procedure:directrix>\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (* -1 b) (* 2 a))])\n    (let ([y (+ (* a (sqr x)) (* b x) c)])\n      (let ([d (/ (* -1 y) a)])\n        (+ d (sqrt (sqr x)) (sqrt (sqr d)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123504,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps43adssq.rkt:15:4\nactual:     3/10\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps43adssq.rkt:16:4\nactual:     4/9\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps43adssq.rkt:17:4\nactual:     1\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (define (parabola_directrix_helper x)\n    (+ (* a x) (* b x x) c))\n  (define (parabola_directrix_helper_derivative x)\n    (+ (* 2 b x) a))\n  (define (parabola_directrix_helper_derivative_derivative x)\n    2 b)\n  (define (newton_raphson_helper x)\n    (- x (/ (parabola_directrix_helper x)\n            (parabola_directrix_helper_derivative x))))\n  (define (newton_raphson_helper_derivative x)\n    (- 1 (/ (parabola_directrix_helper_derivative x)\n            (parabola_directrix_helper_derivative x))))\n  (define (newton_raphson_helper_derivative_derivative x)\n    (/ (parabola_directrix_helper_derivative_derivative x)\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_helper_derivative_derivative_derivative x)\n    (/ (parabola_directrix_helper_derivative_derivative_derivative x)\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_helper_derivative_derivative_derivative_derivative x)\n    (/ (parabola_directrix_helper_derivative_derivative_derivative_derivative x)\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_helper_derivative_derivative_derivative_derivative_derivative x)\n    (/ (parabola_directrix_helper_derivative_derivative_derivative_derivative_derivative x)\n       (parabola_directrix_helper_derivative x)))\n  (define (newton_raphson_\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "/tmp/tmpbh1up9f5.rkt:29:10: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 30\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the directrix of a parabola.\n(define (parabola_directrix a b c)\n  (let ([x (/ (- b) (* 2 a))])\n    (let ([y (- (/ b (* 2 a)) (* a (sqr x)) (+ c))])\n      (list x y))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate parabola_directrix))\n    (check-equal? (candidate 5 3 2) -198)\n    (check-equal? (candidate 9 8 4) -2336)\n    (check-equal? (candidate 2 4 6) -130)\n))\n\n(test-humaneval)",
      "timestamp": 1666123503,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wboczq5.rkt:14:4\nactual:     '(-3/10 -43/20)\nexpected:   -198\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wboczq5.rkt:15:4\nactual:     '(-4/9 -16/3)\nexpected:   -2336\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6wboczq5.rkt:16:4\nactual:     '(-1 -7)\nexpected:   -130\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}