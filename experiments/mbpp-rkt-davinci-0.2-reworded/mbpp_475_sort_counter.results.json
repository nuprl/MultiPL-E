{
  "name": "mbpp_475_sort_counter",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpt83ueomf.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpt83ueomf.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpt83ueomf.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpt83ueomf.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let ([dict2 (hash)])\n    (for ([(k v) (in-hash dict1)])\n      (hash-set! dict2 v k))\n    (hash-sort dict2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmp9jmk4upg.rkt:8:5: hash-sort: unbound identifier\n  in: hash-sort\n  location...:\n   /tmp/tmp9jmk4upg.rkt:8:5\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (second x) (second y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmphlta7enn.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmphlta7enn.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let ([dict2 (hash)])\n    (for ([(k v) (in-hash dict1)])\n      (hash-set! dict2 v (cons k (hash-ref dict2 v '()))))\n    (for/list ([(k v) (in-hash dict2)])\n      (list k v))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:16:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   87\n   '(\"Chemistry\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:17:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   250\n   '(\"Chemistry\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:18:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   1250\n   '(\"Chemistry\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr b) (cdr a)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmpc9bbtk4f.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpc9bbtk4f.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let ([dict2 (hash)])\n    (for ([(k v) (in-hash dict1)])\n      (hash-set! dict2 v (cons k (hash-ref dict2 v '()))))\n    (for/list ([(k v) (in-hash dict2)])\n      (list k v))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:16:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   87\n   '(\"Chemistry\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:17:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   250\n   '(\"Chemistry\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:18:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   1250\n   '(\"Chemistry\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        <\n        #:key cdr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmpuk4i1bwp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpuk4i1bwp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (&lt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122399,
      "stdout": "",
      "stderr": "/tmp/tmpp24595bf.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let ([sorted-keys (sort (hash-keys dict1)\n                           (lambda (k1 k2)\n                             (< (hash-ref dict1 k1)\n                                (hash-ref dict1 k2))))])\n    (for ([k sorted-keys])\n      (printf \"~a: ~a\\n\" k (hash-ref dict1 k)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "Math: 81\nPhysics: 83\nChemistry: 87\nChemistry: 250\nPhysics: 300\nMath: 400\nMath: 900\nPhysics: 1000\nChemistry: 1250\n",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqu0f5zz_.rkt:17:4\nactual:     #<void>\nexpected:   '((\"Chemistry\" 87) (\"Physics\" 83) (\"Math\" 81))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqu0f5zz_.rkt:18:4\nactual:     #<void>\nexpected:   '((\"Math\" 400) (\"Physics\" 300) (\"Chemistry\" 250))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqu0f5zz_.rkt:19:4\nactual:     #<void>\nexpected:   '((\"Chemistry\" 1250) (\"Physics\" 1000) (\"Math\" 900))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpt83ueomf.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpt83ueomf.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let ([dict2 (hash)])\n    (for ([(k v) (in-hash dict1)])\n      (hash-set! dict2 v (cons k (hash-ref dict2 v '()))))\n    (for/list ([(k v) (in-hash dict2)])\n      (list k v))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:16:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   87\n   '(\"Chemistry\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:17:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   250\n   '(\"Chemistry\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2v6fbu0.rkt:18:4\n\nhash-set!: contract violation\n  expected: (and/c hash? (not/c immutable?))\n  given: '#hash()\n  argument position: 1st\n  other arguments...:\n   1250\n   '(\"Chemistry\")\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y) (&gt; (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122398,
      "stdout": "",
      "stderr": "/tmp/tmphfnsbabl.rkt:6:22: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 8\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1) (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmpixw3pth0.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpixw3pth0.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (let ([dict2 (sort (hash-map->list dict1)\n                     (lambda (x y)\n                       (< (cdr x) (cdr y))))])\n    (list->hash dict2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmp2rqzdb9z.rkt:5:22: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmp2rqzdb9z.rkt:5:22\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (string<? (symbol->string (car x))\n                    (symbol->string (car y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122400,
      "stdout": "",
      "stderr": "/tmp/tmp56p7u4lz.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmp56p7u4lz.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (a b)\n          (< (cdr a) (cdr b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpwwyzxrp3.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpwwyzxrp3.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to sort a hash by value.\n(define (sort_counter dict1)\n  (sort (hash-map->list dict1)\n        (lambda (x y)\n          (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_counter))\n    (check-equal? (candidate #hash((\"Math\" .  81) (\"Physics\" .  83) (\"Chemistry\" .  87))) (list (list \"Chemistry\" 87) (list \"Physics\" 83) (list \"Math\" 81)))\n    (check-equal? (candidate #hash((\"Math\" .  400) (\"Physics\" .  300) (\"Chemistry\" .  250))) (list (list \"Math\" 400) (list \"Physics\" 300) (list \"Chemistry\" 250)))\n    (check-equal? (candidate #hash((\"Math\" .  900) (\"Physics\" .  1000) (\"Chemistry\" .  1250))) (list (list \"Chemistry\" 1250) (list \"Physics\" 1000) (list \"Math\" 900)))\n))\n\n(test-humaneval)",
      "timestamp": 1665510006,
      "stdout": "",
      "stderr": "/tmp/tmpg_7b3bmp.rkt:5:9: hash-map->list: unbound identifier\n  in: hash-map->list\n  location...:\n   /tmp/tmpg_7b3bmp.rkt:5:9\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}