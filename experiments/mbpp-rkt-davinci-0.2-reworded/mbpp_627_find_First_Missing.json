{
  "name": "mbpp_627_find_First_Missing",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the smallest missing number from a sorted list of natural numbers.\n(define (find_First_Missing array)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_First_Missing))\n    (check-equal? (candidate (list 0 1 2 3)) 4)\n    (check-equal? (candidate (list 0 1 2 6 9)) 3)\n    (check-equal? (candidate (list 2 3 5 8 9)) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? array)\n      0\n      (if (= (car array) (cadr array))\n          (find_First_Missing (cdr array))\n          (car array))))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (define (find_First_Missing_Helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1)\n       (if (= (+ start 1) (vector-ref array start))\n           (+ end 1)\n           (+ start 1))]\n      [else\n       (let* ([mid (/ (+ start end) 2)]\n              [mid_value (vector-ref array mid)])\n         (if (= mid_value (+ mid 1))\n             (find_First_Missing_Helper array (+ mid 1) end)\n             (find_First_Missing_Helper array start mid)))]))\n  (find_First_Missing_Helper array 0 (- (vector-length array) 1)))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= index (first array)) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 1))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 (array-ref array (sub1 i)))\n        (if (= (array-ref array i) (add1 i))\n            (loop (add1 i) j)\n            (array-ref array i)))))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        (add1 (list-ref array i))\n        (if (< (list-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (if (null? array)\n      0\n      (if (= (car array) 0)\n          (find_First_Missing (cdr array))\n          (if (= (car array) (add1 (car (cdr array))))\n              (find_First_Missing (cdr array))\n              (car array)))))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (last array))\n        (if (and (= (array-ref array i) (add1 i))\n                 (= (array-ref array i) (sub1 i)))\n            (loop (add1 i))\n            (array-ref array i)))))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond [(empty? array) 0]\n        [else (cond [(= (first array) 0) (find_First_Missing (rest array))]\n                    [else (cond [(= (first array) (add1 (first (rest array)))) (find_First_Missing (rest array))]\n                                [else (first array)])])]))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (add1 (vector-length array))) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 (vector-ref array (sub1 i)))) (find_First_Missing_Helper array (add1 i))]\n      [else (vector-ref array (sub1 i))]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (or (null? array) (= i (car array)))\n        (if (null? array)\n            i\n            (find_First_Missing_Helper (cdr array) (+ i 1)))\n        i))\n  (find_First_Missing_Helper array 1))\n",
    "  (define (find_First_Missing_Helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1) (if (= (+ start 1) (vector-ref array start)) (+ end 1) (+ start 1))]\n      [else\n       (let* ([mid (/ (+ start end) 2)]\n              [mid_val (vector-ref array mid)])\n         (if (= mid_val (+ mid 1))\n             (find_First_Missing_Helper array (+ mid 1) end)\n             (find_First_Missing_Helper array start mid)))]))\n  (find_First_Missing_Helper array 0 (vector-length array)))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond [(= i j) (add1 (vector-ref array i))]\n          [(= (vector-ref array i) (add1 (vector-ref array (add1 i)))) (loop (add1 i) j)]\n          [else (vector-ref array i)])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [else\n     (let* ([first (first array)]\n            [rest (rest array)]\n            [next (find_First_Missing rest)])\n       (cond\n         [(= first next) (add1 next)]\n         [else (if (= first 0) 1 first)]))]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i))]\n      [else i])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= index (first array)) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 1))\n",
    "  (define (find_First_Missing_helper array index)\n    (if (= index (length array))\n        (+ index 1)\n        (if (= (array-ref array index) (+ index 1))\n            (find_First_Missing_helper array (+ index 1))\n            (+ index 1))))\n  (find_First_Missing_helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (= (vector-ref array i) (add1 (vector-ref array (sub1 i))))\n            (find_First_Missing_Helper array (add1 i))\n            (vector-ref array (sub1 i)))))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) (length array)) (find_First_Missing (rest array))]\n        [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (let loop ([array array] [i 0])\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (loop (rest array) (+ i 1))]\n      [else i])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond ((= i (length array)) (+ i 1))\n          ((not (= (list-ref array i) i)) i)\n          (else (find_First_Missing_Helper array (+ i 1)))))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array start end)\n    (cond [(= start end) (+ start 1)]\n          [(= (array-ref array start) (+ start 1)) (find_First_Missing_helper array (+ start 1) end)]\n          [else (+ start 1)]))\n  (find_First_Missing_helper array 0 (- (array-length array) 1)))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array current-index current-value)\n    (cond\n      [(= current-index (vector-length array))\n       (+ current-value 1)]\n      [(= current-value (vector-ref array current-index))\n       (find_First_Missing_helper array (+ current-index 1) (+ current-value 1))]\n      [else\n       current-value]))\n  (find_First_Missing_helper array 0 1))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1)\n       (cond\n         [(= (array-ref array start) (+ start 1)) (+ end 1)]\n         [else (+ start 1)])]\n      [else\n       (let* ([mid (/ (+ start end) 2)]\n              [mid-value (array-ref array mid)])\n         (cond\n           [(= mid-value (+ mid 1)) (find_First_Missing_Helper array (+ mid 1) end)]\n           [else (find_First_Missing_Helper array start mid)]))]))\n  (find_First_Missing_Helper array 0 (- (array-length array) 1)))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (array-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (array array))\n    (cond ((= i (length array)) (add1 (vector-ref array (- (length array) 1))))\n          ((= (vector-ref array i) (+ i 1)) (loop (add1 i) array))\n          (else (+ i 1)))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (car array)) (find_First_Missing_Helper (cdr array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (cond\n    [(null? array) 1]\n    [(= (car array) 1) (find_First_Missing (cdr array))]\n    [else 1]))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (car array)) (find_First_Missing_helper (cdr array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n        [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (or (= (vector-ref array i) (+ i 1))\n            (= i (- (vector-length array) 1)))\n        (+ i 1)\n        (find_First_Missing_Helper array (+ i 1))))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n            (find_First_Missing_Helper array (add1 i))\n            (vector-ref array i))))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) i]\n      [(= j (length array)) (loop (+ i 1) (+ j 1))]\n      [(= (array-ref array i) (array-ref array j)) (loop (+ i 1) (+ j 1))]\n      [else (array-ref array i)])))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 (length array))))]\n      [(= j (length array)) (loop (add1 i) (add1 j))]\n      [(= (vector-ref array i) (vector-ref array j)) (loop (add1 i) (add1 j))]\n      [(= (add1 (vector-ref array i)) (vector-ref array j)) (vector-ref array i)]\n      [else (loop (add1 i) (add1 j))])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= index (first array)) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [(= (first array) (add1 (first (rest array)))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j (length array)))\n    (cond\n      [(= i j) (+ i 1)]\n      [(= i (vector-ref array i)) (loop (+ i 1) j)]\n      [else i])))\n",
    "  (let loop ([i 0] [array array])\n    (if (not (null? array))\n        (if (= i (car array))\n            (loop (+ i 1) (cdr array))\n            i)\n        i)))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) 0) (find_First_Missing (rest array))]\n        [(= (first array) 1) 0]\n        [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (= i (length array))\n        (add1 (array-ref array (sub1 i)))\n        (if (= i (array-ref array i))\n            (find_First_Missing_helper array (add1 i))\n            i)))\n  (find_First_Missing_helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (if (and (not (empty? array)) (= index (car array)))\n        (find_First_Missing_Helper (cdr array) (+ index 1))\n        index))\n  (find_First_Missing_Helper array 1))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (vector-ref array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ((i 0) (n (length array)))\n    (if (= i n)\n        (add1 (list-ref array (sub1 n)))\n        (if (= (list-ref array i) (add1 (list-ref array (sub1 i))))\n            (loop (add1 i) n)\n            (list-ref array i)))))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (vector-ref array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [else (if (= (first array) (second array)) (find_First_Missing (rest array)) (first array))]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 1))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond ((= i (length array)) (+ i 1))\n          ((= i (list-ref array i)) (find_First_Missing_helper array (+ i 1)))\n          (else i)))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (and (not (empty? array))\n             (= (first array) i))\n        (find_First_Missing_Helper (rest array) (+ i 1))\n        i))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [(= (first array) (+ (second array) 1)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 (list-ref array (- i 1)))\n        (if (and (= (list-ref array i) (add1 (list-ref array (- i 1))))\n                 (= (list-ref array j) (add1 (list-ref array (- j 1)))))\n            (loop (+ i 1) (- j 1))\n            (if (= (list-ref array i) (add1 (list-ref array (- i 1))))\n                (loop (+ i 1) j)\n                (loop i (- j 1)))))))\n",
    "  (define (find_First_Missing_Helper array current_index current_value)\n    (cond\n      [(= current_index (length array)) current_value]\n      [(= (array current_index) current_value) (find_First_Missing_Helper array (+ current_index 1) (+ current_value 1))]\n      [else current_value]))\n  (find_First_Missing_Helper array 0 1))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [else (if (= (first array) (second array))\n             (find_First_Missing (rest array))\n             (first array))]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) (second array)) (find_First_Missing (rest array))]\n        [else (first array)]))\n",
    "  (let loop ((i 0) (len (vector-length array)) (min 1))\n    (cond\n      [(= i len) min]\n      [(= (vector-ref array i) min) (loop (+ i 1) len (+ min 1))]\n      [else min])))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (and (= (array-ref array mid) mid)\n                   (not (zero? mid)))\n              (loop i mid)\n              (loop mid j))))))\n",
    "  (define (find_First_Missing_Helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1) (if (= (+ start 1) (vector-ref array end)) (+ end 1) start)]\n      [else (let ([mid (/ (+ start end) 2)])\n              (if (= (+ mid 1) (vector-ref array mid))\n                  (find_First_Missing_Helper array (+ mid 1) end)\n                  (find_First_Missing_Helper array start mid)))]))\n  (find_First_Missing_Helper array 0 (- (vector-length array) 1)))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (cond\n    [(null? array) 0]\n    [(= (car array) 1) 1]\n    [(= (car array) (+ (cadr array) 1)) (find_First_Missing (cdr array))]\n    [else (car array)]))\n",
    "  (let loop ([i 0] [j 1])\n    (cond [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n          [(= j (length array)) (loop (add1 i) (add1 j))]\n          [(= (vector-ref array i) (vector-ref array j)) (loop (add1 i) (add1 j))]\n          [else (vector-ref array i)])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [else (if (= (first array) (second array))\n             (find_First_Missing (rest array))\n             (first array))]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 1))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(>= i (length array)) j]\n      [(= (array-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (and (not (empty? array)) (= (first array) i))\n        (find_First_Missing_Helper (rest array) (+ i 1))\n        i))\n  (find_First_Missing_Helper array 1))\n",
    "  (let loop ((i 0) (j (length array)))\n    (if (= i j)\n        (add1 i)\n        (if (= (array-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (cond\n      [(= i j) (add1 (vector-ref array i))]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i) j)]\n      [else (add1 i)])))\n",
    "  (if (null? array)\n      0\n      (if (= (car array) 0)\n          (find_First_Missing (cdr array))\n          (if (= (car array) (add1 (car (cdr array))))\n              (find_First_Missing (cdr array))\n              (car array)))))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length array))\n           (add1 (array-ref array (sub1 i)))]\n          [(= (array-ref array i) (add1 (array-ref array (sub1 i))))\n           (loop (add1 i))]\n          [else (array-ref array i)])))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 i)))]\n      [(= (vector-ref array i) (add1 i)) (loop (add1 i))]\n      [else i])))\n",
    "  (let loop ((array array)\n             (i 0))\n    (cond ((null? array) i)\n          ((= i (car array)) (loop (cdr array) (+ i 1)))\n          (else i))))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (and (not (empty? array)) (= i (first array)))\n        (find_First_Missing_helper (rest array) (+ i 1))\n        i))\n  (find_First_Missing_helper array 1))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (array array))\n    (cond\n      [(= i (length array))\n       (add1 (vector-ref array (- (length array) 1)))]\n      [(= i (vector-ref array i))\n       (loop (add1 i) array)]\n      [else i])))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond [(empty? array) index]\n          [(= index (first array)) (find_First_Missing_Helper (rest array) (+ index 1))]\n          [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j (length array)))\n    (cond ((= i j) (+ i 1))\n          ((= (array-ref array i) i) (loop (+ i 1) j))\n          (else i))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        i\n        (if (= (array-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (- i 1))) ]\n      [(= (vector-ref array i) j) (loop (+ i 1) (+ j 1))]\n      [else j])))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) 0) (find_First_Missing (rest array))]\n        [(= (first array) 1) 1]\n        [else (find_First_Missing (rest array))]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        (add1 j)\n        (if (= (array-ref array i) j)\n            (loop (add1 i) (add1 j))\n            j))))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= index (first array)) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 0]))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [else (find_First_Missing (rest array))]))\n",
    "  (let* ([len (length array)]\n         [start 0]\n         [end len]\n         [mid (quotient (+ start end) 2)])\n    (cond [(= start end) (+ start 1)]\n          [(= (list-ref array mid) mid) (find_First_Missing (sublist array (+ mid 1) end))]\n          [else (find_First_Missing (sublist array start mid))])))\n",
    "  (cond [(null? array) 0]\n        [(= (car array) 0) 1]\n        [(= (car array) 1) (find_First_Missing (cdr array))]\n        [else 0]))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond [(= i j) (add1 (array-ref array i))]\n          [(= (add1 (array-ref array i)) (array-ref array (add1 i))) (loop (add1 i) j)]\n          [else (array-ref array (add1 i))])))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) (length array)) (find_First_Missing (rest array))]\n        [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) 0) 1]\n        [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n        [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ([array array] [i 0])\n    (if (null? array)\n        i\n        (if (= i (car array))\n            (loop (cdr array) (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) (find_First_Missing (rest array))]\n    [(= (first array) 1) 0]\n    [else (find_First_Missing (rest array))]))\n",
    "  (if (null? array)\n      0\n      (if (= (car array) 0)\n          (find_First_Missing (cdr array))\n          (if (= (car array) (add1 (car (cdr array))))\n              (find_First_Missing (cdr array))\n              (car array)))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 1))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (cond\n    [(empty? array) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else 1]))\n",
    "  (let loop ([i 0] [j 1])\n    (cond\n      [(= i (length array)) (add1 (vector-ref array (sub1 (length array))))]\n      [(= (vector-ref array i) j) (loop (add1 i) (add1 j))]\n      [else j])))\n</code>\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_Helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (list-ref array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ((i 0) (j 1))\n    (if (= i (length array))\n        j\n        (if (= (array-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 1))\n",
    "  (define (find_First_Missing_helper array i)\n    (if (= i (length array))\n        (add1 (vector-ref array (- i 1)))\n        (if (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n            (find_First_Missing_helper array (add1 i))\n            (vector-ref array (- i 1)))))\n  (find_First_Missing_helper array 1))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 (vector-ref array (- j 1)))\n        (if (and (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n                 (= (vector-ref array (- j 1)) (add1 (vector-ref array (- j 2)))))\n            (loop (+ i 1) (- j 1))\n            (if (= (vector-ref array i) (add1 (vector-ref array (- i 1))))\n                (loop (+ i 1) j)\n                (vector-ref array i))))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) 1) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (cond [(= i j) (add1 (list-ref array i))]\n          [(= (list-ref array i) i) (loop (add1 i) j)]\n          [else i])))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        i\n        (if (= (array-ref array i) i)\n            (loop (add1 i) j)\n            i))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array index)\n    (cond\n      [(= index (length array)) (+ index 1)]\n      [(= index (array index)) (find_First_Missing_Helper array (+ index 1))]\n      [else index]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j (length array)])\n    (if (= i j)\n        (add1 (vector-ref array i))\n        (if (and (= (vector-ref array i) i)\n                 (= (vector-ref array (add1 i)) (add1 i)))\n            (loop (add1 i) j)\n            (vector-ref array i)))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 1))\n",
    "  (let loop ([i 0] [n (length array)])\n    (cond [(= i n) (+ i 1)]\n          [(= (array-ref array i) i) (loop (+ i 1) n)]\n          [else i])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (cond [(= i j) i]\n          [(= (vector-ref array i) i) (loop (add1 i) j)]\n          [else i])))\n",
    "  (let loop ([i 0] [j (length array)])\n    (cond\n      [(= i j) (+ i 1)]\n      [(= (array-ref array i) (+ i 1)) (loop (+ i 1) j)]\n      [else (+ i 1)])))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (let loop ([i 0])\n    (if (and (< i (length array)) (= (array-ref array i) i))\n        (loop (+ i 1))\n        i)))\n",
    "  (cond\n    [(empty? array) 0]\n    [(= (first array) 0) 1]\n    [(= (first array) (second array)) (find_First_Missing (rest array))]\n    [else (first array)]))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 1))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) #f]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (= i (length array))\n        j\n        (if (= (array i) j)\n            (loop (+ i 1) (+ j 1))\n            j))))\n",
    "  (cond\n    [(null? array) 0]\n    [(= (car array) 0) (find_First_Missing (cdr array))]\n    [(= (car array) 1) 1]\n    [else (find_First_Missing (cdr array))]))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond ((= i (length array)) (+ i 1))\n          ((= i (array i)) (find_First_Missing_helper array (+ i 1)))\n          (else i)))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (cond\n    [(null? array) 0]\n    [(= (car array) 0) 1]\n    [(= (car array) (cadr array)) (find_First_Missing (cdr array))]\n    [else (car array)]))\n",
    "  (let loop ((i 0) (j 1))\n    (cond ((= i (length array)) j)\n          ((= (list-ref array i) j) (loop (+ i 1) (+ j 1)))\n          (else j))))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_helper array index)\n    (cond\n      [(empty? array) index]\n      [(= (first array) index) (find_First_Missing_helper (rest array) (+ index 1))]\n      [else index]))\n  (find_First_Missing_helper array 0))\n",
    "  (define (find_First_Missing_Helper array start end)\n    (cond\n      [(= start end) (+ start 1)]\n      [(= (- end start) 1) (if (= (array start) (+ start 1)) (+ end 1) (+ start 1))]\n      [else (let ([mid (/ (+ start end) 2)])\n              (if (= (array mid) (+ mid 1)) (find_First_Missing_Helper array (+ mid 1) end) (find_First_Missing_Helper array start mid)))]))\n  (find_First_Missing_Helper array 0 (- (array-length array) 1)))\n",
    "  (define (find_First_Missing_Helper array i)\n    (if (= i (length array))\n        (add1 (list-ref array (- i 1)))\n        (if (= (list-ref array i) (add1 (list-ref array (- i 1))))\n            (find_First_Missing_Helper array (add1 i))\n            (list-ref array (- i 1)))))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= (first array) i) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (cond [(empty? array) 0]\n        [(= (first array) 0) 1]\n        [(= (first array) (add1 (second array))) (find_First_Missing (rest array))]\n        [else (first array)]))\n",
    "  (let loop ([i 0])\n    (if (= i (length array))\n        (add1 (vector-ref array (sub1 i)))\n        (if (and (= (vector-ref array i) (add1 i))\n                 (= (vector-ref array (add1 i)) (add1 (add1 i))))\n            (loop (add1 i))\n            (vector-ref array i)))))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (loop (+ i 1))]\n      [else i])))\n",
    "  (let loop ([i 0] [j 1])\n    (if (&lt; i (length array))\n        (if (= (array-ref array i) j)\n            (loop (+ i 1) (+ j 1))\n            j)\n        j)))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_Helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (let loop ([i 0] [j (add1 (length array))])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (if (= (array-ref array mid) mid)\n              (loop (add1 mid) j)\n              (loop i mid))))))\n",
    "  (define (find_First_Missing_Helper array i)\n    (cond\n      [(= i (length array)) (+ i 1)]\n      [(= i (array i)) (find_First_Missing_Helper array (+ i 1))]\n      [else i]))\n  (find_First_Missing_Helper array 0))\n",
    "  (define (find_First_Missing_helper array i)\n    (cond\n      [(empty? array) i]\n      [(= i (first array)) (find_First_Missing_helper (rest array) (+ i 1))]\n      [else i]))\n  (find_First_Missing_helper array 0))\n",
    "  (let loop ([i 0])\n    (cond [(= i (length array))\n           (add1 (vector-ref array (sub1 i)))]\n          [(< (vector-ref array i) (add1 i))\n           (loop (add1 i))]\n          [else (add1 i)])))\n"
  ]
}