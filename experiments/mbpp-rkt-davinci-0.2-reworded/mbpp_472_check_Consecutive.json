{
  "name": "mbpp_472_check_Consecutive",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given list contains consecutive numbers or not.\n(define (check_Consecutive l)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_Consecutive))\n    (check-equal? (candidate (list 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 2 3 5 6)) #f)\n    (check-equal? (candidate (list 1 2 1)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (if (= (first l) (+ (second l) 1)) #t #f)]\n    [else (if (and (= (first l) (+ (second l) 1)) (check_Consecutive (rest l))) #t #f)]))\n",
    "  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [else\n     (and\n      (= (add1 (first l)) (second l))\n      (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) true]\n      [(empty? (rest l)) true]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else false]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (let ((first (car l))\n            (rest (cdr l)))\n        (if (null? rest)\n            #t\n            (if (= (car rest) (+ first 1))\n                (check_Consecutive rest)\n                #f)))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (second l)) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (abs (- (car l) (cadr l))) 1)\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (cadr l)) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? (cdr l)) #t]\n      [(= (- (car l) (cadr l)) 1) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ 1 (second l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (rest (first l)) (first (rest l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (equal? (- (car l) (car (cdr l))) 1)\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (second l)) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (cond ((null? l) #t)\n          ((null? (cdr l)) #t)\n          ((= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l)))\n          (else #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (abs (- (car l) (cadr l))) 1)\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (first (rest l)) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (first l) (- (second l) 1)) #t]\n    [else (check_Consecutive (rest l))]))\n",
    "  (if (null? l)\n      #t\n      (let ([a (car l)]\n            [b (cadr l)])\n        (if (= (- a b) 1)\n            (check_Consecutive (cdr l))\n            #f))))\n",
    "  (cond [(empty? l) #t]\n        [(= (first l) (first (rest l))) #f]\n        [else (check_Consecutive (rest l))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) true]\n      [(empty? (rest l)) true]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else false]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (sub1 (first l)) (second l))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (= (car l) (cadr l))\n          #f\n          (check_Consecutive (cdr l)))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [else\n     (and\n      (= 1 (- (car l) (car (cdr l))))\n      (check_Consecutive (cdr l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (- (first l) (second l)) 1) (check_Consecutive (rest l))]\n    [(= (- (first l) (second l)) -1) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (first (rest l)) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (car l) (+ (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) #t]\n    [else\n     (and\n      (= (sub1 (first l)) (second l))\n      (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else (and (equal? (first l) (- (second l) 1)) (check_Consecutive (rest l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [else\n     (cond\n       [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n       [else #f])]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (second l)) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [else (and (equal? (- (car l) (car (cdr l))) 1)\n               (check_Consecutive (cdr l)))]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (car l) (- (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (car l) (- (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) #t]\n    [else\n     (and\n      (= (length l) (length (remove-duplicates l)))\n      (check_Consecutive (cdr l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (first (rest l))) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [else (and (= (sub1 (first l)) (first (rest l)))\n               (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (cadr l)) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (if (= (first l) (second l)) #f #t)]\n    [else (if (= (first l) (+ (second l) 1))\n             (check_Consecutive (rest l))\n             #f)]))\n",
    "  (if (null? (cdr l)) #t\n      (if (= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l)) #f)))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(and (not (empty? (rest l)))\n          (= (sub1 (first l)) (first (rest l))))\n     (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (first l) (- (second l) 1))\n          (check_Consecutive (rest l)))]))\n",
    "  (let loop ((l l) (prev (car l)))\n    (cond ((null? l) #t)\n          ((= (car l) (+ prev 1)) (loop (cdr l) (car l)))\n          (else #f))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (helper (cdr l))]\n      [else #f]))\n  (helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (if (= (first l) (second l)) #f #t)]\n    [else (if (= (first l) (second l)) #f (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (first (rest l))) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (if (= (first l) (second l))\n                          #f\n                          #t)]\n    [else (if (and (= (first l) (- (second l) 1))\n                   (check_Consecutive (rest l)))\n             #t\n             #f)]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [else\n     (if (= (car l) (- (cadr l) 1))\n         (check_Consecutive (cdr l))\n         #f)]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (add1 (second l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (abs (- (first l) (second l))) 1)\n          (check_Consecutive (rest l)))]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(empty? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (if (null? l)\n      #t\n      (let ([a (car l)]\n            [b (cadr l)])\n        (if (= (- b a) 1)\n            (check_Consecutive (cdr l))\n            #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (car l) (+ (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) prev) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else (and (= (sub1 (first l)) (second l)) (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) true]\n    [(and (not (empty? (rest l))) (= (rest l) (add1 (first l))))\n     (check_Consecutive (rest l))]\n    [else false]))\n",
    "  (cond\n    [(empty? l) true]\n    [(= (first l) (first (rest l))) false]\n    [else (check_Consecutive (rest l))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [else\n     (if (= (first l) (- (second l) 1))\n         true\n         (check_Consecutive (rest l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (car l) (+ (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [else\n     (if (= (first l) (- (second l) 1))\n         (check_Consecutive (rest l))\n         #f)]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [else\n     (and (= (car l) (- (cadr l) 1))\n          (check_Consecutive (cdr l)))]))\n",
    "  (if (null? l)\n      #t\n      (let ([first (car l)]\n            [second (cadr l)])\n        (if (= (abs (- first second)) 1)\n            (check_Consecutive (cdr l))\n            #f))))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [else (and (= (sub1 (first l)) (first (rest l))) (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (if (empty? l)\n      #t\n      (if (and (not (empty? (cdr l)))\n               (= (car l) (- (cadr l) 1)))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (sub1 (first l)) (second l))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else (and (= (add1 (first l)) (first (rest l)))\n               (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [else\n     (and\n      (equal? (car l) (- (cadr l) 1))\n      (check_Consecutive (cdr l)))]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (if (null? l)\n        #t\n        (if (= prev (car l))\n            #f\n            (loop (cdr l) (car l))))))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (equal? (car l) (cadr l))\n              #f\n              (check_Consecutive (cdr l))))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [else (and (= (sub1 (first l)) (first (rest l)))\n                (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else (and (= (first l) (- (second l) 1)) (check_Consecutive (rest l)))]))\n",
    "  (cond ((null? (cdr l)) #t)\n        ((= (abs (- (car l) (cadr l))) 1) (check_Consecutive (cdr l)))\n        (else #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) true]\n      [(empty? (rest l)) true]\n      [(= (first l) (- (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else false]))\n  (check_Consecutive_helper l))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (car l) (- (cadr l) 1))\n          (check_Consecutive (cdr l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (sub1 (first l)) (first (rest l)))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (cadr l)) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (if (null? l)\n      #t\n      (if (= (car l) (+ (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (sub1 (first l)) (second l))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (first l) (- (second l) 1))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) true]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else false]))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (abs (- (car l) (cadr l))) 1)\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (- (first l) (second l)) 1) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else (and (= (first l) (- (second l) 1)) (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (sub1 (first l)) (first (rest l)))\n          (check_Consecutive (rest l)))]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond ((null? l) #t)\n          ((null? (cdr l)) #t)\n          ((= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l)))\n          (else #f)))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (rest (first l)) (first (rest l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) #t]\n    [else\n     (let ([first (first l)]\n           [second (second l)]\n           [third (third l)])\n       (cond\n         [(= (+ first 1) second) (check_Consecutive (rest l))]\n         [(= (+ first 2) second) (check_Consecutive (rest l))]\n         [else #f]))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (and (= (rest (first l)) (first (rest l)))\n          (check_Consecutive (rest l)))]))\n",
    "  (if (null? l)\n      #t\n      (if (= (car l) (+ (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(< (first l) (first (rest l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [else\n     (and (= (car l) (- (cadr l) 1))\n          (check_Consecutive (cdr l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else\n     (if (= (first l) (+ (second l) 1))\n         (check_Consecutive (rest l))\n         #f)]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (if (= (sub1 (first l)) (second l))\n         (check_Consecutive (rest l))\n         #f)]))\n",
    "  (define (check_Consecutive_helper l)\n    (if (null? (cdr l))\n        #t\n        (if (= (abs (- (car l) (cadr l))) 1)\n            (check_Consecutive_helper (cdr l))\n            #f)))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (first (rest l))) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (= (first l) (second l))]\n    [else (and (= (first l) (second l)) (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (sub1 (first l)) (second l))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(empty? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (rest l) (cons (add1 (first l)) (rest (rest l)))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2)\n     (if (= (first l) (second l))\n         #f\n         #t)]\n    [else\n     (if (and (= (first l) (- (second l) 1))\n              (check_Consecutive (rest l)))\n         #t\n         #f)]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else (and (equal? (first l) (- (second l) 1)) (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (cadr l)) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else false]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [else (and (= (sub1 (first l)) (first (rest l)))\n               (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) #t]\n    [else\n     (and (= (abs (- (first l) (second l))) 1)\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= 1 (length l)) #t]\n    [(= (car l) (car (cdr l))) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (equal? (cdr l) (cons (+ (car l) 1) (cddr l)))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (- (first l) (second l)) 1)\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #f]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #t]\n    [else (and (= (rest (first l)) (first (rest l)))\n               (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? l) #t]\n      [(null? (cdr l)) #t]\n      [(= (car l) (- (cadr l) 1)) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (first l) (- (second l) 1)) #t]\n    [else (check_Consecutive (rest l))]))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond [(null? l) #t]\n          [(= prev (car l)) (loop (cdr l) (car l))]\n          [else #f])))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (cadr l)) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (if (null? l)\n      #t\n      (let ([a (car l)]\n            [b (cadr l)])\n        (if (= (- a b) 1)\n            (check_Consecutive (cdr l))\n            #f))))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (let ([first (first l)]\n           [second (second l)])\n       (cond\n         [(= first (+ second 1)) (check_Consecutive (rest l))]\n         [else #f]))]))\n",
    "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(= (rest (first l)) (first (rest l))) (check_Consecutive (rest l))]\n        [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty? (rest l)) #t]\n      [else (and (equal? (first l) (add1 (second l)))\n                 (check_Consecutive_helper (rest l)))]))\n  (check_Consecutive_helper (sort l <)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (car l) (+ (cadr l) 1))\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (rest (first l)) (first (rest l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [else\n     (and (= (sub1 (first l)) (second l))\n          (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (add1 (second l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n"
  ]
}