{
  "name": "mbpp_472_check_Consecutive",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check whether the given list contains consecutive numbers or not.\n(define (check_Consecutive l)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_Consecutive))\n    (check-equal? (candidate (list 1 2 3 4 5)) #t)\n    (check-equal? (candidate (list 1 2 3 5 6)) #f)\n    (check-equal? (candidate (list 1 2 1)) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (let loop ([l l] [prev (car l)])\n    (cond\n      [(null? l) #t]\n      [(= (car l) (+ prev 1)) (loop (cdr l) (car l))]\n      [else #f])))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (+ (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (- (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (length l) 1) #t]\n    [(= (length l) 2) (if (= (first l) (+ (second l) 1)) #t #f)]\n    [else (if (and (= (first l) (+ (second l) 1)) (check_Consecutive (rest l))) #t #f)]))\n",
    "  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [else\n     (and\n      (= (add1 (first l)) (second l))\n      (check_Consecutive (rest l)))]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(empty? l) true]\n      [(empty? (rest l)) true]\n      [(= (first l) (+ (second l) 1)) (check_Consecutive_helper (rest l))]\n      [else false]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (- (second l) 1)) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (- (cadr l) 1)) (check_Consecutive (cdr l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (let ((first (car l))\n            (rest (cdr l)))\n        (if (null? rest)\n            #t\n            (if (= (car rest) (+ first 1))\n                (check_Consecutive rest)\n                #f)))))\n",
    "  (cond\n    [(empty? l) #t]\n    [(= (first l) (second l)) #f]\n    [else (check_Consecutive (rest l))]))\n",
    "  (if (null? (cdr l))\n      #t\n      (if (= (abs (- (car l) (cadr l))) 1)\n          (check_Consecutive (cdr l))\n          #f)))\n",
    "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(= (car l) (cadr l)) #f]\n    [else (check_Consecutive (cdr l))]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (= (car l) (+ (cadr l) 1))\n              (check_Consecutive (cdr l))\n              #f))))\n",
    "  (define (check_Consecutive_helper l)\n    (cond\n      [(null? (cdr l)) #t]\n      [(= (- (car l) (cadr l)) 1) (check_Consecutive_helper (cdr l))]\n      [else #f]))\n  (check_Consecutive_helper l))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (first l) (+ 1 (second l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(= (rest (first l)) (first (rest l))) (check_Consecutive (rest l))]\n    [else #f]))\n",
    "  (if (null? l)\n      #t\n      (if (null? (cdr l))\n          #t\n          (if (equal? (- (car l) (car (cdr l))) 1)\n              (check_Consecutive (cdr l))\n              #f))))\n"
  ]
}