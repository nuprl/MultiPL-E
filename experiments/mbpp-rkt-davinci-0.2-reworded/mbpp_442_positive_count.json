{
  "name": "mbpp_442_positive_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the ration of positive numbers in a list of integers.\n(define (positive_count nums)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate positive_count))\n    (check-equal? (candidate (list 0 1 2 -1 -5 6 0 -3 -2 3 4 6 8)) 0.54)\n    (check-equal? (candidate (list 2 1 2 -1 -5 6 4 -3 -2 3 4 6 8)) 0.69)\n    (check-equal? (candidate (list 2 4 -6 -9 11 -12 14 -5 17)) 0.56)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (helper (cdr nums) (+ count 1)))\n          (else (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (cond [(empty? nums) 0]\n        [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n        [else (positive_count (rest nums))]))\n",
    "  (define (pos? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (integer? num) (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst))\n           (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-positive (cdr nums)))))\n  (/ (sum-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n</code>\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (count nums count)\n    (if (null? nums)\n        count\n        (if (&gt; (car nums) 0)\n            (count (cdr nums) (+ count 1))\n            (count (cdr nums) count))))\n  (/ (count nums 0) (length nums)))\n",
    "  (define (pos? n)\n    (if (&gt; n 0) 1 0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-helper (cdr nums) (+ count (positive? (car nums))))))\n  (positive-count-helper nums 0))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (&gt; num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums))\n     (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (positive-count-helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((positive? (car nums)) (positive-count-helper (cdr nums) (+ count 1)))\n          (else (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (define (pos? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (pos? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive-count-iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-iter (cdr nums) (+ (positive? (car nums)) count))))\n  (positive-count-iter nums 0))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (positive-count-helper (cdr nums) (+ count 1))\n            (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum-of-positives nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (sum-of-positives (cdr nums)))))\n  (/ (sum-of-positives nums)\n     (length nums)))\n",
    "  (define (count-positives nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positives (cdr nums) (+ 1 count))\n            (count-positives (cdr nums) count))))\n  (count-positives nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (if (null? nums)\n      0\n      (+ (if (&gt; (car nums) 0) 1 0)\n         (positive_count (cdr nums)))))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (pos? n)\n    (if (&gt; n 0) 1 0))\n  (define (sum-pos nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (sum-pos (cdr nums)))))\n  (/ (sum-pos nums) (length nums)))\n",
    "  (let loop ((nums nums) (count 0))\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n</code>\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (positive-count-helper nums count)\n    (cond ((null? nums)\n           (/ count (length nums)))\n          ((positive? (car nums))\n           (positive-count-helper (cdr nums) (+ count 1)))\n          (else\n           (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (count_positives nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count_positives (rest nums) (+ count 1))]\n      [else (count_positives (rest nums) count)]))\n  (count_positives nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n</code>\nI'm getting the error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   #&lt;procedure:+&gt;\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're using <code>+</code> instead of <code>add1</code>.\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n) 1 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n</code>\nI'm getting an error that says <code>positive?</code> is not defined. I'm not sure what I'm doing wrong here.\n\n\nA:\n\nYou're using <code>positive?</code> in the definition of <code>positive?</code>, which is an infinite loop.\nYou probably want to use <code>&gt; 0</code> instead of <code>positive?</code>.\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count_positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count_positive (cdr nums)))))\n  (/ (count_positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (pos? n)\n    (if (positive? n) 1 0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-helper (cdr nums)\n                               (+ count (if (positive? (car nums))\n                                            1\n                                            0)))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count_positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count_positive (cdr nums)))\n            (count_positive (cdr nums)))))\n  (/ (count_positive nums) (length nums)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive_count-iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive_count-iter (cdr nums) (+ (positive? (car nums)) count))))\n  (positive_count-iter nums 0))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (positive_count-helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((positive? (car nums)) (positive_count-helper (cdr nums) (+ count 1)))\n          (else (positive_count-helper (cdr nums) count))))\n  (positive_count-helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (pos? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map pos? nums))\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive_count_helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive_count_helper (cdr nums) (+ count (positive? (car nums))))))\n  (positive_count_helper nums 0))\n</code>\nI'm not sure why this isn't working. I'm getting a divide by zero error. I'm not sure why.\n\n\nA:\n\nThe problem is that you're dividing by the length of the list before you've finished counting the positive numbers. You need to do the division after you've counted the positive numbers.\n<code>(define (positive_count nums)\n  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive_count_helper nums count)\n    (if (null? nums)\n        count\n        (positive_count_helper (cdr nums) (+ count (positive? (car nums))))))\n  (/ (positive_count_helper nums 0) (length nums)))\n</code>\n",
    "  (define (pos? n)\n    (if (&lt; n 0)\n        0\n        1))\n  (define (pos-count lst)\n    (if (null? lst)\n        0\n        (+ (pos? (car lst)) (pos-count (cdr lst)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (define (positive? x)\n    (and (integer? x)\n         (positive? x)))\n  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (> n 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (pos? n)\n    (if (&lt; n 0)\n        #f\n        #t))\n  (define (count-pos nums)\n    (if (null? nums)\n        0\n        (+ (if (pos? (car nums)) 1 0)\n           (count-pos (cdr nums)))))\n  (/ (count-pos nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (> n 0))\n  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (&gt; n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count-positive (rest nums) (+ count 1))]\n      [else (count-positive (rest nums) count)]))\n  (count-positive nums 0))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? x)\n    (if (&gt; x 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (iter n count)\n    (if (null? n)\n        (/ count (length nums))\n        (if (&gt; (car n) 0)\n            (iter (cdr n) (+ count 1))\n            (iter (cdr n) count))))\n  (iter nums 0))\n",
    "  (define (positive? n)\n    (and (integer? n) (> n 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (positive? num)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n</code>\nI'm not sure if this is the best way to do it.\n\n\nA:\n\nI think you're overcomplicating things. You can use <code>filter</code> to get the list of positive numbers, and then divide the length of that list by the length of the original list:\n<code>(define (positive-count nums)\n  (define (positive? num)\n    (&gt; num 0))\n  (/ (length (filter positive? nums))\n     (length nums)))\n</code>\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (let loop ((nums nums)\n             (count 0))\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum-positive-nums nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (sum-positive-nums (cdr nums)))))\n  (/ (sum-positive-nums nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? x)\n    (and (number? x)\n         (positive? x)))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n\n\nA:\n\nYou can use <code>filter</code> to get the list of positive numbers, and then divide the length of that list by the length of the original list:\n<code>(define (positive-count nums)\n  (/ (length (filter positive? nums))\n     (length nums)))\n</code>\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (count-positive (cdr nums) (+ count 1)))\n          (else (count-positive (cdr nums) count))))\n  (count-positive nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (cond [(empty? nums) (/ count (length nums))]\n          [(positive? (first nums)) (loop (rest nums) (+ count 1))]\n          [else (loop (rest nums) count)])))\n",
    "  (define (pos? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (length (filter positive? nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (pos? n)\n    (if (&gt; n 0) 1 0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        #t\n        #f))\n  (define (count_positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count_positive (cdr nums)))\n            (count_positive (cdr nums)))))\n  (/ (count_positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count_positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count_positive (cdr nums)))))\n  (/ (count_positive nums)\n     (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (count-positive nums)\n    (if (null? nums) 0\n        (+ (positive? (car nums)) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&lt; n 0)\n        #f\n        #t))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (count-positive nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (count-positive (rest nums) (+ count 1))]\n      [else (count-positive (rest nums) count)]))\n  (count-positive nums 0))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (if (positive? num)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (positive? num)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (> n 0) 1 0))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive-count-helper (cdr nums) (+ count (positive? (car nums))))))\n  (positive-count-helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (positive-count-helper (cdr nums) (+ count 1))\n            (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(> (first nums) 0) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (positive? num)\n    (and (number? num) (> num 0)))\n  (define (positive-count-helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((positive? (car nums)) (positive-count-helper (cdr nums) (+ count 1)))\n          (else (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (count (cdr nums)))))\n  (/ (count nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&lt; n 0)\n        0\n        1))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (sum nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (sum (cdr nums)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (positive-count-helper nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(positive? (first nums)) (positive-count-helper (rest nums) (+ count 1))]\n      [else (positive-count-helper (rest nums) count)]))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum-of-positives nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums)) (sum-of-positives (cdr nums)))))\n  (/ (sum-of-positives nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (helper nums count)\n    (cond\n      [(empty? nums) (/ count (length nums))]\n      [(> (first nums) 0) (helper (rest nums) (+ count 1))]\n      [else (helper (rest nums) count)]))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst))\n           (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (count-positive nums 0))\n",
    "  (define (pos? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (pos-count nums)\n    (if (null? nums)\n        0\n        (+ (pos? (car nums)) (pos-count (cdr nums)))))\n  (/ (pos-count nums) (length nums)))\n",
    "  (define (count-positive nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (count-positive nums 0))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (helper (cdr nums) (+ count 1)))\n          (else (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (count-positives nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count-positives (cdr nums) (+ count 1))\n            (count-positives (cdr nums) count))))\n  (count-positives nums 0))\n",
    "  (define (positive? num)\n    (> num 0))\n  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (positive-count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (positive-count-helper (cdr nums) (+ count 1))\n            (positive-count-helper (cdr nums) count))))\n  (positive-count-helper nums 0))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0) 1 0))\n  (define (sum lst)\n    (if (null? lst) 0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (define (sum lst)\n    (if (null? lst)\n        0\n        (+ (positive? (car lst)) (sum (cdr lst)))))\n  (/ (sum nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 0\n  arguments...:\n   -1\n   0\n   1\n   2\n   3\n   4\n   5\n   6\n   7\n   8\n   9\n   10\n   11\n   12\n   13\n   14\n   15\n   16\n   17\n   18\n   19\n   20\n   21\n   22\n   23\n   24\n   25\n   26\n   27\n   28\n   29\n   30\n   31\n   32\n   33\n   34\n   35\n   36\n   37\n   38\n   39\n   40\n   41\n   42\n   43\n   44\n   45\n   46\n   47\n   48\n   49\n   50\n   51\n   52\n   53\n   54\n   55\n   56\n   57\n   58\n   59\n   60\n   61\n   62\n   63\n   64\n   65\n   66\n   67\n   68\n   69\n   70\n   71\n   72\n   73\n   74\n   75\n   76\n   77\n   78\n   79\n   80\n   81\n   82\n   83\n   84\n   85\n   86\n   87\n   88\n   89\n   90\n   91\n   92\n   93\n   94\n   95\n   96\n   97\n   98\n   99\n   100\n   101\n   102\n   103\n   104\n   105\n   106\n   107\n   108\n   109\n   110\n   111\n   112\n   113\n   114\n   115\n   116\n   117\n   118\n   119\n   120\n   121\n   122\n   123\n   124\n   125\n   126\n   127\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (iter nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (iter (cdr nums) (+ count 1))\n            (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (&gt; num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((> (car nums) 0) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (positive? (car nums))\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (cond\n    [(empty? nums) 0]\n    [(positive? (first nums)) (+ 1 (positive_count (rest nums)))]\n    [else (positive_count (rest nums))]))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n  arguments...:\n   0\n</code>\nI'm not sure what I'm doing wrong. I'm trying to increment the count variable by 1 if the current number is greater than 0.\n\n\nA:\n\nYou're using <code>+</code> instead of <code>add1</code> to increment the count.\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0) (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (letrec ([count (lambda (nums)\n                    (cond [(empty? nums) 0]\n                          [(positive? (first nums)) (+ 1 (count (rest nums)))]\n                          [else (count (rest nums))]))])\n    (/ (count nums) (length nums))))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (cond\n      [(empty? nums) 0]\n      [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n      [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums))\n               1\n               0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (helper (cdr nums) (+ count 1)))\n          (else (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? num)\n    (and (number? num)\n         (positive? num)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (iter nums count)\n    (cond ((null? nums) (/ count (length nums)))\n          ((> (car nums) 0) (iter (cdr nums) (+ count 1)))\n          (else (iter (cdr nums) count))))\n  (iter nums 0))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (loop (cdr nums)\n              (if (&gt; (car nums) 0)\n                  (+ count 1)\n                  count)))))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n</code>\nI'm getting an error when I try to run this.\n<code>&gt; (positive_count '(1 2 3 4 5))\n. . .: expects type &lt;number&gt;; given: '(1 2 3 4 5)\n</code>\nI'm not sure why it's giving me this error. I'm calling the function with a list of numbers.\n\n\nA:\n\nYou're using <code>length</code> in the wrong place. It should be:\n<code>(define (positive_count nums)\n  (define (helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (helper (cdr nums) (+ count 1))\n            (helper (cdr nums) count))))\n  (helper nums 0))\n</code>\n",
    "  (define (positive? n)\n    (if (positive? n)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        1\n        0))\n  (define (positive_count-helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (positive_count-helper (cdr nums) (+ count (positive? (car nums))))))\n  (positive_count-helper nums 0))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums count)\n    (if (null? nums)\n        count\n        (if (positive? (car nums))\n            (count-positive (cdr nums) (+ count 1))\n            (count-positive (cdr nums) count))))\n  (/ (count-positive nums 0) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count-positives nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positives (rest nums)))]\n          [else (count-positives (rest nums))]))\n  (/ (count-positives nums) (length nums)))\n",
    "  (define (positive? n)\n    (if (&gt; n 0) 1 0))\n  (define (add-up-positives n)\n    (if (null? n) 0\n        (+ (positive? (car n)) (add-up-positives (cdr n)))))\n  (/ (add-up-positives nums) (length nums)))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (positive? num)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (let loop ([nums nums] [count 0])\n    (if (null? nums)\n        (/ count (length nums))\n        (if (> (car nums) 0)\n            (loop (cdr nums) (+ count 1))\n            (loop (cdr nums) count)))))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (positive? n)))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (if (positive? (car nums))\n            (+ 1 (count-positive (cdr nums)))\n            (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? num)\n    (if (&gt; num 0)\n        #t\n        #f))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (positive? (car nums))\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums)\n     (length nums)))\n",
    "  (length (filter positive? nums)))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (cond ((null? nums) 0)\n          ((positive? (car nums)) (+ 1 (count-positive (cdr nums))))\n          (else (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (if (null? nums)\n      0\n      (+ (if (positive? (car nums)) 1 0)\n         (positive_count (cdr nums)))))\n",
    "  (define (positive? num)\n    (and (integer? num)\n         (> num 0)))\n  (define (count-positive nums)\n    (if (null? nums)\n        0\n        (+ (if (positive? (car nums)) 1 0)\n           (count-positive (cdr nums)))))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (positive? n)\n    (and (integer? n)\n         (> n 0)))\n  (define (count-positive nums)\n    (cond [(empty? nums) 0]\n          [(positive? (first nums)) (+ 1 (count-positive (rest nums)))]\n          [else (count-positive (rest nums))]))\n  (/ (count-positive nums) (length nums)))\n",
    "  (define (count_helper nums count)\n    (if (null? nums)\n        (/ count (length nums))\n        (if (&gt; (car nums) 0)\n            (count_helper (cdr nums) (+ count 1))\n            (count_helper (cdr nums) count))))\n  (count_helper nums 0))\n",
    "  (define (positive? n)\n    (if (&gt; n 0)\n        1\n        0))\n  (/ (apply + (map positive? nums)) (length nums)))\n"
  ]
}