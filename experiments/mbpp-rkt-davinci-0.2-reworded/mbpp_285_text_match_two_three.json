{
  "name": "mbpp_285_text_match_two_three",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n(define (text_match_two_three text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_match_two_three))\n    (check-equal? (candidate \"ac\") #f)\n    (check-equal? (candidate \"dc\") #f)\n    (check-equal? (candidate \"abbbba\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (define (match-two-three text)\n    (cond\n      [(empty? text) false]\n      [(char=? (first text) #\\a)\n       (cond\n         [(and (char=? (second text) #\\b)\n               (char=? (third text) #\\b))\n          (cond\n            [(char=? (fourth text) #\\b) true]\n            [else true])]\n         [else (match-two-three (rest text))])]\n      [else (match-two-three (rest text))]))\n  (match-two-three (string->list text)))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (string-contains text \"abb\"))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(equal? (first text) 'a')\n     (cond\n       [(and (equal? (second text) 'b') (equal? (third text) 'b')) true]\n       [(and (equal? (second text) 'b') (equal? (third text) 'b') (equal? (fourth text) 'b')) true]\n       [else false])]\n    [else (text_match_two_three (rest text))]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (string-contains text \"abb\"))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (string-contains text \"abb\"))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (and (string-contains text \"a\")\n       (string-contains text \"bb\")\n       (or (string-contains text \"bbb\")\n           (not (string-contains text \"bbbb\")))))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(string=? text \"abb\") #t]\n    [(string=? text \"abbb\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (define (match-helper text)\n    (cond\n      [(empty? text) #f]\n      [(equal? (first text) 'a')\n       (cond\n         [(equal? (second text) 'b')\n          (cond\n            [(equal? (third text) 'b')\n             (cond\n               [(equal? (fourth text) 'b') #t]\n               [else #f])]\n            [else #t])]\n         [else #f])]\n      [else (match-helper (rest text))]))\n  (match-helper (string->list text)))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"a(b{2,3})\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(string=? text \"abb\") #t]\n    [(string=? text \"abbb\") #t]\n    [else #f]))\n",
    "  (cond\n    [(string=? text \"abb\") #t]\n    [(string=? text \"abbb\") #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (match text\n    [(list 'a 'b 'b) true]\n    [(list 'a 'b 'b 'b) true]\n    [_ false]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (if (regexp-match? #rx\"ab{2,3}\" text)\n      \"yes\"\n      \"no\"))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (string-contains text \"abb\"))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (and (string-contains text \"a\")\n       (string-contains text \"bb\")\n       (or (string-contains text \"bbb\")\n           (not (string-contains text \"bbbb\")))))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (match text\n    [(list 'a 'b 'b) #t]\n    [(list 'a 'b 'b 'b) #t]\n    [_ #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(regexp-match? #rx\"ab{2,3}\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (cond\n    [(string=? text \"abb\") true]\n    [(string=? text \"abbb\") true]\n    [else false]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (let ([match-two-three (regexp #rx\"(a(bb){2,3})\")])\n    (regexp-match match-two-three text)))\n",
    "  (cond\n    [(regexp-match? #rx\"ab{2,3}\" text) #t]\n    [else #f]))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (regexp-match? #rx\"ab{2,3}\" text))\n",
    "  (string-contains text \"abb\"))\n"
  ]
}