{
  "name": "mbpp_222_check_type",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp24it_r1z.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp24it_r1z.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmps6vqg20x.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmps6vqg20x.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (let loop ([lst (car test_tuple)]\n             [type (cdr test_tuple)])\n    (if (null? lst)\n        #t\n        (if (equal? (type-tag (car lst)) type)\n            (loop (cdr lst) type)\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpw_rkt5f8.rkt:9:21: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpw_rkt5f8.rkt:9:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpyduc47_8.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpyduc47_8.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmps6vqg20x.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmps6vqg20x.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpu90kjl33.rkt:8:24: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpu90kjl33.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) true]\n    [(null? (cdr test_tuple)) true]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp278aiexb.rkt:8:24: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp278aiexb.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpgp08nb6f.rkt:8:11: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpgp08nb6f.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpoa16478s.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpoa16478s.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp24it_r1z.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp24it_r1z.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmppr5hdtsk.rkt:8:11: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmppr5hdtsk.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpcv23s4ea.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpcv23s4ea.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? test_tuple)\n      #t\n      (if (not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))))\n          #f\n          (check_type (cdr test_tuple)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpk39m4i8y.rkt:7:24: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpk39m4i8y.rkt:7:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp24it_r1z.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp24it_r1z.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmppr5hdtsk.rkt:8:11: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmppr5hdtsk.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpta4iafdk.rkt:7:16: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpta4iafdk.rkt:7:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpoa16478s.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpoa16478s.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (list? test_tuple) (null? (cdr test_tuple))) #t]\n    [(and (list? test_tuple) (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpgmtbcnmc.rkt:8:38: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpgmtbcnmc.rkt:8:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0nl3o0ip.rkt:7:16: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp0nl3o0ip.rkt:7:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpi7_qod3q.rkt:7:11: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpi7_qod3q.rkt:7:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(not (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpgny3u7y8.rkt:8:16: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpgny3u7y8.rkt:8:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpu90kjl33.rkt:8:24: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpu90kjl33.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(equal? (type-tag (first test_tuple)) (type-tag (second test_tuple))) (check_type (rest test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp1pgdg__y.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp1pgdg__y.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type (car test_tuple)) (type (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp88j2zb5d.rkt:8:24: type: unbound identifier\n  in: type\n  location...:\n   /tmp/tmp88j2zb5d.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqxe_r_er.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqxe_r_er.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmps6vqg20x.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmps6vqg20x.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else\n     (and\n      (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n      (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphbo4_0d3.rkt:10:15: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmphbo4_0d3.rkt:10:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (pair? test_tuple) (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpxqwub4ee.rkt:7:38: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpxqwub4ee.rkt:7:38\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n          (check_type (rest test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpf5dvr_ip.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpf5dvr_ip.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type (car test_tuple)) (type (car (cdr test_tuple))))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpyu0_5el4.rkt:8:24: type: unbound identifier\n  in: type\n  location...:\n   /tmp/tmpyu0_5el4.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [else\n     (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpaj3kk1zb.rkt:8:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpaj3kk1zb.rkt:8:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [(and (string? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp512a56a6.rkt:17:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [else\n     (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpaj3kk1zb.rkt:8:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpaj3kk1zb.rkt:8:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(and (list? (car test_tuple)) (check_type (car test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (list? (car test_tuple)) (not (check_type (car test_tuple))))\n     #f]\n    [(and (not (list? (car test_tuple))) (eq? (typeof (car test_tuple)) (typeof (cadr test_tuple))))\n     (check_type (cdr test_tuple))]\n    [(and (not (list? (car test_tuple))) (not (eq? (typeof (car test_tuple)) (typeof (cadr test_tuple)))))\n     #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpr8rjcpvq.rkt:10:47: typeof: unbound identifier\n  in: typeof\n  location...:\n   /tmp/tmpr8rjcpvq.rkt:10:47\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) true]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) true]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp24it_r1z.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp24it_r1z.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp24it_r1z.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp24it_r1z.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4179gk2e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4179gk2e.rkt:20:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(= (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0_lrkkge.rkt:7:9: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp0_lrkkge.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (let ([test_type (car test_tuple)])\n    (cond\n      [(null? (cdr test_tuple)) #t]\n      [(not (equal? (type-tag (car test_tuple)) test_type)) #f]\n      [else (check_type (cdr test_tuple))])))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpcnk226p0.rkt:8:21: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpcnk226p0.rkt:8:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyl305_54.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else\n     (and\n      (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n      (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpqeuicvib.rkt:10:12: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpqeuicvib.rkt:10:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0nl3o0ip.rkt:7:16: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp0nl3o0ip.rkt:7:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (let ([type (car test_tuple)])\n    (cond\n      [(null? (cdr test_tuple)) #t]\n      [(not (equal? type (type (car (cdr test_tuple))))) #f]\n      [else (check_type (cons type (cdr (cdr test_tuple))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbx8xaat.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbx8xaat.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbx8xaat.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (let ([type (car test_tuple)])\n    (cond\n      [(null? test_tuple) #t]\n      [(not (equal? type (type-tag (car test_tuple)))) #f]\n      [else (check_type (cdr test_tuple))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpmeb10jie.rkt:8:26: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpmeb10jie.rkt:8:26\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? test_tuple)\n      #t\n      (if (eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0nl3o0ip.rkt:7:16: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp0nl3o0ip.rkt:7:16\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpgp08nb6f.rkt:8:11: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpgp08nb6f.rkt:8:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4179gk2e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4179gk2e.rkt:20:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond [(null? test_tuple) #t]\n        [(not (equal? (type-tag (car test_tuple))\n                      (type-tag (cadr test_tuple)))) #f]\n        [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpalld8mlb.rkt:6:23: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpalld8mlb.rkt:6:23\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple))\n          (number? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqp8oko6.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqp8oko6.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpoa16478s.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpoa16478s.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(= (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0_lrkkge.rkt:7:9: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp0_lrkkge.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (first test_tuple)) (check_type (rest test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe5lwzraq.rkt:20:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe5lwzraq.rkt:22:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:16:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc3vln2_e.rkt:18:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpu90kjl33.rkt:8:24: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpu90kjl33.rkt:8:24\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [else\n     (and\n      (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n      (check_type (rest test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmp96dwggu9.rkt:9:15: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp96dwggu9.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(= (type-tag (first test_tuple)) (type-tag (second test_tuple)))\n     (check_type (rest test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpl20na65w.rkt:7:9: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpl20na65w.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510550,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? test_tuple)\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpz784tw6w.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpz784tw6w.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpnl1ew730.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpnl1ew730.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? test_tuple)\n      #t\n      (if (and (number? (car test_tuple))\n               (number? (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5oiryrw.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa5oiryrw.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123477,
      "stdout": "",
      "stderr": "/tmp/tmpoa16478s.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpoa16478s.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmpdpplxeo6.rkt:8:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpdpplxeo6.rkt:8:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (let ([first_type (type-tag (car test_tuple))])\n    (if (null? (cdr test_tuple))\n        #t\n        (if (equal? (type-tag (car (cdr test_tuple))) first_type)\n            (check_type (cdr test_tuple))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpi82590fi.rkt:5:21: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpi82590fi.rkt:5:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [else\n     (and\n      (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n      (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpd2avx_gl.rkt:9:15: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpd2avx_gl.rkt:9:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [(and (boolean? (car test_tuple)) (boolean? (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe5lwzraq.rkt:20:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe5lwzraq.rkt:22:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (let ([type (car test_tuple)])\n    (cond\n      [(null? (cdr test_tuple)) #t]\n      [(not (equal? type (type (car (cdr test_tuple))))) #f]\n      [else (check_type (cons type (cdr (cdr test_tuple))))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbx8xaat.rkt:16:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 5\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbx8xaat.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptbx8xaat.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else\n     (and\n      (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n      (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmphbo4_0d3.rkt:10:15: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmphbo4_0d3.rkt:10:15\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp24it_r1z.rkt:7:14: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp24it_r1z.rkt:7:14\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else\n     (and (equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n          (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpwpmca3m5.rkt:9:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpwpmca3m5.rkt:9:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(and (number? (car test_tuple)) (number? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (string? (car test_tuple)) (string? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [(and (symbol? (car test_tuple)) (symbol? (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(6)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3xeh4rq_.rkt:19:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (eq? (type (car test_tuple)) (type (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123479,
      "stdout": "",
      "stderr": "/tmp/tmpfwyp3vww.rkt:8:21: type: unbound identifier\n  in: type\n  location...:\n   /tmp/tmpfwyp3vww.rkt:8:21\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(= (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123478,
      "stdout": "",
      "stderr": "/tmp/tmp0_lrkkge.rkt:7:9: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp0_lrkkge.rkt:7:9\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmp7g7h0onu.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmp7g7h0onu.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665510549,
      "stdout": "",
      "stderr": "/tmp/tmpuc0uvrmr.rkt:7:19: type-tag: unbound identifier\n  in: type-tag\n  location...:\n   /tmp/tmpuc0uvrmr.rkt:7:19\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}