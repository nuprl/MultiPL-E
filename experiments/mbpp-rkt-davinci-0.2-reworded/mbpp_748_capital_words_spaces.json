{
  "name": "mbpp_748_capital_words_spaces",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to put spaces between words starting with capital letters in a given string.\n(define (capital_words_spaces str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate capital_words_spaces))\n    (check-equal? (candidate \"Python\") \"Python\")\n    (check-equal? (candidate \"PythonProgrammingExamples\") \"Python Programming Examples\")\n    (check-equal? (candidate \"GetReadyToBeCodingFreak\") \"Get Ready To Be Coding Freak\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_helper str1 str2)\n    (cond ((string-empty? str1) str2)\n          ((char-upper-case? (string-ref str1 0))\n           (capital_words_spaces_helper (substring str1 1) (string-append str2 \" \" (string (string-ref str1 0)))))\n          (else (capital_words_spaces_helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (capital_words_spaces_helper str1 \"\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_iter str1 str2)\n    (cond ((null? str1) (string-append str2 \" \"))\n          ((char-upper-case? (car str1)) (capital_words_spaces_iter (cdr str1) (string-append str2 (car str1) \" \")))\n          (else (capital_words_spaces_iter (cdr str1) (string-append str2 (car str1))))))\n  (capital_words_spaces_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (define (capital_words_spaces_helper str1 str2)\n    (cond\n      [(empty? str1) (string-append str2)]\n      [(char-upcase? (first str1)) (capital_words_spaces_helper (rest str1) (string-append str2 (string (first str1)) \" \"))]\n      [else (capital_words_spaces_helper (rest str1) (string-append str2 (string (first str1))))]))\n  (capital_words_spaces_helper str1 \"\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (let ([str2 (string-append str1 \" \")])\n    (for/fold ([str3 \"\"]\n               [i 0])\n        ([j (in-range (string-length str2))])\n      (cond\n        [(char-upper-case? (string-ref str2 j))\n         (string-append str3 (substring str2 i j) \" \")]\n        [else\n         str3]))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace-backref #rx\" \\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 #:replace-function (lambda (m) (string-append \" \" m))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (string-join (map (lambda (x) (if (char-upper-case? (string-ref x 0)) (string-append x \" \") x)) (string-split str1)) \"\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (string-join (map (lambda (x) (if (char-upper-case? (string-ref x 0)) (string-append x \" \") x)) (string-split str1)) \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 #:replace \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #px\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (let ([str2 (string-append str1 \" \")])\n    (for/fold ([str3 \"\"]\n               [i 0])\n        ([j (in-range (string-length str2))])\n      (if (and (char-upper-case? (string-ref str2 i))\n               (char-lower-case? (string-ref str2 j)))\n          (string-append str3 (string-append \" \" (string-ref str2 j)))\n          (string-append str3 (string-ref str2 j)))\n      (string-append str3 (string-ref str2 j)))))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (let ([str2 (string-append str1 \" \")])\n    (for/fold ([str3 \"\"]\n               [i 0])\n        ([j (in-naturals)])\n      (let ([c (string-ref str2 j)])\n        (if (and (char-upper-case? c)\n                 (not (char-upper-case? (string-ref str2 (+ j 1)))))\n            (string-append str3 (substring str2 i j) \" \")\n            str3)))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (cond\n    [(empty? str1) empty]\n    [(char-upcase? (first str1))\n     (cons (first str1)\n           (cons #\\space\n                 (capital_words_spaces (rest str1))))]\n    [else (cons (first str1)\n                (capital_words_spaces (rest str1)))]))\n",
    "  (string-join (map (lambda (x) (if (char-upper-case? (string-ref x 0)) (string-append x \" \") x)) (string-split str1 #\\Space)) \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (s) (string-append \" \" s))))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\B[A-Z]\" str1 \" \\\\&\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append x \" \"))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]+)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\\\\b\" str1 \" \\\\0 \"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]+)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"\\\\B[A-Z]\" str1 \" \\\\&\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (string-join\n   (map (lambda (x) (if (char-upper-case? (string-ref x 0)) (string-append x \" \") x))\n        (string-split str1 #\\space))\n   #\\space))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (define (capital_words_spaces_iter str1 str2)\n    (if (empty? str1)\n        str2\n        (if (char-upper-case? (string-ref str1 0))\n            (capital_words_spaces_iter (substring str1 1) (string-append str2 \" \" (string (string-ref str1 0))))\n            (capital_words_spaces_iter (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (capital_words_spaces_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 #:replace \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]*\" str1 \" \\\\0\"))\n",
    "  (string-join (map (lambda (x) (if (char-upper-case? (string-ref x 0)) (string-append x \" \") x)) (string-split str1 #\\space)) \" \"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\b[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])([a-z])\" str1 #:replace \"\\\\1 \\\\2\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z][a-z]*)\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (let ([str2 (string-append str1 \" \")])\n    (for/fold ([str3 \"\"]\n               [i 0])\n        ([j (in-naturals)])\n      (if (char-upper-case? (string-ref str2 i))\n          (string-append str3 (string-append (substring str2 i j) \" \"))\n          (string-append str3 (substring str2 i j))))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"\\\\([A-Z]\\\\)\" str1 \" \\\\1\"))\n",
    "  (define (capital_words_spaces_iter str1 acc)\n    (if (string-empty? str1)\n        acc\n        (if (char-upper-case? (string-ref str1 0))\n            (capital_words_spaces_iter (substring str1 1) (string-append acc \" \" (string (string-ref str1 0))))\n            (capital_words_spaces_iter (substring str1 1) (string-append acc (string (string-ref str1 0)))))))\n  (capital_words_spaces_iter str1 \"\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"([A-Z])\" str1 \" \\\\1\"))\n",
    "  (regexp-replace* #rx\"[A-Z][a-z]+\" str1 (lambda (x) (string-append \" \" x))))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (let loop ([str str1]\n             [result '()])\n    (cond\n      [(empty? str) (list->string (reverse result))]\n      [(char-upcase? (first str))\n       (loop (rest str)\n             (cons (first str)\n                   (cons #\\space\n                         result)))]\n      [else (loop (rest str)\n                  (cons (first str)\n                        result))])))\n",
    "  (regexp-replace* #rx\"[A-Z]\" str1 \" \\\\0\"))\n",
    "  (let loop ([str str1] [result '()])\n    (cond\n      [(empty? str) (apply string (reverse result))]\n      [(char-upcase? (first str)) (loop (rest str) (cons (first str) (cons #\\space result)))]\n      [else (loop (rest str) (cons (first str) result))])))\n"
  ]
}