{
  "name": "mbpp_280_sequential_search",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? item (first dlist)) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([rest (rest dlist)]\n                 [result (sequential_search rest item)])\n             (if (first result)\n                 (list #t (+ 1 (second result)))\n                 (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:15:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:16:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([recurse (sequential_search (rest dlist) item)])\n            (list (first recurse) (+ 1 (second recurse))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([rest (sequential_search (rest dlist) item)])\n       (list (first rest) (+ 1 (second rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7in5qfg2.rkt:15:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7in5qfg2.rkt:16:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7in5qfg2.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([rest (sequential_search (rest dlist) item)])\n            (list (first rest) (+ (second rest) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([res (sequential_search (rest dlist) item)])\n            (list (first res) (+ 1 (second res))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n        [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppylelc24.rkt:14:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppylelc24.rkt:15:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppylelc24.rkt:16:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? (first dlist) item) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? item (car dlist))\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(= item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                 (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (add1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:15:4\nactual:     '(#t 8)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:17:4\nactual:     '(#t 3)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? (first dlist) item) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                 (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (let ([index (add1 (cdr (sequential_search (cdr dlist) item)))]\n            [found? (or (equal? item (car dlist)) (car (sequential_search (cdr dlist) item)))]\n            )\n        (list found? index)\n        )\n      )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpik8s4fyf.rkt:20:4\n\nadd1: contract violation\n  expected: number?\n  given: '(-1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpik8s4fyf.rkt:21:4\n\nadd1: contract violation\n  expected: number?\n  given: '(-1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpik8s4fyf.rkt:22:4\n\nadd1: contract violation\n  expected: number?\n  given: '(-1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([result (sequential_search (rest dlist) item)]\n                 [found (first result)]\n                 [index (second result)])\n            (if found\n                (list #t (+ index 1))\n                (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ((dlist dlist) (index 0))\n    (cond ((null? dlist) (list #f -1))\n          ((equal? (car dlist) item) (list #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [rest-result (sequential_search rest item)]\n            [rest-index (second rest-result)])\n       (if (first rest-result)\n           (list #t (+ rest-index 1))\n           (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ((dlist dlist)\n             (index 0))\n    (cond ((null? dlist) (list #f -1))\n          ((equal? item (car dlist)) (list #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let* ([result (sequential_search (rest dlist) item)]\n                 [found (first result)]\n                 [index (second result)])\n             (if found\n                 (list #t (+ index 1))\n                 (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? item (car dlist))\n            (list #t (length dlist))\n            (search (cdr dlist) item))))\n  (search dlist item))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplnx3akpj.rkt:18:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplnx3akpj.rkt:19:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplnx3akpj.rkt:20:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                 (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [rest-result (sequential_search rest item)])\n       (if (first rest-result)\n           (list #t (+ 1 (second rest-result)))\n           (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? (car dlist) item)\n            (list #t index)\n            (helper (cdr dlist) item (+ index 1)))))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([result (sequential_search (rest dlist) item)]\n                 [found? (first result)]\n                 [index (second result)])\n             (if found?\n                 (list #t (+ index 1))\n                 (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond ((null? dlist) (list #f -1))\n          ((equal? (car dlist) item) (list #t index))\n          (else (helper (cdr dlist) item (+ index 1)))))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let* ([result (sequential_search (rest dlist) item)]\n                 [found (first result)]\n                 [index (second result)])\n             (if found\n                 (list #t (+ index 1))\n                 (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t 0)\n          (let ((rest (sequential_search (cdr dlist) item)))\n            (list (car rest) (+ 1 (cadr rest)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item i)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t i)]\n      [else (search (rest dlist) item (+ i 1))]))\n  (search dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(= item (first dlist)) (list #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (iter dlist item index)\n    (cond\n      [(null? dlist) (list #f -1)]\n      [(equal? (car dlist) item) (list #t index)]\n      [else (iter (cdr dlist) item (+ index 1))]))\n  (iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) #f]\n        [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n        [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd8m46kci.rkt:14:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd8m46kci.rkt:15:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd8m46kci.rkt:16:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? item (first dlist)) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? item (car dlist))\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist]\n             [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t (add1 (length (rest dlist))))]\n        [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08i5akn1.rkt:14:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08i5akn1.rkt:15:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08i5akn1.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t 0)\n          (let ((rest-result (sequential_search (cdr dlist) item)))\n            (list (car rest-result) (+ 1 (cadr rest-result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? item (car dlist))\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpct3k1h26.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist]\n             [index 0])\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [result (sequential_search rest item)])\n       (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (add1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:15:4\nactual:     '(#t 8)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:17:4\nactual:     '(#t 3)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n             (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:15:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:16:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? item (first dlist)) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? item (car dlist))\n          (list #t 0)\n          (let ((rest (sequential_search (cdr dlist) item)))\n            (list (car rest) (+ 1 (cadr rest)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? (first dlist) item) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let* ([result (sequential_search (rest dlist) item)]\n                 [found? (first result)]\n                 [index (second result)])\n            (if found?\n                (list #t (+ index 1))\n                (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:15:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:16:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let* ([rec (sequential_search (rest dlist) item)]\n                 [found (first rec)]\n                 [index (second rec)])\n            (if found\n                (list #t (+ index 1))\n                (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ((dlist dlist) (index 0))\n    (cond ((null? dlist) (list #f -1))\n          ((equal? item (car dlist)) (list #t index))\n          (else (loop (cdr dlist) (add1 index))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (let ([index (add1 (cdr (sequential_search (cdr dlist) item)))]\n            [found? (or (equal? (car dlist) item) (car (sequential_search (cdr dlist) item)))]\n            )\n        (list found? index)\n        )\n      )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9owgf8o4.rkt:20:4\n\nadd1: contract violation\n  expected: number?\n  given: '(-1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9owgf8o4.rkt:21:4\n\nadd1: contract violation\n  expected: number?\n  given: '(-1)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9owgf8o4.rkt:22:4\n\nadd1: contract violation\n  expected: number?\n  given: '(-1)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let* ([result (sequential_search (rest dlist) item)]\n            [found? (first result)]\n            [index (second result)])\n       (if found?\n           (list #t (+ 1 index))\n           (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([rest (sequential_search (rest dlist) item)])\n            (list (first rest) (+ 1 (second rest))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(= item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (sequential_search-iter dlist item index)\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? (first dlist) item) (list #t index)]\n          [else (sequential_search-iter (rest dlist) item (+ index 1))]))\n  (sequential_search-iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (iter dlist item index)\n    (cond ((null? dlist) (list #f -1))\n          ((equal? item (car dlist)) (list #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(null? dlist) (list #f -1)]\n    [(equal? (car dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (cdr dlist) item)])\n            (list (car result) (+ 1 (cadr result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(= (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? item (car dlist))\n          (list #t 0)\n          (let ((rest-result (sequential_search (cdr dlist) item)))\n            (list (car rest-result) (+ 1 (cadr rest-result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                 (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(= item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (iter dlist item pos)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(= item (first dlist)) (list #t pos)]\n      [else (iter (rest dlist) item (+ pos 1))]))\n  (iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? (first dlist) item) (list #t index)]\n          [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (add1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:15:4\nactual:     '(#t 8)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:17:4\nactual:     '(#t 3)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (search (rest dlist) item (+ index 1))]))\n  (search dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (sequential_search_iter dlist item index)\n    (cond ((null? dlist) (list #f -1))\n          ((equal? (car dlist) item) (list #t index))\n          (else (sequential_search_iter (cdr dlist) item (+ index 1)))))\n  (sequential_search_iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ((dlist dlist) (index 0))\n    (cond ((null? dlist) (list #f -1))\n          ((equal? (car dlist) item) (list #t index))\n          (else (loop (cdr dlist) (+ index 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ((dlist dlist) (index 0))\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? (car dlist) item)\n            (list #t index)\n            (loop (cdr dlist) (+ index 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? (first dlist) item) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([rest (rest dlist)]\n                 [rest-result (sequential_search rest item)]\n                 [rest-index (second rest-result)])\n            (if (first rest-result)\n                (list #t (+ 1 rest-index))\n                (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper lst i)\n    (cond ((null? lst) (list #f -1))\n          ((equal? (car lst) item) (list #t i))\n          (else (helper (cdr lst) (+ i 1)))))\n  (helper dlist 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (add1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:15:4\nactual:     '(#t 8)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:17:4\nactual:     '(#t 3)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (if (first result)\n                (list #t (+ 1 (second result)))\n                (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([result (sequential_search (rest dlist) item)])\n       (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (first dlist) item)\n          (list #t 0)\n          (let ((rest-result (sequential_search (rest dlist) item)))\n            (list (first rest-result) (+ 1 (second rest-result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (iter dlist item index)\n    (cond ((null? dlist) (list #f -1))\n          ((equal? (car dlist) item) (list #t index))\n          (else (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item index)\n    (cond ((null? dlist) (list #f -1))\n          ((equal? item (car dlist)) (list #t index))\n          (else (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (iter dlist item index)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? (car dlist) item)\n            (list #t index)\n            (iter (cdr dlist) item (+ index 1)))))\n  (iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([rec (sequential_search (rest dlist) item)]\n                 [found (first rec)]\n                 [index (second rec)])\n            (if found\n                (list #t (+ index 1))\n                (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item index)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? (car dlist) item)\n            (list #t index)\n            (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (sequential_search_iter dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (sequential_search_iter (rest dlist) item (+ index 1))]))\n  (sequential_search_iter dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item index)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? item (car dlist))\n            (list #t index)\n            (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:15:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:16:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item index)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? (car dlist) item)\n            (list #t index)\n            (search (cdr dlist) item (+ index 1)))))\n  (search dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t 0)\n          (let ((rest-result (sequential_search (cdr dlist) item)))\n            (list (car rest-result) (+ 1 (cadr rest-result)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t 0)\n          (let ((result (sequential_search (cdr dlist) item)))\n            (if (car result)\n                (list #t (+ 1 (cadr result)))\n                (list #f -1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([rest (rest dlist)]\n                 [rest-result (sequential_search rest item)])\n             (list (first rest-result) (+ 1 (second rest-result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (let loop ([dlist dlist] [index 0])\n    (cond [(empty? dlist) (list #f -1)]\n          [(equal? item (first dlist)) (list #t index)]\n          [else (loop (rest dlist) (+ index 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (search dlist item)\n    (if (null? dlist)\n        (list #f -1)\n        (if (equal? (car dlist) item)\n            (list #t (length dlist))\n            (search (cdr dlist) item))))\n  (search dlist item))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphti2w2ni.rkt:18:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphti2w2ni.rkt:19:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphti2w2ni.rkt:20:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (add1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:15:4\nactual:     '(#t 8)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:17:4\nactual:     '(#t 3)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? item (first dlist)) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:15:4\nactual:     '(#t 6)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:16:4\nactual:     '(#t 0)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi6sks3di.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([rest-result (sequential_search (rest dlist) item)])\n       (list (first rest-result) (+ 1 (second rest-result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124129,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (add1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:15:4\nactual:     '(#t 8)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:16:4\nactual:     '(#t 2)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vp5okh4.rkt:17:4\nactual:     '(#t 3)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:16:4\nactual:     '(#t 7)\nexpected:   '(#t 3)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:17:4\nactual:     '(#t 1)\nexpected:   '(#t 7)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz7pm4c_w.rkt:18:4\nactual:     '(#t 2)\nexpected:   '(#t 6)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let* ([rest (rest dlist)]\n            [rest-result (sequential_search rest item)])\n       (if (first rest-result)\n           (list #t (+ 1 (second rest-result)))\n           (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124127,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([result (sequential_search (rest dlist) item)]\n                 [found? (first result)]\n                 [index (second result)])\n             (if found?\n                 (list #t (+ index 1))\n                 (list #f -1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1666124126,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
      "timestamp": 1665509680,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}