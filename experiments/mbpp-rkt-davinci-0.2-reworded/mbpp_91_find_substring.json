{
  "name": "mbpp_91_find_substring",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if a string is present as a substring in a given list of string values.\n(define (find_substring str1 sub_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_substring))\n    (check-equal? (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"ack\") #t)\n    (check-equal? (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"abc\") #f)\n    (check-equal? (candidate (list \"red\" \"black\" \"white\" \"green\" \"orange\") \"ange\") #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond ((null? str1) #f)\n        ((string-contains? (car str1) sub_str) #t)\n        (else (find_substring (cdr str1) sub_str))))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? sub_str (string-append (first str1) (second str1))) #t]\n    [else (find_substring (rest str1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(equal? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond ((null? str1) #f)\n        ((string-contains? (car str1) sub_str) #t)\n        (else (find_substring (cdr str1) sub_str))))\n",
    "  (define (iter str1 sub_str)\n    (if (string=? sub_str \"\")\n        #t\n        (if (string=? str1 \"\")\n            #f\n            (if (string=? (substring str1 0 1) (substring sub_str 0 1))\n                (iter (substring str1 1) (substring sub_str 1))\n                (iter (substring str1 1) sub_str)))))\n  (iter str1 sub_str))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1 (string-length str1)) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) false]\n    [(equal? (substring str1 0 (string-length sub_str)) sub_str) true]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond ((null? str1) #f)\n        ((string=? sub_str (car str1)) #t)\n        (else (find_substring (cdr str1) sub_str))))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) false]\n    [(string=? sub_str (substring str1 0 (string-length sub_str))) true]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(string=? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n",
    "  (if (string=? str1 sub_str)\n      #t\n      (if (string-contains str1 sub_str)\n          #t\n          #f)))\n",
    "  (cond\n    [(empty? str1) #f]\n    [(equal? (substring str1 0 (string-length sub_str)) sub_str) #t]\n    [else (find_substring (substring str1 1) sub_str)]))\n"
  ]
}