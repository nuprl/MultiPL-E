{
  "name": "mbpp_419_round_and_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n(define (round_and_sum list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate round_and_sum))\n    (check-equal? (candidate (list 22.4 4.0 -16.22 -9.1 11.0 -12.22 14.2 -5.2 17.5)) 243)\n    (check-equal? (candidate (list 5 2 9 24.3 29)) 345)\n    (check-equal? (candidate (list 25.0 56.7 89.2)) 513)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (round_and_sum_iter list1 sum length)\n    (if (null? list1)\n        (* sum length)\n        (round_and_sum_iter (cdr list1) (+ sum (round (car list1))) (+ length 1))))\n  (round_and_sum_iter list1 0 0))\n",
    "  (let ([sum 0])\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (define (round_and_sum_iter list1 sum len)\n    (if (null? list1)\n        (* sum len)\n        (round_and_sum_iter (cdr list1) (+ sum (round (car list1))) len)))\n  (round_and_sum_iter list1 0 (length list1)))\n",
    "  (let ((sum 0))\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (define (round_and_sum_iter list1 sum)\n    (if (null? list1)\n        (* sum (length list1))\n        (round_and_sum_iter (cdr list1) (+ sum (round (car list1))))))\n  (round_and_sum_iter list1 0))\n",
    "  (define (round_and_sum_iter list1 sum count)\n    (if (null? list1)\n        (* sum count)\n        (round_and_sum_iter (cdr list1) (+ sum (round (car list1))) (+ count 1))))\n  (round_and_sum_iter list1 0 0))\n</code>\n",
    "  (let ((sum 0))\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (let ([sum 0])\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (letrec ([sum 0]\n           [round_and_sum (lambda (list1)\n                            (cond\n                              [(empty? list1) (* sum (length list1))]\n                              [else (begin\n                                      (set! sum (+ sum (round (first list1))))\n                                      (round_and_sum (rest list1))))]))])\n    (round_and_sum list1)))\n",
    "  (let ((sum 0)\n        (len (length list1)))\n    (for ([x list1])\n      (set! sum (+ sum (round x))))\n    (* sum len)))\n",
    "  (let ((sum 0))\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (let ((sum 0))\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (letrec ([round-list (lambda (list1)\n                        (if (null? list1)\n                            '()\n                            (cons (round (car list1)) (round-list (cdr list1)))))])\n    (* (apply + (round-list list1)) (length list1))))\n",
    "  (define (round_and_sum_iter list1 sum)\n    (if (null? list1)\n        (* sum (length list1))\n        (round_and_sum_iter (cdr list1) (+ sum (round (car list1))))))\n  (round_and_sum_iter list1 0))\n",
    "  (letrec ([round (lambda (x) (round x))]\n           [sum (lambda (list2)\n                  (cond [(empty? list2) 0]\n                        [else (+ (round (first list2)) (sum (rest list2)))]))])\n    (* (sum list1) (length list1))))\n",
    "  (letrec ([round-list (map round list1)]\n           [sum (apply + round-list)])\n    (* sum (length list1))))\n",
    "  (let ((sum 0))\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n",
    "  (letrec ([round (lambda (l)\n                    (if (null? l)\n                        '()\n                        (cons (round (car l)) (round (cdr l)))))]\n           [sum (lambda (l)\n                  (if (null? l)\n                      0\n                      (+ (car l) (sum (cdr l)))))]\n           [mult (lambda (l)\n                   (* (sum l) (length l)))])\n    (mult (round list1))))\n",
    "  (define (round_and_sum_iter list1 sum len)\n    (if (null? list1)\n        (* sum len)\n        (round_and_sum_iter (cdr list1) (+ sum (round (car list1))) len)))\n  (round_and_sum_iter list1 0 (length list1)))\n",
    "  (let ((sum 0))\n    (for ([i list1])\n      (set! sum (+ sum (round i))))\n    (* sum (length list1))))\n"
  ]
}