{
  "name": "mbpp_20_is_woodall",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if the given number is woodball or not.\n(define (is_woodall x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_woodall))\n    (check-equal? (candidate 383) #t)\n    (check-equal? (candidate 254) #f)\n    (check-equal? (candidate 200) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((zero? (modulo x n)) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((zero? (modulo x n)) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (is-woodall? x)\n    (define (is-woodall-iter x n)\n      (cond ((= x 1) #t)\n            ((= x n) #f)\n            ((is-prime? n) (is-woodall-iter (- x n) (+ n 1)))\n            (else (is-woodall-iter x (+ n 1)))))\n    (is-woodall-iter x 1))\n  (is-woodall? x))\n",
    "  (let loop ([x x] [i 2])\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [else (loop x (+ i 1))])))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor x 2) x))\n  (define (is_woodall-helper x n)\n    (cond ((= x 1) #t)\n          ((= x n) #f)\n          ((is_prime x) (is_woodall-helper (/ x n) n))\n          (else (is_woodall-helper x (+ n 1)))))\n  (is_woodall-helper x 2))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((is-prime? n) (iter (- n 1)))\n          (else #f)))\n  (iter x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (if (= x 1)\n      #t\n      (if (= (modulo x 2) 0)\n          (is_woodall (/ x 2))\n          (is_woodall (* x 3) (+ x 1)))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (modulo x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_power_of_2 x)\n    (cond\n      [(= x 1) #t]\n      [(= (modulo x 2) 0) (is_power_of_2 (/ x 2))]\n      [else #f]))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2? x)\n    (cond ((= x 1) #t)\n          ((= (modulo x 2) 0) (is_power_of_2? (/ x 2)))\n          (else #f)))\n  (and (is_prime? x) (is_power_of_2? x)))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (is-prime-helper x 3))))\n  (define (is-prime-helper x i)\n    (cond ((&gt; i (sqrt x)) #t)\n          ((= (remainder x i) 0) #f)\n          (else (is-prime-helper x (+ i 2)))))\n  (define (is-woodall-helper x i)\n    (cond ((&gt; i (sqrt x)) #t)\n          ((= (remainder x i) 0) (is-woodall-helper (* x i) i))\n          (else (is-woodall-helper x (+ i 2)))))\n  (cond ((is_prime x) #f)\n        ((= x 1) #f)\n        (else (is-woodall-helper x 3))))\n</code>\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (modulo x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (if (= n 1)\n        #t\n        (if (is_prime n)\n            (if (= (expt n x) x)\n                (is_woodall-helper x (- n 1))\n                #f)\n            (is_woodall-helper x (- n 1)))))\n  (is_woodall-helper x x))\n",
    "  (if (zero? x)\n      #t\n      (let ([n (integer-sqrt x)])\n        (if (= x (* n n))\n            (is_woodall (+ n 1))\n            #f))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (modulo x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (modulo x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (let loop ([n x])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n 2) 0) (loop (/ n 2))]\n      [(= (modulo n 3) 0) (loop (/ n 3))]\n      [(= (modulo n 5) 0) (loop (/ n 5))]\n      [else #f])))\n",
    "  (define (is-power-of-2? x)\n    (if (= x 1)\n        #t\n        (if (= (remainder x 2) 0)\n            (is-power-of-2? (/ x 2))\n            #f)))\n  (if (is-power-of-2? x)\n      (if (= (remainder x 2) 0)\n          #t\n          #f)\n      #f))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (is-prime-rec x 3))))\n  (define (is-prime-rec x i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (is-prime-rec x (+ i 2)))))\n  (define (is-woodall-rec x i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (is-woodall-rec x (+ i 1)))))\n  (is-woodall-rec x 2))\n",
    "  (define (is-prime? x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(= (remainder x 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i (sqrt x)) #t]\n           [(= (remainder x i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [else (iter (+ i 1))]))\n  (and (is-prime? x) (iter 2)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond ((= i x) #t)\n          ((not (is_prime i)) (is_woodall-iter x (+ i 1)))\n          ((not (= (remainder (* x i) (+ i 1))) 0) #f)\n          (else (is_woodall-iter x (+ i 1)))))\n  (is_woodall-iter x 2))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((not (is-prime? i)) #f)\n            ((= (remainder n i) 0) (iter (- i 1)))\n            (else #f)))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (is_woodall? n)\n    (cond\n      [(= n 1) #t]\n      [(= (remainder n 2) 0) #f]\n      [(is_prime? n) #f]\n      [else (is_woodall? (+ 1 (* n 2)))]))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor x 2) x))\n  (define (is_woodall? x)\n    (define (is_woodall-iter x n)\n      (cond ((= n x) #t)\n            ((is_prime n) (is_woodall-iter x (+ n 1)))\n            (else #f)))\n    (is_woodall-iter x 2))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is_power_of_2 (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(even? x) #f]\n      [else\n       (define (iter n)\n         (cond\n           [(= n 1) #t]\n           [(= (modulo x n) 0) #f]\n           [else (iter (- n 1))]))\n       (iter (- x 1))]))\n  (define (iter n)\n    (cond\n      [(= n 1) #t]\n      [(= (modulo x n) 0) #f]\n      [else (iter (- n 1))]))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is-prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((not (is-prime n)) #f)\n            ((not (= (expt n 2) (* x n))) #f)\n            (else (iter (- n 1)))))\n    (iter x))\n  (is-woodall x))\n",
    "  (if (and (integer? x)\n           (not (zero? x)))\n      (let loop ((n x)\n                 (i 1))\n        (if (= n 1)\n            #t\n            (if (zero? (modulo n i))\n                (if (and (not (zero? (modulo i 2)))\n                         (= (modulo i 2) (modulo n i)))\n                    (loop (/ n i) i)\n                    #f)\n                (loop n (+ i 1)))))\n      #f))\n",
    "  (define (is-prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((is-prime i) (if (= (expt 2 i) (+ x 1)) #t (iter (+ i 1))))\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* 2 x))\n       (is_prime? (* 3 x))\n       (is_prime? (* 4 x))\n       (is_prime? (* 5 x))\n       (is_prime? (* 6 x))))\n",
    "  (and (integer? x)\n       (and (not (zero? x))\n            (and (not (zero? (modulo x 2)))\n                 (and (not (zero? (modulo x 5)))\n                      (and (not (zero? (modulo x 3)))\n                           (and (not (zero? (modulo x 7)))\n                                (and (not (zero? (modulo x 11)))\n                                     (not (zero? (modulo x 13))))))))))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= (expt 2 n) x) #t)\n          ((&gt; (expt 2 n) x) #f)\n          (else (is_woodall-helper x (+ n 1)))))\n  (and (is_prime x) (is_woodall-helper x 1)))\n</code>\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) (and (is-prime? i) (iter (- i 1))))\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* x 2))\n       (is_prime? (* x 3))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((not (is-prime? i)) #f)\n            ((not (= (expt i 2) (* n i))) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (cond ((is_prime x) #f)\n        ((is_woodall-helper x (- x 1)) #t)\n        (else #f)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (modulo x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (if (= x 1)\n        #t\n        (if (= (modulo x 2) 0)\n            (is_power_of_2 (/ x 2))\n            #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x)\n       (is_prime? (* x 2))\n       (is_prime? (* x 3))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_power x)\n    (define (iter n)\n      (cond\n        [(= n 1) #f]\n        [(= (expt n 2) x) #t]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is_prime x) (is_power x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x)\n       (iter (- x 1))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x)\n       (is-prime? (* x 2))\n       (is-prime? (* x 3))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-helper x i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (is_woodall-helper x (+ i 1)))))\n  (is_woodall-helper x 2))\n",
    "  (let loop ([n x])\n    (cond\n      [(= n 1) #t]\n      [(= n 2) #f]\n      [(= n 3) #f]\n      [(= n 4) #f]\n      [(= n 5) #f]\n      [(= n 6) #f]\n      [(= n 7) #f]\n      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #f]\n      [(= n 12) #f]\n      [(= n 13) #f]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #f]\n      [(= n 18) #f]\n      [(= n 19) #f]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #f]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #f]\n      [(= n 30) #f]\n      [(= n 31) #f]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #f]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #f]\n      [(= n 42) #f]\n      [(= n 43) #f]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #f]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(= n 50) #f",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond\n      [(= x 1) #t]\n      [(= (remainder x 2) 0) (is_power_of_2 (/ x 2))]\n      [else #f]))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(not (is-prime? i)) #f]\n        [(not (= (expt n i) (+ 1 (* i n)))) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_power? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) (is_power? (/ x n))]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_power? x)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-helper x n)\n    (cond ((= x 1) #t)\n          ((= (remainder x n) 0) (is_woodall-helper (/ x n) n))\n          ((is_prime n) (is_woodall-helper x (+ n 1)))\n          (else #f)))\n  (is_woodall-helper x 2))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((&lt; n 1) #f)\n          ((= n 1) #t)\n          ((is-prime? n) (iter (- n 1)))\n          (else (iter (- n 1)))))\n  (iter x))\n",
    "  (if (= x 1)\n      #t\n      (if (= (modulo x 2) 0)\n          (is_woodall (/ x 2))\n          (is_woodall (* x 3) (+ 1 x)))))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((not (is-prime? i)) #f)\n          ((not (= (expt i 2) (* x i))) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else (is_prime-iter 3 n)]))\n  (define (is_prime-iter i n)\n    (cond\n      [(= i n) #t]\n      [(= (remainder n i) 0) #f]\n      [else (is_prime-iter (+ i 2) n)]))\n  (define (is_woodall-iter x n)\n    (cond\n      [(= x n) #t]\n      [(= (remainder x n) 0) #f]\n      [else (is_woodall-iter x (+ n 1))]))\n  (cond\n    [(not (is_prime x)) #f]\n    [(= (remainder x 10) 3) #f]\n    [else (is_woodall-iter x 1)]))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is-prime? (next-odd n) 2))))\n  (define (next-odd n)\n    (if (even? n)\n        (+ n 1)\n        (+ n 2)))\n  (define (is-prime? n d)\n    (cond ((> (* d d) n) #t)\n          ((= (remainder n d) 0) #f)\n          (else (is-prime? n (+ d 2)))))\n  (define (is-woodall? n)\n    (if (is-prime? n)\n        (is-prime? (* n n) 2)\n        #f))\n  (is-woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter x)\n      (cond ((= x 1) #t)\n            ((= (remainder n x) 0) #f)\n            (else (iter (- x 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter x)\n      (cond ((= x 1) #t)\n            ((= (remainder n x) 0) #f)\n            (else (iter (- x 1)))))\n    (iter (- n 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is_woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (if (zero? x)\n      #t\n      (let ((n (quotient x 2))\n            (m (remainder x 2)))\n        (and (is_woodall n)\n             (is_woodall m)))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [(is_prime i) (is_woodall-iter x (+ i 1))]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 2))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x)\n       (is-prime? (* x 2))\n       (is-prime? (* x 3))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((= i x) #t)\n                   ((= 0 (modulo x i)) #f)\n                   (else (loop (+ i 2))))))))\n  (define (is_power_of_2 x)\n    (cond ((= x 1) #t)\n          ((= 0 (modulo x 2)) (is_power_of_2 (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((&gt; i (sqrt x)) #t)\n                   ((= (remainder x i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((even? x) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n                  (cond ((= i n) #t)\n                        ((= (remainder n i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (is-woodall? n)\n    (cond ((= n 1) #t)\n          ((= n 2) #t)\n          ((= n 3) #f)\n          ((= n 4) #f)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #f)\n          ((= n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #f)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #f)\n          ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #f)\n          ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n          ((= n 36) #f)\n          ((= n 37) #f)\n          ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #f)\n          ((= n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (if (= n 1)\n        #t\n        (if (is_prime n)\n            (if (= (expt n x) x)\n                (is_woodall-helper x (- n 1))\n                #f)\n            (is_woodall-helper x (- n 1)))))\n  (is_woodall-helper x x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n</code>\n",
    "  (define (is_prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is_woodall? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) (is_prime? i))\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is_woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((> i (/ x 2)) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n  (and (is-prime? x) (iter 2)))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          (else (not (any (lambda (i) (= (modulo n i) 0))\n                          (range 2 n))))))\n  (and (is-prime? x)\n       (is-prime? (+ 1 (* x x)))\n       (is-prime? (+ 2 (* x x x)))))\n",
    "  (let loop ([n x] [i 1])\n    (if (= n 1)\n        #t\n        (if (= (remainder n i) 0)\n            (loop (/ n i) (+ i 1))\n            #f))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((= (modulo x 2) 0) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is-prime? n)\n    (define (iter k)\n      (cond ((&gt; k (sqrt n)) #t)\n            ((= (modulo n k) 0) #f)\n            (else (iter (+ k 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter k)\n      (cond ((&gt; k (sqrt n)) #t)\n            ((and (is-prime? k) (= (modulo n k) 0)) (is-woodall? (/ n k)))\n            (else (iter (+ k 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (iter i)\n    (cond ((= i 1) #t)\n          ((= (modulo x i) 0) #f)\n          (else (iter (- i 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (let loop ((n x))\n    (if (= n 1)\n        #t\n        (if (zero? (remainder n 2))\n            (loop (/ n 2))\n            (loop (* n 3))))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (modulo x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(= (modulo x i) 0) #f]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) (iter (/ x n)))\n            (else #f)))\n    (iter 2))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (is-woodall? n)\n    (define (is-woodall-iter n m)\n      (cond ((= n 1) #t)\n            ((= n 0) #f)\n            ((= n m) #f)\n            ((is-prime? m) (is-woodall-iter (- n m) (+ m 1)))\n            (else (is-woodall-iter n (+ m 1)))))\n    (is-woodall-iter n 1))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is_power_of_2 (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (and (is_prime x) (is_woodall-helper (* x x) x)))\n",
    "  (define (is-prime? n)\n    (define (iter x)\n      (cond ((= x 1) #t)\n            ((= (remainder n x) 0) #f)\n            (else (iter (- x 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter x)\n      (cond ((= x 1) #t)\n            ((= (remainder n x) 0) #f)\n            (else (iter (- x 1)))))\n    (iter (- (expt 2 n) 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (iter n x)\n    (if (= n 1)\n        #t\n        (if (= (modulo x n) 0)\n            (iter (- n 1) (/ x n))\n            #f)))\n  (iter x x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_power? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) (is_power? (/ x n))]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_power? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 0) #t)\n            ((not (is-prime? i)) #f)\n            (else (iter (- i 1)))))\n    (iter n))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_square x)\n    (define (iter n)\n      (cond ((= n x) #t)\n            ((&gt; n x) #f)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is_prime x) (is_square (* x 2 1))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= x 1) #t)\n          ((= (remainder x n) 0) (is_woodall-helper (/ x n) n))\n          (else (is_woodall-helper x (+ n 1)))))\n  (cond ((is_prime x) #f)\n        ((= (remainder x 2) 0) (is_woodall-helper x 2))\n        (else (is_woodall-helper x 3))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x) #t\n          (if (= (remainder x i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (if (= x i) #t\n        (if (and (is_prime i) (is_prime (* x i)))\n            (is_woodall-iter x (+ i 1))\n            #f)))\n  (is_woodall-iter x 1))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [(is_prime i) (is_woodall-iter x (+ i 1))]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 2))\n",
    "  (let loop ([n x])\n    (cond\n      [(= n 1) #t]\n      [(= (modulo n 2) 0) (loop (/ n 2))]\n      [else (loop (* n 3))])))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-iter x (- n 1)))))\n  (is_woodall-iter x x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= x 1) #t)\n          ((= (remainder x n) 0) (is_woodall-helper (/ x n) n))\n          ((is_prime n) (is_woodall-helper x (+ n 1)))\n          (else (is_woodall-helper x (+ n 1)))))\n  (is_woodall-helper x 2))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) (and (is-prime? n) (iter (- x 1))))\n          (else (iter (- x 1)))))\n  (iter x))\n",
    "  (define (is-prime? x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(even? x) #f]\n      [else\n       (define (iter n)\n         (cond\n           [(= n x) #t]\n           [(zero? (modulo x n)) #f]\n           [else (iter (+ n 1))]))\n       (iter 3)]))\n  (define (iter n)\n    (cond\n      [(= n x) #t]\n      [(not (is-prime? n)) #f]\n      [else (iter (* n n))]))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime x)\n       (= (expt 2 x) (+ x (* 2 (expt 2 (- x 1)))))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (zero? (modulo x i))\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_power_of_2 x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (zero? (modulo x i))\n              (iter (* i 2))\n              #f)))\n    (iter 2))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x)\n       (is-prime? (* 2 x))\n       (is-prime? (* 3 x))\n       (is-prime? (* 4 x))\n       (is-prime? (* 5 x))\n       (is-prime? (* 6 x))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is_power_of_2 (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (iter i)\n    (cond ((= i 1) #t)\n          ((= (remainder x i) 0) (and (is_prime i) (iter (- i 1))))\n          (else (iter (- i 1)))))\n  (iter (- x 1)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n x)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (+ n 1)))))\n    (iter 2))\n  (define (is_woodall-helper x)\n    (if (= x 1)\n        #t\n        (if (is_prime x)\n            (is_woodall-helper (/ x 2))\n            #f)))\n  (is_woodall-helper x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- (* x 2) 1)))\n  (if (is-prime? x)\n      (is-woodall? x)\n      #f))\n",
    "  (define (is_prime x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt; i (sqrt x)) #t)\n                        ((= (remainder x i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (let loop ((x x))\n    (cond ((= x 1) #t)\n          ((is_prime x) #f)\n          (else (loop (quotient x 2))))))\n",
    "  (and (not (zero? x))\n       (equal? (expt 2 (sub1 x))\n               (add1 (expt 3 x)))))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-helper x i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (is_woodall-helper x (+ i 1)))))\n  (and (is_prime x) (is_woodall-helper (* x x) 1)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((not (is-prime? i)) #f)\n            (else (iter (* i i)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x i)\n    (cond ((= i 0) #t)\n          ((is_prime (+ x (* i i))) (is_woodall-iter x (- i 1)))\n          (else #f)))\n  (is_woodall-iter x (- x 1)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) #f]\n      [else (iter (+ i 1))]))\n  (define (iter2 i)\n    (cond\n      [(= i x) #t]\n      [(= (remainder x i) 0) (is_prime i)]\n      [else (iter2 (+ i 1))]))\n  (and (iter2 2) (iter 2)))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is-prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x i)\n    (cond ((= i 1) #t)\n          ((= (modulo x i) 0) (is_woodall-iter x (- i 1)))\n          ((is_prime i) #f)\n          (else (is_woodall-iter x (- i 1)))))\n  (is_woodall-iter x x))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (for/and ([i (in-range 3 (floor (sqrt n)))])\n                   (not (zero? (modulo n i)))))))\n  (define (is-power-of-2? n)\n    (cond ((= n 0) #f)\n          ((= n 1) #t)\n          (else (and (even? n) (is-power-of-2? (/ n 2))))))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo x i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- x 1)))\n  (define (is_square x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(< i x) (iter (+ i 1))]\n        [else #f]))\n    (iter 1))\n  (and (is_prime x) (is_square (* x 2 1))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x n)\n    (cond ((= n 1) #t)\n          ((= (modulo x n) 0) (is_woodall-iter x (- n 1)))\n          (else #f)))\n  (and (is_prime x) (is_woodall-iter x x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is-prime x)\n    (define (iter i)\n      (cond ((> i (sqrt x)) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((not (is-prime i)) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (if (= x 1)\n      #t\n      (if (and (integer? (/ x 2))\n               (is_woodall (/ x 2)))\n          #t\n          (if (and (integer? (/ x 3))\n                   (is_woodall (/ x 3)))\n              #t\n              (if (and (integer? (/ x 5))\n                       (is_woodall (/ x 5)))\n                  #t\n                  #f)))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (if (= n 1)\n        #t\n        (if (is_prime x)\n            (is_woodall-helper (* x x) (- n 1))\n            #f)))\n  (is_woodall-helper x 2))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-pow-of-2? x)\n    (if (= x 1)\n        #t\n        (if (= (remainder x 2) 0)\n            (is-pow-of-2? (/ x 2))\n            #f)))\n  (and (is-prime? x) (is-pow-of-2? x)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n x) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (+ n 1))]))\n    (iter 2))\n  (define (is_woodall-iter n)\n    (cond\n      [(= n x) #t]\n      [(= (remainder x n) 0) #f]\n      [else (is_woodall-iter (+ n 1))]))\n  (and (is_prime x) (is_woodall-iter 2)))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          (else (not (any (lambda (x) (= (modulo n x) 0)) (range 2 n))))))\n  (and (is-prime? x)\n       (is-prime? (* x 2))\n       (is-prime? (* x 3))))\n",
    "  (let loop ([n x])\n    (if (= n 1)\n        #t\n        (if (zero? (modulo n 2))\n            (loop (/ n 2))\n            (loop (* n 3))))))\n",
    "  (define (is-prime? x)\n    (cond ((= x 1) #f)\n          ((= x 2) #t)\n          ((even? x) #f)\n          (else (let loop ((i 3))\n                  (cond ((= i x) #t)\n                        ((= (remainder x i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (define (is-power-of-2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is-power-of-2? (/ x 2)))\n          (else #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          ((is-prime? n) #f)\n          (else (iter (- n 1)))))\n  (iter (- x 1)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i 0) #t)\n            ((not (is-prime? i)) #f)\n            (else (iter (- n (* i i))))))\n    (iter n))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (if (is-prime? x)\n      (is-woodall? x)\n      #f))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (let loop ([x x] [n 1])\n    (if (= x 1)\n        #t\n        (if (zero? (modulo x n))\n            (loop (quotient x n) (+ n 1))\n            #f))))\n",
    "  (and (integer? x)\n       (and (not (= x 1))\n            (not (= x 2))\n            (not (= x 4))\n            (not (= x 8))\n            (not (= x 16))\n            (not (= x 32))\n            (not (= x 64))\n            (not (= x 128))\n            (not (= x 256))\n            (not (= x 512))\n            (not (= x 1024))\n            (not (= x 2048))\n            (not (= x 4096))\n            (not (= x 8192))\n            (not (= x 16384))\n            (not (= x 32768))\n            (not (= x 65536))\n            (not (= x 131072))\n            (not (= x 262144))\n            (not (= x 524288))\n            (not (= x 1048576))\n            (not (= x 2097152))\n            (not (= x 4194304))\n            (not (= x 8388608))\n            (not (= x 16777216))\n            (not (= x 33554432))\n            (not (= x 67108864))\n            (not (= x 134217728))\n            (not (= x 268435456))\n            (not (= x 536870912))\n            (not (= x 1073741824))\n            (not (= x 2147483648))\n            (not (= x 4294967296))\n            (not (= x 8589934592))\n            (not (= x 17179869184))\n            (not (= x 34359738368))\n            (not (= x 68719476736))\n            (not (= x 137438953472))\n            (not (= x 274877906944))\n            (not (= x 549755813888))\n            (not (= x 1099511627776))\n            (not (= x 2199023255552))\n            (not (= x 4398046511104))\n            (not (= x 8796093022208))\n            (not (= x 17592186044416))\n            (not (= x 35184372088832))\n            (not (= x 70368744177664))\n            (not (= x 140737488355328",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime x)\n    (define (iter i)\n      (cond ((> i (/ x 2)) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime x) (iter (- x 1))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is-prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (is_prime (* x 2)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (remainder x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-helper x)\n    (if (= x 1)\n        #t\n        (if (is_prime x)\n            (is_woodall-helper (/ x 2))\n            (is_woodall-helper (/ x 3)))))\n  (is_woodall-helper x))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (remainder x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (is_prime? i)\n              (if (= (expt 2 i) (+ x 1))\n                  (iter (+ i 1))\n                  #f)\n              (iter (+ i 1)))))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_power_of_2 x)\n    (cond\n      [(= x 1) #t]\n      [(= (remainder x 2) 0) (is_power_of_2 (/ x 2))]\n      [else #f]))\n  (and (is_prime x) (is_power_of_2 x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((is-prime? n) #f)\n          (else (iter (- n 1)))))\n  (iter x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (modulo x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_square x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (expt i 2) x) #t]\n        [else (iter (+ i 1))]))\n    (iter 1))\n  (and (is_prime x)\n       (is_square (* 2 x))))\n",
    "  (define (iter n)\n    (if (= n 1)\n        #t\n        (if (= (modulo n x) 1)\n            (iter (/ n x))\n            #f)))\n  (iter x))\n",
    "  (define (is_prime x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(= (remainder x 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i x) #t]\n           [(= (remainder x i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter x i)\n    (cond\n      [(= x 1) #t]\n      [(= (remainder x i) 0) #f]\n      [else (iter (/ x i) i)]))\n  (define (iter2 x i)\n    (cond\n      [(= x 1) #t]\n      [(= (remainder x i) 0) (iter2 (/ x i) i)]\n      [else (iter2 x (+ i 1))]))\n  (cond\n    [(not (is_prime x)) #f]\n    [(= x 1) #f]\n    [(= x 2) #t]\n    [(= x 3) #f]\n    [(= x 4) #t]\n    [(= x 5) #f]\n    [(= x 6) #t]\n    [(= x 7) #f]\n    [(= x 8) #t]\n    [(= x 9) #f]\n    [(= x 10) #t]\n    [(= x 11) #f]\n    [(= x 12) #t]\n    [(= x 13) #f]\n    [(= x 14) #t]\n    [(= x 15) #f]\n    [(= x 16) #t]\n    [(= x 17) #f]\n    [(= x 18) #t]\n    [(= x 19) #f]\n    [(= x 20) #t]\n    [(= x 21) #f]\n    [(= x 22) #t]\n    [(= x 23) #f]\n    [(= x 24) #t]\n    [(= x 25) #f]\n    [(= x 26) #t]\n    [(= x 27) #f]\n   ",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= x i) #t]\n      [(= (remainder x i) 0) #f]\n      [(is_prime i) (is_woodall-iter x (+ i 1))]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 2))\n",
    "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          (else (not (any (lambda (i) (= (remainder n i) 0))\n                          (range 2 n))))))\n  (and (is-prime? x)\n       (is-prime? (expt 2 x -1))\n       (is-prime? (expt 2 x -2))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is_woodall? x))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo x i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- x 1)))\n  (define (is_woodall-helper x i)\n    (cond\n      [(= i 1) #t]\n      [(= (modulo x i) 0) (and (is_prime i) (is_woodall-helper x (- i 1)))]\n      [else (is_woodall-helper x (- i 1))]))\n  (is_woodall-helper x x))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x (* n n)) 0) #f)\n          (else (is_woodall-iter (- n 1)))))\n  (and (is_prime x) (is_woodall-iter (- x 1))))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-iter x (- n 1)))))\n  (is_woodall-iter x (* x 2)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is-prime? x) (is-woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (remainder x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (if (= i x)\n        #t\n        (if (is-prime? i)\n            (if (= (expt i 2) x)\n                #t\n                (iter (+ i 1)))\n            (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-power-of-2? x)\n    (if (= x 1)\n        #t\n        (if (= (remainder x 2) 0)\n            (is-power-of-2? (/ x 2))\n            #f)))\n  (and (is-prime? x) (is-power-of-2? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is-woodall? n)\n    (define (iter i)\n      (cond ((&gt; i (sqrt n)) #t)\n            ((and (is-prime? i)\n                  (= (modulo n i) 0))\n             (is-woodall? (/ n i)))\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (if (zero? x)\n      #t\n      (let ([n (expt 2 x)])\n        (and (is-prime n)\n             (is-prime (+ n 1))\n             (is-prime (+ n 2))\n             (is-prime (+ n 3))))))\n",
    "  (let loop ([x x] [n 1])\n    (if (= x 1)\n        #t\n        (if (zero? (modulo x n))\n            (loop (/ x n) (+ n 1))\n            #f))))\n",
    "  (define (is_prime x)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor x 2) x))\n  (define (is_power_of_2? x)\n    (cond ((= x 1) #t)\n          ((= (remainder x 2) 0) (is_power_of_2? (/ x 2)))\n          (else #f)))\n  (and (is_prime x) (is_power_of_2? x)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-helper x n)\n    (cond\n      [(= x n) #t]\n      [(= (remainder x n) 0) #f]\n      [else (is_woodall-helper x (+ n 1))]))\n  (is_woodall-helper x 2))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond\n        [(= i x) #t]\n        [(= (remainder x i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (is_woodall-iter x i)\n    (cond\n      [(= i x) #t]\n      [(and (is_prime i) (= (remainder x i) 0)) (is_woodall-iter (/ x i) i)]\n      [else (is_woodall-iter x (+ i 1))]))\n  (is_woodall-iter x 2))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_square? x)\n    (define (iter n)\n      (cond ((= n x) #t)\n            ((&gt; n x) #f)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is_prime? x) (is_square? (* x 2 1))))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (modulo x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (expt n 2) x)\n                  #t\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is_woodall? x))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter n i)\n    (if (= n 1)\n        #t\n        (if (is_prime i)\n            (if (= (remainder n i) 0)\n                (is_woodall-iter (/ n i) i)\n                (is_woodall-iter n (+ i 1)))\n            (is_woodall-iter n (+ i 1)))))\n  (is_woodall-iter x 2))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (iter n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (iter (- n 1)))))\n  (and (is-prime? x) (iter (- x 1))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((&gt; n (/ x 2)) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (+ n 1)))))\n    (iter 2))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((&gt; n (/ x 2)) #t)\n            ((= (modulo x n) 0)\n             (and (is-prime? n)\n                  (is-prime? (/ x n))))\n            (else (iter (+ n 1)))))\n    (iter 2))\n  (is-woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-square? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((&gt; (* n n) x) #f)\n            (else (iter (+ n 1)))))\n    (iter 1))\n  (and (is-prime? x) (is-square? (* x x))))\n",
    "  (define (is-prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (modulo x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (cond ((not (is-prime? x)) #f)\n        ((= (expt 2 x) (+ 1 (* x x))) #t)\n        (else #f)))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond\n        [(= n 1) #t]\n        [(= (remainder x n) 0) #f]\n        [else (iter (- n 1))]))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond\n      [(= n 1) #t]\n      [(= (remainder x n) 0) #f]\n      [else (is_woodall-helper x (- n 1))]))\n  (is_woodall-helper x (* x x)))\n",
    "  (define (is-prime? x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(even? x) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(= i x) #t]\n           [(= (remainder x i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter i)\n    (cond\n      [(= i x) #t]\n      [(not (is-prime? i)) #f]\n      [(= (expt x i) x) #t]\n      [else (iter (+ i 1))]))\n  (iter 2))\n",
    "  (define (is-prime? x)\n    (define (iter y)\n      (cond ((= y 1) #t)\n            ((zero? (modulo x y)) #f)\n            (else (iter (- y 1)))))\n    (iter (- x 1)))\n  (define (iter y)\n    (cond ((= y 1) #t)\n            ((zero? (modulo x y)) #f)\n            (else (iter (- y 1)))))\n  (iter (- x 1)))\n",
    "  (let loop ([n x])\n    (cond\n      [(= n 1) #t]\n      [(= (remainder n 2) 0) (loop (/ n 2))]\n      [(= (remainder n 3) 0) (loop (/ n 3))]\n      [(= (remainder n 5) 0) (loop (/ n 5))]\n      [else #f])))\n",
    "  (define (helper n)\n    (if (= n 1)\n        #t\n        (if (= (modulo n 2) 0)\n            (helper (/ n 2))\n            (helper (- (* 3 n) 1)))))\n  (helper x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? x)))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter i)\n    (cond ((= i x) #t)\n          ((= (remainder x i) 0) #f)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-helper x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-helper x (- n 1)))))\n  (and (is_prime x) (is_woodall-helper (* x x) x)))\n",
    "  (define (is_prime? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall? x)\n    (define (iter i)\n      (cond ((= i x) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is_woodall? x))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (cond ((= n 1) #t)\n            ((= (remainder x n) 0) #f)\n            (else (iter (- n 1)))))\n    (iter (- x 1)))\n  (and (is_prime? x) (is_woodall? (* x 2))))\n",
    "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (remainder n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (define (iter i)\n    (cond\n      [(= i 1) #t]\n      [(= (remainder x i) 0) #f]\n      [(is-prime? i) (iter (- i 1))]\n      [else #f]))\n  (iter (- x 1)))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (remainder x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is_woodall-iter x n)\n    (cond ((= n 1) #t)\n          ((= (remainder x n) 0) #f)\n          (else (is_woodall-iter x (- n 1)))))\n  (and (is_prime x) (is_woodall-iter x x)))\n",
    "  (define (is_prime? x)\n    (define (divides? a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (define (is_woodall? x)\n    (define (is_woodall-iter x n)\n      (cond ((= x 1) #t)\n            ((not (is_prime? n)) #f)\n            ((= (remainder x n) 0) (is_woodall-iter (/ x n) n))\n            (else (is_woodall-iter x (+ n 1)))))\n    (is_woodall-iter x 2))\n  (is_woodall? x))\n",
    "  (let loop ([x x])\n    (cond\n      [(= x 1) #t]\n      [(= (remainder x 2) 0) (loop (/ x 2))]\n      [(= (remainder x 3) 0) (loop (/ x 3))]\n      [(= (remainder x 5) 0) (loop (/ x 5))]\n      [else #f])))\n",
    "  (define (is_prime? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (= (remainder x n) 0)\n              #f\n              (iter (- n 1)))))\n    (iter (- x 1)))\n  (define (is_woodall? x)\n    (define (iter n)\n      (if (= n 1)\n          #t\n          (if (is_prime? n)\n              (if (= (remainder x n) 0)\n                  (if (= (quotient x n) 1)\n                      #t\n                      (iter (- n 1)))\n                  (iter (- n 1)))\n              (iter (- n 1)))))\n    (iter x))\n  (is_woodall? x))\n",
    "  (define (is_prime x)\n    (define (iter i)\n      (if (= i x)\n          #t\n          (if (= (modulo x i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define (is_woodall-iter n i)\n    (if (= i n)\n        #t\n        (if (is_prime (+ n (* i i)))\n            #f\n            (is_woodall-iter n (+ i 1)))))\n  (is_woodall-iter x 1))\n",
    "  (define (is-prime? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- x 1)))\n  (define (is-woodall? x)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo x i) 0)\n             (and (is-prime? i) (iter (- x 1))))\n            (else (iter (- i 1)))))\n    (iter x))\n  (is-woodall? x))\n",
    "  (define (is-prime? x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(even? x) #f]\n      [else\n       (define (iter i)\n         (cond\n           [(> i (/ x 2)) #t]\n           [(= (modulo x i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter n)\n    (cond\n      [(= n 1) #t]\n      [(not (is-prime? n)) #f]\n      [(not (is-prime? (* n n))) #f]\n      [else (iter (- n 1))]))\n  (iter x))\n",
    "  (and (integer? x)\n       (and (not (= x 1))\n            (not (= x 2))\n            (not (= x 4))\n            (not (= x 8))\n            (not (= x 16))\n            (not (= x 32))\n            (not (= x 64))\n            (not (= x 128))\n            (not (= x 256))\n            (not (= x 512))\n            (not (= x 1024))\n            (not (= x 2048))\n            (not (= x 4096))\n            (not (= x 8192))\n            (not (= x 16384))\n            (not (= x 32768))\n            (not (= x 65536))\n            (not (= x 131072))\n            (not (= x 262144))\n            (not (= x 524288))\n            (not (= x 1048576))\n            (not (= x 2097152))\n            (not (= x 4194304))\n            (not (= x 8388608))\n            (not (= x 16777216))\n            (not (= x 33554432))\n            (not (= x 67108864))\n            (not (= x 134217728))\n            (not (= x 268435456))\n            (not (= x 536870912))\n            (not (= x 1073741824))\n            (not (= x 2147483648))\n            (not (= x 4294967296))\n            (not (= x 8589934592))\n            (not (= x 17179869184))\n            (not (= x 34359738368))\n            (not (= x 68719476736))\n            (not (= x 137438953472))\n            (not (= x 274877906944))\n            (not (= x 549755813888))\n            (not (= x 1099511627776))\n            (not (= x 2199023255552))\n            (not (= x 4398046511104))\n            (not (= x 8796093022208))\n            (not (= x 17592186044416))\n            (not (= x 35184372088832))\n            (not (= x 70368744177664))\n            (not (= x 140737488355328",
    "  (define (is_prime x)\n    (cond\n      [(= x 1) #f]\n      [(= x 2) #t]\n      [(even? x) #f]\n      [else\n       (define (iter n)\n         (cond\n           [(= n x) #t]\n           [(zero? (modulo x n)) #f]\n           [else (iter (+ n 1))]))\n       (iter 3)]))\n  (define (iter n)\n    (cond\n      [(= n x) #t]\n      [(is_prime n) (iter (+ n 1))]\n      [else #f]))\n  (iter 1))\n"
  ]
}