{
  "name": "mbpp_126_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of common divisors of two given numbers.\n(define (sum a b)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum))\n    (check-equal? (candidate 10 15) 6)\n    (check-equal? (candidate 100 150) 93)\n    (check-equal? (candidate 4 6) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (zero? (remainder (gcd a b) i))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (for/sum ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n    (if (zero? (modulo a i)) i)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (iter (+ i 1) (+ sum i))\n              (iter (+ i 1) sum))))\n    (iter 1 0))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (iter i)\n      (if (= i n)\n          (list n)\n          (if (= (remainder n i) 0)\n              (cons i (iter (+ i 1)))\n              (iter (+ i 1)))))\n    (iter 1))\n  (define (common-divisors a b)\n    (define (iter lst)\n      (if (null? lst)\n          (list)\n          (if (member (car lst) (divisors b))\n              (cons (car lst) (iter (cdr lst)))\n              (iter (cdr lst)))))\n    (iter (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (let ([lst (list a b)])\n    (for/sum ([i (in-range 1 (apply min lst))])\n      (if (and (= (modulo (car lst) i) 0)\n               (= (modulo (cadr lst) i) 0))\n          i\n          0))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n divs)\n      (if (null? divs)\n          0\n          (+ (car divs) (sum-divisors-iter n (cdr divs)))))\n    (sum-divisors-iter n (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (/ a (gcd a b))) (sum-divisors (/ b (gcd a b)))))\n</code>\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter (+ i 1) (+ sum i))\n              (sum-divisors-iter (+ i 1) sum))))\n    (sum-divisors-iter 1 0))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (modulo n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b lst)\n      (if (null? lst)\n          '()\n          (if (and (member (car lst) a) (member (car lst) b))\n              (cons (car lst) (common-divisors-iter a b (cdr lst)))\n              (common-divisors-iter a b (cdr lst)))))\n    (common-divisors-iter a b (divisors (+ a b))))\n  (define (sum-list lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum-list (cdr lst)))))\n  (sum-list (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (= (remainder n i) 0)\n            i)))\n    (apply + (divisors n)))\n  (sum-divisors (lcm a b)))\n",
    "  (define (divisors a)\n    (define (divisors-iter a b)\n      (if (= b a)\n          (list a)\n          (if (= (remainder a b) 0)\n              (cons b (divisors-iter a (+ b 1)))\n              (divisors-iter a (+ b 1)))))\n    (divisors-iter a 1))\n  (define (common a b)\n    (cond ((null? a) '())\n          ((member (car a) b) (cons (car a) (common (cdr a) b)))\n          (else (common (cdr a) b))))\n  (define (sum-iter a)\n    (if (null? a)\n        0\n        (+ (car a) (sum-iter (cdr a)))))\n  (sum-iter (common (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))]\n               #:when (and (member i (divisors a))\n                           (member i (divisors b))))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i\n          0)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (= (modulo n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (= (modulo a i) 0) (= (modulo b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i))\n               (zero? (modulo b i)))\n          i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter (+ i 1) (+ sum i))\n              (sum-divisors-iter (+ i 1) sum))))\n    (sum-divisors-iter 1 0))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n l)\n      (if (null? l)\n          0\n          (+ (car l) (sum-divisors-iter n (cdr l)))))\n    (sum-divisors-iter n (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (gcd b a))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (= (remainder n i) 0)\n            i)))\n    (apply + (divisors n)))\n  (sum-divisors (lcm a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (for/sum ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n    (if (zero? (modulo a i)) i)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (let loop ((a a) (b b) (sum 0))\n    (cond ((= a 1) sum)\n          ((= b 1) sum)\n          ((= (modulo a b) 0) (loop (quotient a b) b (+ sum b)))\n          (else (loop a (sub1 b) sum)))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors a)\n    (filter (lambda (x) (= (remainder a x) 0)) (range 1 a)))\n  (define (common a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)]\n               #:when (member i (divisors b)))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (let loop ([i 1] [sum 0])\n    (cond [(> i a) sum]\n          [(and (divides? i a) (divides? i b))\n           (loop (+ i 1) (+ sum i))]\n          [else (loop (+ i 1) sum)])))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (lcm a b))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= n 1)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter (/ n i) i))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 2))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= n 1)\n          0\n          (if (= (remainder n i) 0)\n              (+ i (sum-divisors-iter (/ n i) i))\n              (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 2))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (/ a (gcd a b))) (sum-divisors (/ b (gcd a b)))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (lcm a b))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))]\n               #:when (and (member i (divisors a))\n                           (member i (divisors b))))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (sum-divisors a b)\n    (cond\n      [(= a b) a]\n      [(< a b) (sum-divisors (+ a 1) b)]\n      [(> a b) (sum-divisors a (+ b 1))]))\n  (sum-divisors a b))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i\n          0)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (apply + (filter (lambda (x) (member x (divisors b))) (divisors a))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (= (remainder n i) 0) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)]\n               #:when (member i (divisors b)))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 (add1 n))))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (set-intersection (divisors a) (divisors b))))\n",
    "  (define (divisors x)\n    (for/list ([i (in-range 1 (add1 (quotient x 2)))])\n      (if (zero? (modulo x i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0))\n            (range 1 (add1 n))))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b)))\n            (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (define (divisors-iter a div)\n      (if (= div a)\n          '()\n          (if (= (remainder a div) 0)\n              (cons div (divisors-iter a (+ div 1)))\n              (divisors-iter a (+ div 1)))))\n    (divisors-iter a 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b divs)\n      (if (null? divs)\n          '()\n          (if (member (car divs) b)\n              (cons (car divs) (common-divisors-iter a b (cdr divs)))\n              (common-divisors-iter a b (cdr divs)))))\n    (common-divisors-iter a b (divisors a)))\n  (define (sum-divisors a)\n    (define (sum-divisors-iter a divs)\n      (if (null? divs)\n          0\n          (+ (car divs) (sum-divisors-iter a (cdr divs)))))\n    (sum-divisors-iter a (divisors a)))\n  (sum-divisors (gcd a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          (if (= (remainder b i) 0)\n              i))))\n  (define (sum-list lst)\n    (for/sum ([i lst])\n      i))\n  (sum-list (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (= (remainder a i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n            (if (zero? (remainder a i))\n                (if (zero? (remainder b i)) i)))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 a)])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 a)])\n      (if (member i (divisors b)) i)))\n  (apply + (common a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (define (iter i acc)\n      (if (= i 0)\n          acc\n          (if (= (modulo n i) 0)\n              (iter (- i 1) (+ acc i))\n              (iter (- i 1) acc))))\n    (iter n 0))\n  (+ (divisors a) (divisors b)))\n",
    "  (define (divisors n)\n    (define (iter i)\n      (if (= i n)\n          '()\n          (if (= (modulo n i) 0)\n              (cons i (iter (+ i 1)))\n              (iter (+ i 1)))))\n    (iter 1))\n  (define (common-divisors a b)\n    (define (iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (iter (cdr a) b))\n              (iter (cdr a) b))))\n    (iter (divisors a) (divisors b)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= n i)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= n i)\n          0\n          (+ i (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (+ (sum-divisors (gcd a b)) 0))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (define (divisors-iter a b)\n      (if (= a 0)\n          b\n          (if (= (remainder a b) 0)\n              (divisors-iter (/ a b) (+ b (divisors-iter (/ a b) 0)))\n              (divisors-iter a (+ b 1)))))\n    (divisors-iter a 1))\n  (define (sum-divisors a)\n    (define (sum-divisors-iter a b)\n      (if (= a 0)\n          b\n          (if (= (remainder a b) 0)\n              (sum-divisors-iter (/ a b) (+ b (sum-divisors-iter (/ a b) 0)))\n              (sum-divisors-iter a (+ b 1)))))\n    (sum-divisors-iter a 1))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (/ a (gcd a b)))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (member i (divisors a)) (member i (divisors b))) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          (list n)\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (apply + (common-divisors (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (sum-divisors a b)\n    (cond ((= a b) a)\n          ((&gt; a b) (sum-divisors (- a 1) b))\n          ((&lt; a b) (sum-divisors a (- b 1)))))\n  (sum-divisors a b))\n</code>\nI am getting the following error:\n<code>sum: application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;procedure:sum-divisors&gt;\n  arguments...:\n   #&lt;procedure:sum-divisors&gt;\n   #&lt;procedure:sum-divisors&gt;\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nYou are calling <code>sum-divisors</code> without arguments.\n<code>(define (sum a b)\n  (define (sum-divisors a b)\n    (cond ((= a b) a)\n          ((&gt; a b) (sum-divisors (- a 1) b))\n          ((&lt; a b) (sum-divisors a (- b 1)))))\n  (sum-divisors a b))\n</code>\nYou need to pass the arguments <code>a</code> and <code>b</code> to <code>sum-divisors</code>.\n<code>(define (sum a b)\n  (define (sum-divisors a b)\n    (cond ((= a b) a)\n          ((&gt; a b) (sum-divisors (- a 1) b))\n          ((&lt; a b) (sum-divisors a (- b 1)))))\n  (sum-divisors a b))\n</code>\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (remainder a i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (zero? (remainder (gcd a b) i))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (define (divisors-iter a b)\n      (if (= a b)\n          (list a)\n          (if (zero? (remainder a b))\n              (cons b (divisors-iter a (- b 1)))\n              (divisors-iter a (- b 1)))))\n    (divisors-iter a (/ a 2)))\n  (define (sum-divisors a)\n    (define (sum-divisors-iter a b)\n      (if (= a b)\n          a\n          (if (zero? (remainder a b))\n              (+ b (sum-divisors-iter a (- b 1)))\n              (sum-divisors-iter a (- b 1)))))\n    (sum-divisors-iter a (/ a 2)))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b c)\n      (if (= a c)\n          (list a)\n          (if (zero? (remainder a c))\n              (cons c (common-divisors-iter a b (- c 1)))\n              (common-divisors-iter a b (- c 1)))))\n    (common-divisors-iter a b (/ (gcd a b) 2)))\n  (sum-divisors (car (common-divisors a b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          (list n)\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= i n)\n          0\n          (+ i (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b i)\n      (if (= i (gcd a b))\n          (list i)\n          (if (= (remainder a i) 0)\n              (if (= (remainder b i) 0)\n                  (cons i (common-divisors-iter a b (+ i 1)))\n                  (common-divisors-iter a b (+ i 1)))\n              (common-divisors-iter a b (+ i 1)))))\n    (common-divisors-iter a b 1))\n  (sum-divisors (gcd a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i))\n               (zero? (modulo b i)))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i total)\n      (if (= i n)\n          total\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter n (+ i 1) (+ total i))\n              (sum-divisors-iter n (+ i 1) total))))\n    (sum-divisors-iter n 1 0))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (gcd b a))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n lst)\n      (if (null? lst)\n          0\n          (+ (car lst) (sum-divisors-iter n (cdr lst)))))\n    (sum-divisors-iter n (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (quotient a (gcd a b))) (sum-divisors (quotient b (gcd a b)))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (remainder a i))\n          (if (zero? (remainder b i))\n              i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (for/list ([i (in-range 1 (min a b))])\n              (if (member i (divisors a)) i))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (iter i)\n      (if (&lt; i n)\n          (if (= (remainder n i) 0)\n              (+ i (iter (+ i 1)))\n              (iter (+ i 1)))\n          0))\n    (iter 1))\n  (+ (divisors (gcd a b)) (divisors (gcd b a))))\n</code>\n",
    "  (define (gcd a b)\n    (cond ((= b 0) a)\n          (else (gcd b (remainder a b)))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (cond ((= i n) (list n))\n            ((= (remainder n i) 0) (cons i (divisors-iter n (+ i 1))))\n            (else (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (sum-divisors (gcd a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (iter (+ i 1) (+ sum i))\n              (iter (+ i 1) sum))))\n    (iter 1 0))\n  (sum-divisors (lcm a b)))\n",
    "  (define (divisors x)\n    (filter (lambda (y) (= (modulo x y) 0)) (range 1 (add1 x))))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= i n)\n          0\n          (+ (if (= (remainder n i) 0) i 0) (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (define (sum-common-divisors a b)\n    (define (sum-common-divisors-iter a b i)\n      (if (= i (gcd a b))\n          0\n          (+ (if (= (remainder (gcd a b) i) 0) i 0) (sum-common-divisors-iter a b (+ i 1)))))\n    (sum-common-divisors-iter a b 1))\n  (sum-common-divisors a b))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter i acc)\n      (if (= i 0)\n          acc\n          (if (= (remainder n i) 0)\n              (divisors-iter (- i 1) (+ acc i))\n              (divisors-iter (- i 1) acc))))\n    (divisors-iter n 0))\n  (+ (divisors (gcd a b)) (divisors (gcd b a))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (/ n 2)))])\n        (if (= (remainder n i) 0)\n            i)))\n    (apply + (divisors n)))\n  (sum-divisors (lcm a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter i acc)\n      (if (= i 0)\n          acc\n          (if (= (remainder n i) 0)\n              (divisors-iter (- i 1) (+ i acc))\n              (divisors-iter (- i 1) acc))))\n    (divisors-iter n 0))\n  (+ (divisors (gcd a b)) (divisors (gcd b a))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (&gt; i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (apply + (common-divisors (divisors a) (divisors b))))\n</code>\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (let loop ([i 1] [sum 0])\n    (cond\n      [(> i a) sum]\n      [(and (zero? (modulo a i)) (zero? (modulo b i))) (loop (+ i 1) (+ sum i))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n l)\n      (if (null? l)\n          0\n          (+ (car l) (sum-divisors-iter n (cdr l)))))\n    (sum-divisors-iter n (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (quotient a (gcd a b))) (sum-divisors (quotient b (gcd a b)))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (= (remainder n i) 0)\n            i)))\n    (apply + (divisors n)))\n  (sum-divisors (lcm a b)))\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)]\n               #:when (zero? (modulo n i)))\n      i))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))]\n               #:when (and (member i (divisors a))\n                           (member i (divisors b))))\n      i))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n            (if (zero? (modulo a i))\n                (if (zero? (modulo b i)) i)))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (&gt; i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (apply + (common-divisors (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter (+ i 1) (+ sum i))\n              (sum-divisors-iter (+ i 1) sum))))\n    (sum-divisors-iter 1 0))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (define (divisors-iter a b)\n      (if (= b a)\n          (list a)\n          (if (= (remainder a b) 0)\n              (cons b (divisors-iter a (+ b 1)))\n              (divisors-iter a (+ b 1)))))\n    (divisors-iter a 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (apply + (common-divisors (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors lst)\n    (if (null? lst)\n        0\n        (+ (car lst) (sum-divisors (cdr lst)))))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b lst)\n      (if (null? lst)\n          '()\n          (if (and (member (car lst) (divisors a))\n                   (member (car lst) (divisors b)))\n              (cons (car lst) (common-divisors-iter a b (cdr lst)))\n              (common-divisors-iter a b (cdr lst)))))\n    (common-divisors-iter a b (divisors (gcd a b))))\n  (sum-divisors (common-divisors a b)))\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 a)])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (define (iter a i)\n      (if (= i 0)\n          '()\n          (if (= (remainder a i) 0)\n              (cons i (iter a (- i 1)))\n              (iter a (- i 1)))))\n    (iter a (/ a 2)))\n  (define (common a b)\n    (define (iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (iter (cdr a) b))\n              (iter (cdr a) b))))\n    (iter a b))\n  (define (sum-list l)\n    (if (null? l)\n        0\n        (+ (car l) (sum-list (cdr l)))))\n  (sum-list (common (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter i sum)\n      (if (= i n)\n          sum\n          (if (= (remainder n i) 0)\n              (sum-divisors-iter (+ i 1) (+ sum i))\n              (sum-divisors-iter (+ i 1) sum))))\n    (sum-divisors-iter 1 0))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (sum-divisors n)\n    (apply + (divisors n)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (gcd a b))])\n      (if (= (remainder a i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i))\n              i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n d)\n      (if (= d n)\n          '()\n          (if (= (remainder n d) 0)\n              (cons d (divisors-iter n (+ d 1)))\n              (divisors-iter n (+ d 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (foldl + 0 (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (/ a (gcd a b))) (sum-divisors (/ b (gcd a b)))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (define (divisors-iter n d)\n      (if (= d n)\n          '()\n          (if (= (remainder n d) 0)\n              (cons d (divisors-iter n (+ d 1)))\n              (divisors-iter n (+ d 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n l)\n      (if (null? l)\n          0\n          (+ (car l) (sum-divisors-iter n (cdr l)))))\n    (sum-divisors-iter n (divisors n)))\n  (+ (sum-divisors (gcd a b)) (sum-divisors (quotient a (gcd a b))) (sum-divisors (quotient b (gcd a b)))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors a)\n    (for/list ([i (in-range 1 a)])\n      (if (zero? (modulo a i)) i)))\n  (define (common a b)\n    (for/list ([i (in-range 1 a)]\n               #:when (member i (divisors b)))\n      i))\n  (apply + (common a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (define (divisors-iter a i)\n      (if (= i a)\n          '()\n          (if (= (remainder a i) 0)\n              (cons i (divisors-iter a (+ i 1)))\n              (divisors-iter a (+ i 1)))))\n    (divisors-iter a 1))\n  (define (common-divisors a b)\n    (define (common-divisors-iter a b)\n      (if (null? a)\n          '()\n          (if (member (car a) b)\n              (cons (car a) (common-divisors-iter (cdr a) b))\n              (common-divisors-iter (cdr a) b))))\n    (common-divisors-iter a b))\n  (define (sum-of-list a)\n    (if (null? a)\n        0\n        (+ (car a) (sum-of-list (cdr a)))))\n  (sum-of-list (common-divisors (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (define (iter i)\n      (if (&gt; i n)\n          '()\n          (if (zero? (modulo n i))\n              (cons i (iter (+ i 1)))\n              (iter (+ i 1)))))\n    (iter 1))\n  (define (common a b)\n    (define (iter xs ys)\n      (if (or (null? xs) (null? ys))\n          '()\n          (if (equal? (car xs) (car ys))\n              (cons (car xs) (iter (cdr xs) (cdr ys)))\n              (if (&lt; (car xs) (car ys))\n                  (iter (cdr xs) ys)\n                  (iter xs (cdr ys))))))\n    (iter (divisors a) (divisors b)))\n  (apply + (common a b)))\n</code>\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (min a b) 2)))])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i))) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (remainder n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0) a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (zero? (modulo a i)) i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 a)])\n      (if (and (zero? (modulo a i)) (zero? (modulo b i)))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (remainder n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient (gcd a b) 2)))])\n      (if (= (remainder (gcd a b) i) 0)\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= (modulo n x) 0)) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (modulo a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (modulo n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (for/sum ([i (in-range 1 (add1 (quotient a 2)))])\n    (if (zero? (modulo a i))\n        (if (member i (divisors b)) i 0)\n        0)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (/ n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (/ (lcm a b) 2)))])\n      (if (and (= (remainder (lcm a b) i) 0)\n               (= (remainder a i) 0)\n               (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i))\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (let loop ([i 1] [sum 0])\n    (cond [(= i a) sum]\n          [(= (modulo a i) 0)\n           (cond [(= (modulo b i) 0) (loop (+ i 1) (+ sum i))]\n                 [else (loop (+ i 1) sum)])]\n          [else (loop (+ i 1) sum)])))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 n)])\n      (if (zero? (modulo n i))\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (min a b))])\n      (if (and (zero? (modulo a i))\n               (zero? (modulo b i)))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (zero? (modulo a i))\n          (if (zero? (modulo b i)) i))))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (filter (lambda (x) (= 0 (modulo n x))) (range 1 n)))\n  (define (common-divisors a b)\n    (filter (lambda (x) (member x (divisors b))) (divisors a)))\n  (apply + (common-divisors a b)))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i\n          #f)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors a)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (= (remainder a i) 0)\n          i)))\n  (define (common-divisors a b)\n    (for/list ([i (in-range 1 (add1 (quotient a 2)))])\n      (if (and (= (remainder a i) 0) (= (remainder b i) 0))\n          i)))\n  (apply + (common-divisors a b)))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (lcm a b)\n    (/ (* a b) (gcd a b)))\n  (define (divisors n)\n    (define (divisors-iter n i)\n      (if (= i n)\n          '()\n          (if (= (remainder n i) 0)\n              (cons i (divisors-iter n (+ i 1)))\n              (divisors-iter n (+ i 1)))))\n    (divisors-iter n 1))\n  (define (sum-divisors n)\n    (define (sum-divisors-iter n i)\n      (if (= i n)\n          0\n          (+ (if (= (remainder n i) 0) i 0) (sum-divisors-iter n (+ i 1)))))\n    (sum-divisors-iter n 1))\n  (+ (sum-divisors (lcm a b)) (sum-divisors (gcd a b))))\n",
    "  (define (gcd a b)\n    (if (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (= (remainder n i) 0)\n          i)))\n  (apply + (intersection (divisors a) (divisors b))))\n",
    "  (define (divisors x)\n    (for/list ([i (in-range 1 x)])\n      (if (zero? (modulo x i)) i)))\n  (apply + (intersect (divisors a) (divisors b))))\n",
    "  (define (divisors n)\n    (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n      (if (zero? (modulo n i)) i)))\n  (apply + (intersection (divisors a) (divisors b))))\n"
  ]
}