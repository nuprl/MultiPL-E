{
  "name": "mbpp_422_find_Average_Of_Cube",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the average of cubes of first n natural numbers.\n(define (find_Average_Of_Cube n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Average_Of_Cube))\n    (check-equal? (candidate 2) 4.5)\n    (check-equal? (candidate 3) 12)\n    (check-equal? (candidate 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (helper (- n 1) (+ sum (* n n n)))))\n  (helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube_of_numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (cube_of_numbers (- n 1)))))\n  (/ (cube_of_numbers n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (define (find_sum_of_cubes x)\n    (if (= x 1)\n        (find_cube x)\n        (+ (find_cube x) (find_sum_of_cubes (- x 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n"
  ]
}