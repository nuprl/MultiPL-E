{
  "name": "mbpp_422_find_Average_Of_Cube",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the average of cubes of first n natural numbers.\n(define (find_Average_Of_Cube n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Average_Of_Cube))\n    (check-equal? (candidate 2) 4.5)\n    (check-equal? (candidate 3) 12)\n    (check-equal? (candidate 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (helper (- n 1) (+ sum (* n n n)))))\n  (helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube_of_numbers n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (cube_of_numbers (- n 1)))))\n  (/ (cube_of_numbers n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (define (find_sum_of_cubes x)\n    (if (= x 1)\n        (find_cube x)\n        (+ (find_cube x) (find_sum_of_cubes (- x 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (cube n)\n    (* n n n))\n  (define (sum_of_cubes n)\n    (if (= n 1)\n        (cube n)\n        (+ (cube n) (sum_of_cubes (- n 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (expt n 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_iter n i sum)\n    (if (= i n)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ i 1) (+ sum (* i i i)))))\n  (find_Average_Of_Cube_iter n 1 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube 1)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum i)\n    (if (= i n)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt i 3)) (+ i 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 1)\n        (find_Cube_Of_Number 1)\n        (+ (find_Cube_Of_Number n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Cube_Of_N n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube_Of_N 1)\n        (+ (find_Cube_Of_N n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 0)\n        0\n        (+ (find_Cube_Of_Number n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube x)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum i)\n    (if (= i n)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt i 3)) (+ i 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube_Of_First_N_Natural_Numbers n)\n    (if (= n 1)\n        1\n        (* n (find_Cube_Of_First_N_Natural_Numbers (- n 1)))))\n  (/ (find_Cube_Of_First_N_Natural_Numbers n) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_Iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 0)\n        0\n        (+ (find_Cube n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (define (find_sum_of_cubes x)\n    (if (= x 1)\n        (find_cube x)\n        (+ (find_cube x) (find_sum_of_cubes (- x 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Iter x sum)\n    (if (= x n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (+ x 1) (+ sum (find_Cube x)))))\n  (find_Average_Of_Cube_Iter 1 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (/ (apply + (map find_cube (range 1 n))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 1)\n        (find_Cube n)\n        (+ (find_Cube n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter i sum)\n    (if (= i n)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (+ i 1) (+ sum (* i i i)))))\n  (find_Average_Of_Cube_Iter 1 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ 1 n)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ 1 n)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (build-list n add1))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (sum_of_cube n) n))\n",
    "  (define (find_Average_Of_Cube_helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_helper (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_helper n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ 1 n)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (expt n 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum n)\n    (if (= n 1)\n        1\n        (+ (find_Cube n) (find_Sum (- n 1)))))\n  (/ (find_Sum n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Sum_Of_Cubes x)\n    (if (= x 1)\n        (find_Cube x)\n        (+ (find_Cube x) (find_Sum_Of_Cubes (- x 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube x)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (define (find_sum_of_cubes x)\n    (if (= x 1)\n        (find_cube 1)\n        (+ (find_cube x) (find_sum_of_cubes (- x 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (expt n 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Cube_Of_Number n)\n    (define (find_Cube_Of_Number_Helper n)\n      (if (= n 1)\n          1\n          (* n (find_Cube_Of_Number_Helper (- n 1)))))\n    (find_Cube_Of_Number_Helper n))\n  (/ (find_Cube_Of_Number n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter count sum)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (+ count 1) (+ sum (* count count count)))))\n  (find_Average_Of_Cube_iter 1 0))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 0)\n        0\n        (+ (find_Cube_Of_Number n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter total i)\n    (if (= i n)\n        (/ total n)\n        (find_Average_Of_Cube_iter (+ total (* i i i)) (+ i 1))))\n  (find_Average_Of_Cube_iter 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x)\n    (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube x)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (helper (- n 1) (+ sum (* n n n)))))\n  (helper n 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube 1)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 0)\n        0\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum-of-cubes n)\n    (if (= n 1)\n        (cube 1)\n        (+ (cube n) (sum-of-cubes (- n 1)))))\n  (/ (sum-of-cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_cube x)\n    (* x x x))\n  (/ (apply + (map find_cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (cube x) (* x x x))\n  (/ (sum (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (/ (apply + (map find_Cube (range 1 n))) n))\n",
    "  (define (cube n)\n    (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube_Of_N n)\n    (* n n n))\n  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (find_Cube_Of_N n) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Sum_Of_Cube n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (find_Sum_Of_Cube (- n 1)))))\n  (/ (find_Sum_Of_Cube n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube 1)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_helper n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_helper n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_helper n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (/ (apply + (map find_Cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube n) (* n n n))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 1)\n        (find_Cube 1)\n        (+ (find_Cube n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Cube x)\n    (* x x x))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n)))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_cube_of_n n)\n    (* n n n))\n  (define (find_sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (find_cube_of_n n) (find_sum_of_cubes (- n 1)))))\n  (/ (find_sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (sum_of_cubes n)\n    (if (= n 0)\n        0\n        (+ (expt n 3) (sum_of_cubes (- n 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= count n)\n        (/ sum n)\n        (find_Average_Of_Cube_iter n (+ sum (* count count count)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (define (find_Sum_Of_Cubes_Iter n sum)\n      (if (= n 0)\n          sum\n          (find_Sum_Of_Cubes_Iter (- n 1) (+ sum (find_Cube_Of_Number n)))))\n    (find_Sum_Of_Cubes_Iter n 0))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (add1 n)))) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Average_Of_Cube_Helper n sum)\n    (cond ((= n 0) (/ sum n))\n          (else (find_Average_Of_Cube_Helper (- n 1) (+ sum (find_Cube n))))))\n  (find_Average_Of_Cube_Helper n 0))\n",
    "  (define (find_Average_Of_Cube_Iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_Iter (- n 1) (+ sum (expt n 3)))))\n  (find_Average_Of_Cube_Iter n 0))\n",
    "  (define (find_Cube_Of_Number n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 0)\n        0\n        (+ (find_Cube_Of_Number n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x) (* x x x))\n  (define (sum_of_cubes x)\n    (if (= x 1)\n        (cube x)\n        (+ (cube x) (sum_of_cubes (- x 1)))))\n  (/ (sum_of_cubes n) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ n 1)))) n))\n",
    "  (define (cube x)\n    (* x x x))\n  (/ (apply + (map cube (range 1 (+ 1 n)))) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n acc)\n    (if (= n 0)\n        (/ acc n)\n        (find_Average_Of_Cube_iter (- n 1) (+ acc (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n 0)\n        (/ sum count)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 0))\n",
    "  (define (cube x) (* x x x))\n  (/ (apply + (map cube (range 1 n))) n))\n",
    "  (define (find_Cube n)\n    (* n n n))\n  (define (find_Sum_Of_Cubes n)\n    (if (= n 1)\n        (find_Cube 1)\n        (+ (find_Cube n) (find_Sum_Of_Cubes (- n 1)))))\n  (/ (find_Sum_Of_Cubes n) n))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n",
    "  (define (find_Average_Of_Cube_iter n sum count)\n    (if (= n count)\n        (/ sum count)\n        (find_Average_Of_Cube_iter n (+ sum (expt count 3)) (+ count 1))))\n  (find_Average_Of_Cube_iter n 0 1))\n",
    "  (define (find_Average_Of_Cube_iter n sum)\n    (if (= n 0)\n        (/ sum n)\n        (find_Average_Of_Cube_iter (- n 1) (+ sum (* n n n)))))\n  (find_Average_Of_Cube_iter n 0))\n"
  ]
}