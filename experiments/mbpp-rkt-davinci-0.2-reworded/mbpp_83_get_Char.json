{
  "name": "mbpp_83_get_Char",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n(define (get_Char strr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_Char))\n    (check-equal? (candidate \"abc\") \"f\")\n    (check-equal? (candidate \"gfg\") \"t\")\n    (check-equal? (candidate \"ab\") \"c\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ sum (car strr)))))\n  (get_Char_helper strr 0))\n",
    "  (define (get_Char_helper strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (char->integer (string-ref strr i))\n           (get_Char_helper strr (+ i 1)))))\n  (integer->char (+ (modulo (get_Char_helper strr 0) 26) 97)))\n",
    "  (let ([str (string->list strr)])\n    (let loop ([str str] [sum 0])\n      (if (null? str)\n          (char (+ sum 97))\n          (loop (cdr str) (+ sum (car str)))))))\n",
    "  (define (get_Char_iter strr i)\n    (if (= i (string-length strr))\n        (modulo (string-ref strr 0) 26)\n        (modulo (+ (string-ref strr i) (get_Char_iter strr (+ i 1))) 26)))\n  (get_Char_iter strr 0))\n",
    "  (define (get_Char_helper strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (char->integer (string-ref strr i))\n           (get_Char_helper strr (+ i 1)))))\n  (integer->char (+ (get_Char_helper strr 0) 97)))\n",
    "  (let ([str (string->list strr)])\n    (let ([sum (apply + (map char->integer str))])\n      (integer->char (modulo sum 26)))))\n",
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ sum (char->integer (car strr))))))\n  (integer->char (get_Char_helper strr 0)))\n",
    "  (let ([str (string->list strr)])\n    (let ([sum (apply + (map char->integer str))])\n      (integer->char (modulo sum 26)))))\n",
    "  (define (get_Char_iter strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (char->integer (string-ref strr i)) (get_Char_iter strr (+ i 1)))))\n  (integer->char (+ (get_Char_iter strr 0) 97)))\n",
    "  (define (get_Char_helper strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (string-ref strr i) (get_Char_helper strr (+ i 1)))))\n  (integer->char (+ (get_Char_helper strr 0) 96)))\n",
    "  (let ([str (string->list strr)])\n    (let ([sum (apply + (map char->integer str))])\n      (integer->char (modulo sum 26)))))\n",
    "  (define (get_Char_iter strr acc)\n    (if (null? strr)\n        acc\n        (get_Char_iter (cdr strr) (+ acc (char->integer (car strr))))))\n  (integer->char (modulo (get_Char_iter strr 0) 26)))\n",
    "  (let ([str (string->list strr)])\n    (let loop ([str str] [sum 0])\n      (if (null? str)\n          (integer->char (+ sum 65))\n          (loop (cdr str) (+ sum (car str)))))))\n",
    "  (string-&gt;number (string-append (map (lambda (x) (number-&gt;string (modulo (+ x) 26))) (map char-&gt;integer (string-&gt;list strr))))))\n",
    "  (define (get_Char_helper strr sum)\n    (if (null? strr)\n        (modulo sum 26)\n        (get_Char_helper (cdr strr) (+ sum (char->integer (car strr))))))\n  (integer->char (get_Char_helper strr 0)))\n",
    "  (let ((sum 0))\n    (for ([i (in-range (string-length strr))])\n      (set! sum (+ sum (string-ref strr i))))\n    (char (+ sum) 97)))\n",
    "  (modulo (+ (string->number (string-ref strr 0))\n             (string->number (string-ref strr 1))\n             (string->number (string-ref strr 2)))\n          26))\n",
    "  (define (get_Char_helper strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (char->integer (string-ref strr i))\n           (get_Char_helper strr (+ i 1)))))\n  (integer->char (+ (get_Char_helper strr 0) 65)))\n",
    "  (define (get_Char_helper strr i)\n    (if (= i (string-length strr))\n        0\n        (+ (string-ref strr i) (get_Char_helper strr (+ i 1)))))\n  (integer->char (+ (get_Char_helper strr 0) 97)))\n",
    "  (define (get_Char_helper strr acc)\n    (if (null? strr)\n        (modulo acc 26)\n        (get_Char_helper (cdr strr) (+ acc (char->integer (car strr))))))\n  (integer->char (get_Char_helper strr 0)))\n"
  ]
}