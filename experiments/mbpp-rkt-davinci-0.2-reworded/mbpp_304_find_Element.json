{
  "name": "mbpp_304_find_Element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find element at a given index after number of rotations.\n(define (find_Element arr ranges rotations index)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_Element))\n    (check-equal? (candidate (list 1 2 3 4 5) (list (list 0 2) (list 0 3)) 2 1) 3)\n    (check-equal? (candidate (list 1 2 3 4) (list (list 0 1) (list 0 2)) 1 2) 3)\n    (check-equal? (candidate (list 1 2 3 4 5 6) (list (list 0 1) (list 0 2)) 1 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let* ([rotated_arr (rotate arr ranges rotations)]\n         [element (list-ref rotated_arr index)])\n    element))\n",
    "  (let ([rotated-arr (rotate arr ranges rotations)])\n    (list-ref rotated-arr index)))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (let ([index (modulo (+ index rotations) (length arr))])\n      (list-ref arr index))))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (if (= rotations 0)\n        (list-ref arr index)\n        (let ([new-index (modulo (+ index rotations) (length arr))])\n          (list-ref arr new-index)))))\n",
    "  (define (find_Element_helper arr ranges rotations index)\n    (cond\n      [(= rotations 0) (list-ref arr index)]\n      [(= (car ranges) index) (find_Element_helper (cdr ranges) (cdr ranges) (- rotations 1) 0)]\n      [else (find_Element_helper arr ranges (- rotations 1) (+ index 1))]))\n  (find_Element_helper arr ranges rotations index))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (if (= rotations 0)\n        (list-ref arr index)\n        (let ([new-index (modulo (+ index rotations) (length arr))])\n          (list-ref arr new-index)))))\n",
    "  (define (find_Element_helper arr ranges rotations index)\n    (cond\n      [(= rotations 0) (list-ref arr index)]\n      [(< ranges rotations) (find_Element_helper arr ranges (- rotations ranges) index)]\n      [(> ranges rotations) (find_Element_helper arr (- ranges rotations) rotations index)]\n      [(= ranges rotations) (find_Element_helper arr ranges rotations index)]))\n  (find_Element_helper arr ranges rotations index))\n",
    "  (let ([rotated-arr (rotate arr ranges rotations)])\n    (list-ref rotated-arr index)))\n",
    "  (let ([rotated-arr (rotate arr ranges rotations)])\n    (list-ref rotated-arr index)))\n",
    "  (let ([len (vector-length arr)])\n    (let ([new_index (modulo (+ index rotations) len)])\n      (vector-ref arr new_index))))\n",
    "  (let ([len (vector-length arr)])\n    (let ([rotated_index (modulo (+ index rotations) len)])\n      (vector-ref arr rotated_index))))\n",
    "  (let ([len (vector-length arr)])\n    (let ([rotated_index (modulo (+ index rotations) len)])\n      (vector-ref arr rotated_index))))\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (if (= rotations 0)\n        (list-ref arr index)\n        (let ([new-index (modulo (+ index rotations) (length arr))])\n          (list-ref arr new-index)))))\n",
    "  (define (rotate arr ranges rotations)\n    (if (= rotations 0)\n        arr\n        (rotate (append (sublist arr ranges) (sublist arr 0 ranges))\n                (+ ranges 1)\n                (- rotations 1))))\n  (list-ref (rotate arr 0 rotations) index))\n",
    "  (let ([new-index (+ index rotations)])\n    (if (&gt;= new-index (length arr))\n        (find_Element arr ranges (- new-index (length arr)) index)\n        (list-ref arr new-index))))\n</code>\n",
    "  (let ([rotations (modulo rotations (length arr))])\n    (list-ref arr (+ index rotations))))\n",
    "  (let ([ranges (map (lambda (x) (modulo x (length arr))) ranges)])\n    (let ([rotations (map (lambda (x) (modulo x (length arr))) rotations)])\n      (let ([index (modulo index (length arr))])\n        (let ([new_index (modulo (+ index (vector-ref rotations 0) (vector-ref ranges 0)) (length arr))])\n          (vector-ref arr new_index))))))\n",
    "  (define (find_Element_helper arr ranges rotations index)\n    (if (zero? rotations)\n        (list-ref arr index)\n        (let ([new_index (modulo (+ index ranges) (length arr))])\n          (find_Element_helper arr ranges (- rotations 1) new_index))))\n  (find_Element_helper arr ranges rotations index))\n",
    "  (define (find_Element_helper arr ranges rotations index)\n    (if (zero? rotations)\n        (list-ref arr index)\n        (let* ([rotation (list-ref ranges index)]\n               [new_index (modulo (+ index rotation) (length arr))])\n          (find_Element_helper arr ranges (- rotations 1) new_index))))\n  (find_Element_helper arr ranges rotations index))\n",
    "  (define (rotate arr ranges rotations)\n    (let loop ([arr arr] [ranges ranges] [rotations rotations])\n      (cond\n        [(zero? rotations) arr]\n        [else\n         (loop\n          (append (sublist arr (first ranges) (second ranges))\n                  (sublist arr 0 (first ranges)))\n          (rest ranges)\n          (sub1 rotations))])))\n  (list-ref (rotate arr ranges rotations) index))\n"
  ]
}