{
  "name": "mbpp_770_odd_num_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of fourth power of first n odd natural numbers.\n(define (odd_num_sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_num_sum))\n    (check-equal? (candidate 2) 82)\n    (check-equal? (candidate 3) 707)\n    (check-equal? (candidate 4) 3108)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (odd_num_sum-iter (- n 1) (+ sum (expt (+ n 1) 4))))))\n  (odd_num_sum-iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (+ n 1) 4) (odd_num_sum (- n 1)))]))\n",
    "  (define (sum_of_fourth_power_of_odd_num n)\n    (if (= n 1)\n        1\n        (+ (expt n 4) (sum_of_fourth_power_of_odd_num (- n 2)))))\n  (sum_of_fourth_power_of_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i n)\n        (loop (+ i 2) (+ sum (expt i 4)))\n        sum)))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (+ 2 (* 2 (- n 1))) 4)\n         (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_of_odd_num n)\n    (if (= n 1)\n        1\n        (+ (expt (- (* 2 n) 1) 4) (sum_of_odd_num (- n 1)))))\n  (sum_of_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n sum)\n    (if (= n 0)\n        sum\n        (sum_odd_num (- n 1) (+ sum (expt (- n 1) 4)))))\n  (sum_odd_num n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))]))\n  (odd_num_sum_iter (- n 1) 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (sum i)\n    (cond ((= i n) 0)\n          (else (+ (expt (+ 2 (* 2 (sub1 i))) 4)\n                   (sum (add1 i))))))\n  (sum 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum-iter (- n 1) (+ sum (expt (+ 2 (- n 1)) 4)))))\n  (odd_num_sum-iter n 0))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (expt (- n 1) 4)\n                 (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum-iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 1) (odd_num_sum_iter (- n 1) (+ sum (expt n 4))))\n          (else (odd_num_sum_iter (- n 1) sum))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (+ 2 (* 2 (- n 1))) 4)\n         (odd_num_sum (- n 1)))))\n",
    "  (define (sum n acc)\n    (if (= n 0)\n        acc\n        (sum (- n 1) (+ acc (expt (- n 1) 4)))))\n  (sum n 0))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd-num-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd-num-sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd-num-sum-iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (helper i sum)\n    (if (= i n)\n        sum\n        (helper (+ i 1) (+ sum (expt (+ 2 (* 2 (sub1 i))) 4)))))\n  (helper 1 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter sum i)\n    (if (= i n)\n        sum\n        (odd_num_sum_iter (+ sum (expt (+ i 1) 4)) (+ i 1))))\n  (odd_num_sum_iter 0 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum i)\n    (if (= i n)\n        0\n        (+ (expt (+ i 1) 4) (sum (+ i 2)))))\n  (sum 1))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4))))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (cond ((= n 0) 0)\n        ((= n 1) 1)\n        (else (+ (expt (- n 1) 4)\n                 (odd_num_sum (- n 2))))))\n",
    "  (define (odd_num_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum-iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (2*n-1) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (cond ((&gt; i n) sum)\n          (else (loop (+ i 2) (+ sum (expt i 4)))))))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (if (odd? n) n 0) 4) (odd_num_sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n)\n    (if (= n 1)\n        1\n        (+ (expt (- n 1) 4) (sum_odd_num (- n 2)))))\n  (sum_odd_num n))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ (expt (- n 1) 4) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (odd-num-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd-num-sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd-num-sum-iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ (expt n 4) (sum (- n 2)))))\n  (sum n))\n",
    "  (define (sum_odd_num n)\n    (if (= n 0)\n        0\n        (+ (expt (- n 1) 4) (sum_odd_num (- n 2)))))\n  (sum_odd_num n))\n",
    "  (define (odd-num-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd-num-sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd-num-sum-iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (+ n 1) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt n 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum-iter i sum)\n    (cond ((= i n) sum)\n          (else (odd_num_sum-iter (+ i 1) (+ sum (expt (+ i 2) 4))))))\n  (odd_num_sum-iter 1 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 1)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter i sum)\n    (if (= i n)\n        sum\n        (odd_num_sum_iter (+ i 1) (+ sum (expt (+ i 2) 4)))))\n  (odd_num_sum_iter 1 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ (expt (sum (- n 1)) 4) (expt n 4))))\n  (sum n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt (- n 1) 4) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))]))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ (expt (sum (- n 1)) 4)\n           (expt n 4))))\n  (sum n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ 2 (- n 1)) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter i sum)\n    (cond ((= i n) sum)\n          (else (odd_num_sum_iter (+ i 1) (+ sum (expt (+ i 1) 4))))))\n  (odd_num_sum_iter 0 0))\n",
    "  (define (iter i sum)\n    (if (= i n)\n        sum\n        (iter (+ i 1) (+ sum (expt (+ (* 2 i) 1) 4)))))\n  (iter 0 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n)\n    (cond\n      [(= n 1) 1]\n      [else (+ (expt (- n 1) 4) (sum_odd_num (- n 2)))]))\n  (sum_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter (- n 1) 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (2*n-1) 4) (odd_num_sum (- n 1)))))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter i sum)\n    (if (= i n)\n        sum\n        (odd_num_sum_iter (+ i 1) (+ sum (expt (+ i 2) 4)))))\n  (odd_num_sum_iter 1 0))\n",
    "  (define (odd_num_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum-iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum-iter n 0))\n",
    "  (define (sum-odd-num n)\n    (if (= n 0)\n        0\n        (+ (expt (- n 1) 4) (sum-odd-num (- n 2)))))\n  (sum-odd-num n))\n",
    "  (define (odd-num-sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd-num-sum-iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd-num-sum-iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (+ 2 (* 2 (- n 1))) 4)\n         (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (odd_num_sum-iter (- n 1) (+ sum (expt (+ n 1) 4))))))\n  (odd_num_sum-iter (- n 1) 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (odd_num_sum_iter (- n 1) (+ acc (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (odd_num_sum_iter (- n 1) (+ acc (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (sum n)\n    (if (= n 1)\n        1\n        (+ (expt (- n 1) 4) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (sum_odd_num n)\n    (if (= n 0)\n        0\n        (+ (expt (+ n 1) 4)\n           (sum_odd_num (- n 2)))))\n  (sum_odd_num (- n 1)))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond ((= n 0) sum)\n          (else (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4))))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [(= n 2) 9]\n    [else (+ (expt (+ n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (= i n)\n        sum\n        (loop (+ i 2) (+ sum (expt i 4))))))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum-iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum-iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum-iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (sum_odd_num n)\n    (cond ((= n 1) 1)\n          (else (+ (expt (+ 2 (* 2 (- n 1))) 4) (sum_odd_num (- n 1))))))\n  (sum_odd_num n))\n",
    "  (define (odd_num_sum_iter count sum)\n    (if (= count n)\n        sum\n        (odd_num_sum_iter (+ count 1) (+ sum (expt (+ (* 2 count) 1) 4)))))\n  (odd_num_sum_iter 0 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 1)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (2*n-1) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (odd_num_sum_iter (- n 1) (+ acc (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n)\n    (cond ((= n 1) 1)\n          (else (+ (expt (- n 1) 4) (sum_odd_num (- n 1))))))\n  (sum_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= n 1) (+ sum 1))\n          (else (odd_num_sum_iter (- n 2) (+ sum (* n n n n))))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n)\n    (cond ((= n 0) 0)\n          ((= n 1) 1)\n          (else (+ (expt (- n 1) 4) (sum_odd_num (- n 2))))))\n  (sum_odd_num n))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (odd_num_sum_iter (- n 1) (+ acc (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (expt (+ n 1) 4) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n acc)\n    (if (= n 0)\n        acc\n        (odd_num_sum_iter (- n 1) (+ acc (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum n)\n    (cond ((= n 1) 1)\n          (else (+ (expt (- n 1) 4) (sum (- n 1))))))\n  (cond ((= n 1) 1)\n        (else (+ (expt (- n 1) 4) (sum (- n 1))))))\n",
    "  (cond [(= n 1) 1]\n        [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum i)\n    (if (= i n)\n        0\n        (+ (expt (+ 2 (* 2 (sub1 i))) 4) (sum (add1 i)))))\n  (sum 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum_iter count sum)\n    (if (= count n)\n        sum\n        (odd_num_sum_iter (+ count 1) (+ sum (expt (+ 2 (* 2 (- count 1))) 4)))))\n  (odd_num_sum_iter 1 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (* (expt (- n 1) 4) 2)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n)\n    (if (= n 0)\n        0\n        (+ (expt (- n 1) 4) (sum_odd_num (- n 2)))))\n  (sum_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (cond [(= n 0) 0]\n        [else (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))]))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4)\n         (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (cond ((= n 0) sum)\n          ((= (remainder n 2) 1) (odd_num_sum_iter (- n 1) (+ sum (expt n 4))))\n          (else (odd_num_sum_iter (- n 1) sum))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_odd_num n acc)\n    (if (= n 0)\n        acc\n        (sum_odd_num (- n 1) (+ acc (expt (+ n 1) 4)))))\n  (sum_odd_num n 0))\n"
  ]
}