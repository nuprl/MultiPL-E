{
  "name": "mbpp_770_odd_num_sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of fourth power of first n odd natural numbers.\n(define (odd_num_sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate odd_num_sum))\n    (check-equal? (candidate 2) 82)\n    (check-equal? (candidate 3) 707)\n    (check-equal? (candidate 4) 3108)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (- n 1) 4) (odd_num_sum (- n 2)))))\n",
    "  (define (odd_num_sum-iter n sum)\n    (cond ((= n 0) sum)\n          (else (odd_num_sum-iter (- n 1) (+ sum (expt (+ n 1) 4))))))\n  (odd_num_sum-iter n 0))\n",
    "  (cond\n    [(= n 1) 1]\n    [else (+ (expt (+ n 1) 4) (odd_num_sum (- n 1)))]))\n",
    "  (define (sum_of_fourth_power_of_odd_num n)\n    (if (= n 1)\n        1\n        (+ (expt n 4) (sum_of_fourth_power_of_odd_num (- n 2)))))\n  (sum_of_fourth_power_of_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (let loop ((i 1) (sum 0))\n    (if (&lt; i n)\n        (loop (+ i 2) (+ sum (expt i 4)))\n        sum)))\n",
    "  (if (= n 1)\n      1\n      (+ (expt (+ 2 (* 2 (- n 1))) 4) (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (+ 2 (* 2 (- n 1))) 4)\n         (odd_num_sum (- n 1)))))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (sum_of_odd_num n)\n    (if (= n 1)\n        1\n        (+ (expt (- (* 2 n) 1) 4) (sum_of_odd_num (- n 1)))))\n  (sum_of_odd_num n))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (- n 1) 4)))))\n  (odd_num_sum_iter n 0))\n",
    "  (define (odd_num_sum_iter n sum)\n    (if (= n 0)\n        sum\n        (odd_num_sum_iter (- n 1) (+ sum (expt (+ n 1) 4)))))\n  (odd_num_sum_iter n 0))\n"
  ]
}