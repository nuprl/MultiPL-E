{
  "name": "mbpp_145_max_Abs_Diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the maximum difference between any two elements in a given list.\n(define (max_Abs_Diff arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate max_Abs_Diff))\n    (check-equal? (candidate (list 2 1 5 3)) 4)\n    (check-equal? (candidate (list 9 3 2 5 1)) 8)\n    (check-equal? (candidate (list 3 2 1)) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([max_diff -1])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (when (and (&lt; i j) (&gt; (abs (- (list-ref arr i) (list-ref arr j))) max_diff))\n          (set! max_diff (abs (- (list-ref arr i) (list-ref arr j)))))))\n    max_diff))\n",
    "  (define (max_Abs_Diff_helper arr max_diff)\n    (if (null? arr)\n        max_diff\n        (let ([curr_diff (abs (- (car arr) (car (cdr arr))))])\n          (if (&gt; curr_diff max_diff)\n              (max_Abs_Diff_helper (cdr arr) curr_diff)\n              (max_Abs_Diff_helper (cdr arr) max_diff)))))\n  (max_Abs_Diff_helper arr 0))\n</code>\n",
    "  (let ([max (apply max arr)]\n        [min (apply min arr)])\n    (- max min)))\n",
    "  (define (max_Abs_Diff_helper arr max_diff)\n    (cond\n      [(empty? arr) max_diff]\n      [(empty? (rest arr)) max_diff]\n      [else (max_Abs_Diff_helper (rest arr) (max max_diff (abs (- (first arr) (second arr)))))]))\n  (max_Abs_Diff_helper arr 0))\n",
    "  (if (null? arr)\n      0\n      (let ([max (apply max arr)]\n            [min (apply min arr)])\n        (- max min))))\n",
    "  (let ([max (apply max arr)]\n        [min (apply min arr)])\n    (- max min)))\n",
    "  (let ([max_diff (apply max (map (lambda (x) (abs (- (apply max arr) x))) arr))])\n    (if (zero? max_diff)\n        (error \"List is empty or all elements are equal\")\n        max_diff)))\n",
    "  (let ([max (apply max arr)]\n        [min (apply min arr)])\n    (- max min)))\n",
    "  (let ([max_diff (apply max (map (lambda (x y) (abs (- x y))) arr (cdr arr)))])\n    (if (null? (cdr arr))\n        0\n        max_diff)))\n",
    "  (let ([max_diff 0]\n        [max_num (car arr)]\n        [min_num (car arr)])\n    (for ([i (in-list (cdr arr))])\n      (if (> i max_num)\n          (set! max_num i))\n      (if (< i min_num)\n          (set! min_num i)))\n    (if (> (- max_num min_num) max_diff)\n        (set! max_diff (- max_num min_num)))\n    max_diff))\n",
    "  (let ([max (apply max arr)]\n        [min (apply min arr)])\n    (- max min)))\n",
    "  (define (max_Abs_Diff_helper arr max_diff)\n    (if (null? arr)\n        max_diff\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (> diff max_diff)\n              (max_Abs_Diff_helper (cdr arr) diff)\n              (max_Abs_Diff_helper (cdr arr) max_diff)))))\n  (max_Abs_Diff_helper arr 0))\n",
    "  (let ([max_diff 0])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (when (&gt; (abs (- (list-ref arr i) (list-ref arr j))) max_diff)\n          (set! max_diff (abs (- (list-ref arr i) (list-ref arr j)))))))\n    max_diff))\n",
    "  (define (max_Abs_Diff_helper arr max_diff)\n    (cond\n      [(empty? arr) max_diff]\n      [else (max_Abs_Diff_helper (rest arr) (max (abs (- (first arr) (first (rest arr)))) max_diff))]))\n  (max_Abs_Diff_helper arr 0))\n",
    "  (let ([max (apply max arr)]\n        [min (apply min arr)])\n    (- max min)))\n",
    "  (define (max_Abs_Diff_helper arr max_diff)\n    (if (null? arr)\n        max_diff\n        (let ([diff (abs (- (car arr) (car (cdr arr))))])\n          (if (&gt; diff max_diff)\n              (max_Abs_Diff_helper (cdr arr) diff)\n              (max_Abs_Diff_helper (cdr arr) max_diff)))))\n  (max_Abs_Diff_helper arr 0))\n",
    "  (let ([max_diff -1])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (when (and (not (= i j))\n                   (> (abs (- (list-ref arr i) (list-ref arr j))) max_diff))\n          (set! max_diff (abs (- (list-ref arr i) (list-ref arr j)))))))\n    max_diff))\n",
    "  (let ([max (apply max arr)]\n        [min (apply min arr)])\n    (- max min)))\n",
    "  (let loop ([arr arr] [max_diff 0])\n    (if (null? arr)\n        max_diff\n        (let ([diff (abs (- (car arr) (cadr arr)))])\n          (if (> diff max_diff)\n              (loop (cdr arr) diff)\n              (loop (cdr arr) max_diff))))))\n",
    "  (let ([max_diff 0])\n    (for ([i (in-range (length arr))])\n      (for ([j (in-range (length arr))])\n        (when (> (abs (- (list-ref arr i) (list-ref arr j))) max_diff)\n          (set! max_diff (abs (- (list-ref arr i) (list-ref arr j)))))))\n    max_diff))\n"
  ]
}