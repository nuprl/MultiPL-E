{
  "name": "mbpp_253_count_integer",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n"
  ]
}