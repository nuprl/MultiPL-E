{
  "name": "mbpp_270_sum_even_and_even_index",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of even numbers at even positions of a list.\n(define (sum_even_and_even_index arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_even_and_even_index))\n    (check-equal? (candidate (list 5 6 12 1 18 8)) 30)\n    (check-equal? (candidate (list 3 20 17 9 2 10 18 13 6 18)) 26)\n    (check-equal? (candidate (list 5 6 12 1)) 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (cond [(empty? arr) 0]\n        [else (if (and (even? (first arr)) (even? (length arr)))\n                   (+ (first arr) (sum_even_and_even_index (rest arr)))\n                   (sum_even_and_even_index (rest arr)))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (foldl (lambda (x y) (if (and (even? x) (even? y)) (+ x y) x)) 0 (range (length arr))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (even? index) (even? (first arr))) (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ((arr arr)\n             (sum 0)\n             (i 0))\n    (cond ((null? arr) sum)\n          ((and (even? (car arr)) (even? i)) (loop (cdr arr) (+ sum (car arr)) (+ i 1)))\n          (else (loop (cdr arr) sum (+ i 1))))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? index)\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (length arr))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (if (empty? arr)\n      0\n      (if (even? (car arr))\n          (+ (car arr) (sum_even_and_even_index (cdr arr)))\n          (sum_even_and_even_index (cdr arr)))))\n"
  ]
}