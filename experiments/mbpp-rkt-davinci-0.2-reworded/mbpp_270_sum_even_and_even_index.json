{
  "name": "mbpp_270_sum_even_and_even_index",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of even numbers at even positions of a list.\n(define (sum_even_and_even_index arr)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_even_and_even_index))\n    (check-equal? (candidate (list 5 6 12 1 18 8)) 30)\n    (check-equal? (candidate (list 3 20 17 9 2 10 18 13 6 18)) 26)\n    (check-equal? (candidate (list 5 6 12 1)) 12)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (cond [(empty? arr) 0]\n        [else (if (and (even? (first arr)) (even? (length arr)))\n                   (+ (first arr) (sum_even_and_even_index (rest arr)))\n                   (sum_even_and_even_index (rest arr)))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (foldl (lambda (x y) (if (and (even? x) (even? y)) (+ x y) x)) 0 (range (length arr))))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (even? index) (even? (first arr))) (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ((arr arr)\n             (sum 0)\n             (i 0))\n    (cond ((null? arr) sum)\n          ((and (even? (car arr)) (even? i)) (loop (cdr arr) (+ sum (car arr)) (+ i 1)))\n          (else (loop (cdr arr) sum (+ i 1))))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? index)\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (length arr))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (if (empty? arr)\n      0\n      (if (even? (car arr))\n          (+ (car arr) (sum_even_and_even_index (cdr arr)))\n          (sum_even_and_even_index (cdr arr)))))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (sum_even_and_even_index (rest arr)) (first arr))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((arr arr) (i 0) (sum 0))\n    (cond\n      [(empty? arr) sum]\n      [(= (remainder i 2) 0)\n       (if (even? (first arr))\n           (loop (rest arr) (+ i 1) (+ sum (first arr)))\n           (loop (rest arr) (+ i 1) sum))]\n      [else (loop (rest arr) (+ i 1) sum)])))\n",
    "  (foldl + 0 (filter even? (filter even? (range (length arr))))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (cond ((null? arr) sum)\n          ((and (even? i) (even? (car arr))) (loop (+ i 1) (+ sum (car arr)) (cdr arr)))\n          (else (loop (+ i 1) sum (cdr arr))))))\n",
    "  (if (null? arr)\n      0\n      (if (even? (car arr))\n          (+ (car arr) (sum_even_and_even_index (cdr arr)))\n          (sum_even_and_even_index (cdr arr)))))\n",
    "  (let loop ((i 0) (acc 0))\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (index-of arr) 2))\n     (+ (sum_even_and_even_index (rest arr)) (first arr))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr acc index)\n    (if (null? arr)\n        acc\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ acc (car arr)) (+ index 1))\n            (sum_even_and_even_index_iter (cdr arr) acc (+ index 1)))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((arr arr) (i 0) (sum 0))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (cdr arr) (+ i 1) (+ sum (car arr)))\n            (loop (cdr arr) (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr)))\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (even? (remainder (length arr) 2))\n         (+ (if (even? (first arr)) (first arr) 0)\n            (sum_even_and_even_index (rest arr)))\n         (sum_even_and_even_index (rest arr)))]))\n",
    "  (let loop ((arr arr) (index 0) (sum 0))\n    (cond ((null? arr) sum)\n          ((and (even? index) (even? (car arr)))\n           (loop (cdr arr) (+ index 1) (+ sum (car arr))))\n          (else (loop (cdr arr) (+ index 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr))) (helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (helper (rest arr) (+ index 1) sum)]))\n  (helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (is_even? n)\n    (zero? (modulo n 2)))\n  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (is_even? index) (is_even? (first arr))) (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (cond [(empty? arr) 0]\n        [else (if (even? (second arr))\n                  (+ (first arr) (sum_even_and_even_index (rest (rest arr))))\n                  (sum_even_and_even_index (rest (rest arr))))]))\n",
    "  (let loop ((arr arr) (sum 0) (index 0))\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (loop (cdr arr) (+ sum (car arr)) (+ index 1))\n            (loop (cdr arr) sum (+ index 1))))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? i) (even? (first arr)))\n            (sum_even_and_even_index_helper (rest arr) (+ i 1) (+ sum (first arr)))\n            (sum_even_and_even_index_helper (rest arr) (+ i 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? index)\n       (sum_even_and_even_index_iter (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (if (even? (remainder (length arr) 2))\n         (if (even? (first arr))\n             (+ (first arr) (sum_even_and_even_index (rest arr)))\n             (sum_even_and_even_index (rest arr)))\n         (sum_even_and_even_index (rest arr)))]))\n",
    "  (accumulate + 0 (filter even? (filter even? (enumerate arr)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (loop (+ i 1) (+ sum (first arr)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond [(empty? arr) 0]\n        [else (if (and (even? (first arr))\n                       (even? (index arr)))\n                  (+ (first arr) (sum_even_and_even_index (rest arr)))\n                  (sum_even_and_even_index (rest arr)))]))\n",
    "  (define (helper arr index sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? index) (even? (first arr)))\n            (helper (rest arr) (+ index 1) (+ sum (first arr)))\n            (helper (rest arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? i) (even? (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond [(empty? arr) 0]\n        [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n        [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr))) (helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (helper (rest arr) (+ index 1) sum)]))\n  (helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (second arr)) (+ (first arr) (sum_even_and_even_index (rest (rest arr))))]\n    [else (sum_even_and_even_index (rest (rest arr)))]))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr i)\n    (if (empty? arr)\n        0\n        (if (and (even? i) (even? (first arr)))\n            (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ i 1)))\n            (sum_even_and_even_index_helper (rest arr) (+ i 1)))))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (even? index) (even? (first arr))) (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (cond [(empty? arr) 0]\n        [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n        [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ i 1) sum))))\n  (helper arr 0 0))\n",
    "  (letrec ([even? (lambda (n) (= (remainder n 2) 0))]\n           [even-index? (lambda (n) (even? n))]\n           [even-value? (lambda (n) (even? n))]\n           [sum (lambda (arr)\n                   (if (null? arr)\n                       0\n                       (+ (if (and (even-index? (car arr))\n                                   (even-value? (car arr)))\n                              (car arr)\n                              0)\n                          (sum (cdr arr))))])\n           [sum-even-and-even-index (lambda (arr)\n                                      (sum arr))])\n    (sum-even-and-even-index arr)))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum))\n        sum)))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(and (even? index) (even? (first arr)))\n       (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (cond\n      [(empty? arr) 0]\n      [(even? index)\n       (+ (if (even? (first arr))\n              (first arr)\n              0)\n          (sum_even_and_even_index_helper (rest arr) (+ index 1)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr)))\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond [(empty? arr) sum]\n          [(even? i)\n           (loop (+ i 1) (+ sum (car arr)))]\n          [else\n           (loop (+ i 1) sum)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (and (even? i) (even? (list-ref arr i)))\n        (loop (+ i 1) (+ sum (list-ref arr i)))\n        sum)))\n",
    "  (cond [(empty? arr) 0]\n        [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n        [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (helper arr sum index)\n    (if (null? arr)\n        sum\n        (if (= (modulo index 2) 0)\n            (if (= (modulo (car arr) 2) 0)\n                (helper (cdr arr) (+ sum (car arr)) (+ index 1))\n                (helper (cdr arr) sum (+ index 1)))\n            (helper (cdr arr) sum (+ index 1)))))\n  (helper arr 0 0))\n",
    "  (cond [(empty? arr) 0]\n        [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n        [else (sum_even_and_even_index (rest arr))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ i 1) sum))))\n  (helper arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (cond\n      [(empty? arr) sum]\n      [(even? i)\n       (if (even? (first arr))\n           (loop (+ i 1) (+ sum (first arr)) (rest arr))\n           (loop (+ i 1) sum (rest arr)))]\n      [else (loop (+ i 1) sum (rest arr))])))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (define (helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ index 1) sum))))\n  (helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr index)\n    (if (null? arr)\n        0\n        (if (and (even? index) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_helper (cdr arr) (+ index 1)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1)))))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (define (sum_even_and_even_index_helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (sum_even_and_even_index_helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (helper arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (helper (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (helper (rest arr) (+ i 1) sum)]))\n  (helper arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? index)\n       (sum_even_and_even_index_helper (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_helper (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (if (null? arr)\n      0\n      (if (even? (car arr))\n          (+ (car arr) (sum_even_and_even_index (cdr arr)))\n          (sum_even_and_even_index (cdr arr)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (if (even? (first arr))\n         (+ (first arr) (sum_even_and_even_index (rest arr)))\n         (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? i) (even? (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))\n            (sum_even_and_even_index_iter (rest arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (&lt; i (length arr))\n        (let ([val (list-ref arr i)])\n          (if (and (even? i) (even? val))\n              (loop (+ i 1) (+ sum val))\n              (loop (+ i 1) sum)))\n        sum)))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (sum_even_and_even_index (rest arr)) (first arr))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ (first arr) sum))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (if (even? (first arr)) (first arr) 0)\n        (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0) (arr arr))\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)) (cdr arr))\n            (loop (+ i 1) sum (cdr arr))))))\n",
    "  (define (helper arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (helper (cdr arr) (+ i 1) (+ sum (car arr)))\n            (helper (cdr arr) (+ i 1) sum))))\n  (helper arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([arr arr] [sum 0] [index 0])\n    (cond\n      [(empty? arr) sum]\n      [(even? index)\n       (if (even? (first arr))\n           (loop (rest arr) (+ sum (first arr)) (+ index 1))\n           (loop (rest arr) sum (+ index 1)))]\n      [else (loop (rest arr) sum (+ index 1))])))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (= (modulo i 2) 0) (= (modulo (list-ref arr i) 2) 0))\n       (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (define (sum_even_and_even_index_iter arr index)\n    (if (empty? arr)\n        0\n        (if (and (even? index) (even? (first arr)))\n            (+ (first arr) (sum_even_and_even_index_iter (rest arr) (+ index 1)))\n            (sum_even_and_even_index_iter (rest arr) (+ index 1)))))\n  (sum_even_and_even_index_iter arr 0))\n",
    "  (letrec ([even? (lambda (n) (= (remainder n 2) 0))]\n           [sum (lambda (arr)\n                   (cond [(empty? arr) 0]\n                         [(even? (first arr)) (+ (first arr) (sum (rest arr)))]\n                         [else (sum (rest arr))]))])\n    (sum (filter even? (range (length arr))))))\n",
    "  (define (sum_even_and_even_index_iter arr i)\n    (if (null? arr)\n        0\n        (if (and (even? i) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_iter (cdr arr) (+ i 1)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1)))))\n  (sum_even_and_even_index_iter arr 0))\n",
    "  (letrec ([even? (lambda (n) (= (remainder n 2) 0))]\n           [even-index? (lambda (n) (even? n))]\n           [even-value? (lambda (n) (even? n))]\n           [sum-even-and-even-index (lambda (arr)\n                                      (if (null? arr)\n                                          0\n                                          (+ (if (and (even-index? (car arr))\n                                                      (even-value? (car arr)))\n                                                 (car arr)\n                                                 0)\n                                             (sum-even-and-even-index (cdr arr)))))]\n           [sum-even-and-even-index-helper (lambda (arr)\n                                             (sum-even-and-even-index (cdr arr)))])\n    (sum-even-and-even-index arr)))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond ((null? arr) sum)\n          ((and (even? i) (even? (car arr))) (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr))))\n          (else (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_helper (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_helper arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (loop (+ i 1) (+ sum (car arr)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2))\n     (+ (sum_even_and_even_index (rest arr))\n        (if (even? (first arr))\n            (first arr)\n            0))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (cond\n      [(= i (length arr)) sum]\n      [(and (even? i) (even? (list-ref arr i))) (loop (+ i 1) (+ sum (list-ref arr i)))]\n      [else (loop (+ i 1) sum)])))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (letrec ([sum (lambda (arr i)\n                  (if (empty? arr)\n                      0\n                      (if (and (even? i) (even? (first arr)))\n                          (+ (first arr) (sum (rest arr) (+ i 1)))\n                          (sum (rest arr) (+ i 1)))))])\n    (sum arr 0)))\n",
    "  (define (sum_even_and_even_index_iter arr i)\n    (if (null? arr)\n        0\n        (if (and (even? i) (even? (car arr)))\n            (+ (car arr) (sum_even_and_even_index_iter (cdr arr) (+ i 1)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1)))))\n  (sum_even_and_even_index_iter arr 0))\n",
    "  (let loop ((i 0) (acc 0))\n    (if (= i (length arr))\n        acc\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ acc (list-ref arr i)))\n            (loop (+ i 1) acc)))))\n",
    "  (define (helper arr i sum)\n    (if (empty? arr)\n        sum\n        (if (and (even? i) (even? (first arr)))\n            (helper (rest arr) (+ i 1) (+ sum (first arr)))\n            (helper (rest arr) (+ i 1) sum))))\n  (helper arr 0 0))\n",
    "  (cond [(empty? arr) 0]\n        [(even? (first arr))\n         (+ (first arr) (sum_even_and_even_index (rest (rest arr))))]\n        [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr sum i)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ sum (car arr)) (+ i 1))\n            (sum_even_and_even_index_iter (cdr arr) sum (+ i 1)))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (letrec ([even? (lambda (n) (= (remainder n 2) 0))]\n           [even-index? (lambda (i) (even? i))]\n           [even-value? (lambda (n) (even? n))]\n           [sum (lambda (arr)\n                   (if (null? arr)\n                       0\n                       (+ (if (and (even-index? (car arr))\n                                   (even-value? (cadr arr)))\n                              (cadr arr)\n                              0)\n                          (sum (cdr arr))))])\n           [sum-even-and-even-index (lambda (arr)\n                                      (sum (append arr '())))])\n    (sum-even-and-even-index arr)))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (if (null? arr)\n        sum\n        (if (and (even? index) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ index 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [else\n     (let ([first (first arr)]\n           [rest (rest arr)])\n       (cond\n         [(even? first) (+ first (sum_even_and_even_index rest))]\n         [else (sum_even_and_even_index rest)]))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (define (sum_even_and_even_index_helper arr i)\n    (cond [(empty? arr) 0]\n          [(even? i) (if (even? (first arr))\n                         (+ (first arr) (sum_even_and_even_index_helper (rest arr) (+ i 1)))\n                         (sum_even_and_even_index_helper (rest arr) (+ i 1)))]\n          [else (sum_even_and_even_index_helper (rest arr) (+ i 1))]))\n  (sum_even_and_even_index_helper arr 0))\n",
    "  (let loop ([i 0] [sum 0])\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (let loop ((i 0) (sum 0))\n    (if (= i (length arr))\n        sum\n        (if (and (even? i) (even? (list-ref arr i)))\n            (loop (+ i 1) (+ sum (list-ref arr i)))\n            (loop (+ i 1) sum)))))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr index sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? index) (even? (first arr)))\n       (sum_even_and_even_index_iter (rest arr) (+ index 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ index 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(and (even? i) (even? (first arr))) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond\n      [(empty? arr) sum]\n      [(even? i) (sum_even_and_even_index_iter (rest arr) (+ i 1) (+ sum (first arr)))]\n      [else (sum_even_and_even_index_iter (rest arr) (+ i 1) sum)]))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (cond ((null? arr) sum)\n          ((and (even? i) (even? (car arr))) (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr))))\n          (else (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (remainder (length arr) 2)) (+ (sum_even_and_even_index (rest arr)) (first arr))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (cond\n    [(empty? arr) 0]\n    [(even? (first arr)) (+ (first arr) (sum_even_and_even_index (rest arr)))]\n    [else (sum_even_and_even_index (rest arr))]))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n",
    "  (define (sum_even_and_even_index_iter arr i sum)\n    (if (null? arr)\n        sum\n        (if (and (even? i) (even? (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) (+ sum (car arr)))\n            (sum_even_and_even_index_iter (cdr arr) (+ i 1) sum))))\n  (sum_even_and_even_index_iter arr 0 0))\n"
  ]
}