{
  "name": "mbpp_786_right_insertion",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to locate the right insertion point for a specified value in sorted order.\n(define (right_insertion a x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate right_insertion))\n    (check-equal? (candidate (list 1 2 4 5) 6) 4)\n    (check-equal? (candidate (list 1 2 4 5) 3) 2)\n    (check-equal? (candidate (list 1 2 4 5) 7) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond ((null? a) 0)\n        ((&lt;= x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (if (null? a)\n      0\n      (if (<= x (car a))\n          0\n          (+ 1 (right_insertion (cdr a) x)))))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (right_insertion_iter a x (+ i 1))\n            i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) (list x)]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) a]\n    [else (right_insertion (rest a) x)]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n</code>\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion-iter a x i)\n    (if (= i (length a))\n        i\n        (if (&gt; (list-ref a i) x)\n            i\n            (right_insertion-iter a x (+ i 1)))))\n  (right_insertion-iter a x 0))\n",
    "  (cond [(empty? a) empty]\n        [(>= (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((&lt; x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (cond ((= i j) i)\n          ((>= (vector-ref a i) x) i)\n          (else (loop (+ i 1) j)))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0] [j (length a)])\n    (if (= i j)\n        i\n        (let ([mid (quotient (+ i j) 2)])\n          (cond [(< x (vector-ref a mid))\n                 (loop i mid)]\n                [(> x (vector-ref a mid))\n                 (loop (+ mid 1) j)]\n                [else\n                 mid])))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond [(empty? a) empty]\n        [else (cond [(> (first a) x) empty]\n                   [else (cons (first a) (right_insertion (rest a) x))])]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (if (&lt; x (vector-ref a k))\n              (loop i k)\n              (loop (+ k 1) j)))\n        i)))\n</code>\n",
    "  (cond [(empty? a) (error \"empty list\")]\n        [(= (first a) x) 0]\n        [(> (first a) x) 0]\n        [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [else\n     (let ([n (length a)])\n       (cond\n         [(= n 1)\n          (if (&gt; (first a) x) 0 1)]\n         [else\n          (let ([mid (quotient n 2)])\n            (cond\n              [(= (first (drop a mid)) x) (+ mid 1)]\n              [(&gt; (first (drop a mid)) x) (right_insertion (take a mid) x)]\n              [else (+ mid (right_insertion (drop a mid) x))]))]))]))\n</code>\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ((a a) (i 0))\n    (if (null? a)\n        i\n        (if (&gt;= (car a) x)\n            i\n            (loop (cdr a) (+ i 1))))))\n</code>\n",
    "  (cond ((null? a) 0)\n        ((&lt; x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((&lt; x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) 0]\n        [(< x (first a)) 0]\n        [(> x (first a)) (+ 1 (right_insertion (rest a) x))]\n        [else 0]))\n",
    "  (define (right_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((> x (list-ref a i)) (right_insertion_iter a x (+ i 1)))\n          (else i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(null? a) 0]\n    [(> x (car a)) (+ 1 (right_insertion (cdr a) x))]\n    [else 0]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) (error \"empty\")]\n    [(= (first a) x) (error \"already in\")]\n    [(< (first a) x) (right_insertion (rest a) x)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([a a] [i 0])\n    (if (null? a)\n        i\n        (if (<= (car a) x)\n            (loop (cdr a) (+ i 1))\n            i))))\n",
    "  (define (right_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((&gt; x (list-ref a i)) (right_insertion_iter a x (+ i 1)))\n          (else i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (right_insertion_iter a x (+ i 1))\n            i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond ((null? a) 0)\n        ((< x (car a)) 0)\n        ((> x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1) j)\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) a]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (if (null? a)\n      0\n      (if (< x (car a))\n          0\n          (+ 1 (right_insertion (cdr a) x)))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) a]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= (list-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (define (helper a x i)\n    (if (null? a)\n        i\n        (if (<= x (car a))\n            i\n            (helper (cdr a) x (+ i 1)))))\n  (helper a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(>= (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= x (list-ref a i))\n            i\n            (right_insertion_iter a x (+ i 1)))))\n  (right_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= x (list-ref a i))\n            i\n            (loop (+ i 1))))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((< x (car a)) 0)\n        ((> x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond [(empty? a) empty]\n        [(>= (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n</code>\n",
    "  (if (null? a)\n      0\n      (if (<= x (car a))\n          0\n          (+ 1 (right_insertion (cdr a) x)))))\n",
    "  (cond\n    [(empty? a) (error \"empty list\")]\n    [(= (first a) x) (error \"already in list\")]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) 0]\n        [(< x (first a)) 0]\n        [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (right_insertion_iter a x (+ i 1))\n            i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion_iter a x i)\n    (cond\n      [(empty? a) i]\n      [(> (first a) x) i]\n      [else (right_insertion_iter (rest a) x (+ i 1))]))\n  (right_insertion_iter a x 0))\n",
    "  (cond ((null? a) 0)\n        ((< x (car a)) 0)\n        ((> x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ((i 0))\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) 0]\n        [(> (first a) x) 0]\n        [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(>= (first a) x) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((< x (car a)) 0)\n        ((> x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (cond ((&lt; x (vector-ref a k)) (loop i k))\n                ((&lt; (vector-ref a k) x) (loop (+ k 1) j))\n                (else k)))\n        i)))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (< (list-ref a i) x)\n            (right_insertion_iter a x (+ i 1))\n            i)))\n  (right_insertion_iter a x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) 0]\n        [(> (first a) x) 0]\n        [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (define (right_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((> x (list-ref a i)) (right_insertion_iter a x (+ i 1)))\n          (else i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond ((null? a) 0)\n        ((&lt; x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (define (right_insertion_iter a x i)\n    (cond\n      [(= i (length a)) i]\n      [(> (list-ref a i) x) i]\n      [else (right_insertion_iter a x (+ i 1))]))\n  (right_insertion_iter a x 0))\n",
    "  (if (null? a)\n      0\n      (if (<= (car a) x)\n          (+ 1 (right_insertion (cdr a) x))\n          0)))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((mid (quotient (+ i j) 2)))\n          (if (&lt; x (vector-ref a mid))\n              (loop i mid)\n              (loop (+ mid 1) j))))))\n",
    "  (define (iter a x i)\n    (if (null? a)\n        i\n        (if (<= x (car a))\n            i\n            (iter (cdr a) x (+ i 1)))))\n  (iter a x 0))\n",
    "  (cond ((null? a) 0)\n        ((&lt;= x (car a)) (right_insertion (cdr a) x))\n        (else (+ 1 (right_insertion (cdr a) x)))))\n",
    "  (cond ((null? a) 0)\n        ((>= (car a) x) 0)\n        (else (+ 1 (right_insertion (cdr a) x)))))\n",
    "  (cond\n    [(empty? a) (list x)]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(<= (first a) x) (cons (first a) (right_insertion (rest a) x))]\n        [else (cons x (cons (first a) (rest a)))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (= i j)\n        i\n        (let ((k (quotient (+ i j) 2)))\n          (if (&lt;= (vector-ref a k) x)\n              (loop (+ k 1) j)\n              (loop i k))))))\n</code>\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) 0]\n        [(> (first a) x) 0]\n        [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((&lt; x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) empty]\n    [else\n     (cond\n       [(> (first a) x) empty]\n       [else (cons (first a) (right_insertion (rest a) x))])]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond ((null? a) 0)\n        ((> x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) 0]\n        [(< x (first a)) 0]\n        [(> x (first a)) (+ 1 (right_insertion (rest a) x))]\n        [else 0]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond\n    [(null? a) 0]\n    [(> (car a) x) 0]\n    [else (+ 1 (right_insertion (cdr a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (right_insertion_iter a x (+ i 1))\n            i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (define (iter a i)\n    (if (&lt;= (vector-ref a i) x)\n        (if (= i (- (vector-length a) 1))\n            (vector-length a)\n            (iter a (+ i 1)))\n        i))\n  (iter a 0))\n",
    "  (let loop ((i 0) (j (length a)))\n    (if (&lt; i j)\n        (let ((k (quotient (+ i j) 2)))\n          (if (&lt;= (vector-ref a k) x)\n              (loop (+ k 1) j)\n              (loop i k)))\n        i)))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n        [else (cons x a)]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(<= x (first a)) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< x (first a)) a]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(<= x (first a)) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (define (right_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((< x (vector-ref a i)) i)\n          (else (right_insertion_iter a x (+ i 1)))))\n  (right_insertion_iter a x 0))\n",
    "  (cond [(empty? a) empty]\n        [(<= (first a) x) (cons (first a) (right_insertion (rest a) x))]\n        [else (cons x a)]))\n",
    "  (cond ((null? a) 0)\n        ((&gt; x (car a)) (add1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (cond\n    [(empty? a) empty]\n    [else\n     (define mid (quotient (length a) 2))\n     (define left (take a mid))\n     (define right (drop a mid))\n     (cond\n       [(< (first right) x) (right_insertion right x)]\n       [else (append left (cons x right))])]))\n",
    "  (if (null? a)\n      0\n      (if (<= x (car a))\n          0\n          (+ 1 (right_insertion (cdr a) x)))))\n",
    "  (cond [(empty? a) empty]\n        [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n        [else (cons x a)]))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (length a)) i]\n      [(>= (list-ref a i) x) i]\n      [else (loop (+ i 1))])))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (cond ((null? a) 0)\n        ((&lt; x (car a)) 0)\n        ((&gt; x (car a)) (+ 1 (right_insertion (cdr a) x)))\n        (else 0)))\n",
    "  (define (right_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((> x (list-ref a i)) (right_insertion_iter a x (+ i 1)))\n          (else i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (cond [(empty? a) 0]\n        [else (cond [(> (first a) x) 0]\n                   [else (+ 1 (right_insertion (rest a) x))])]))\n",
    "  (define (right_insertion_iter a x i)\n    (cond ((= i (length a)) i)\n          ((< x (list-ref a i)) i)\n          (else (right_insertion_iter a x (+ i 1)))))\n  (right_insertion_iter a x 0))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [(= (first a) x) 1]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) empty]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(>= (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n",
    "  (define (right_insertion_iter a x i)\n    (if (= i (length a))\n        i\n        (if (<= (list-ref a i) x)\n            (right_insertion_iter a x (+ i 1))\n            i)))\n  (right_insertion_iter a x 0))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(< x (first a)) (cons x a)]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(> (first a) x) (cons x a)]\n    [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(> (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) 0]\n    [(>= (first a) x) 0]\n    [else (+ 1 (right_insertion (rest a) x))]))\n",
    "  (cond [(empty? a) empty]\n        [(> (first a) x) empty]\n        [else (cons (first a) (right_insertion (rest a) x))]))\n",
    "  (cond\n    [(empty? a) empty]\n    [(< (first a) x) (cons (first a) (right_insertion (rest a) x))]\n    [else (cons x a)]))\n",
    "  (let loop ([i 0])\n    (if (= i (length a))\n        i\n        (if (&lt;= (list-ref a i) x)\n            (loop (+ i 1))\n            i))))\n"
  ]
}