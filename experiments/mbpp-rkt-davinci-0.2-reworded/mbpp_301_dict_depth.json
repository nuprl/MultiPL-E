{
  "name": "mbpp_301_dict_depth",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the depth of a hash.\n(define (dict_depth d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dict_depth))\n    (check-equal? (candidate #hash((\"a\" .  1) (\"b\" .  #hash((\"c\" .  #hash((\"d\" .  #hash()))))))) 4)\n    (check-equal? (candidate #hash((\"a\" .  1) (\"b\" .  #hash((\"c\" .  \"python\"))))) 2)\n    (check-equal? (candidate #hash((1 .  \"Sun\") (2 .  #hash((3 .  #hash((4 .  \"Mon\"))))))) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (if (hash? d)\n      (apply max (map dict_depth (hash-values d)))\n      1))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict-ref d 'right))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (dict_depth (rest d))]\n    [else (max (dict_depth (rest d))\n               (+ 1 (dict_depth (first d))))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max (map dict_depth (values d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (if (hash? d)\n      (let ([max-depth 0])\n        (for ([(k v) (in-hash d)])\n          (let ([depth (+ 1 (dict_depth v))])\n            (when (&gt; depth max-depth)\n              (set! max-depth depth))))\n        max-depth)\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first (first d)))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict-ref d 'right))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict-depth (dict-ref d \"left\"))\n                   (dict-depth (dict-ref d \"right\")))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (add1 (dict_depth (first d))) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (apply max (map (lambda (x) (+ 1 (dict_depth x))) (first d)))]\n        [else 1]))\n"
  ]
}