{
  "name": "mbpp_301_dict_depth",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the depth of a hash.\n(define (dict_depth d)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate dict_depth))\n    (check-equal? (candidate #hash((\"a\" .  1) (\"b\" .  #hash((\"c\" .  #hash((\"d\" .  #hash()))))))) 4)\n    (check-equal? (candidate #hash((\"a\" .  1) (\"b\" .  #hash((\"c\" .  \"python\"))))) 2)\n    (check-equal? (candidate #hash((1 .  \"Sun\") (2 .  #hash((3 .  #hash((4 .  \"Mon\"))))))) 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (if (hash? d)\n      (apply max (map dict_depth (hash-values d)))\n      1))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict-ref d 'right))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (dict_depth (rest d))]\n    [else (max (dict_depth (rest d))\n               (+ 1 (dict_depth (first d))))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max (map dict_depth (values d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (if (hash? d)\n      (let ([max-depth 0])\n        (for ([(k v) (in-hash d)])\n          (let ([depth (+ 1 (dict_depth v))])\n            (when (&gt; depth max-depth)\n              (set! max-depth depth))))\n        max-depth)\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first (first d)))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict-ref d 'right))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict-depth (dict-ref d \"left\"))\n                   (dict-depth (dict-ref d \"right\")))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (add1 (dict_depth (first d))) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (apply max (map (lambda (x) (+ 1 (dict_depth x))) (first d)))]\n        [else 1]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (add1 (max (dict_depth (first d)) (dict_depth (rest d))))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (let loop ([d d] [depth 0])\n    (cond [(dict? d) (loop (dict-ref d (dict-keys d)) (+ depth 1))]\n          [else depth])))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d)))\n     (apply max (map dict_depth (dict-values d)))]\n    [else (apply max (map dict_depth (dict-values d)))])\n  )\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(dict? d) (max (dict-depth (dict-ref d \"left\"))\n                        (dict-depth (dict-ref d \"right\")))]\n        [else 0]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (let ([keys (hash-keys d)])\n    (if (null? keys)\n        0\n        (apply max (map (lambda (k) (+ 1 (dict_depth (hash-ref d k)))) keys)))))\n",
    "  (define (dict-depth-helper d depth)\n    (cond\n      [(empty? d) depth]\n      [(not (hash? (first d))) (dict-depth-helper (rest d) depth)]\n      [else (max (dict-depth-helper (rest d) depth)\n                 (dict-depth-helper (first d) (+ depth 1)))]))\n  (dict-depth-helper d 0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else\n     (max 1 (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d)) (+ 1 (dict_depth (first d)))]\n        [else (+ 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (\u03bb (k)\n                   (add1 (dict_depth (dict-ref d k))))\n                 (dict-keys d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else\n         (let ([max-depth 0])\n           (for ([(k v) d])\n             (let ([depth (+ 1 (dict_depth v))])\n               (when (&gt; depth max-depth)\n                 (set! max-depth depth))))\n           max-depth)]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (\u03bb (x) (+ 1 (dict_depth (cdr x))))\n                 (dict-entries d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d)))) (dict_depth (rest d))]\n        [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(and (hash? (first d)) (hash? (second d)))\n     (max (dict_depth (first d)) (dict_depth (second d)))]\n    [else 1]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict-ref d 'right))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (dict_depth (rest d))\n                   (add1 (dict_depth (first d))))]))\n",
    "  (cond [(empty? d) 0]\n        [else (apply max (map dict_depth (values d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (if (dict? d)\n      (apply max (map dict_depth (dict-values d)))\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (add1 (dict_depth (first d))) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(and (hash? (first d)) (not (hash? (second d))))\n         (add1 (dict_depth (first d)))]\n        [(and (hash? (first d)) (hash? (second d)))\n         (max (dict_depth (first d))\n              (dict_depth (second d)))]\n        [else (max (dict_depth (first d))\n                   (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-ref d \"left\"))\n               (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(and (hash? (first d)) (not (empty? (first d))))\n     (+ 1 (dict_depth (first d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) 1]\n        [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-ref d \"left\"))\n               (dict-ref d \"right\"))]))\n",
    "  (define (depth d)\n    (cond [(empty? d) 0]\n          [(not (dict? (first d))) (depth (rest d))]\n          [else (max (depth (rest d)) (add1 (depth (first d))))]))\n  (depth d))\n",
    "  (cond\n    [(empty? d) 0]\n    [(dict? (first d))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else\n     (max 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first d)))\n         (apply max (map dict_depth (hash-values d)))]\n        [else 1]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d))))\n         (add1 (dict_depth (rest d)))]\n        [else (add1 (dict_depth (first (first d))))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (lambda (x) (dict_depth (cdr x)))\n                 (dict-keys d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"a\"))\n                   (dict_depth (dict-ref d \"b\")))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) 1]\n    [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (for/list ([k (in-dict d)])\n              (dict_depth (dict-ref d k))))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-rest d))\n               (dict_depth (dict-value (dict-first d))))]))\n",
    "  (cond\n    [(dict? d) (add1 (max (dict_depth (dict-ref d \"left\"))\n                        (dict-ref d \"right\")))]\n    [else 0]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d)))\n     (apply max (map dict_depth (dict-values d)))]\n    [else (+ 1 (apply max (map dict_depth (dict-values d))))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-ref d \"left\"))\n               (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (if (dict? d)\n      (if (dict-empty? d)\n          0\n          (apply max (map dict_depth (dict-values d))))\n      0))\n",
    "  (if (hash? d)\n      (let ([max-depth 0])\n        (hash-for-each\n         (lambda (k v)\n           (let ([depth (dict_depth v)])\n             (if (&gt; depth max-depth)\n                 (set! max-depth depth))))\n         d)\n        (+ max-depth 1))\n      0))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (add1 (dict_depth (first d))) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) (in-dict d)])\n         (let ([depth (+ 1 (dict_depth v))])\n           (when (> depth max-depth)\n             (set! max-depth depth))))\n       max-depth)]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (add1 (dict_depth (first d))) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d)))\n     (apply max (map dict_depth (hash-values d)))]\n    [else 1]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) 1]\n    [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d)))\n     (apply max (map dict_depth (first d)))]\n    [else\n     (apply max (map dict_depth (hash-values (first d))))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (\u03bb (x) (+ 1 (dict_depth (cdr x))))\n                 (dict-entries d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) (in-dict d)])\n         (let ([v-depth (dict-depth v)])\n           (when (> v-depth max-depth)\n             (set! max-depth v-depth))))\n       (+ max-depth 1))]))\n",
    "  (cond [(empty? d) 0]\n        [(and (hash? (first d)) (not (hash? (second d))))\n         (+ 1 (dict_depth (first d)))]\n        [else (max (dict_depth (first d))\n                   (dict_depth (second d)))]))\n",
    "  (cond [(dict? d) (add1 (max (dict_depth (dict-ref d \"left\"))\n                             (dict-ref d \"right\")))]\n        [else 0]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d)) (+ 1 (dict_depth (first d)))]\n        [else (+ 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (dict_depth (rest d))]\n    [else (max (dict_depth (rest d)) (dict_depth (first d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (first d))\n                   (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (add1 (dict_depth (first d)))\n                   (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (dict_depth (rest d))]\n    [else (max (dict_depth (rest d)) (dict_depth (first d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (cond\n    [(null? d) 0]\n    [(hash? (car d))\n     (max (dict_depth (car d)) (dict_depth (cdr d)))]\n    [else (dict_depth (cdr d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) d])\n         (let ([depth (dict_depth v)])\n           (when (> depth max-depth)\n             (set! max-depth depth))))\n       (+ max-depth 1))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (lambda (x) (+ 1 (dict_depth (cdr x))))\n                 (dict-entries d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (if (hash? d)\n      (apply max (map dict_depth (hash-values d)))\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d))))\n         (add1 (dict_depth (rest d)))]\n        [else (add1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) (in-dict d)])\n         (let ([depth (dict-depth v)])\n           (when (> depth max-depth)\n             (set! max-depth depth))))\n       (+ max-depth 1))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) d])\n         (when (dict? v)\n           (let ([depth (dict_depth v)])\n             (when (> depth max-depth)\n               (set! max-depth depth)))))\n       (+ max-depth 1))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (add1 (dict_depth (first d))) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) (dict_depth (rest d))]\n        [else (max (dict_depth (first d))\n                   (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first (first d)))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(dict? (first d))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) 1]\n        [else (+ 1 (dict_depth (first d)))]))\n",
    "  (if (dict? d)\n      (apply max (map dict_depth (dict-values d)))\n      0))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-ref d \"left\"))\n               (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict-ref d 'right))]))\n",
    "  (if (hash? d)\n      (let ([max-depth 0])\n        (hash-for-each\n         (lambda (k v)\n           (let ([depth (dict_depth v)])\n             (if (&gt; depth max-depth)\n                 (set! max-depth depth))))\n         d)\n        (+ max-depth 1))\n      0))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d 'left))\n                   (dict_depth (dict-ref d 'right)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (first d))\n                   (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) 1]\n        [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(and (hash? (first d)) (not (hash? (second d))))\n         (add1 (dict_depth (first d)))]\n        [(and (hash? (second d)) (not (hash? (first d))))\n         (add1 (dict_depth (second d)))]\n        [(and (hash? (first d)) (hash? (second d)))\n         (max (dict_depth (first d)) (dict_depth (second d)))]\n        [else 0]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d)) (max (dict_depth (first d))\n                                (dict_depth (rest d)))]\n        [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-ref d \"left\"))\n               (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (if (hash? d)\n      (apply max (map dict_depth (hash-values d)))\n      1))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (lambda (x)\n                   (if (hash? (cdr x))\n                       (+ 1 (dict_depth (cdr x)))\n                       1))\n                 d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (dict-ref d \"left\"))\n                   (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else (max (dict_depth (dict-ref d \"left\"))\n               (dict-ref d \"right\"))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (if (dict? d)\n      (let ([keys (dict-keys d)])\n        (if (empty? keys)\n            0\n            (apply max (map (lambda (k) (add1 (dict_depth (dict-ref d k)))) keys))))\n      0))\n",
    "  (if (hash? d)\n      (if (hash-empty? d)\n          0\n          (apply max (map dict_depth (hash-values d))))\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d))\n          (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d)))) (dict_depth (rest d))]\n        [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (\u03bb (x) (+ 1 (dict_depth (cdr x))))\n                 (dict-entries d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(dict? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (lambda (k v)\n                   (+ 1 (dict_depth v)))\n                 d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d)))) (dict_depth (rest d))]\n        [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (lambda (k v)\n                   (+ 1 (dict_depth v)))\n                 d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) (in-dict d)])\n         (let ([depth (dict-depth v)])\n           (if (&gt; depth max-depth)\n               (set! max-depth depth))))\n       (+ max-depth 1))]))\n</code>\n",
    "  (cond [(empty? d) 0]\n        [(not (dict? (first d))) (add1 (dict_depth (rest d)))]\n        [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(and (hash? (first d))\n              (hash? (second d)))\n         (+ 1 (max (dict_depth (first d))\n                   (dict_depth (second d))))]\n        [else 1]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(dict? d) (max (dict_depth (dict-ref d \"left\"))\n                    (dict-ref d \"right\"))]\n    [(number? d) 1]\n    [else 0]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first (first d)))\n         (max (dict_depth (first d)) (dict_depth (rest d)))]\n        [else (max 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) (dict_depth (rest d))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(dict? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d)) (+ 1 (dict_depth (first d)))]\n        [else (+ 1 (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d)))\n     (apply max (map dict_depth (hash-values d)))]\n    [else (+ 1 (apply max (map dict_depth (hash-values d))))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n</code>\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (let ([max-depth 0])\n       (for ([(k v) (in-dict d)])\n         (let ([v-depth (dict-depth v)])\n           (when (> v-depth max-depth)\n             (set! max-depth v-depth))))\n       (+ max-depth 1))]))\n",
    "  (cond [(empty? d) 0]\n        [(dict? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (max (dict_depth (first d))\n              (dict_depth (rest d)))]\n        [else (dict_depth (rest d))]))\n",
    "  (cond [(empty? d) 0]\n        [else (max (dict_depth (rest d))\n                   (dict_depth (second (first d))))]))\n",
    "  (if (hash? d)\n      (apply max (map dict_depth (hash-values d)))\n      0))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d))))\n         (add1 (dict_depth (rest d)))]\n        [else (max (dict_depth (rest d))\n                   (add1 (dict_depth (first (first d)))))]))\n",
    "  (if (dict? d)\n      (let ([keys (dict-keys d)])\n        (if (empty? keys)\n            1\n            (apply max (map (lambda (k) (+ 1 (dict_depth (dict-ref d k)))) keys))))\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d))) (add1 (dict_depth (rest d)))]\n    [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (hash? (first d)))\n     (apply max (map dict_depth (hash-values d)))]\n    [else (apply max (map dict_depth (hash-values d)))])\n  )\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) 1]\n    [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d)))) (add1 (dict_depth (rest d)))]\n        [else (add1 (dict_depth (rest d)))]))\n",
    "  (if (hash? d)\n      (apply max (map dict_depth (hash-values d)))\n      0))\n",
    "  (cond\n    [(empty? d) 0]\n    [else\n     (apply max\n            (map (lambda (x) (+ 1 (dict_depth (cdr x))))\n                 (dict-entries d)))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(hash? (first d))\n     (max (dict_depth (first d)) (dict_depth (rest d)))]\n    [else (dict_depth (rest d))]))\n",
    "  (cond\n    [(empty? d) 0]\n    [(not (dict? (first d))) 1]\n    [else (+ 1 (dict_depth (first d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(not (hash? (first (first d)))) (dict_depth (rest d))]\n        [else (max (dict_depth (first d)) (dict_depth (rest d)))]))\n",
    "  (cond [(empty? d) 0]\n        [(hash? (first d))\n         (let ([sub-depth (dict_depth (first d))])\n           (if (empty? (rest d))\n               sub-depth\n               (max sub-depth (dict_depth (rest d)))))]\n        [else (dict_depth (rest d))]))\n"
  ]
}