{
  "name": "mbpp_253_count_integer",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (if (integer? (car list1))\n          (+ 1 (count_integer (cdr list1)))\n          (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [else (if (integer? (first list1))\n                 (+ 1 (count_integer (rest list1)))\n                 (count_integer (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (+ 1 (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_a6oqm6.rkt:14:4\nactual:     4\nexpected:   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_a6oqm6.rkt:16:4\nactual:     4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (if (integer? (car list1))\n          (+ 1 (count_integer (cdr list1)))\n          (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (if (integer? (car list1))\n          (+ 1 (count_integer (cdr list1)))\n          (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [else (+ 1 (count_integer (rest list1)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi2w65uk4.rkt:13:4\nactual:     4\nexpected:   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi2w65uk4.rkt:15:4\nactual:     4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond ((null? list1) 0)\n        ((integer? (car list1)) (+ 1 (count_integer (cdr list1))))\n        (else (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond [(empty? list1) 0]\n        [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n        [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (+ 1 (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_a6oqm6.rkt:14:4\nactual:     4\nexpected:   2\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_a6oqm6.rkt:16:4\nactual:     4\nexpected:   2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (if (integer? (car list1))\n          (+ 1 (count_integer (cdr list1)))\n          (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(null? list1) 0]\n    [(integer? (car list1)) (+ 1 (count_integer (cdr list1)))]\n    [else (count_integer (cdr list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (if (null? list1)\n      0\n      (if (integer? (car list1))\n          (+ 1 (count_integer (cdr list1)))\n          (count_integer (cdr list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1666123064,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function that returns the number of integer elements in a given list.\n(define (count_integer list1)\n  (cond\n    [(empty? list1) 0]\n    [(integer? (first list1)) (+ 1 (count_integer (rest list1)))]\n    [else (count_integer (rest list1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_integer))\n    (check-equal? (candidate (list 1 2 \"abc\" 1.2)) 2)\n    (check-equal? (candidate (list 1 2 3)) 3)\n    (check-equal? (candidate (list 1 1.2 4 5.1)) 2)\n))\n\n(test-humaneval)",
      "timestamp": 1665510188,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}