{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n(define (text_lowercase_underscore text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_lowercase_underscore))\n    (check-equal? (candidate \"aab_cbbbc\") #t)\n    (check-equal? (candidate \"aab_Abbbc\") #f)\n    (check-equal? (candidate \"Aaab_abbbc\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"[a-z]+_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"[a-z]+_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n"
  ]
}