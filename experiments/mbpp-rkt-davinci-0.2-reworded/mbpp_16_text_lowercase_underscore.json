{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n(define (text_lowercase_underscore text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate text_lowercase_underscore))\n    (check-equal? (candidate \"aab_cbbbc\") #t)\n    (check-equal? (candidate \"aab_Abbbc\") #f)\n    (check-equal? (candidate \"Aaab_abbbc\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"[a-z]+_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"[a-z]+_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (define (helper text)\n    (cond\n      [(empty? text) true]\n      [(char-lower-case? (first text))\n       (cond\n         [(char=? (first text) #\\_)\n          (cond\n            [(char-lower-case? (second text)) (helper (rest (rest text)))])]\n         [else (helper (rest text))])]\n      [else false]))\n  (helper text))\n",
    "  (if (string-contains text #\\_)\n      (if (string-contains text #\\_)\n          (if (string-contains text #\\_)\n              (if (string-contains text #\\_)\n                  (if (string-contains text #\\_)\n                      (if (string-contains text #\\_)\n                          (if (string-contains text #\\_)\n                              (if (string-contains text #\\_)\n                                  (if (string-contains text #\\_)\n                                      (if (string-contains text #\\_)\n                                          (if (string-contains text #\\_)\n                                              (if (string-contains text #\\_)\n                                                  (if (string-contains text #\\_)\n                                                      (if (string-contains text #\\_)\n                                                          (if (string-contains text #\\_)\n                                                              (if (string-contains text #\\_)\n                                                                  (if (string-contains text #\\_)\n                                                                      (if (string-contains text #\\_)\n                                                                          (if (string-contains text #\\_)\n                                                                              (if (string-contains text #\\_)\n                                                                                  (if (string-contains text #\\_)\n                                                                                      (if (string-contains text #\\_)\n                                                                                          (if (string-contains text #\\_)\n                                                                                              (if (string-contains text #\\_)\n                                                                                                  (if (string-contains text #\\_)\n                                                                                                      (if (string-contains text #\\_)\n                                                                                                          (if (string-contains text #\\_)\n                                                                                                              (if (string-contains text #\\_)\n                                                                                                                  (if (string-contains text #\\_)\n                                                                                                                      (if (string-contains text #\\_)\n                                                                                                                ",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"_\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (andmap char-lower-case? (string-&gt;list text)))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (andmap char-lower-case? (string-&gt;list text)))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"_\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (define (text_lowercase_underscore_iter text)\n    (cond\n      [(empty? text) #t]\n      [(char-lower-case? (first text))\n       (cond\n         [(char=? (first text) #\\_) (text_lowercase_underscore_iter (rest text))]\n         [else (text_lowercase_underscore_iter (rest text))])]\n      [else #f]))\n  (text_lowercase_underscore_iter text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(char-lower-case? (first text))\n     (cond\n       [(string=? \"_\" (second text))\n        (text_lowercase_underscore (rest (rest text)))]\n       [else (text_lowercase_underscore (rest text))])]\n    [else false]))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (define (helper text)\n    (cond ((null? text) #t)\n          ((and (char-lower-case? (car text)) (char=? (cadr text) #\\_)) (helper (cddr text)))\n          (else #f)))\n  (helper (string->list text)))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (cond\n    [(empty? text) false]\n    [(char-lower-case? (first text))\n     (cond\n       [(empty? (rest text)) false]\n       [(char-lower-case? (second text))\n        (cond\n          [(empty? (rest (rest text))) false]\n          [(char=? (third text) #\\_)\n           (cond\n             [(empty? (rest (rest (rest text)))) false]\n             [(char-lower-case? (fourth text))\n              (text_lowercase_underscore (rest (rest (rest (rest text)))))]\n             [else false])]\n          [else false])]\n       [else false])]\n    [else false]))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (andmap (lambda (x) (or (char-lower-case? x) (char=? x #\\_))) text))\n",
    "  (andmap char-lower-case? (string-&gt;list text)))\n",
    "  (define (helper text)\n    (cond\n      [(empty? text) #t]\n      [(char-lower-case? (first text)) (helper (rest text))]\n      [(char=? (first text) #\\_) (helper (rest text))]\n      [else #f]))\n  (helper text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (cond\n    [(empty? text) #f]\n    [(char-lower-case? (first text))\n     (cond\n       [(char=? (first text) #\\_) #f]\n       [(char-lower-case? (second text))\n        (text_lowercase_underscore (rest (rest text)))]\n       [else #f])]\n    [else #f]))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"[a-z]+_[a-z]+\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (regexp-match? #rx\"([a-z]_)+\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+(_[a-z]+)*$\" text))\n",
    "  (define (helper text)\n    (cond\n      [(empty? text) #t]\n      [(or (char-alphabetic? (first text)) (char=? (first text) #\\_)) (helper (rest text))]\n      [else #f]))\n  (helper (string->list text)))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z]+_[a-z]+$\" text))\n",
    "  (regexp-match? #rx\"^[a-z_]+$\" text))\n"
  ]
}