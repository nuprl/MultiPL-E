{
  "name": "mbpp_271_even_Power_Sum",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n(define (even_Power_Sum n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate even_Power_Sum))\n    (check-equal? (candidate 2) 1056)\n    (check-equal? (candidate 3) 8832)\n    (check-equal? (candidate 1) 32)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (even_Power_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_helper (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_helper n 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 5)\n         (even_Power_Sum (- n 1)))))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_helper n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_helper (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_helper n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter i sum)\n    (cond\n      [(= i n) sum]\n      [else (even_Power_Sum_iter (+ i 1) (+ sum (expt (* i 2) 5)))]))\n  (even_Power_Sum_iter 0 0))\n",
    "  (if (= n 0)\n      0\n      (+ (expt (* 2 n) 5)\n         (even_Power_Sum (- n 1)))))\n",
    "  (define (even? n)\n    (if (zero? n)\n        #t\n        (odd? (- n 1))))\n  (define (odd? n)\n    (if (zero? n)\n        #f\n        (even? (- n 1))))\n  (define (sum_of_even_power n)\n    (if (even? n)\n        (expt n 5)\n        0))\n  (define (sum_of_even_power_n n)\n    (if (zero? n)\n        0\n        (+ (sum_of_even_power n) (sum_of_even_power_n (- n 1)))))\n  (sum_of_even_power_n n))\n",
    "  (define (sum_even_power i acc)\n    (if (= i n)\n        acc\n        (sum_even_power (+ i 1) (+ acc (expt (* 2 i) 5)))))\n  (sum_even_power 0 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (if (= n 1)\n        1\n        (* n (power (- n 1)))))\n  (define (sum n)\n    (if (= n 1)\n        (if (even? n)\n            (power n)\n            0)\n        (+ (if (even? n)\n               (power n)\n               0)\n           (sum (- n 1)))))\n  (sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even? n)\n    (if (= (remainder n 2) 0)\n        #t\n        #f))\n  (define (power n)\n    (expt n 5))\n  (define (sum n)\n    (if (= n 0)\n        0\n        (+ (power n) (sum (- n 1)))))\n  (define (even_sum n)\n    (if (= n 0)\n        0\n        (if (even? n)\n            (+ (power n) (even_sum (- n 1)))\n            (even_sum (- n 1)))))\n  (even_sum n))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (cond\n    [(= n 0) 0]\n    [else (+ (expt (* 2 n) 5) (even_Power_Sum (- n 1)))]))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (cond\n      [(= n 0) sum]\n      [else (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))]))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* n 2) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n",
    "  (define (even_Power_Sum_iter n sum)\n    (if (= n 0)\n        sum\n        (even_Power_Sum_iter (- n 1) (+ sum (expt (* 2 n) 5)))))\n  (even_Power_Sum_iter n 0))\n"
  ]
}