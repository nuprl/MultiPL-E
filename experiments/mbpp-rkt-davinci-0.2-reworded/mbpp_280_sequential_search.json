{
  "name": "mbpp_280_sequential_search",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list and element and returns a list containing a boolean that indicates if the element is in the list and the index position of the element (or -1 if the element is not found).\n(define (sequential_search dlist item)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sequential_search))\n    (check-equal? (candidate (list 11 23 58 31 56 77 43 12 65 19) 31) (list #t 3))\n    (check-equal? (candidate (list 12 32 45 62 35 47 44 61) 61) (list #t 7))\n    (check-equal? (candidate (list 9 10 17 19 22 39 48 56) 48) (list #t 6))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper dlist item index)\n    (cond\n      [(empty? dlist) (list #f -1)]\n      [(equal? (first dlist) item) (list #t index)]\n      [else (helper (rest dlist) item (+ index 1))]))\n  (helper dlist item 0))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n",
    "  (cond [(empty? dlist) (list #f -1)]\n        [(equal? item (first dlist)) (list #t 0)]\n        [else (let ([result (sequential_search (rest dlist) item)])\n                (list (first result) (+ 1 (second result))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n",
    "  (if (null? dlist)\n      (list #f -1)\n      (if (equal? (car dlist) item)\n          (list #t (length dlist))\n          (sequential_search (cdr dlist) item))))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let* ([rest (rest dlist)]\n                 [result (sequential_search rest item)])\n             (if (first result)\n                 (list #t (+ 1 (second result)))\n                 (list #f -1)))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([recurse (sequential_search (rest dlist) item)])\n            (list (first recurse) (+ 1 (second recurse))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else\n     (let ([rest (sequential_search (rest dlist) item)])\n       (list (first rest) (+ 1 (second rest))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t (sub1 (length dlist)))]\n    [else (sequential_search (rest dlist) item)]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? item (first dlist)) (list #t 0)]\n    [else (let ([rest (sequential_search (rest dlist) item)])\n            (list (first rest) (+ (second rest) 1)))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ (second result) 1)))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([result (sequential_search (rest dlist) item)])\n            (list (first result) (+ 1 (second result))))]))\n",
    "  (cond\n    [(empty? dlist) (list #f -1)]\n    [(equal? (first dlist) item) (list #t 0)]\n    [else (let ([res (sequential_search (rest dlist) item)])\n            (list (first res) (+ 1 (second res))))]))\n",
    "  (cond [(empty? dlist) (list #f -1)]\n        [(equal? (first dlist) item) (list #t (sub1 (length dlist)))]\n        [else (sequential_search (rest dlist) item)]))\n"
  ]
}