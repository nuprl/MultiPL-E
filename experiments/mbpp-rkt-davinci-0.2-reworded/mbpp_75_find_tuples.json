{
  "name": "mbpp_75_find_tuples",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find lists which have all elements divisible by k from the given list of lists.\n(define (find_tuples test_list K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_tuples))\n    (check-equal? (candidate (list (list 6 24 12) (list 7 9 6) (list 12 18 21)) 6) (list (list 6 24 12)))\n    (check-equal? (candidate (list (list 5 25 30) (list 4 2 3) (list 7 8 9)) 5) (list (list 5 25 30)))\n    (check-equal? (candidate (list (list 7 9 16) (list 8 16 4) (list 19 17 18)) 4) (list (list 8 16 4)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo y K) 0))\n                    x))\n          test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (lst)\n            (andmap (lambda (x) (= (modulo x K) 0)) lst))\n          test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (remainder y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo y K) 0))\n                    x))\n          test_list))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo y K) 0)) x)) test_list))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo y K) 0))\n                    x))\n          test_list))\n"
  ]
}