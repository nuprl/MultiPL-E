{
  "name": "mbpp_223_is_majority",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (if (= n 0)\n      #f\n      (if (= (first arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (rest arr) (- n 1) x))\n          (is_majority (rest arr) n x))))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (if (> n (/ (length arr) 2)) true (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= n 0) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (> i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper lst n x)\n    (cond [(empty? lst) #f]\n          [(= x (first lst)) (if (> n (/ (length lst) 2)) #t (helper (rest lst) (+ n 1) x))]\n          [else (helper (rest lst) n x)]))\n  (helper arr n x))\n",
    "  (cond\n    [(= n 0) false]\n    [(= (car arr) x)\n     (if (>= n (/ (length arr) 2))\n         true\n         (is_majority (cdr arr) (- n 1) x))]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (is_majority_helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority_helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority_helper (cdr arr) (- n 1) x count)]))\n  (if (> (/ n 2) (is_majority_helper arr n x 0)) #f #t))\n",
    "  (define (is_majority_iter arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority_iter (rest arr) (- n 1) x)]\n      [else (is_majority_iter (rest arr) (- n 1) x)]))\n  (is_majority_iter arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) false]\n      [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) true)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) true (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) (is_majority-helper arr n x (+ i 1))]\n      [(> i (/ n 2)) #t]\n      [else #f]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (&gt;= (/ n 2) (count-occurrences arr x))\n           #t\n           #f)]\n      [else (is_majority-helper (rest arr) n x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is-majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (modulo n 2) 0)\n      (helper arr (/ n 2) x)\n      (helper arr (/ (+ n 1) 2) x)))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) #t)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond [(= n 0) #f]\n        [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n        [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (if (> n 1) (helper (cdr arr) (- n 1) x) #t)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) (/ n 2)) #t #f))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (if (= n 0)\n      #f\n      (if (= (first arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (rest arr) (- n 1) x))\n          (is_majority (rest arr) (- n 1) x))))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (list-ref arr mid))\n        (if (= mid 0)\n            #t\n            (if (= x (list-ref arr (- mid 1)))\n                (is_majority arr (- mid 1) x)\n                #t))\n        (if (&lt; x (list-ref arr mid))\n            (is_majority (take arr mid) mid x)\n            (is_majority (drop arr mid) (- n mid) x)))))\n</code>\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= (vector-ref arr mid) x)\n        (if (= (vector-ref arr (- mid 1)) x)\n            (is_majority (subvector arr 0 mid) mid x)\n            (if (= (vector-ref arr (+ mid 1)) x)\n                (is_majority (subvector arr (+ mid 1) (- n 1)) (- n 1) x)\n                #t))\n        (if (&lt; (vector-ref arr mid) x)\n            (is_majority (subvector arr (+ mid 1) (- n 1)) (- n 1) x)\n            (is_majority (subvector arr 0 mid) mid x)))))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (list-ref arr i)) #t)\n          (else (is-majority-helper arr n x (+ i 1)))))\n  (is-majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= (list-ref arr mid) x)\n        (if (= (list-ref arr (- mid 1)) x)\n            (is_majority (sublist arr 0 mid) mid x)\n            #t)\n        (if (&gt; (list-ref arr mid) x)\n            (is_majority (sublist arr 0 mid) mid x)\n            (is_majority (sublist arr mid) (- n mid) x)))))\n</code>\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) #t)\n          (else (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) (if (>= i (/ n 2)) #t (helper arr n x (+ i 1)))]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (recur i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (recur (+ i 1))]))\n  (recur 0))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper (+ i 1))]))\n  (helper 0))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (loop (+ i 1))])))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= n 0) #f]\n      [(= x (list-ref arr i))\n       (if (>= (* 2 i) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x count)\n    (cond ((= n 0)\n           (if (> count (/ n 2))\n               #t\n               #f))\n          ((= (car arr) x)\n           (helper (cdr arr) (- n 1) x (+ count 1)))\n          (else\n           (helper (cdr arr) (- n 1) x count))))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (is_majority-helper (rest arr) (- n 1) x))\n            (is_majority-helper (rest arr) n x))))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) n x)]))\n  (if (helper arr n x)\n      (if (> (count_occurrences arr n x) (/ n 2))\n          #t\n          #f)\n      #f))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond [(= n 0) #f]\n          [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) #t)]\n          [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (> n 0)\n      (helper arr n x)\n      #f))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x)\n       (if (&gt; n (/ (length arr) 2))\n           #t\n           (helper (cdr arr) (- n 1) x))]\n      [else (helper (cdr arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-iter arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (+ i (/ n 2)) n)\n           #t\n           (is_majority-iter arr n x (+ i 1)))]\n      [else (is_majority-iter arr n x (+ i 1))]))\n  (is_majority-iter arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (search-for-x arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (search-for-x (rest arr) (- n 1) x)]\n      [else (search-for-x (rest arr) (- n 1) x)]))\n  (if (= (search-for-x arr n x) #f)\n      #f\n      (> (search-for-x arr n x) (/ n 2))))\n",
    "  (define (is_majority-helper arr n x start end)\n    (cond [(= start end) #f]\n          [(= (arr start) x)\n           (if (>= (+ start (quotient n 2)) end)\n               #t\n               (is_majority-helper arr n x (+ start 1) end))]\n          [else (is_majority-helper arr n x (+ start 1) end)]))\n  (is_majority-helper arr n x 0 n))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= n 1) (= (car arr) x)]\n    [else\n     (cond\n       [(= (car arr) x)\n        (if (>= n 2)\n            (is_majority (cdr arr) (- n 2) x)\n            #t)]\n       [else\n        (is_majority (cdr arr) (- n 1) x)])]))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= (list-ref arr mid) x)\n        (if (= (list-ref arr (- mid 1)) x)\n            (is_majority (sublist arr 0 mid) mid x)\n            #t)\n        (if (= (list-ref arr (- mid 1)) x)\n            (is_majority (sublist arr mid) mid x)\n            #f))))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (list-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority_helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority_helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (is_majority_helper (cdr arr) (- n 1) x count))))\n  (is_majority_helper arr n x 0))\n</code>\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (list-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority_helper arr n x left right)\n    (cond\n      [(= left right) #f]\n      [(= (array-ref arr left) x)\n       (if (> (+ left right) n)\n           #t\n           (is_majority_helper arr n x (+ left 1) right))]\n      [else (is_majority_helper arr n x (+ left 1) right)]))\n  (is_majority_helper arr n x 0 (- n 1)))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (&gt;= (/ n 2) (add1 (helper (rest arr) n x))) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (list-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (first arr) x)\n            (if (>= n (/ (length arr) 2))\n                #t\n                (helper (rest arr) (- n 1) x))\n            (helper (rest arr) n x))))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (= x (list-ref arr mid))\n        (if (= (count x arr) (quotient n 2))\n            #t\n            #f)\n        #f)))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (&gt;= (+ i (quotient n 2)) n)\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond [(empty? arr) #f]\n          [(= x (first arr)) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n          [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (list-ref arr i)) #t)\n          (else (is-majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (if (= n 1)\n                #t\n                (helper (cdr arr) (- n 1) x))\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) (if (>= i (/ n 2)) #t (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (is_majority-helper (cdr arr) (- n 1) x)]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i))\n       (if (>= (- n i) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (&gt; count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (if (= n 0)\n      #f\n      (if (= x (car arr))\n          (if (>= (/ n 2) (count_occurrences arr x))\n              #t\n              #f)\n          (is_majority (cdr arr) (- n 1) x))))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (helper (cdr arr) (- n 1) x count)]))\n  (if (> (helper arr n x 0) (/ n 2))\n      #t\n      #f))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority_helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority_helper (rest arr) n x (+ count 1))]\n      [else (is_majority_helper (rest arr) n x count)]))\n  (is_majority_helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (is_majority-helper (cdr arr) (- n 1) x)\n            (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= n (/ n 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond ((= i n) #f)\n          ((= (array-ref arr i) x) #t)\n          (else (is_majority-helper arr n x (+ i 1)))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (add1 (helper (rest arr) n x))) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (let ([mid (quotient n 2)])\n    (if (equal? (list-ref arr mid) x)\n        (if (equal? (list-ref arr (+ mid 1)) x)\n            #t\n            #f)\n        #f)))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1)))\n          ((&gt; count (/ n 2)) #t)\n          (else (is_majority-helper (cdr arr) (- n 1) x count))))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (if (= n 0)\n      #f\n      (if (= (car arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (vector-ref arr i) x)\n       (if (>= (* i 2) n)\n           #t\n           (is_majority_helper arr n x (+ i 1)))]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr)) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (>= (* n 2) (length arr))\n           #t\n           (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (= count (/ n 2))]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= (car arr) x) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (if (or (= n 0) (= n 1))\n        #f\n        (let ([mid (quotient n 2)])\n          (if (= x (list-ref arr mid))\n              (if (or (= (list-ref arr (- mid 1)) x) (= (list-ref arr (+ mid 1)) x))\n                  #t\n                  (if (&gt; mid 0)\n                      (helper (sublist arr 0 mid) mid x)\n                      (helper (sublist arr (+ mid 1) n) (- n (+ mid 1)) x)))\n              (if (&lt; x (list-ref arr mid))\n                  (helper (sublist arr 0 mid) mid x)\n                  (helper (sublist arr (+ mid 1) n) (- n (+ mid 1)) x))))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (cond\n    [(= n 0) false]\n    [(= (car arr) x) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (helper (cdr arr) (- n 1) x)\n            (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond ((= i n) #f)\n          ((= x (list-ref arr i)) #t)\n          (else (is_majority_helper arr n x (+ i 1)))))\n  (is_majority_helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= x (car arr))\n       (if (= n 1)\n           #t\n           (is_majority-helper (cdr arr) (- n 1) x))]\n      [else (is_majority-helper (cdr arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond ((= n 0) #f)\n          ((= x (car arr)) #t)\n          (else (helper (cdr arr) (- n 1) x))))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (if (> (/ n 2) (is_majority-helper arr n x 0))\n      #f\n      #t))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (&gt; n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i))\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (if (= n 0)\n      #f\n      (let* ([mid (quotient n 2)]\n             [mid-elem (list-ref arr mid)])\n        (if (= x mid-elem)\n            (if (>= n 2)\n                (if (= x (list-ref arr (- mid 1)))\n                    (is_majority arr mid x)\n                    #t)\n                #t)\n            (if (< x mid-elem)\n                (is_majority (sublist arr 0 mid) mid x)\n                (is_majority (sublist arr (+ mid 1) n) (- n (+ mid 1)) x))))))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (if (&gt; n 0)\n      (is_majority-helper arr n x)\n      #f))\n</code>\n",
    "  (if (= n 0)\n      #f\n      (if (= x (car arr))\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n",
    "  (if (= n 0)\n      #f\n      (if (= x (car arr))\n          (if (>= (/ n 2) (count x arr))\n              #t\n              #f)\n          (is_majority (cdr arr) (- n 1) x))))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (or (is_majority (cdr arr) (- n 1) x) #t)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (if (= n 0)\n        #f\n        (if (= (car arr) x)\n            (is_majority-helper (cdr arr) (- n 1) x)\n            (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (>= (+ i 1) (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr)\n       (if (>= count (/ n 2)) #t #f)]\n      [(= (first arr) x)\n       (is_majority-helper (rest arr) n x (+ count 1))]\n      [else\n       (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= x (car arr)) (is_majority (cdr arr) (- n 1) x)]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) #t]\n      [else (helper (rest arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (if (= n 0)\n      #f\n      (if (= (car arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (helper (rest arr) (- n 1) x)]\n      [else (helper (rest arr) (- n 1) x)]))\n  (if (= (helper arr n x) (- n (/ n 2))) #t #f))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) #t]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x)]\n      [else #f]))\n  (is_majority-helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (= n 1)\n           #t\n           (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (helper arr n x (+ i 1))]))\n  (helper arr n x 0))\n",
    "  (cond\n    [(= n 0) #f]\n    [(= (first arr) x) (is_majority (rest arr) (- n 1) x)]\n    [else (is_majority (rest arr) (- n 1) x)]))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= n (/ n 2)) #t (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x))\n          (else (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x)\n    (cond ((= n 0) #f)\n          ((= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x))\n          (else (is_majority-helper (cdr arr) (- n 1) x))))\n  (is_majority-helper arr n x))\n",
    "  (if (= n 0)\n      #f\n      (if (= (car arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (cdr arr) (- n 1) x))\n          (is_majority (cdr arr) (- n 1) x))))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (is_majority-helper (rest arr) n x (+ count 1))]\n      [else (is_majority-helper (rest arr) n x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x count)\n    (cond\n      [(empty? arr) (if (> count (/ n 2)) #t #f)]\n      [(= (first arr) x) (helper (rest arr) n x (+ count 1))]\n      [else (helper (rest arr) n x count)]))\n  (helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority-helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority-helper (cdr arr) (- n 1) x count)]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (= n 1)\n           #t\n           (helper (rest arr) (- n 1) x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x)\n       (if (&gt;= (/ n 2) (count-occurrences arr x))\n           #t\n           #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= x (first arr)) (if (>= (/ n 2) (count x arr)) #t #f)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority_helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority_helper arr n x (+ i 1))]))\n  (is_majority_helper arr n x 0))\n"
  ]
}