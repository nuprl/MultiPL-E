{
  "name": "mbpp_223_is_majority",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a sorted list, its length (n), and an element and returns whether the element is the majority element in the given sorted list. (The majority element is the element that occurs more than n/2 times.)\n(define (is_majority arr n x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_majority))\n    (check-equal? (candidate (list 1 2 3 3 3 3 10) 7 3) #t)\n    (check-equal? (candidate (list 1 1 2 4 4 4 6 6) 8 4) #f)\n    (check-equal? (candidate (list 1 1 1 2 2) 5 1) #t)\n    (check-equal? (candidate (list 1 1 2 2) 5 1) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (if (= n 0)\n      #f\n      (if (= (first arr) x)\n          (if (>= n (/ (length arr) 2))\n              #t\n              (is_majority (rest arr) (- n 1) x))\n          (is_majority (rest arr) n x))))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (array-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= x (first arr)) (if (> n (/ (length arr) 2)) true (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= n 0) #f]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (is_majority-helper (rest arr) (- n 1) x)]\n      [else (is_majority-helper (rest arr) (- n 1) x)]))\n  (is_majority-helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (vector-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x)\n       (if (> i (/ n 2))\n           #t\n           (is_majority-helper arr n x (+ i 1)))]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (if (> n (/ (length arr) 2)) #t (helper (rest arr) n x))]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper lst n x)\n    (cond [(empty? lst) #f]\n          [(= x (first lst)) (if (> n (/ (length lst) 2)) #t (helper (rest lst) (+ n 1) x))]\n          [else (helper (rest lst) n x)]))\n  (helper arr n x))\n",
    "  (cond\n    [(= n 0) false]\n    [(= (car arr) x)\n     (if (>= n (/ (length arr) 2))\n         true\n         (is_majority (cdr arr) (- n 1) x))]\n    [else (is_majority (cdr arr) (- n 1) x)]))\n",
    "  (define (is_majority_helper arr n x count)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (is_majority_helper (cdr arr) (- n 1) x (+ count 1))]\n      [else (is_majority_helper (cdr arr) (- n 1) x count)]))\n  (if (> (/ n 2) (is_majority_helper arr n x 0)) #f #t))\n",
    "  (define (is_majority_iter arr n x)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) x) (is_majority_iter (rest arr) (- n 1) x)]\n      [else (is_majority_iter (rest arr) (- n 1) x)]))\n  (is_majority_iter arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= x (list-ref arr i)) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n",
    "  (define (helper arr n x)\n    (cond\n      [(empty? arr) false]\n      [(= (first arr) x) (if (>= (/ n 2) (count arr x)) true false)]\n      [else (helper (rest arr) n x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) false]\n      [(= x (car arr)) (or (helper (cdr arr) (- n 1) x) true)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (helper arr n x)\n    (cond\n      [(= n 0) #f]\n      [(= (car arr) x) (helper (cdr arr) (- n 1) x)]\n      [else (helper (cdr arr) (- n 1) x)]))\n  (helper arr n x))\n",
    "  (define (is_majority-helper arr n x i)\n    (cond\n      [(= i n) #f]\n      [(= (list-ref arr i) x) #t]\n      [else (is_majority-helper arr n x (+ i 1))]))\n  (is_majority-helper arr n x 0))\n"
  ]
}