{
  "name": "mbpp_619_move_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to move all the numbers to the end of the given string.\n(define (move_num test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_num))\n    (check-equal? (candidate \"I1love143you55three3000thousand\") \"Iloveyouthreethousand1143553000\")\n    (check-equal? (candidate \"Avengers124Assemble\") \"AvengersAssemble124\")\n    (check-equal? (candidate \"Its11our12path13to14see15things16do17things\") \"Itsourpathtoseethingsdothings11121314151617\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx\"[^0-9]\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x)))\n                   (string->list test_str))\n           (filter (lambda (x) (number? x))\n                   (string->list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (let loop ([test_str test_str]\n             [result \"\"])\n    (cond [(empty? test_str) result]\n          [(char-numeric? (first test_str))\n           (loop (rest test_str) (string-append result (first test_str)))]\n          [else (loop (rest test_str) (string-append result (first test_str)))])))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (define (is-num? c)\n    (and (char-numeric? c) (not (char=? c #\\space))))\n  (define (move-num-helper str)\n    (cond\n      [(empty? str) empty]\n      [(is-num? (first str))\n       (cons (first str) (move-num-helper (rest str)))]\n      [else (move-num-helper (rest str))]))\n  (string-append (move-num-helper test_str) (regexp-replace* #rx\"[0-9]\" test_str \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join (append (filter (lambda (x) (not (char-numeric? x))) (string->list test_str))\n                      (filter (lambda (x) (char-numeric? x)) (string->list test_str)))\n               \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (define (move_num_helper test_str result)\n    (if (empty? test_str)\n        result\n        (if (char-numeric? (first test_str))\n            (move_num_helper (rest test_str) (append result (list (first test_str))))\n            (move_num_helper (rest test_str) (append (list (first test_str)) result)))))\n  (move_num_helper test_str '()))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (let loop ([str test_str]\n             [result '()])\n    (cond [(empty? str) (list->string (reverse result))]\n          [(char-numeric? (first str))\n           (loop (rest str) (cons (first str) result))]\n          [else (loop (rest str) (cons (first str) result))])))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x))) (string->list test_str))\n           (filter (lambda (x) (number? x)) (string->list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[0-9]\" test_str \"\")\n   (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[0-9]\" test_str \"\")\n   (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"\\\\d+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (char-numeric? x))) (string->list test_str))\n           (filter (lambda (x) (char-numeric? x)) (string->list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]+\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]+\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x))) (string-&gt;list test_str))\n           (filter (lambda (x) (number? x)) (string-&gt;list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append\n    (filter (lambda (x) (not (char-numeric? x))) (string->list test_str))\n    (filter (lambda (x) (char-numeric? x)) (string->list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[0-9]\" test_str \"\")\n   (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]+\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]+\" test_str \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (let ([nums (regexp-match* #rx\"[0-9]\" test_str)])\n    (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                   (apply string-append nums))))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[0-9]\" test_str \"\")\n   (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[^0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (define (is_num? c)\n    (and (char-numeric? c) (not (char=? c #\\0))))\n  (define (move_num_helper test_str nums)\n    (cond\n      [(empty? test_str) (append nums (list #\\space))]\n      [(is_num? (first test_str)) (move_num_helper (rest test_str) (append nums (list (first test_str))))]\n      [else (append (list (first test_str)) (move_num_helper (rest test_str) nums))]))\n  (move_num_helper test_str empty))\n",
    "  (string-append\n   (regexp-replace* #rx\"[0-9]\" test_str \"\")\n   (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x))) (string-&gt;list test_str))\n           (filter (lambda (x) (number? x)) (string-&gt;list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x))) (string-&gt;list test_str))\n           (filter (lambda (x) (number? x)) (string-&gt;list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append\n   (regexp-replace* #rx\"[0-9]+\" test_str \"\")\n   (regexp-replace* #rx\"[^0-9]+\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (char-numeric? x))) (string-&gt;list test_str))\n           (filter (lambda (x) (char-numeric? x)) (string-&gt;list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (char-numeric? x))) (string->list test_str))\n           (filter (lambda (x) (char-numeric? x)) (string->list test_str)))\n   \"\"))\n",
    "  (let loop ([i 0] [result '()])\n    (cond [(= i (string-length test_str)) (apply string (reverse result))]\n          [(char-numeric? (string-ref test_str i)) (loop (+ i 1) (cons (string-ref test_str i) result))]\n          [else (loop (+ i 1) (cons (string-ref test_str i) result))])))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x))) (string-&gt;list test_str))\n           (filter (lambda (x) (number? x)) (string-&gt;list test_str)))\n   \"\"))\n</code>\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append\n    (filter (lambda (x) (not (number? x))) (string->list test_str))\n    (filter (lambda (x) (number? x)) (string->list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[^0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (char-numeric? x))) (string->list test_str))\n           (filter (lambda (x) (char-numeric? x)) (string->list test_str)))\n   \"\"))\n"
  ]
}