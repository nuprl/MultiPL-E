{
  "name": "mbpp_619_move_num",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to move all the numbers to the end of the given string.\n(define (move_num test_str)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_num))\n    (check-equal? (candidate \"I1love143you55three3000thousand\") \"Iloveyouthreethousand1143553000\")\n    (check-equal? (candidate \"Avengers124Assemble\") \"AvengersAssemble124\")\n    (check-equal? (candidate \"Its11our12path13to14see15things16do17things\") \"Itsourpathtoseethingsdothings11121314151617\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx\"[^0-9]\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-join\n   (append (filter (lambda (x) (not (number? x)))\n                   (string->list test_str))\n           (filter (lambda (x) (number? x))\n                   (string->list test_str)))\n   \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"[0-9]+\" test_str \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[0-9]\" test_str \"\")\n                 (regexp-replace* #rx\"[^0-9]\" test_str \"\")))\n"
  ]
}