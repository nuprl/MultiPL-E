{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the first non-repeated character in a given string.\n(define (first_non_repeating_character str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_non_repeating_character))\n    (check-equal? (candidate \"abcabc\") #f)\n    (check-equal? (candidate \"abc\") \"a\")\n    (check-equal? (candidate \"ababc\") \"c\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (let ([c (string-ref str1 i)])\n        (set! str2 (string-replace c #\\space str2))\n        (set! str2 (string-replace c #\\space str2))))\n    (string-ref str2 0)))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([c (in-string str1)])\n      (not (string-contains str2 (string c c))))))\n",
    "  (let ([str2 (string->list str1)])\n    (for ([i (in-range (string-length str1))])\n      (let ([char (list-ref str2 i)])\n        (if (not (member char (rest str2)))\n            (return char))))))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([c (in-string str1)]\n                #:when (not (string-contains str2 c 2)))\n      c)))\n",
    "  (let ([str2 (string->list str1)])\n    (for/first ([c (in-list str2)]\n                #:when (not (member c (remove c str2))))\n      c)))\n",
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (let ([c (string-ref str1 i)])\n        (string-set! str2 i #\\space)\n        (if (string-contains? str2 c)\n            (string-set! str2 i #\\space)\n            (return c))))))\n",
    "  (let ([str2 (string-&gt;list str1)])\n    (for/first ([ch (in-list str2)]\n                #:when (not (member ch (remove ch str2))))\n      ch)))\n",
    "  (define (first_non_repeating_character_helper str1 i)\n    (if (= i (string-length str1))\n        #\\space\n        (if (string-contains str1 (string-ref str1 i))\n            (first_non_repeating_character_helper str1 (+ i 1))\n            (string-ref str1 i))))\n  (first_non_repeating_character_helper str1 0))\n",
    "  (let ([str2 (string-append str1)])\n    (for ([i (in-range (string-length str1))])\n      (let ([char (string-ref str1 i)])\n        (let ([j (string-index str2 char)])\n          (string-set! str2 j #\\_)\n          (if (string-index str2 char)\n              (string-set! str1 i #\\_)))))\n    (string-ref str1 (string-index str1 #\\_))))\n",
    "  (let ([str2 (string-copy str1)])\n    (for ([i (in-range (string-length str1))])\n      (let ([c (string-ref str1 i)])\n        (string-set! str2 i #\\space)\n        (when (string-contains? str2 c)\n          (string-set! str2 i #\\space))))\n    (string-ref str1 (string-index str2 #\\space))))\n",
    "  (let ([str (string->list str1)])\n    (for/first ([c (in-list str)]\n                #:when (not (member c (remove c str))))\n      c)))\n",
    "  (let ([str2 (string->list str1)])\n    (cond\n      [(empty? str2) #f]\n      [(not (member (first str2) (rest str2))) (first str2)]\n      [else (first_non_repeating_character (list->string (rest str2)))])))\n",
    "  (define (first_non_repeating_character_helper str1 str2)\n    (if (string-empty? str1)\n        (if (string-empty? str2)\n            #f\n            (first_non_repeating_character_helper str2 \"\"))\n        (if (string-contains str2 (string-ref str1 0))\n            (first_non_repeating_character_helper (substring str1 1) str2)\n            (first_non_repeating_character_helper (substring str1 1) (string-append str2 (string-ref str1 0))))))\n  (first_non_repeating_character_helper str1 \"\"))\n",
    "  (let ([str2 (string-append str1 str1)])\n    (for/first ([i (in-range (string-length str1))])\n      (if (not (string-contains str2 (string-ref str1 i)))\n          (string-ref str1 i)))))\n",
    "  (let ([char-counts (make-hash)])\n    (for ([char (in-string str1)])\n      (hash-update char-counts char add1 1))\n    (for ([char (in-string str1)])\n      (when (= 1 (hash-ref char-counts char 0))\n        (return char)))))\n",
    "  (let ([char-counts (make-hash)])\n    (for ([c (in-string str1)])\n      (hash-update! char-counts c add1 1))\n    (for ([c (in-string str1)])\n      (when (= (hash-ref char-counts c) 1)\n        (return c)))))\n",
    "  (let ((str2 (string-&gt;list str1)))\n    (define (first_non_repeating_character_helper str2)\n      (if (null? str2)\n          #f\n          (if (member (car str2) (cdr str2))\n              (first_non_repeating_character_helper (cdr str2))\n              (car str2))))\n    (first_non_repeating_character_helper str2)))\n",
    "  (define (first_non_repeating_character_helper str1 str2)\n    (cond ((empty? str1) str2)\n          ((char-in-string? (first str1) str2) (first_non_repeating_character_helper (rest str1) str2))\n          (else (first_non_repeating_character_helper (rest str1) (string (first str1))))))\n  (first_non_repeating_character_helper str1 \"\"))\n",
    "  (let ([str1 (string-&gt;list str1)])\n    (for/first ([ch (in-list str1)]\n                #:when (not (member ch (remove ch str1))))\n      ch)))\n",
    "  (let ([char-counts (make-hash)])\n    (for ([c (in-string str1)])\n      (hash-update! char-counts c add1 1))\n    (for ([c (in-string str1)])\n      (when (= (hash-ref char-counts c) 1)\n        (return c)))))\n"
  ]
}