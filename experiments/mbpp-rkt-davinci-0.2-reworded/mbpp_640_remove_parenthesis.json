{
  "name": "mbpp_640_remove_parenthesis",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove the parenthesis and what is inbetween them from a string.\n(define (remove_parenthesis items)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_parenthesis))\n    (check-equal? (candidate (list \"python (chrome)\")) \"python\")\n    (check-equal? (candidate (list \"string(.abc)\")) \"string\")\n    (check-equal? (candidate (list \"alpha(num)\")) \"alpha\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(eq? (first items) #\\() (remove_parenthesis (rest items))]\n    [(eq? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [else\n     (cond\n       [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n       [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n       [else (cons (first items) (remove_parenthesis (rest items)))]\n       )]\n     ])\n  )\n",
    "  (regexp-replace* #rx\"\\\\(.*\\\\)\" items \"\"))\n",
    "  (regexp-replace* #rx\"\\\\([^()]*\\\\)\" items \"\"))\n",
    "  (cond\n    [(empty? items) empty]\n    [(char=? (first items) #\\() (remove_parenthesis (rest items))]\n    [(char=? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n",
    "  (cond\n    [(empty? items) empty]\n    [(equal? (first items) #\\() (remove_parenthesis (rest items))]\n    [(equal? (first items) #\\)) (remove_parenthesis (rest items))]\n    [else (cons (first items) (remove_parenthesis (rest items)))]))\n"
  ]
}