{
  "name": "mbpp_70_get_equal",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(null? (cdr (cdr Input))) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlo9dbkx.rkt:19:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? Input)\n      #t\n      (if (null? (cdr Input))\n          #t\n          (if (= (length (car Input)) (length (cadr Input)))\n              (get_equal (cdr Input))\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (equal? (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (equal? (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [else (and (equal? (length (car Input)) (length (cadr Input)))\n               (get_equal (cdr Input)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcjq4ok_.rkt:15:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcjq4ok_.rkt:17:4\n\ncadr: contract violation\n  expected: (cons/c any/c pair?)\n  given: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (rest Input)) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (define (get_equal_iter Input)\n    (cond ((null? Input) #t)\n          ((null? (cdr Input)) #t)\n          ((equal? (length (car Input)) (length (cadr Input)))\n           (get_equal_iter (cdr Input)))\n          (else #f)))\n  (get_equal_iter Input))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    ((null? (cdr Input)) #t)\n    ((equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input)))\n    (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (rest Input)) #t]\n    [(equal? (length (first Input)) (length (second Input)))\n     (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? Input)\n      #t\n      (if (null? (cdr Input))\n          #t\n          (if (= (length (car Input)) (length (cadr Input)))\n              (get_equal (cdr Input))\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (equal? (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamk53qe.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamk53qe.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamk53qe.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) true]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_608j4_8.rkt:15:4\n\nsecond: list contains too few elements\n  list: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_608j4_8.rkt:17:4\n\nsecond: list contains too few elements\n  list: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(equal? (length (first Input)) (length (second Input)))\n     (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmparaldsii.rkt:16:4\n\nsecond: list contains too few elements\n  list: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmparaldsii.rkt:18:4\n\nsecond: list contains too few elements\n  list: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [else (and (equal? (length (car Input)) (length (cadr Input)))\n               (get_equal (cdr Input)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) true]\n    [(empty? (rest Input)) true]\n    [(equal? (length (first Input)) (length (second Input)))\n     (get_equal (rest Input))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (rest Input)) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (equal? (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond ((null? (cdr Input)) #t)\n        ((equal? (length (car Input)) (length (cadr Input)))\n         (get_equal (cdr Input)))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (let ((first (car Input))\n        (rest (cdr Input)))\n    (if (null? rest)\n        #t\n        (if (= (length first) (length (car rest)))\n            (get_equal rest)\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxb0ojhf.rkt:15:4\n\nsecond: list contains too few elements\n  list: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxb0ojhf.rkt:17:4\n\nsecond: list contains too few elements\n  list: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(= (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp66wa2e_a.rkt:15:4\n\nsecond: list contains too few elements\n  list: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp66wa2e_a.rkt:17:4\n\nsecond: list contains too few elements\n  list: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (rest Input)) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (equal? (car Input) (car (cdr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn90004_x.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn90004_x.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? Input)\n      #t\n      (if (null? (cdr Input))\n          #t\n          (if (= (length (car Input)) (length (cadr Input)))\n              (get_equal (cdr Input))\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (equal? (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:16:4\nactual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3hkdkwa7.rkt:18:4\nactual:     #f\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (let ([len (length (car Input))])\n    (andmap (lambda (x) (= len (length x))) Input)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxb0ojhf.rkt:15:4\n\nsecond: list contains too few elements\n  list: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxb0ojhf.rkt:17:4\n\nsecond: list contains too few elements\n  list: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(null? (cddr Input)) #t]\n    [(and (= (length (car Input)) (length (cadr Input)))\n          (= (length (cadr Input)) (length (caddr Input))))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprh0tdo1_.rkt:20:4\nactual:     #t\nexpected:   #f\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (let ([len (length (car Input))])\n    (if (null? Input)\n        #t\n        (if (= len (length (car Input)))\n            (get_equal (cdr Input))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp45noox4z.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp45noox4z.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp45noox4z.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? Input)\n      #t\n      (if (null? (cdr Input))\n          #t\n          (if (= (length (car Input)) (length (cadr Input)))\n              (get_equal (cdr Input))\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [else\n     (and (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (= (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpymc74no5.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (rest Input)) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond ((null? (cdr Input)) #t)\n        ((equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input)))\n        (else #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (car Input)\n      (if (= (car Input) (cadr Input))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:16:4\n\n=: contract violation\n  expected: number?\n  given: '(11 22 33)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:17:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxgv318so.rkt:18:4\n\n=: contract violation\n  expected: number?\n  given: '(1 2)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input)))\n     (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(empty? (rest Input)) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(equal? (length (first Input)) (length (second Input))) (get_equal (rest Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxb0ojhf.rkt:15:4\n\nsecond: list contains too few elements\n  list: '((44 55 66))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcxb0ojhf.rkt:17:4\n\nsecond: list contains too few elements\n  list: '((3 4))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(empty? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(equal? (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      (list (car Input))\n      (if (equal? (length (car Input)) (length (cadr Input)))\n          (cons (car Input) (get_equal (cdr Input)))\n          (get_equal (cdr Input)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1666123706,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamk53qe.rkt:16:4\nactual:     '((11 22 33) (44 55 66))\nexpected:   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamk53qe.rkt:17:4\nactual:     '((4 5 6 7))\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqamk53qe.rkt:18:4\nactual:     '((1 2) (3 4))\nexpected:   #t\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (cond\n    [(null? Input) #t]\n    [(null? (cdr Input)) #t]\n    [(= (length (car Input)) (length (cadr Input))) (get_equal (cdr Input))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find whether all the given lists have equal length or not.\n(define (get_equal Input)\n  (if (null? (cdr Input))\n      #t\n      (if (= (length (car Input)) (length (cadr Input)))\n          (get_equal (cdr Input))\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_equal))\n    (check-equal? (candidate (list (list 11 22 33) (list 44 55 66))) #t)\n    (check-equal? (candidate (list (list 1 2 3) (list 4 5 6 7))) #f)\n    (check-equal? (candidate (list (list 1 2) (list 3 4))) #t)\n))\n\n(test-humaneval)",
      "timestamp": 1665517556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}