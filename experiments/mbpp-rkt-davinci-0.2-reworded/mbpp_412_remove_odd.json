{
  "name": "mbpp_412_remove_odd",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to remove odd numbers from a given list.\n(define (remove_odd l)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_odd))\n    (check-equal? (candidate (list 1 2 3)) (list 2))\n    (check-equal? (candidate (list 2 4 6)) (list 2 4 6))\n    (check-equal? (candidate (list 10 20 3)) (list 10 20))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(empty? l) empty]\n        [(odd? (first l)) (remove_odd (rest l))]\n        [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond [(empty? l) empty]\n        [(odd? (first l)) (remove_odd (rest l))]\n        [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond [(empty? l) empty]\n        [(odd? (first l)) (remove_odd (rest l))]\n        [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (filter even? l))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (filter even? l))\n",
    "  (filter even? l))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond [(empty? l) empty]\n        [(odd? (first l)) (remove_odd (rest l))]\n        [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond [(empty? l) empty]\n        [(odd? (first l)) (remove_odd (rest l))]\n        [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond [(empty? l) empty]\n        [(odd? (first l)) (remove_odd (rest l))]\n        [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n",
    "  (cond\n    [(empty? l) empty]\n    [(odd? (first l)) (remove_odd (rest l))]\n    [else (cons (first l) (remove_odd (rest l)))]))\n"
  ]
}