{
  "name": "mbpp_401_add_nested_tuples",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Invalid Input\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg64rnsg.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg64rnsg.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplg64rnsg.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_nested_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbojtu91o.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbojtu91o.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbojtu91o.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(null? test_tup1) '()]\n    [(null? test_tup2) '()]\n    [else (cons (+ (car test_tup1) (car test_tup2))\n                 (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpopuavxfx.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpopuavxfx.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpopuavxfx.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05bu_7rd.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05bu_7rd.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05bu_7rd.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                (+ (cadr (car test_tup1)) (cadr (car test_tup2))))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:16:4\nactual:     '((7 . 10) (7 . 14) (3 . 10) (8 . 13))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:17:4\nactual:     '((9 . 12) (9 . 16) (5 . 12) (10 . 15))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:18:4\nactual:     '((11 . 14) (11 . 18) (7 . 14) (12 . 17))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (add_nested_tuples x y)) test_tup1 test_tup2)\n      (+ test_tup1 test_tup2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (add_tuples (first test_tup1) (first test_tup2))\n           (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpwawpuzgd.rkt:8:12: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpwawpuzgd.rkt:8:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2))\n                 (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpovvzo8x9.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpovvzo8x9.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmp_uqd5q0s.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmp_uqd5q0s.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmptatv_0m0.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmptatv_0m0.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (cons (car (car test_tup1)) (car (car test_tup2)))\n           (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:17:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:18:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:19:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Invalid input\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmps85os_e7.rkt:7:13: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmps85os_e7.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpw_9vs6es.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpw_9vs6es.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (add_nested_tuples (first test_tup1) (first test_tup2))\n           (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67a6fngh.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67a6fngh.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp67a6fngh.rkt:19:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons\n      (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n            (+ (cadr (car test_tup1)) (cadr (car test_tup2))))\n      (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2t42bg68.rkt:18:4\nactual:     '((7 . 10) (7 . 14) (3 . 10) (8 . 13))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2t42bg68.rkt:19:4\nactual:     '((9 . 12) (9 . 16) (5 . 12) (10 . 15))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2t42bg68.rkt:20:4\nactual:     '((11 . 14) (11 . 18) (7 . 14) (12 . 17))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_nested_tuples (first test_tup1) (first test_tup2))\n               (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmdoj5n5c.rkt:15:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmdoj5n5c.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmdoj5n5c.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqx69cmzs.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpqx69cmzs.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                (+ (cadr (car test_tup1)) (cadr (car test_tup2))))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:16:4\nactual:     '((7 . 10) (7 . 14) (3 . 10) (8 . 13))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:17:4\nactual:     '((9 . 12) (9 . 16) (5 . 12) (10 . 15))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:18:4\nactual:     '((11 . 14) (11 . 18) (7 . 14) (12 . 17))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y)\n         (map + x y))\n       test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (cons (car (car test_tup1)) (car (car test_tup2)))\n           (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:17:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:18:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:19:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (tup1 tup2)\n         (map (lambda (x y)\n                (+ x y))\n              tup1 tup2))\n       test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                (+ (cadr (car test_tup1)) (cadr (car test_tup2))))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:16:4\nactual:     '((7 . 10) (7 . 14) (3 . 10) (8 . 13))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:17:4\nactual:     '((9 . 12) (9 . 16) (5 . 12) (10 . 15))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:18:4\nactual:     '((11 . 14) (11 . 18) (7 . 14) (12 . 17))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (map + x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpujk3817r.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpujk3817r.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (cons (car (car test_tup1)) (car (car test_tup2))) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:15:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:16:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:17:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond ((and (null? test_tup1) (null? test_tup2)) '())\n        ((and (null? test_tup1) (not (null? test_tup2))) test_tup2)\n        ((and (not (null? test_tup1) (null? test_tup2))) test_tup1)\n        (else (cons (+ (car test_tup1) (car test_tup2))\n                    (add_nested_tuples (cdr test_tup1) (cdr test_tup2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5t2njop.rkt:16:4\n\nnot: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5t2njop.rkt:17:4\n\nnot: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf5t2njop.rkt:18:4\n\nnot: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 1\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmptatv_0m0.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmptatv_0m0.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Inputs are not nested lists\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqx69cmzs.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpqx69cmzs.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp7_epbm85.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmp7_epbm85.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) '()]\n    [else\n     (cons\n      (add_nested_tuples (car test_tup1) (car test_tup2))\n      (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkua3pqxr.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkua3pqxr.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkua3pqxr.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (add_nested_tuples x y)) test_tup1 test_tup2)\n      (+ test_tup1 test_tup2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (+ (car test_tup1) (car test_tup2))\n                (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1x89nalp.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1x89nalp.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1x89nalp.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) '()]\n    [(empty? test_tup2) '()]\n    [else (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05bu_7rd.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05bu_7rd.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp05bu_7rd.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond ((null? test_tup1) '())\n        ((null? test_tup2) '())\n        (else (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqeeerftl.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqeeerftl.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqeeerftl.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "/tmp/tmptatv_0m0.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmptatv_0m0.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpw_9vs6es.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpw_9vs6es.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (map + x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (not (null? test_tup1)) (not (null? test_tup2)))\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))\n      '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbznwh_3u.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbznwh_3u.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbznwh_3u.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (car test_tup1) (car test_tup2))\n                (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmppwh9g39l.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmppwh9g39l.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (cons (car (car test_tup1)) (car (car test_tup2))) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:15:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:16:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:17:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                  (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp13rmk3ku.rkt:8:70: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_tuples (car test_tup1) (car test_tup2))\n                (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmppwh9g39l.rkt:8:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmppwh9g39l.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (map + x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqx69cmzs.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpqx69cmzs.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (cons (car (car test_tup1)) (car (car test_tup2))) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:15:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:16:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:17:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map add test_tup1 test_tup2)\n      (error \"Invalid input\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqoupj0el.rkt:6:11: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpqoupj0el.rkt:6:11\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (add_nested_tuples (car test_tup1) (car test_tup2))\n           (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_5edfobu.rkt:17:4\n\ncar: contract violation\n  expected: pair?\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_5edfobu.rkt:18:4\n\ncar: contract violation\n  expected: pair?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_5edfobu.rkt:19:4\n\ncar: contract violation\n  expected: pair?\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (not (empty? test_tup1)) (not (empty? test_tup2)))\n      (cons (cons (car (car test_tup1)) (car (car test_tup2)))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))\n      '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwf1ik1ir.rkt:15:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwf1ik1ir.rkt:16:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwf1ik1ir.rkt:17:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9n4qyss8.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                (+ (cadr (car test_tup1)) (cadr (car test_tup2))))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:16:4\nactual:     '((7 . 10) (7 . 14) (3 . 10) (8 . 13))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:17:4\nactual:     '((9 . 12) (9 . 16) (5 . 12) (10 . 15))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:18:4\nactual:     '((11 . 14) (11 . 18) (7 . 14) (12 . 17))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpw_9vs6es.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpw_9vs6es.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Inputs are not nested lists\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (cons (car (car test_tup1)) (car (car test_tup2)))\n           (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:17:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:18:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:19:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                  (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp13rmk3ku.rkt:8:70: read-syntax: missing `)` to close preceding `(`, found instead `]`\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2))\n                 (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpovvzo8x9.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpovvzo8x9.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond ((and (null? test_tup1) (null? test_tup2)) '())\n        ((and (pair? test_tup1) (pair? test_tup2))\n         (cons (add_nested_tuples (car test_tup1) (car test_tup2))\n               (add_nested_tuples (cdr test_tup1) (cdr test_tup2))))\n        ((and (number? test_tup1) (number? test_tup2)) (+ test_tup1 test_tup2))\n        (else (error \"Invalid input\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                (+ (cdr (car test_tup1)) (cdr (car test_tup2))))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyf6g0oo.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyf6g0oo.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyf6g0oo.rkt:18:4\n\n+: contract violation\n  expected: number?\n  given: '(5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (add_nested_tuples x y)) test_tup1 test_tup2)\n      (+ test_tup1 test_tup2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn4vwi8br.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (cons (car (car test_tup1)) (car (car test_tup2))) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:15:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:16:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo3003s7d.rkt:17:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add (first test_tup1) (first test_tup2))\n                 (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp_z4urxfj.rkt:7:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmp_z4urxfj.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Invalid input\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons\n      (add (first test_tup1) (first test_tup2))\n      (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmp2cjechx7.rkt:9:7: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmp2cjechx7.rkt:9:7\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (map + x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2)) (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicicsekk.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (pair? test_tup1) (pair? test_tup2))\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))\n      '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchtkl877.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchtkl877.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpchtkl877.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else\n     (cons (cons (car (car test_tup1)) (car (car test_tup2)))\n           (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122820,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:17:4\nactual:     '((1 . 6) (4 . 3) (2 . 1) (1 . 7))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:18:4\nactual:     '((2 . 7) (5 . 4) (3 . 2) (2 . 8))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp29fdbbna.rkt:19:4\nactual:     '((3 . 8) (6 . 5) (4 . 3) (3 . 9))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (cons (+ (car (car test_tup1)) (car (car test_tup2)))\n                (+ (cadr (car test_tup1)) (cadr (car test_tup2))))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:16:4\nactual:     '((7 . 10) (7 . 14) (3 . 10) (8 . 13))\nexpected:   '((7 10) (7 14) (3 10) (8 13))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:17:4\nactual:     '((9 . 12) (9 . 16) (5 . 12) (10 . 15))\nexpected:   '((9 12) (9 16) (5 12) (10 15))\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_5edp3l7.rkt:18:4\nactual:     '((11 . 14) (11 . 18) (7 . 14) (12 . 17))\nexpected:   '((11 14) (11 18) (7 14) (12 17))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2))\n                 (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpovvzo8x9.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpovvzo8x9.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add_nested_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbojtu91o.rkt:16:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 1\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbojtu91o.rkt:17:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbojtu91o.rkt:18:4\n\nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (add_nested_tuples x y)) test_tup1 test_tup2)\n      (+ test_tup1 test_tup2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [(empty? test_tup2) empty]\n    [else (cons (add (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpw_9vs6es.rkt:8:17: add: unbound identifier\n  in: add\n  location...:\n   /tmp/tmpw_9vs6es.rkt:8:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (or (null? test_tup1) (null? test_tup2))\n      '()\n      (cons (+ (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzmlvpyhf.rkt:17:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Inputs are not nested lists\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuauiwrur.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (null? test_tup1)\n      '()\n      (cons (add_tuples (car test_tup1) (car test_tup2))\n            (add_nested_tuples (cdr test_tup1) (cdr test_tup2)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpm5qp5ud1.rkt:7:13: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpm5qp5ud1.rkt:7:13\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2)) (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpqx69cmzs.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpqx69cmzs.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n               (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "/tmp/tmpbr7glklc.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpbr7glklc.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else\n     (cons (add_tuples (first test_tup1) (first test_tup2))\n           (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpwawpuzgd.rkt:8:12: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpwawpuzgd.rkt:8:12\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (map (lambda (x y) (+ x y)) test_tup1 test_tup2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:12:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:13:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppf13yble.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond ((and (null? test_tup1) (null? test_tup2)) '())\n        ((and (list? (car test_tup1)) (list? (car test_tup2)))\n         (cons (add_nested_tuples (car test_tup1) (car test_tup2))\n               (add_nested_tuples (cdr test_tup1) (cdr test_tup2))))\n        ((and (number? (car test_tup1)) (number? (car test_tup2)))\n         (cons (+ (car test_tup1) (car test_tup2))\n               (add_nested_tuples (cdr test_tup1) (cdr test_tup2))))\n        (else (error \"Inputs are not of the same type\"))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122822,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (if (and (list? test_tup1) (list? test_tup2))\n      (map (lambda (x y) (+ x y)) test_tup1 test_tup2)\n      (error \"Invalid input\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1666122821,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:14:4\n\n+: contract violation\n  expected: number?\n  given: '(1 3)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:15:4\n\n+: contract violation\n  expected: number?\n  given: '(2 4)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9kn1ejwu.rkt:16:4\n\n+: contract violation\n  expected: number?\n  given: '(3 5)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to perform index wise addition of list elements in the given two nested lists.\n(define (add_nested_tuples test_tup1 test_tup2)\n  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (add_tuples (first test_tup1) (first test_tup2))\n                (add_nested_tuples (rest test_tup1) (rest test_tup2)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add_nested_tuples))\n    (check-equal? (candidate (list (list 1 3) (list 4 5) (list 2 9) (list 1 10)) (list (list 6 7) (list 3 9) (list 1 1) (list 7 3))) (list (list 7 10) (list 7 14) (list 3 10) (list 8 13)))\n    (check-equal? (candidate (list (list 2 4) (list 5 6) (list 3 10) (list 2 11)) (list (list 7 8) (list 4 10) (list 2 2) (list 8 4))) (list (list 9 12) (list 9 16) (list 5 12) (list 10 15)))\n    (check-equal? (candidate (list (list 3 5) (list 6 7) (list 4 11) (list 3 12)) (list (list 8 9) (list 5 11) (list 3 3) (list 9 5))) (list (list 11 14) (list 11 18) (list 7 14) (list 12 17)))\n))\n\n(test-humaneval)",
      "timestamp": 1665517233,
      "stdout": "",
      "stderr": "/tmp/tmpb7fhrl4k.rkt:7:17: add_tuples: unbound identifier\n  in: add_tuples\n  location...:\n   /tmp/tmpb7fhrl4k.rkt:7:17\n",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}