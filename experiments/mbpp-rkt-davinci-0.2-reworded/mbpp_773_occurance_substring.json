{
  "name": "mbpp_773_occurance_substring",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. Return #f if there is no match.\n(define (occurance_substring text pattern)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate occurance_substring))\n    (check-equal? (candidate \"python programming, python language\" \"python\") (list \"python\" 0 6))\n    (check-equal? (candidate \"python programming,programming language\" \"programming\") (list \"programming\" 7 18))\n    (check-equal? (candidate \"python programming,programming language\" \"language\") (list \"language\" 31 39))\n    (check-equal? (candidate \"c++ programming, c++ language\" \"python\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (let loop ([text text] [pattern pattern] [position 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) position]\n      [else (loop (substring text 1) pattern (+ position 1))])))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring_iter (substring text (+ 1 (string-index text pattern))) pattern (+ 1 (string-index text pattern)))))\n          ((not (string-contains text pattern))\n           #f)))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-iter (substring text (add1 (string-index text pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring-iter text pattern)\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (let ([index (string-index text pattern)])\n    (if (not index)\n        #f\n        (list index (add1 index)))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring_iter text pattern position)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern)\n       (cons position (occurance_substring_iter (substring text 1) pattern (+ position 1)))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ position 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos 0])\n    (let loop ([i 0])\n      (cond\n        [(= i (string-length text)) #f]\n        [(string=? (substring text i (+ i (string-length pattern))) pattern)\n         (list pos i)]\n        [else (loop (+ i 1))]))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring_iter (substring text (+ (string-index text pattern) 1)) pattern (+ pos (string-index text pattern) 1))))\n          (else #f)))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos 0])\n    (cond\n      [(string-contains text pattern)\n       (let loop ([pos 0])\n         (if (string-contains text pattern pos)\n             (loop (+ pos 1))\n             (- pos 1)))]\n      [else #f])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond [(empty? text) #f]\n          [(empty? pattern) pos]\n          [(equal? (first text) (first pattern))\n           (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n          [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern position)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) (list position)]\n      [(equal? (first text) (first pattern))\n       (append (occurance_substring-iter (rest text) (rest pattern) (+ position 1))\n               (occurance_substring-iter (rest text) pattern (+ position 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ position 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n"
  ]
}