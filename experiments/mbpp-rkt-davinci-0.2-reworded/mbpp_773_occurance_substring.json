{
  "name": "mbpp_773_occurance_substring",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the occurrence and position of the substrings within a string. Return #f if there is no match.\n(define (occurance_substring text pattern)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate occurance_substring))\n    (check-equal? (candidate \"python programming, python language\" \"python\") (list \"python\" 0 6))\n    (check-equal? (candidate \"python programming,programming language\" \"programming\") (list \"programming\" 7 18))\n    (check-equal? (candidate \"python programming,programming language\" \"language\") (list \"language\" 31 39))\n    (check-equal? (candidate \"c++ programming, c++ language\" \"python\") #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (let loop ([text text] [pattern pattern] [position 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) position]\n      [else (loop (substring text 1) pattern (+ position 1))])))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring_iter (substring text (+ 1 (string-index text pattern))) pattern (+ 1 (string-index text pattern)))))\n          ((not (string-contains text pattern))\n           #f)))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-iter (substring text (add1 (string-index text pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring-iter text pattern)\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (let ([index (string-index text pattern)])\n    (if (not index)\n        #f\n        (list index (add1 index)))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring_iter text pattern position)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern)\n       (cons position (occurance_substring_iter (substring text 1) pattern (+ position 1)))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ position 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos 0])\n    (let loop ([i 0])\n      (cond\n        [(= i (string-length text)) #f]\n        [(string=? (substring text i (+ i (string-length pattern))) pattern)\n         (list pos i)]\n        [else (loop (+ i 1))]))))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring_iter (substring text (+ (string-index text pattern) 1)) pattern (+ pos (string-index text pattern) 1))))\n          (else #f)))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([pos 0])\n    (cond\n      [(string-contains text pattern)\n       (let loop ([pos 0])\n         (if (string-contains text pattern pos)\n             (loop (+ pos 1))\n             (- pos 1)))]\n      [else #f])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond [(empty? text) #f]\n          [(empty? pattern) pos]\n          [(equal? (first text) (first pattern))\n           (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n          [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern position)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) (list position)]\n      [(equal? (first text) (first pattern))\n       (append (occurance_substring-iter (rest text) (rest pattern) (+ position 1))\n               (occurance_substring-iter (rest text) pattern (+ position 1)))]\n      [else (occurance_substring-iter (rest text) pattern (+ position 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let loop ([i 0])\n    (cond\n      [(string=? text pattern) i]\n      [(string-contains text pattern) (loop (+ i 1))]\n      [else #f])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern)) (loop (rest text) (rest pattern) (+ pos 1))]\n      [else (loop (rest text) pattern (+ pos 1))])))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0] [occurance 0])\n    (cond [(empty? text) #f]\n          [(empty? pattern) (list occurance pos)]\n          [(string=? (first text) (first pattern))\n           (loop (rest text) (rest pattern) (+ pos 1) (+ occurance 1))]\n          [else (loop (rest text) pattern (+ pos 1) occurance)])))\n",
    "  (let ([pos 0])\n    (cond\n      [(string=? text pattern) (list pos)]\n      [(string-contains text pattern)\n       (cons pos (occurance_substring (substring text (add1 pos)) pattern))]\n      [else #f])))\n",
    "  (let ([positions (list)]\n        [pos 0])\n    (while (not (string=? (substring text pos) \"\"))\n      (if (string=? (substring text pos (string-length pattern)) pattern)\n          (set! positions (append positions (list pos)))\n          (set! pos (+ pos 1))))\n    (if (empty? positions)\n        #f\n        positions)))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-prefix? pattern text) (list pos (add1 pos (string-length pattern)))]\n      [else (occurance_substring-iter (substring text 1) pattern (add1 pos))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-prefix? pattern text) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ((text text) (pattern pattern) (pos 0))\n    (cond ((string=? text \"\") #f)\n          ((string-prefix? pattern text) (list pos (string-length pattern)))\n          (else (loop (substring text 1) pattern (+ pos 1))))))\n",
    "  (define (occurance_substring-iter text pattern position)\n    (cond\n      [(string=? text \"\") #f]\n      [(string=? pattern \"\") #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) position]\n      [else (occurance_substring-iter (substring text 1) pattern (+ position 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([occurance (string-index text pattern)])\n    (if (not occurance)\n        #f\n        (list occurance (add1 occurance)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string-prefix? pattern text) pos)\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-contains text pattern) (list pos (substring text pos (+ pos (string-length pattern))))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([positions (list)]\n        [i 0])\n    (while (not (string=? (substring text i (+ i (string-length pattern))) pattern))\n      (set! i (+ i 1)))\n    (if (string=? (substring text i (+ i (string-length pattern))) pattern)\n        (list i (string-length pattern))\n        #f)))\n",
    "  (cond\n    [(empty? text) #f]\n    [(equal? (substring text 0 (string-length pattern)) pattern) 0]\n    [else (+ 1 (occurance_substring (substring text 1) pattern))]))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string=? pattern \"\") #f)\n          ((string-prefix? pattern text) (list pos (string-length pattern)))\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) pos]\n      [else (loop (substring text 1) pattern (+ pos 1))])))\n",
    "  (let ([positions (list)]\n        [start 0])\n    (while (not (equal? #f (string-index text pattern start)))\n      (set! start (+ (string-index text pattern start) 1))\n      (set! positions (append positions (list (string-index text pattern start))))\n      )\n    positions\n    )\n  )\n",
    "  (let ([pos 0])\n    (cond\n      [(string=? text pattern) (list pos)]\n      [(string-contains text pattern)\n       (cons pos (occurance_substring (substring text (+ pos 1)) pattern))]\n      [else #f])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) index]\n      [(char=? (first text) (first pattern)) (occurance_substring-iter (rest text) (rest pattern) (+ index 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([text text] [pos 0])\n    (cond [(empty? text) #f]\n          [(string=? pattern (substring text 0 (string-length pattern))) pos]\n          [else (loop (substring text 1) (+ pos 1))])))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-contains text pattern) (list pos (substring text pos (+ pos (string-length pattern))))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern)) (loop (rest text) (rest pattern) (+ pos 1))]\n      [else (loop (rest text) pattern (+ pos 1))])))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ((pos 0)\n        (result '()))\n    (while (regexp-match pattern text pos)\n      (set! pos (regexp-match-end 0))\n      (set! result (cons (regexp-match-positions text) result)))\n    (if (null? result)\n        #f\n        result)))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern)\n           (list pos (string-length pattern)))\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? text pattern) 0]\n    [else\n     (let ([pos (string-index text pattern)])\n       (if pos\n           (+ pos (occurance_substring (substring text (+ pos (string-length pattern))) pattern))\n           (occurance_substring (substring text 1) pattern)))]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ((pos 0)\n        (len (string-length text))\n        (plen (string-length pattern)))\n    (let loop ((i 0))\n      (cond ((= i len) #f)\n            ((string=? (substring text i (+ i plen)) pattern)\n             (list pos i))\n            (else (loop (+ i 1)))))\n    ))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern pos)\n                 (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1))))\n          ((string-contains text pattern pos)\n           (cons (string-index text pattern pos)\n                 (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1))))\n          (else #f)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance-substring-helper text pattern index)\n    (cond\n      [(empty? pattern) index]\n      [(empty? text) #f]\n      [(equal? (first text) (first pattern)) (occurance-substring-helper (rest text) (rest pattern) (+ index 1))]\n      [else (occurance-substring-helper (rest text) pattern (+ index 1))]))\n  (occurance-substring-helper text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(string=? text pattern) i]\n      [(string=? (substring text 0 (string-length pattern)) pattern) i]\n      [else (loop (+ i 1))])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos) (add1 (string-length pattern))))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? text pattern) 0]\n    [else (let ([pos (string-index text pattern)])\n            (if pos\n                (+ pos (occurance_substring (substring text (+ pos (string-length pattern))) pattern))\n                #f))]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n    #f))\n",
    "  (define (occurance_substring_helper text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring_helper (substring text (+ 1 (string-index text pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring_helper text pattern)\n      #f))\n",
    "  (define (occurance_substring-iter text pattern count)\n    (cond ((string=? text \"\") #f)\n          ((string-prefix? pattern text) (cons count (occurance_substring-iter (substring text (string-length pattern)) pattern (+ count 1))))\n          (else (occurance_substring-iter (substring text 1) pattern (+ count 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_helper text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? pattern \"\") #f)\n          ((string-prefix? pattern text) (list index (substring text 0 (string-length pattern))))\n          (else (occurance_substring_helper (substring text 1) pattern (+ index 1)))))\n  (occurance_substring_helper text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if pos\n        (list pos (add1 pos (string-length pattern)))\n        #f)))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern pos)\n              (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1)))\n        '()))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (+ pos (string-length pattern))))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern pos)\n              (occurance_substring-iter text pattern (+ 1 (string-index text pattern pos))))\n        '()))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if pos\n        (list pos (add1 (string-length pattern)))\n        #f)))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern)))\n       (cons pos (occurance_substring-iter (substring text 1) pattern (+ pos 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string-prefix? pattern text) pos)\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (string-length text)) #f]\n      [(string=? (substring text i (+ i (string-length pattern))) pattern) i]\n      [else (loop (+ i 1))])))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern) (list index (add1 index (string-length pattern))))\n          (else (occurance_substring-iter (substring text 1) pattern (add1 index)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ((pos 0))\n    (cond ((string-contains text pattern)\n           (set! pos (string-index text pattern))\n           (list pos (string-length pattern)))\n          (else #f))))\n",
    "  (let loop ((i 0) (j 0) (positions '()))\n    (cond\n      [(= i (string-length text)) positions]\n      [(= j (string-length pattern)) (loop (+ i 1) 0 positions)]\n      [(char=? (string-ref text i) (string-ref pattern j))\n       (loop (+ i 1) (+ j 1) positions)]\n      [else (loop (+ i 1) 0 positions)])))\n",
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-iter (substring text (+ (string-index text pattern) (string-length pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring-iter text pattern)\n      #f))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) pos]\n      [else (loop (substring text 1) pattern (+ pos 1))])))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern)\n           (list index (string-length pattern)))\n          (else (occurance_substring-iter (substring text 1) pattern (+ index 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond [(empty? text) #f]\n          [(empty? pattern) pos]\n          [(char=? (first text) (first pattern)) (loop (rest text) (rest pattern) (+ pos 1))]\n          [else (loop (rest text) pattern (+ pos 1))])))\n",
    "  (define (occurance_substring-iter text pattern)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) 0]\n      [else (add1 (occurance_substring-iter (substring text 1 (string-length text)) pattern))]))\n  (occurance_substring-iter text pattern))\n",
    "  (define (occurance_substring_iter text pattern)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) #f]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern))]\n      [else (occurance_substring_iter (rest text) pattern)]))\n  (occurance_substring_iter text pattern))\n",
    "  (define (occurance_substring-iter text pattern start)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern)\n           (list (add1 start) (add1 (+ start (string-length pattern)))))\n          (else (occurance_substring-iter (substring text 1) pattern (add1 start)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ 1 (string-index text pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (define (occurance-substring-helper text pattern)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) #f]\n      [(equal? (first text) (first pattern)) (occurance-substring-helper (rest text) (rest pattern))]\n      [else (occurance-substring-helper (rest text) pattern)]))\n  (define (occurance-substring-helper2 text pattern)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) #f]\n      [(equal? (first text) (first pattern)) (occurance-substring-helper (rest text) (rest pattern))]\n      [else (occurance-substring-helper2 (rest text) pattern)]))\n  (cond\n    [(empty? text) #f]\n    [(empty? pattern) #f]\n    [(equal? (first text) (first pattern)) (occurance-substring-helper (rest text) (rest pattern))]\n    [else (occurance-substring-helper2 (rest text) pattern)]))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (+ (string-index text pattern) (string-length pattern))))\n      #f))\n",
    "  (define (occurance_substring_iter text pattern)\n    (cond\n      [(empty? text) '()]\n      [(string=? (substring text 0 (string-length pattern)) pattern)\n       (cons (list (string-length pattern) (substring text 0 (string-length pattern)))\n             (occurance_substring_iter (substring text 1) pattern))]\n      [else (occurance_substring_iter (substring text 1) pattern)]))\n  (occurance_substring_iter text pattern))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string-contains text pattern) (list (string-index text pattern) (string-length pattern))]\n    [else (occurance_substring (substring text 1) pattern)]))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text pattern) index)\n          ((string-length text) #f)\n          (else (occurance_substring-iter (substring text 1) pattern (+ index 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-helper text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-helper (substring text (+ 1 (string-index text pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring-helper text pattern)\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern pos)\n                 (occurance_substring-iter text pattern (+ (string-index text pattern pos) 1))))\n          (else '())))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([occurance (string-index text pattern)])\n    (if (not occurance)\n        #f\n        (list occurance (add1 occurance)))))\n",
    "  (let ((pos 0))\n    (cond\n      [(string=? text \"\") #f]\n      [(string=? pattern \"\") #f]\n      [(string-contains text pattern)\n       (set! pos (string-index text pattern))\n       (list pos (string-length pattern))]\n      [else (occurance_substring (substring text 1) pattern)])))\n",
    "  (define (occurance_substring-iter text pattern)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) (list (substring text 0 (string-length pattern)) 0)]\n      [else (occurance_substring-iter (substring text 1) pattern)]))\n  (occurance_substring-iter text pattern))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (string-length text)) #f]\n      [(string=? (substring text i (+ i (string-length pattern))) pattern) i]\n      [else (loop (+ i 1))])))\n",
    "  (define (occurance_substring_helper text pattern index)\n    (if (string=? text \"\")\n        #f\n        (if (string=? (substring text 0 (string-length pattern)) pattern)\n            (cons index (occurance_substring_helper (substring text 1) pattern (+ index 1)))\n            (occurance_substring_helper (substring text 1) pattern (+ index 1)))))\n  (occurance_substring_helper text pattern 0))\n",
    "  (let ([pos 0])\n    (for ([i (in-range (string-length text))])\n      (if (string=? (substring text i (+ i (string-length pattern))) pattern)\n          (set! pos (+ pos 1))))\n    (if (= pos 0)\n        #f\n        pos)))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance-substring-helper text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance-substring-helper (substring text (+ 1 (string-index text pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance-substring-helper text pattern)\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(string-contains text pattern)\n       (list index (string-index text pattern))]\n      [else (occurance_substring_iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance-substring-helper text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern) (occurance-substring-helper (substring text (+ 1 (string-index text pattern))) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance-substring-helper text pattern)\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-prefix? pattern text) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let loop ([i 0])\n    (cond\n      [(= i (string-length text)) #f]\n      [(string-prefix? pattern (substring text i (add1 i (string-length pattern)))) i]\n      [else (loop (add1 i))])))\n",
    "  (define (occurance-substring-iter text pattern)\n    (cond ((string-contains text pattern) (list (string-index text pattern) (string-index text pattern)))\n          ((string-length text) #f)\n          (else (occurance-substring-iter (substring text 1) pattern))))\n  (occurance-substring-iter text pattern))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (add1 (string-index text pattern)))))\n          ((string-contains text pattern (add1 pos))\n           (occurance_substring-iter text pattern (add1 pos)))\n          (else #f)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let loop ([index 0])\n    (if (= index (string-length text))\n        #f\n        (if (string-prefix? pattern (substring text index))\n            index\n            (loop (+ index 1))))))\n",
    "  (let loop ([text text] [pattern pattern] [index 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) index]\n      [else (loop (substring text 1) pattern (+ index 1))])))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(string-match pattern (substring text 0 (string-length pattern)))\n       (cons index (occurance_substring-iter (substring text 1) pattern (+ index 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([positions (list)])\n    (for ([i (in-range (string-length text))])\n      (let ([substring (substring text i (+ i (string-length pattern)))])\n        (when (equal? substring pattern)\n          (set! positions (append positions (list i))))))\n    positions))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let loop ([i 0])\n    (if (= i (string-length text))\n        #f\n        (if (string-prefix? pattern (substring text i))\n            i\n            (loop (+ i 1))))))\n",
    "  (cond\n    [(empty? text) #f]\n    [(string=? text pattern) 0]\n    [else (or (occurance_substring (substring text 1) pattern)\n              (add1 (occurance_substring (substring text 1) pattern)))]))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) pos]\n      [else (loop (substring text 1) pattern (+ pos 1))])))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string-contains text pattern) (list index (string-index text pattern)))\n          (else (occurance_substring-iter (substring text 1) pattern (+ index 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ((position 0))\n    (cond\n      ((string-contains text pattern)\n       (set! position (string-index text pattern))\n       (list position (string-length pattern)))\n      (else #f))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern))\n       (occurance_substring-iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? text pattern) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ((pos 0)\n        (len (string-length pattern))\n        (result '()))\n    (do ((i 0 (+ i 1)))\n        ((= i (string-length text)) result)\n      (if (string=? (substring text i (+ i len)) pattern)\n          (set! result (cons i result))))))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (if (string-contains text pattern)\n        (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n        #f))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string=? text pattern) index)\n          ((string=? (substring text 0 (string-length pattern)) pattern) index)\n          ((&gt; (string-length text) (string-length pattern))\n           (occurance_substring-iter (substring text 1) pattern (+ index 1)))\n          (else #f)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let loop ((text text) (pattern pattern) (pos 0))\n    (cond ((null? text) #f)\n          ((string=? pattern (substring text 0 (string-length pattern)))\n           (list pos (substring text 0 (string-length pattern))))\n          (else (loop (substring text 1) pattern (+ pos 1))))))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern)\n           (list (string-length pattern) (string-length text)))\n          (else (occurance_substring-iter (substring text 1) pattern))))\n  (occurance_substring-iter text pattern))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) pos]\n      [else (loop (substring text 1) pattern (+ pos 1))])))\n",
    "  (let ([occurance (string-index text pattern)])\n    (if occurance\n        (list occurance (add1 occurance))\n        #f)))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (let ([positions (list)])\n    (let loop ([i 0])\n      (cond\n        [(= i (string-length text)) (reverse positions)]\n        [(string=? (substring text i (+ i (string-length pattern))) pattern)\n         (loop (+ i (string-length pattern)))\n         (set! positions (cons i positions))]\n        [else (loop (+ i 1))]))\n    positions))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string-prefix? pattern text) (list pos))\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-index text pattern) (string-length pattern)))))\n          ((string-length text)\n           #f)\n          (else (occurance_substring-iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring-iter text pattern 0))\n</code>\nI get the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #f\n  arguments...:\n   #f\n</code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYour <code>occurance_substring-iter</code> function is returning <code>#f</code> when the string is empty. The <code>occurance_substring</code> function is then trying to apply <code>#f</code> to the arguments <code>#f</code> and <code>0</code>.\nYou need to return something else when the string is empty.\n",
    "  (let ((pos 0)\n        (len (string-length text))\n        (len2 (string-length pattern))\n        (count 0))\n    (while (and (< pos len)\n                (not (eq? (substring text pos (+ pos len2)) pattern)))\n      (set! pos (+ pos 1)))\n    (if (eq? pos len)\n        #f\n        (begin\n          (set! count 1)\n          (set! pos (+ pos len2))\n          (while (< pos len)\n            (if (eq? (substring text pos (+ pos len2)) pattern)\n                (begin\n                  (set! count (+ count 1))\n                  (set! pos (+ pos len2))))\n            (set! pos (+ pos 1)))\n          (list count pos)))))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring-iter (substring text (+ (string-index text pattern) 1)) pattern))\n        '()))\n  (if (string-contains text pattern)\n      (occurance_substring-iter text pattern)\n      #f))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern) index)\n          (else (occurance_substring_iter (substring text 1) pattern (+ index 1)))))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-helper text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(equal? (first text) (first pattern))\n       (occurance_substring-helper (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring-helper (rest text) pattern (+ pos 1))]))\n  (occurance_substring-helper text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (if (string-contains text pattern)\n        (cons (string-index text pattern)\n              (occurance_substring_iter (substring text (add1 (string-index text pattern))) pattern (add1 pos)))\n        '()))\n  (occurance_substring_iter text pattern 0))\n",
    "  (let ([index (string-index text pattern)])\n    (if (not index)\n        #f\n        (list index (add1 index)))))\n",
    "  (define (occurance_substring_helper text pattern start)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) start]\n      [(char=? (first text) (first pattern)) (occurance_substring_helper (rest text) (rest pattern) (+ start 1))]\n      [else (occurance_substring_helper (rest text) pattern (+ start 1))]))\n  (occurance_substring_helper text pattern 0))\n",
    "  (define (occurance_substring_iter text pattern)\n    (if (string-prefix? pattern text)\n        (list (substring text 0 (string-length pattern))\n              (string-length pattern))\n        (occurance_substring_iter (substring text 1) pattern)))\n  (if (string-prefix? pattern text)\n      (occurance_substring_iter text pattern)\n      #f))\n",
    "  (let ([positions (list)]\n        [i 0])\n    (while (not (string=? (substring text i (+ i (string-length pattern))) pattern))\n      (set! i (+ i 1)))\n    (if (string=? (substring text i (+ i (string-length pattern))) pattern)\n        (list i)\n        #f)))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string-contains text pattern)\n           (cons (string-index text pattern)\n                 (occurance_substring-iter (substring text (+ 1 (string-index text pattern))) pattern (+ 1 (string-index text pattern)))))\n          ((not (string-contains text pattern))\n           #f)))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos) (add1 (string-length pattern))))))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond ((string-contains text pattern)\n           (list (string-index text pattern)\n                 (string-index text pattern (+ (string-index text pattern) (string-length pattern)))))\n          ((&gt;= index (string-length text))\n           #f)\n          (else (occurance_substring-iter (substring text (+ index 1) (string-length text)) pattern (+ index 1)))))\n  (occurance_substring-iter text pattern 0))\n",
    "  (define (occurance_substring_helper text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) (cons index (occurance_substring_helper (substring text 1) pattern (+ index 1)))]\n      [else (occurance_substring_helper (substring text 1) pattern (+ index 1))]))\n  (occurance_substring_helper text pattern 0))\n",
    "  (let ([start 0]\n        [end (string-length text)])\n    (let loop ([i 0])\n      (if (&lt; i end)\n          (if (string=? (substring text i (+ i (string-length pattern))) pattern)\n              (list i (+ i (string-length pattern)))\n              (loop (+ i 1)))\n          #f))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (eq? pos #f)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(string=? pattern (substring text 0 (string-length pattern))) index]\n      [else (occurance_substring-iter (substring text 1) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ([positions (list)])\n    (for ([i (in-range (string-length text))])\n      (if (string=? (substring text i (+ i (string-length pattern))) pattern)\n          (set! positions (cons i positions))))\n    (if (null? positions)\n        #f\n        (reverse positions))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos)))))\n",
    "  (let loop ([text text] [pattern pattern] [pos 0])\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern)) (loop (rest text) (rest pattern) (+ pos 1))]\n      [else (loop (rest text) pattern (+ pos 1))])))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond ((string=? text \"\") #f)\n          ((string=? (substring text 0 (string-length pattern)) pattern)\n           (list pos (string-length pattern)))\n          (else (occurance_substring_iter (substring text 1) pattern (+ pos 1)))))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) pos]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-helper text pattern)\n    (cond\n      [(empty? pattern) (list (list 'occurance 1) (list 'position (substring-position text pattern)))]\n      [(empty? text) (list (list 'occurance 0) (list 'position #f))]\n      [else (let ([substring (substring text 0 (string-length pattern))])\n              (if (equal? substring pattern)\n                  (let ([rest-text (substring text (string-length pattern))])\n                    (let ([rest-occurance (occurance_substring-helper rest-text pattern)])\n                      (let ([rest-occurance-count (cadr (assoc 'occurance rest-occurance))])\n                        (let ([rest-occurance-position (cadr (assoc 'position rest-occurance))])\n                          (list (list 'occurance (+ 1 rest-occurance-count))\n                                (list 'position (cons (substring-position text pattern) rest-occurance-position)))))))\n                  (let ([rest-text (substring text 1)])\n                    (let ([rest-occurance (occurance_substring-helper rest-text pattern)])\n                      (let ([rest-occurance-count (cadr (assoc 'occurance rest-occurance))])\n                        (let ([rest-occurance-position (cadr (assoc 'position rest-occurance))])\n                          (list (list 'occurance rest-occurance-count)\n                                (list 'position rest-occurance-position))))))))))\n    (occurance_substring-helper text pattern))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (let ([positions (list)]\n        [pos 0])\n    (while (regexp-match pattern text pos)\n      (set! pos (regexp-match-positions text pos))\n      (set! positions (append positions (list (car pos))))\n      (set! pos (cadr pos)))\n    positions))\n",
    "  (define (occurance_substring_iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) pos]\n      [(char=? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ pos 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ pos 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (define (occurance_substring_helper text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string=? (substring text 0 (string-length pattern)) pattern) pos]\n      [else (occurance_substring_helper (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring_helper text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (substring text (string-index text pattern) (+ (string-index text pattern) (string-length pattern)))\n            (string-index text pattern))\n    #f))\n",
    "  (let ([occurance (string-index text pattern)])\n    (if occurance\n        (list occurance (add1 occurance))\n        #f)))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring_iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(empty? pattern) index]\n      [(equal? (first text) (first pattern)) (occurance_substring_iter (rest text) (rest pattern) (+ index 1))]\n      [else (occurance_substring_iter (rest text) pattern (+ index 1))]))\n  (occurance_substring_iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern)\n            (string-index text pattern (string-length pattern)))\n      #f))\n",
    "  (define (occurance_substring-iter text pattern pos)\n    (cond\n      [(empty? text) #f]\n      [(string-contains text pattern) (cons pos (occurance_substring-iter (substring text 1) pattern (+ pos 1)))]\n      [else (occurance_substring-iter (substring text 1) pattern (+ pos 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (let ((pos 0))\n    (cond\n      ((string-contains text pattern)\n       (set! pos (string-index text pattern))\n       (list pos (string-length pattern)))\n      (else #f))))\n",
    "  (let ([pos (string-index text pattern)])\n    (if (not pos)\n        #f\n        (list pos (add1 pos (string-length pattern))))))\n",
    "  (define (occurance-substring-iter text pattern)\n    (if (string-contains text pattern)\n        (list (string-index text pattern) (string-index text pattern))\n        (list #f #f)))\n  (occurance-substring-iter text pattern))\n",
    "  (define (occurance_substring-iter text pattern index)\n    (cond\n      [(empty? text) #f]\n      [(string-prefix? pattern text) index]\n      [else (occurance_substring-iter (rest text) pattern (+ index 1))]))\n  (occurance_substring-iter text pattern 0))\n",
    "  (if (string-contains text pattern)\n      (list (string-index text pattern) (string-index text pattern (string-length pattern)))\n      #f))\n"
  ]
}