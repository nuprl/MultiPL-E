{
  "name": "mbpp_251_insert_element",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n(define (insert_element list element)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate insert_element))\n    (check-equal? (candidate (list \"Red\" \"Green\" \"Black\") \"c\") (list \"c\" \"Red\" \"c\" \"Green\" \"c\" \"Black\"))\n    (check-equal? (candidate (list \"python\" \"java\") \"program\") (list \"program\" \"python\" \"program\" \"java\"))\n    (check-equal? (candidate (list \"happy\" \"sad\") \"laugh\") (list \"laugh\" \"happy\" \"laugh\" \"sad\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (cond\n    [(empty? list) empty]\n    [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (if (null? list)\n      '()\n      (cons element (cons (car list) (insert_element (cdr list) element)))))\n",
    "  (cond [(empty? list) empty]\n        [else (cons element (cons (first list) (insert_element (rest list) element)))]))\n"
  ]
}