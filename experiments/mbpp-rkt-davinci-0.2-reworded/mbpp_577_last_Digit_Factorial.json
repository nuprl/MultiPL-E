{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the last digit in factorial of a given number.\n(define (last_Digit_Factorial n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate last_Digit_Factorial))\n    (check-equal? (candidate 4) 4)\n    (check-equal? (candidate 21) 0)\n    (check-equal? (candidate 30) 0)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0) 1 (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (cond\n    [(= n 0) 1]\n    [else\n     (modulo (* n (last_Digit_Factorial (- n 1))) 10)]))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ((n n) (fact 1))\n    (if (= n 0)\n        fact\n        (loop (- n 1) (* fact n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let ([fact (factorial n)])\n    (modulo fact 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ([n n] [result 1])\n    (cond [(zero? n) result]\n          [else (loop (- n 1) (* result n))])))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let ([factorial (factorial n)])\n    (modulo factorial 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (cond\n    [(= n 0) 1]\n    [else (modulo (* n (last_Digit_Factorial (- n 1))) 10)]))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ([n n] [fact 1])\n    (if (= n 0)\n        fact\n        (loop (- n 1) (* fact n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (remainder (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (cond\n      [(= n 0) acc]\n      [else (helper (- n 1) (* acc n))]))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ([n n] [acc 1])\n    (if (= n 0)\n        acc\n        (loop (- n 1) (* acc n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ((n n) (result 1))\n    (if (= n 0)\n        result\n        (loop (- n 1) (* result n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (fact n)\n    (if (= n 1)\n        1\n        (* n (fact (- n 1)))))\n  (modulo (fact n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ([n n] [result 1])\n    (cond [(= n 0) result]\n          [else (loop (- n 1) (* result n))])))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (let loop ([n n] [product 1])\n    (if (= n 0)\n        product\n        (loop (- n 1) (* product n)))))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (- n 1) (* acc n))))\n  (modulo (helper n 1) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n</code>\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 0)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n",
    "  (if (= n 0)\n      1\n      (* n (last_Digit_Factorial (- n 1)))))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (modulo (factorial n) 10))\n",
    "  (if (= n 1)\n      1\n      (modulo (* n (last_Digit_Factorial (- n 1))) 10)))\n"
  ]
}