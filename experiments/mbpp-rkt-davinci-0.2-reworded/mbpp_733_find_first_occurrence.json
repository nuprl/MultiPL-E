{
  "name": "mbpp_733_find_first_occurrence",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the index of the first occurrence of a given number in a sorted list.\n(define (find_first_occurrence A x)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_first_occurrence))\n    (check-equal? (candidate (list 2 5 5 5 6 6 8 9 9 9) 5) 1)\n    (check-equal? (candidate (list 2 3 5 5 6 6 8 9 9 9) 5) 2)\n    (check-equal? (candidate (list 2 4 1 5 6 6 8 9 9 9) 6) 4)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_first_occurrence_iter A x low high)\n    (if (> low high)\n        -1\n        (let ((mid (quotient (+ low high) 2)))\n          (if (= (list-ref A mid) x)\n              (if (or (= mid 0)\n                      (not (= (list-ref A (- mid 1)) x)))\n                  mid\n                  (find_first_occurrence_iter A x low (- mid 1)))\n              (if (&lt; (list-ref A mid) x)\n                  (find_first_occurrence_iter A x (+ mid 1) high)\n                  (find_first_occurrence_iter A x low (- mid 1)))))))\n  (find_first_occurrence_iter A x 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (<= low high)\n        (let ((mid (quotient (+ low high) 2)))\n          (cond ((= (list-ref A mid) x)\n                 (if (or (= mid 0)\n                         (/= (list-ref A (- mid 1)) x))\n                     mid\n                     (find_first_occurrence_iter A x low (- mid 1))))\n                ((< (list-ref A mid) x)\n                 (find_first_occurrence_iter A x (+ mid 1) high))\n                (else (find_first_occurrence_iter A x low (- mid 1)))))\n        #f))\n  (find_first_occurrence_iter A x 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (> low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond [(= (list-ref A mid) x)\n                 (if (= mid 0)\n                     mid\n                     (find_first_occurrence_iter low (- mid 1)))]\n                [(> (list-ref A mid) x)\n                 (find_first_occurrence_iter low (- mid 1))]\n                [else\n                 (find_first_occurrence_iter (+ mid 1) high)]))))\n  (find_first_occurrence_iter 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond\n      [(empty? A) -1]\n      [(= (first A) x) i]\n      [else (find_first_occurrence_iter (rest A) x (+ i 1))]))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond ((null? A) #f)\n          ((= (car A) x) i)\n          ((&gt; (car A) x) #f)\n          (else (find_first_occurrence_iter (cdr A) x (+ i 1)))))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond [(empty? A) i]\n          [(= (first A) x) i]\n          [else (find_first_occurrence_iter (rest A) x (+ i 1))]))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (&lt; low high)\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (list-ref A mid) x)\n             (if (and (&gt; mid 0) (= (list-ref A (- mid 1)) x))\n                 (find_first_occurrence_iter A x low mid)\n                 mid)]\n            [(&lt; (list-ref A mid) x)\n             (find_first_occurrence_iter A x (+ mid 1) high)]\n            [else\n             (find_first_occurrence_iter A x low (- mid 1))]))\n        -1))\n  (find_first_occurrence_iter A x 0 (length A)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (&gt; low high)\n        -1\n        (let ([mid (quotient (+ low high) 2)])\n          (cond\n            [(= (list-ref A mid) x)\n             (if (= mid 0)\n                 mid\n                 (find_first_occurrence_iter low (- mid 1)))]\n            [(&lt; (list-ref A mid) x)\n             (find_first_occurrence_iter (+ mid 1) high)]\n            [(&gt; (list-ref A mid) x)\n             (find_first_occurrence_iter low (- mid 1))]))))\n  (find_first_occurrence_iter 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (> low high)\n        -1\n        (let ((mid (quotient (+ low high) 2)))\n          (if (= (list-ref A mid) x)\n              (let ((index (find_first_occurrence_iter low (- mid 1))))\n                (if (= index -1)\n                    mid\n                    index))\n              (if (< (list-ref A mid) x)\n                  (find_first_occurrence_iter (+ mid 1) high)\n                  (find_first_occurrence_iter low (- mid 1)))))))\n  (find_first_occurrence_iter 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x low high)\n    (if (&gt; low high)\n        -1\n        (let* ([mid (quotient (+ low high) 2)]\n               [mid-val (list-ref A mid)])\n          (cond\n            [(= mid-val x)\n             (if (or (= mid 0)\n                     (&lt; (list-ref A (- mid 1)) x))\n                 mid\n                 (find_first_occurrence_iter A x low (- mid 1)))]\n            [(&lt; mid-val x)\n             (find_first_occurrence_iter A x (+ mid 1) high)]\n            [else\n             (find_first_occurrence_iter A x low (- mid 1))]))))\n  (find_first_occurrence_iter A x 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter low high)\n    (if (> low high)\n        -1\n        (let ((mid (quotient (+ low high) 2)))\n          (if (= (list-ref A mid) x)\n              (if (= mid 0)\n                  mid\n                  (if (= (list-ref A (- mid 1)) x)\n                      (find_first_occurrence_iter low (- mid 1))\n                      mid))\n              (if (< (list-ref A mid) x)\n                  (find_first_occurrence_iter (+ mid 1) high)\n                  (find_first_occurrence_iter low (- mid 1)))))))\n  (find_first_occurrence_iter 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x l u)\n    (if (&gt; l u)\n        -1\n        (let ([m (quotient (+ l u) 2)])\n          (cond\n            [(= x (list-ref A m))\n             (if (or (= m 0)\n                     (&lt; x (list-ref A (- m 1))))\n                 m\n                 (find_first_occurrence_iter A x l (- m 1)))]\n            [(&lt; x (list-ref A m))\n             (find_first_occurrence_iter A x l (- m 1))]\n            [else\n             (find_first_occurrence_iter A x (+ m 1) u)]))))\n  (find_first_occurrence_iter A x 0 (- (length A) 1)))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond ((null? A) #f)\n          ((= x (car A)) i)\n          ((&gt; x (car A)) (find_first_occurrence_iter (cdr A) x (+ i 1)))\n          (else #f)))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond ((null? A) -1)\n          ((= (car A) x) i)\n          ((&gt; (car A) x) -1)\n          (else (find_first_occurrence_iter (cdr A) x (+ i 1)))))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond\n      [(empty? A) -1]\n      [(= (first A) x) i]\n      [(&gt; (first A) x) -1]\n      [else (find_first_occurrence_iter (rest A) x (+ i 1))]))\n  (find_first_occurrence_iter A x 0))\n</code>\nI'm not sure if this is the most efficient way to do it, but it seems to work.\n\n\nA:\n\nYour solution is correct, but it can be improved.\nFirst, you can use <code>cond</code>'s <code>else</code> clause to avoid repeating the recursive call:\n<code>(define (find_first_occurrence A x)\n  (define (find_first_occurrence_iter A x i)\n    (cond\n      [(empty? A) -1]\n      [(= (first A) x) i]\n      [(&gt; (first A) x) -1]\n      [else (find_first_occurrence_iter (rest A) x (+ i 1))]))\n  (find_first_occurrence_iter A x 0))\n</code>\nSecond, you can use <code>andmap</code> to simplify the <code>cond</code> expression:\n<code>(define (find_first_occurrence A x)\n  (define (find_first_occurrence_iter A x i)\n    (cond\n      [(andmap (lambda (a) (&lt;= a x)) A) -1]\n      [(= (first A) x) i]\n      [else (find_first_occurrence_iter (rest A) x (+ i 1))]))\n  (find_first_occurrence_iter A x 0))\n</code>\nThird, you can use <code>for/fold</code> to simplify the <code>cond</code> expression even more:\n<code>(define (find_first_occurrence A x)\n  (define (find_first_occurrence_iter A x i)\n    (cond\n      [(for/fold ([i -1]) ([a (in-list A)])\n        ",
    "  (define (find_first_occurrence_iter A x start end)\n    (if (&gt; start end)\n        -1\n        (let* ([mid (quotient (+ start end) 2)]\n               [mid-val (list-ref A mid)])\n          (if (= mid-val x)\n              (if (and (&gt; mid 0)\n                       (= (list-ref A (- mid 1)) x))\n                  (find_first_occurrence_iter A x start (- mid 1))\n                  mid)\n              (if (&lt; mid-val x)\n                  (find_first_occurrence_iter A x (+ mid 1) end)\n                  (find_first_occurrence_iter A x start (- mid 1)))))))\n  (find_first_occurrence_iter A x 0 (- (length A) 1)))\n</code>\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond ((null? A) i)\n          ((= (car A) x) i)\n          (else (find_first_occurrence_iter (cdr A) x (+ i 1)))))\n  (find_first_occurrence_iter A x 0))\n",
    "  (define (find_first_occurrence_iter low high)\n    (cond ((= low high) #f)\n          ((= (list-ref A low) x) low)\n          (else (find_first_occurrence_iter (+ low 1) high))))\n  (find_first_occurrence_iter 0 (length A)))\n",
    "  (define (find_first_occurrence_iter A x i)\n    (cond ((null? A) #f)\n          ((= (car A) x) i)\n          ((&gt; (car A) x) #f)\n          (else (find_first_occurrence_iter (cdr A) x (+ i 1)))))\n  (find_first_occurrence_iter A x 0))\n",
    "  (let loop ([i 0])\n    (if (= i (length A))\n        -1\n        (if (= (list-ref A i) x)\n            i\n            (loop (+ i 1))))))\n"
  ]
}