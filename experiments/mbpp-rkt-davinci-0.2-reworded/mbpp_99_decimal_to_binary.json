{
  "name": "mbpp_99_decimal_to_binary",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n(define (decimal_to_binary n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n    (check-equal? (candidate 8) \"1000\")\n    (check-equal? (candidate 18) \"10010\")\n    (check-equal? (candidate 7) \"111\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n result)\n    (if (= n 0)\n        result\n        (helper (quotient n 2) (string-append (number->string (remainder n 2)) result))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n result)\n    (cond ((= n 0) result)\n          ((= (remainder n 2) 0) (decimal_to_binary_iter (/ n 2) (string-append \"0\" result)))\n          (else (decimal_to_binary_iter (/ n 2) (string-append \"1\" result)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(= n 0) acc]\n          [else (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) '(1)]\n      [else (append (helper (quotient n 2)) (list (remainder n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (list-&gt;string (reverse (helper n)))))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (apply string-append (map number-&gt;string (reverse (helper n))))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(= n 0) acc]\n          [else (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) '(1)]\n      [else (append (helper (quotient n 2)) (list (remainder n 2)))])\n  )\n  (string-join (reverse (helper n)) \"\")\n)\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(zero? n) (string-&gt;list acc)]\n          [else (decimal_to_binary_iter (quotient n 2) (string-append (number-&gt;string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(zero? n) \"\"]\n        [else (append (decimal_to_binary (quotient n 2))\n                      (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append acc (number->string (remainder n 2))))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond [(zero? n) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (helper n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (apply string-append (reverse (map number-&gt;string (helper n))))))\n</code>\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (modulo n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (iter (/ n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (iter n \"\"))\n",
    "  (if (zero? n)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (define (helper n acc)\n    (cond\n      [(zero? n) acc]\n      [else (helper (quotient n 2) (string (remainder n 2)))]))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(zero? n) acc]\n          [else (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(= n 0) acc]\n          [(= (remainder n 2) 0) (decimal_to_binary_iter (/ n 2) (string-append \"0\" acc))]\n          [else (decimal_to_binary_iter (/ n 2) (string-append \"1\" acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (modulo n 2) acc))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        (string-&gt;list (number-&gt;string acc))\n        (decimal_to_binary_iter (quotient n 2) (+ (* (remainder n 2) (expt 10 (length acc))) acc))))\n  (decimal_to_binary_iter n 0))\n",
    "  (define (helper n)\n    (if (= n 0)\n        \"\"\n        (string-append (helper (quotient n 2)) (number->string (remainder n 2)))))\n  (helper n))\n",
    "  (define (helper n)\n    (if (= n 0) \"\"\n        (string-append (if (= (modulo n 2) 0) \"0\" \"1\") (helper (quotient n 2)))))\n  (helper n))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (modulo n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(= n 0) (string-reverse acc)]\n      [(= (remainder n 2) 0) (decimal_to_binary_iter (/ n 2) (string-append acc \"0\"))]\n      [else (decimal_to_binary_iter (/ n 2) (string-append acc \"1\"))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) '(1)]\n      [else (append (helper (quotient n 2)) (list (remainder n 2)))]))\n  (list->string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (decimal_to_binary_iter (quotient n 2)))]))\n  (apply string (reverse (decimal_to_binary_iter n))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (apply string-append (reverse (map number-&gt;string (helper n))))))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [(= n 1) '(1)]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (helper n \"\"))\n",
    "  (cond [(zero? n) \"\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(zero? n) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        (list->string (reverse acc))\n        (decimal_to_binary_iter (quotient n 2) (cons (modulo n 2) acc))))\n  (decimal_to_binary_iter n '()))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (list->string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond ((= n 0) \"\")\n        ((= n 1) \"1\")\n        (else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2))))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (let loop ([n n] [accumulator \"\"])\n    (cond [(zero? n) accumulator]\n          [else (loop (quotient n 2) (string (remainder n 2) accumulator))])))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond ((= n 0) \"\")\n        ((= n 1) \"1\")\n        (else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2))))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (if (= n 0)\n        (string-&gt;number (string-reverse acc))\n        (decimal_to_binary-iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary-iter n \"\"))\n</code>\nI'm getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: #&lt;syntax:eval:8:0&gt;\n  arguments...:\n   #&lt;syntax:eval:8:0&gt;\n</code>\nI'm not sure what this means. I'm new to Racket and I'm not sure what I'm doing wrong.\n\n\nA:\n\n<code>string</code> is a procedure that takes a list of characters and returns a string. You want to use <code>string-append</code> instead.\n<code>(define (decimal_to_binary n)\n  (define (decimal_to_binary-iter n acc)\n    (if (= n 0)\n        (string-&gt;number (string-reverse acc))\n        (decimal_to_binary-iter (quotient n 2) (string-append acc (string (remainder n 2))))))\n  (decimal_to_binary-iter n \"\"))\n</code>\n",
    "  (define (binary_helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (binary_helper (quotient n 2)))))\n  (define (remove_leading_zeros lst)\n    (if (null? lst)\n        '()\n        (if (zero? (car lst))\n            (remove_leading_zeros (cdr lst))\n            lst)))\n  (list->string (reverse (remove_leading_zeros (binary_helper n)))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (list->string (reverse (helper n))))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (list->string (reverse (helper n))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (zero? n)\n        '()\n        (append (helper (quotient n 2)) (list (remainder n 2)))))\n  (string-join (map number->string (helper n)) \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (apply string-append (reverse (map number-&gt;string (helper n))))))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary-iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary-iter n \"\"))\n",
    "  (define (helper n acc)\n    (cond\n      [(zero? n) (string-append acc \"0\")]\n      [(= n 1) (string-append acc \"1\")]\n      [else (helper (quotient n 2) (string-append acc (number->string (remainder n 2))))]))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond ((= n 0) \"\")\n        ((= n 1) \"1\")\n        (else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2))))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n result)\n    (cond ((= n 0) result)\n          ((= (remainder n 2) 0) (decimal_to_binary_iter (/ n 2) (string-append \"0\" result)))\n          (else (decimal_to_binary_iter (/ n 2) (string-append \"1\" result)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (zero? n)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (string-join (reverse (helper n)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        (string-&gt;list acc)\n        (decimal_to_binary_iter (quotient n 2) (string-append (number-&gt;string (remainder n 2)) acc))))\n  (list-&gt;string (decimal_to_binary_iter n \"\")))\n",
    "  (define (decimal_to_binary_helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (decimal_to_binary_helper (quotient n 2)))))\n  (apply string (reverse (decimal_to_binary_helper n))))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (string-&gt;number (apply string-append (map number-&gt;string (reverse (helper n))))))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(zero? n) acc]\n      [else (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (iter n acc)\n    (if (= n 0)\n        acc\n        (iter (quotient n 2) (string (remainder n 2) acc))))\n  (iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 2) (helper (quotient n 2)))))\n  (apply string (reverse (helper n))))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (append (helper (quotient n 2)) (list (remainder n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (if (= n 0)\n      \"\"\n      (string-append (decimal_to_binary (quotient n 2))\n                     (number->string (remainder n 2)))))\n",
    "  (define (helper n acc)\n    (if (= n 0)\n        acc\n        (helper (quotient n 2) (string (remainder n 2)))))\n  (helper n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond [(= n 0) '()]\n          [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2))\n                        (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (if (zero? n)\n      \"\"\n      (append (decimal_to_binary (quotient n 2))\n              (number->string (remainder n 2)))))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (binary-helper n)\n    (cond [(= n 0) '()]\n          [(= n 1) '(1)]\n          [else (append (binary-helper (quotient n 2)) (list (remainder n 2)))]))\n  (string-join (reverse (binary-helper n)) \"\"))\n",
    "  (cond [(zero? n) \"\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary-iter n acc)\n    (cond\n      [(zero? n) (reverse acc)]\n      [else (decimal_to_binary-iter (quotient n 2) (cons (remainder n 2) acc))]))\n  (decimal_to_binary-iter n '()))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond [(= n 0) acc]\n          [else (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (zero? n)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (helper n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (remainder n 2) (helper (quotient n 2)))]))\n  (string-join (reverse (helper n)) \"\"))\n</code>\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n result)\n    (if (= n 0)\n        result\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) result))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (quotient n 2) (string (remainder n 2)))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (cond\n      [(= n 0) acc]\n      [else (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))]))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond\n    [(= n 0) \"\"]\n    [(= n 1) \"1\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n",
    "  (define (decimal_to_binary_iter n acc)\n    (if (= n 0)\n        acc\n        (decimal_to_binary_iter (/ n 2) (string-append (number->string (remainder n 2)) acc))))\n  (decimal_to_binary_iter n \"\"))\n",
    "  (cond [(= n 0) \"\"]\n        [(= n 1) \"1\"]\n        [else (string-append (decimal_to_binary (quotient n 2))\n                             (number->string (remainder n 2)))]))\n",
    "  (cond\n    [(zero? n) \"\"]\n    [else (string-append (decimal_to_binary (quotient n 2)) (number->string (remainder n 2)))]))\n"
  ]
}