{
  "name": "mbpp_261_division_elements",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function that takes in two lists and performs mathematical division operation element-wise across the given lists.\n(define (division_elements test_tup1 test_tup2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate division_elements))\n    (check-equal? (candidate (list 10 4 6 9) (list 5 2 3 3)) (list 2 2 2 3))\n    (check-equal? (candidate (list 12 6 8 16) (list 6 3 4 4)) (list 2 2 2 4))\n    (check-equal? (candidate (list 20 14 36 18) (list 5 7 6 9)) (list 4 2 6 2))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (car test_tup1) (car test_tup2)) (division_elements (cdr test_tup1) (cdr test_tup2)))]))\n",
    "  (map (lambda (x y)\n         (/ x y))\n       test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (/ x y))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (cond\n    [(empty? test_tup1) empty]\n    [else (cons (/ (first test_tup1) (first test_tup2)) (division_elements (rest test_tup1) (rest test_tup2)))]))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (/ x y))\n       test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y)\n         (/ x y))\n       test_tup1\n       test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n",
    "  (map (lambda (x y) (/ x y)) test_tup1 test_tup2))\n"
  ]
}