{
  "name": "mbpp_747_lcs_of_three",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n(define (lcs_of_three X Y Z)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lcs_of_three))\n    (check-equal? (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2)\n    (check-equal? (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5)\n    (check-equal? (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (cond ((or (= n 0) (= m 0)) 0)\n            ((= (string-ref X (- n 1)) (string-ref Y (- m 1))) (+ 1 (lcs_of_two_helper X Y (- n 1) (- m 1))))\n            ((&gt; (lcs_of_two_helper X Y n (- m 1)) (lcs_of_two_helper X Y (- n 1) m)) (lcs_of_two_helper X Y n (- m 1)))\n            (else (lcs_of_two_helper X Y (- n 1) m))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (cond ((or (= n 0) (= m 0) (= p 0)) 0)\n          ((and (= (string-ref X (- n 1)) (string-ref Y (- m 1))) (= (string-ref X (- n 1)) (string-ref Z (- p 1)))) (+ 1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1))))\n          ((&gt; (lcs_of_three_helper X Y Z n (- m 1) p) (lcs_of_three_helper X Y Z (- n 1) m p)) (lcs_of_three_helper X Y Z n (- m 1) p))\n          ((&gt; (lcs_of_three_helper X Y Z n m (- p 1)) (lcs_of_three_helper X Y Z (- n 1) m p)) (lcs_of_three_helper X Y Z n m (- p 1)))\n          (else (lcs_of_three_helper X Y Z (- n 1) m p))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [o (string-length Z)]\n         [L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n         [i (sub1 m)]\n         [j (sub1 n)]\n         [k (sub1 o)])\n    (for ([i (in-range m)])\n      (for ([j (in-range n)])\n        (for ([k (in-range o)])\n          (cond\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))))]\n            [(or (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)) (= (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (vector-ref (vector-ref (vector-ref L i) j) (sub1 k)))))))]\n            [else\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (vector-ref (vector-ref",
    "  (define (lcs_of_two X Y)\n    (cond\n      [(empty? X) empty]\n      [(empty? Y) empty]\n      [(char=? (first X) (first Y))\n       (cons (first X) (lcs_of_two (rest X) (rest Y)))]\n      [else\n       (cond\n         [(&gt; (length (lcs_of_two X (rest Y)))\n             (length (lcs_of_two (rest X) Y)))\n          (lcs_of_two X (rest Y))]\n         [else\n          (lcs_of_two (rest X) Y)])]))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (zero? i) (zero? j)) 0]\n        [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n         (+ 1 (lcs_of_two_helper X Y (- i 1) (- j 1)))]\n        [else\n         (max (lcs_of_two_helper X Y i (- j 1))\n              (lcs_of_two_helper X Y (- i 1) j))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (zero? i) (zero? j) (zero? k)) 0]\n      [(and (char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n            (char=? (string-ref X (- i 1)) (string-ref Z (- k 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z i j (- k 1))\n            (max (lcs_of_three_helper X Y Z i (- j 1) k)\n                 (lcs_of_three_helper X Y Z (- i 1) j k)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [o (string-length Z)]\n         [L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n         [i (sub1 m)]\n         [j (sub1 n)]\n         [k (sub1 o)])\n    (for ([i (in-range m)])\n      (for ([j (in-range n)])\n        (for ([k (in-range o)])\n          (cond\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))))]\n            [(or (= (string-ref X i) (string-ref Y j)) (= (string-ref Y j) (string-ref Z k)) (= (string-ref X i) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) k))))))]\n            [else\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (max (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (vector-",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref Y j) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([lcs_of_three_helper_1 (lcs_of_three_helper X Y Z i j (+ k 1))]\n             [lcs_of_three_helper_2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [lcs_of_three_helper_3 (lcs_of_three_helper X Y Z (+ i 1)",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond [(equal? (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n                 (+ 1 (lcs_of_two_helper X Y (sub1 m) (sub1 n)))]\n                [else\n                 (max (lcs_of_two_helper X Y m (sub1 n))\n                      (lcs_of_two_helper X Y (sub1 m) n))])))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) (vector-length X) (vector-length Y)))\n  (lcs_of_two X Y))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (define lcs_of_two_helper_result\n           (lcs_of_two_helper X Y (- m 1) (- n 1)))\n         (define lcs_of_two_helper_result_vector\n           (vector-ref lcs_of_two_helper_result (- m 1)))\n         (define lcs_of_two_helper_result_vector_value\n           (vector-ref lcs_of_two_helper_result_vector (- n 1)))\n         (cond\n           [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (vector-set! lcs_of_two_helper_result_vector (- n 1) (+ lcs_of_two_helper_result_vector_value 1))\n            lcs_of_two_helper_result]\n           [else\n            (define lcs_of_two_helper_result_vector_value_1\n              (vector-ref lcs_of_two_helper_result_vector (- n 2)))\n            (define lcs_of_two_helper_result_vector_value_2\n              (vector-ref lcs_of_two_helper_result (- m 2) (- n 1)))\n            (cond\n              [(> lcs_of_two_helper_result_vector_value_1 lcs_of_two_helper_result_vector_value_2)\n               (vector-set! lcs_of_two_helper_result_vector (- n 1) lcs_of_two_helper_result_vector_value_1)\n               lcs_of_two_helper_result]\n              [else\n               (vector-set! lcs_of_two_helper_result_vector (- n 1) lcs_of_two_helper_result_vector_value_2)\n               l",
    "  (define (lcs_of_two X Y)\n    (let ([m (string-length X)]\n          [n (string-length Y)])\n      (define (lcs_of_two_helper X Y m n)\n        (cond\n          [(or (= m 0) (= n 0)) 0]\n          [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n           (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n          [else (max (lcs_of_two_helper X Y m (- n 1))\n                     (lcs_of_two_helper X Y (- m 1) n))]))\n      (lcs_of_two_helper X Y m n)))\n  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper X Y Z m n o)\n      (cond\n        [(or (= m 0) (= n 0) (= o 0)) 0]\n        [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n         (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n        [else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                   (lcs_of_three_helper X Y Z (- m 1) n o)\n                   (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                   (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                   (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                   (lcs_of_three_helper X Y Z m n (- o 1)))]))\n    (lcs_of_three_helper X Y Z m n o)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (cond\n        [(= n 0) (make-vector m 0)]\n        [(= m 0) (make-vector n 0)]\n        [else\n         (let ([prev-row (lcs_of_two_helper (substring X 0 (- n 1)) Y (- n 1) m)]\n               [prev-col (lcs_of_two_helper X (substring Y 0 (- m 1)) n (- m 1))])\n           (vector-set! prev-row (- m 1)\n                        (if (char=? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n                            (+ 1 (vector-ref prev-col (- m 1)))\n                            (max (vector-ref prev-row (- m 1)) (vector-ref prev-col (- m 1)))))\n           prev-row)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (cond\n      [(= n 0) (make-vector m (make-vector p 0))]\n      [(= m 0) (make-vector n (make-vector p 0))]\n      [(= p 0) (make-vector n (make-vector m 0))]\n      [else\n       (let ([prev-row (lcs_of_three_helper (substring X 0 (- n 1)) Y Z (- n 1) m p)]\n             [prev-col (lcs_of_three_helper X (substring Y 0 (- m 1)) Z n (- m 1) p)]\n             [prev-dep (lcs_of_three_helper X Y (substring Z 0 (- p 1)) n m (- p 1))])\n         (vector-set! prev-row (- m 1)\n                      (vector-set! (vector-ref prev-row (- m 1)) (- p 1)\n                                   (if (char=? (string-ref X (- n 1)) (string-ref Y (- m 1)) (string-ref",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs-of-two-helper-result (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (cond\n             [(char=? (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n              (vector-set! lcs-of-two-helper-result (- m 1) (+ 1 (vector-ref lcs-of-two-helper-result (- m 1))))]\n             [else\n              (vector-set! lcs-of-two-helper-result (- m 1) (max (vector-ref lcs-of-two-helper-result (- m 1)) (vector-ref lcs-of-two-helper-result (- m 2))))])\n           lcs-of-two-helper-result)])\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([lcs-of-three-helper-result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (cond\n           [(and (char=? (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (char=? (vector-ref X (- m 1)) (vector-ref Z (- o 1))))\n            (vector-set! lcs-of-three-helper-result (- m 1) (+ 1 (vector-ref lcs-of-three-helper-result (- m 1))))]\n           [else\n            (vector-set! lcs-of-three",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (let ([lcs_of_two_helper_result_m (vector-ref lcs_of_two_helper_result (- m 1))])\n             (let ([lcs_of_two_helper_result_n (vector-ref lcs_of_two_helper_result (- n 1))])\n               (let ([lcs_of_two_helper_result_m_n (vector-ref lcs_of_two_helper_result (- m 1) (- n 1))])\n                 (if (string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                     (vector lcs_of_two_helper_result_m lcs_of_two_helper_result_n (+ lcs_of_two_helper_result_m_n 1))\n                     (vector (max lcs_of_two_helper_result_m lcs_of_two_helper_result_n) lcs_of_two_helper_result_n lcs_of_two_helper_result_m_n)))))))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n o 0)]\n      [(= n 0) (make-vector m o 0)]\n      [(= o 0) (make-vector m n 0)]\n      [else\n       (let ([lcs_of_three_helper_result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (let ([",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i))\n                        (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs1) (string-length lcs2))\n               lcs1\n               lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper X Y (- m 1) n)])\n           (vector-set! row m 0)\n           (for ([j (in-range n)])\n             (cond\n               [(char=? (string-ref X (- m 1)) (string-ref Y j))\n                (vector-set! row m (+ (vector-ref row (- m 1)) 1))]\n               [else\n                (vector-set! row m (max (vector-ref row (- m 1)) (vector-ref row m)))]))\n           row)]))\n    (define (lcs_of_two_helper_2 X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper_2 X Y (- m 1) n)])\n           (vector-set! row m 0)\n           (for ([j (in-range n)])\n             (cond\n               [(char=? (string-ref X (- m 1)) (string-ref Y j))\n                (vector-set! row m (+ (vector-ref row (- m 1)) 1))]\n               [else\n                (vector-set! row m (max (vector-ref row (- m 1)) (vector-ref row m)))]))\n           row)]))\n    (define (lcs_of_two_helper_3 X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper_3 X Y (- m 1) n)])\n           (vector-set! row m 0)\n           (for ([j (in-range n)])\n             (cond\n              ",
    "  (cond\n    [(empty? X) (lcs Y Z)]\n    [(empty? Y) (lcs X Z)]\n    [(empty? Z) (lcs X Y)]\n    [else\n     (let* ([x (first X)]\n            [y (first Y)]\n            [z (first Z)])\n       (cond\n         [(char=? x y)\n          (cons x (lcs_of_three (rest X) (rest Y) (rest Z)))]\n         [(char=? x z)\n          (cons x (lcs_of_three (rest X) Y (rest Z)))]\n         [(char=? y z)\n          (cons y (lcs_of_three X (rest Y) (rest Z)))]\n         [else\n          (let* ([lcs_xy (lcs X Y)]\n                 [lcs_xz (lcs X Z)]\n                 [lcs_yz (lcs Y Z)])\n            (cond\n              [(> (length lcs_xy) (length lcs_xz))\n               (if (> (length lcs_xy) (length lcs_yz))\n                   lcs_xy\n                   lcs_yz)]\n              [(> (length lcs_xz) (length lcs_yz))\n               lcs_xz]\n              [else\n               lcs_yz]))]))]))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector (vector-ref X (- m 1))))]\n        [else\n         (let ([a (lcs_of_two_helper X Y (- m 1) n)]\n               [b (lcs_of_two_helper X Y m (- n 1))])\n           (if (> (vector-length a) (vector-length b)) a b))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector (vector-ref X (- m 1))))]\n      [else\n       (let ([a (lcs_of_three_helper X Y Z (- m 1) n o)]\n             [b (lcs_of_three_helper X Y Z m (- n 1) o)]\n             [c (lcs_of_three_helper X Y Z m n (- o 1))])\n         (cond\n           [(> (vector-length a) (vector-length b))\n            (if (> (vector-length a) (vector-length c)) a c)]\n           [(> (vector-length b) (vector-length c)) b]\n           [else c]))]))\n  (",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (= (vector-ref X (- m 1)) (vector-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)))))\n  (lcs_of_three_helper (vector->list X) (vector->list Y) (vector->list Z) (vector-length X) (vector-length Y) (vector-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (string)]\n        [(= j (string-length Y)) (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([s1 (lcs_of_two_helper X Y i (+ j 1))]\n               [s2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length s1) (string-length s2))\n               s1\n               s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (max (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j)))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n         (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else\n         (max (lcs_of_three_helper i j (+ k 1))\n              (max (lcs_of_three_helper i (+ j 1) k)\n                   (lcs_of_three_helper (+ i 1) j k)))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y)))\n         (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([l1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [l2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length l1) (string-length l2))\n               l1\n               l2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y)))\n         (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([x (lcs_of_two_helper X Y i (+ j 1))]\n               [y (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length x) (string-length y))\n               x\n               y))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z)))\n       (make-string 0)]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (make-string 1 (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([x (lcs_of_three_helper X Y Z i j (+ k 1))]\n             [y (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [z (lcs_of_three_helper X Y Z (+ i 1) j k)])\n         (cond\n           [(&gt; (string-length x) (string-length y))\n            (if (&gt; (string-length x) (string-length z))\n                x\n                z)]\n           [else\n            (if (&gt; (string-length y) (string-",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n                (else\n                 (max (lcs_of_two_helper X Y m (- n 1))\n                      (lcs_of_two_helper X Y (- m 1) n))))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                    (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n              (else\n               (max (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                        (lcs_of_three_helper X Y Z (- m 1) n o))\n                    (lcs_of_three_helper X Y Z (- m 1) (- n 1) o))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([x (lcs_of_two_helper X Y (+ i 1) j)]\n               [y (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length x) (string-length y)) x y))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (let ([v (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (vector-set! v (- m 1) (+ 1 (vector-ref v (- m 1))))\n           v)]\n        [else\n         (let ([v1 (lcs_of_two_helper X Y (- m 1) n)]\n               [v2 (lcs_of_two_helper X Y m (- n 1))])\n           (if (> (vector-ref v1 (- m 1)) (vector-ref v2 (- m 1)))\n               v1\n               v2))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (let ([v (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (vector-set! v (- m 1) (+ 1 (vector-ref v (- m 1))))\n         v)]\n      [else\n       (let ([v1 (lcs_of_three_helper X Y Z (- m 1) n o)]\n             [v2 (lcs_of_three_helper X Y Z m (- n 1) o)]\n             [v3 (lcs_of_three_helper X Y Z m n (- o 1))])\n         (if (> (vector-ref v1 (- m 1)) (vector-ref",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let* ([lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1))]\n                [lcs_of_two_helper_result_m (vector-ref lcs_of_two_helper_result (- m 1))]\n                [lcs_of_two_helper_result_n (vector-ref lcs_of_two_helper_result (- n 1))])\n           (cond\n             [(string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (vector-set! lcs_of_two_helper_result (- m 1) (+ lcs_of_two_helper_result_m 1))\n              (vector-set! lcs_of_two_helper_result (- n 1) (+ lcs_of_two_helper_result_n 1))]\n             [else\n              (vector-set! lcs_of_two_helper_result (- m 1) (max lcs_of_two_helper_result_m lcs_of_two_helper_result_n))\n              (vector-set! lcs_of_two_helper_result (- n 1) (max lcs_of_two_helper_result_m lcs_of_two_helper_result_n))])\n           lcs_of_two_helper_result)])\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let* ([lcs_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (null? X) (null? Y)) '()]\n        [(= (string-ref X i) (string-ref Y j))\n         (cons (string-ref X i) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([a (lcs_of_two_helper X Y (+ i 1) j)]\n               [b (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (length a) (length b)) a b))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (let ([m (string-length X)]\n          [n (string-length Y)])\n      (define (lcs_of_two_helper i j)\n        (cond [(= i 0) (make-vector n 0)]\n              [(= j 0) (make-vector m 0)]\n              [else (let ([prev (lcs_of_two_helper (- i 1) (- j 1))])\n                      (vector-set! prev 0 (+ (vector-ref prev 0)\n                                             (if (char=? (string-ref X (- i 1))\n                                                         (string-ref Y (- j 1)))\n                                                 1\n                                                 0)))]))]))\n    (lcs_of_two_helper m n)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([x (lcs_of_two_helper X Y (+ i 1) j)]\n               [y (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length x) (string-length y)) x y))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([x (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [y (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [z (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (cond\n           [(&gt; (string-length x) (string-length y))\n            (if (&gt; (string-length x) (string-length z)) x z)]\n           [(&gt; (string-length y) (string-length z)) y]\n           [else z]))]))\n  (lcs_of_three_helper X Y Z 0 0 0))",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [else\n         (cond\n           [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n           [else\n            (max (lcs_of_two_helper X Y m (- n 1))\n                 (lcs_of_two_helper X Y (- m 1) n))])]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [else\n       (cond\n         [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n          (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n         [else\n          (max (lcs_of_three_helper X Y Z m (- n 1) o)\n               (max (lcs_of_three_helper X Y Z (- m 1) n o)\n                    (lcs_of_three_helper X Y Z (- m 1) (- n 1) o))])]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i))\n                        (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs1) (string-length lcs2))\n               lcs1\n               lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else (let ([lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1))])\n                (vector-set! lcs_of_two_helper_result m (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                                                           (+ (vector-ref lcs_of_two_helper_result (- m 1)) 1)\n                                                           (max (vector-ref lcs_of_two_helper_result (- m 1)) (vector-ref lcs_of_two_helper_result m)))))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector (+ m n) 0)]\n      [else (let ([lcs_of_three_helper_result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n              (vector-set! lcs_of_three_helper_result (+ m n) (if (and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1))) (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n                                                                 (+ (vector-ref lcs_of_three_helper_result (+ (- m 1) n)) 1)\n                                                                 (max (vector-ref lcs_of_three_helper_result (+ m n)) (max (vector-ref lcs_of_three_helper_result (+ m (- n 1))) (vector-ref",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (letrec ([lcs_of_three_helper (lambda (i j k)\n                                    (cond [(and (= i 0) (= j 0) (= k 0)) 0]\n                                          [(and (= i 0) (= j 0)) (lcs_of_three_helper i j (- k 1))]\n                                          [(and (= i 0) (= k 0)) (lcs_of_three_helper i (- j 1) k)]\n                                          [(and (= j 0) (= k 0)) (lcs_of_three_helper (- i 1) j k)]\n                                          [(and (= i 0) (= j 0) (= k 0)) 0]\n                                          [(and (= i 0) (= j 0)) (lcs_of_three_helper i j (- k 1))]\n                                          [(and (= i 0) (= k 0)) (lcs_of_three_helper i (- j 1) k)]\n                                          [(and (= j 0) (= k 0)) (lcs_of_three_helper (- i 1) j k)]\n                                          [(and (= i 0) (= j 0) (= k 0)) 0]\n                                          [(and (= i 0) (= j 0)) (lcs_of_three_helper i j (- k 1))]\n                                          [(and (= i 0) (= k 0)) (lcs_of_three_helper i (- j 1) k)]\n                                          [(and (= j 0) (= k 0)) (lcs_of_three_helper (- i 1) j k)]\n                                          [(and (= i 0) (= j 0) (= k 0)) 0]\n                                          [(and (= i 0) (= j 0)) (lcs_of_three_helper i j (- k 1))]\n                                          [(and (= i 0) (= k 0)) (lcs_of_three_helper i (- j 1) k)]\n                                          [(and (= j 0) (= k 0)) (lcs_of_three_helper (- i 1) j k)]\n                                         ",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (if (or (= i (string-length X)) (= j (string-length Y)))\n          \"\"\n          (if (char=? (string-ref X i) (string-ref Y j))\n              (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))\n              (if (&gt; (string-length (lcs_of_two_helper X Y (+ i 1) j)) (string-length (lcs_of_two_helper X Y i (+ j 1))))\n                  (lcs_of_two_helper X Y (+ i 1) j)\n                  (lcs_of_two_helper X Y i (+ j 1)))))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs1) (string-length lcs2)) lcs1 lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([lcs1 (lcs_of_three_helper X Y Z i j (+ k 1))]\n             [lcs2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [lcs3 (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [lcs4 (lcs_of_two X Y)]\n             [lcs5 (lcs_of_two X Z)]\n             [lcs6 (lcs_of_two Y Z)])\n         (cond\n           [(&gt; (string-length lcs1) (string-length lcs",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper (substring X 0 (- m 1)) Y (- m 1) n)])\n           (vector-set! row (- m 1) (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                                        (+ 1 (vector-ref row (- m 2)))\n                                        (max (vector-ref row (- m 2)) (vector-ref row (- m 1)))))\n           row)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([row (lcs_of_three_helper (substring X 0 (- m 1)) Y Z (- m 1) n o)])\n         (vector-set! row (- m 1) (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n                                      (+ 1 (vector-ref row (- m 2)))\n                                      (max (vector-ref row (- m 2)) (vector-ref row (- m 1)))))\n         row)]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n o)\n            (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n            (lcs_of_three_helper X Y Z m n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond [(equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n                [else\n                 (max (lcs_of_two_helper X Y m (- n 1))\n                      (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond [(and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                   (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n              [else\n               (max (lcs_of_three_helper X Y Z m n (- o 1))\n                    (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                         (lcs_of_three_helper X Y Z (- m 1) n o)))])))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i))\n                            (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (string-append (lcs_of_two_helper X Y (+ i 1) j)\n                                 (lcs_of_two_helper X Y i (+ j 1))))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) (- o 1)) (lcs_of_three_helper X Y Z m n (- o 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i))\n                            (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (string-append (lcs_of_two_helper X Y i (+ j 1))\n                                 (lcs_of_two_helper X Y (+ i 1) j)))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j)]\n        [(= j (string-length Y)) (make-string i)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string i) (string-append (list (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1))))]\n        [else\n         (let ([l1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [l2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length l1) (string-length l2)) l1 l2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1))) (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o) (max (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (zero? i) (zero? j)) '())\n            ((equal? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n             (cons (string-ref X (- i 1)) (lcs_of_two_helper X Y (- i 1) (- j 1))))\n            (else (if (&gt; (lcs_of_two_helper X Y (- i 1) j)\n                        (lcs_of_two_helper X Y i (- j 1)))\n                     (lcs_of_two_helper X Y (- i 1) j)\n                     (lcs_of_two_helper X Y i (- j 1))))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond ((or (zero? i) (zero? j) (zero? k)) '())\n          ((and (equal? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n                (equal? (string-ref X (- i 1)) (string-ref Z (- k 1))))\n           (cons (string-ref X (- i 1)) (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1))))\n          (else (if (&gt; (lcs_of_three_helper X Y Z (- i 1) j k)\n                      (lcs_of_three_helper X Y Z i (- j 1) k))\n                   (if (&gt; (lcs_of_three_helper X Y Z (- i 1) j k)\n                           (lcs_of_three_helper X Y Z i j (- k 1)))\n                       (lcs_of_three_helper X Y Z (- i 1) j k)\n                       (lcs_of_three_helper X Y Z i j (- k 1)))\n                   (if (&gt; (lcs_of_three_helper X Y Z",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) 0]\n        [(char=? (string-ref X i) (string-ref Y j)) (+ 1 (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else (max (lcs_of_two_helper X Y (+ i 1) j) (lcs_of_two_helper X Y i (+ j 1)))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) 0]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k))) (+ 1 (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else (max (lcs_of_three_helper X Y Z (+ i 1) j k) (lcs_of_three_helper X Y Z i (+ j 1) k) (lcs_of_three_helper X Y Z i j (+ k 1)))]))\n  (lcs_of_three_helper X Y Z 0 0 0))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond [(equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n                [else\n                 (max (lcs_of_two_helper X Y m (- n 1))\n                      (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond [(and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                   (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n              [else\n               (max (lcs_of_three_helper X Y Z m n (- o 1))\n                    (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                         (lcs_of_three_helper X Y Z (- m 1) n o)))])))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (vector-set! lcs_of_two_helper_result m (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                                                       (+ 1 (vector-ref lcs_of_two_helper_result (- m 1)))\n                                                       (max (vector-ref lcs_of_two_helper_result (- m 1)) (vector-ref lcs_of_two_helper_result m))))\n           lcs_of_two_helper_result)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([lcs_of_three_helper_result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (vector-set! lcs_of_three_helper_result m (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n                                                       (+ 1 (vector-ref lcs_of_three_helper_result (- m 1)))\n                                                       (max (vector-ref lcs_of_three_helper_result (- m 1)) (vector-ref lcs_of_three_helper_result m))))\n         lcs_of_three_helper_result)]))\n  (lcs_of_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector (vector-ref X (- m 1))))]\n        [else\n         (let ([a (lcs_of_two_helper X Y (- m 1) n)]\n               [b (lcs_of_two_helper X Y m (- n 1))])\n           (if (> (vector-length a) (vector-length b))\n               a\n               b))]))\n    (lcs_of_two_helper (string->vector X) (string->vector Y) (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector (vector-ref X (- m 1))))]\n      [else\n       (let ([a (lcs_of_three_helper X Y Z (- m 1) n o)]\n             [b (lcs_of_three_helper X Y Z m (- n 1) o)]\n             [c (lcs_of_three_helper X Y Z m n (- o 1))])\n         (cond\n           [(> (vector-length a) (vector-length b))\n            (if (> (vector-length a) (vector-length c))\n                a\n                c)]\n           [(> (vector-length b) (vector",
    "  (let loop ([i 0] [j 0] [k 0])\n    (cond\n      [(or (string=? X \"\") (string=? Y \"\") (string=? Z \"\")) \"\" ]\n      [(and (string=? (substring X i (+ 1 i)) (substring Y j (+ 1 j)))\n            (string=? (substring X i (+ 1 i)) (substring Z k (+ 1 k))))\n       (string-append (substring X i (+ 1 i)) (loop (+ 1 i) (+ 1 j) (+ 1 k)))]\n      [(or (string=? (substring X i (+ 1 i)) (substring Y j (+ 1 j)))\n           (string=? (substring X i (+ 1 i)) (substring Z k (+ 1 k)))\n           (string=? (substring Y j (+ 1 j)) (substring Z k (+ 1 k))))\n       (let ([x (loop (+ 1 i) j k)]\n             [y (loop i (+ 1 j) k)]\n             [z (loop i j (+ 1 k))])\n         (cond\n           [(> (string-length x) (string-length y))\n            (if (> (string-length x) (string-length z)) x z)]\n           [(> (string-length y) (string-length z)) y]\n           [else z]))]\n      [else (loop (+ 1 i) (+ 1 j) (+ 1 k))])))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n o)\n            (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n            (lcs_of_three_helper X Y Z m n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else (max (lcs_of_two_helper X Y m (- n 1))\n                   (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                 (lcs_of_three_helper X Y Z (- m 1) n o)\n                 (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                 (lcs_of_three_helper X Y Z m n (- o 1))\n                 (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                 (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([s1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [s2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length s1) (string-length s2)) s1 s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([s1 (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [s2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [s3 (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (if (&gt; (string-length s1) (string-length s2))\n             (if (&gt; (string-length s1) (string-length s3)) s1 s3)\n             (if (&gt; (string-length s2) (string-length s3)) s2 s3)))]))\n  (lcs_of_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (if (or (= n 0) (= m 0))\n          0\n          (if (equal? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n              (+ 1 (lcs_of_two_helper X Y (- n 1) (- m 1)))\n              (max (lcs_of_two_helper X Y n (- m 1)) (lcs_of_two_helper X Y (- n 1) m)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (if (or (= n 0) (= m 0) (= p 0))\n        0\n        (if (and (equal? (string-ref X (- n 1)) (string-ref Y (- m 1))) (equal? (string-ref X (- n 1)) (string-ref Z (- p 1))))\n            (+ 1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1)))\n            (max (lcs_of_three_helper X Y Z n (- m 1) p) (lcs_of_three_helper X Y Z n m (- p 1)) (lcs_of_three_helper X Y Z (- n 1) m p) (lcs_of_three_helper X Y Z n (- m 1) (- p 1)) (lcs_of_three_helper X Y Z (- n 1) m (- p 1)) (lcs_of_three_helper X Y Z (- n 1) (- m 1) p) (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i 0) (vector-ref (vector-ref X i) j)]\n        [(= j 0) (vector-ref (vector-ref X i) j)]\n        [(= (vector-ref X i) (vector-ref Y j)) (+ (vector-ref (vector-ref X (- i 1)) (- j 1)) 1)]\n        [else (max (vector-ref (vector-ref X (- i 1)) j) (vector-ref (vector-ref X i) (- j 1)))]))\n    (define (lcs_of_two_helper_2 X Y)\n      (for/vector ((i (in-range (vector-length X)))\n                   (j (in-range (vector-length (vector-ref X i)))))\n        (lcs_of_two_helper X Y i j)))\n    (lcs_of_two_helper_2 X Y))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i 0) (vector-ref (vector-ref (vector-ref X i) j) k)]\n      [(= j 0) (vector-ref (vector-ref (vector-ref X i) j) k)]\n      [(= k 0) (vector-ref (vector-ref (vector-ref X i) j) k)]\n      [(and (= (vector-ref X i) (vector-ref Y j)) (= (vector-ref X i) (vector-ref Z k))) (+ (vector-ref (vector-ref (vector-ref X (- i 1)) (- j 1)) (- k 1)) 1)]\n      [else (max (vector-ref (vector-ref (vector-ref X (- i 1)) j) k)\n                 (vector-ref (vector-ref (vector-ref X i) (- j 1)) k)\n                 (vector-ref (vector-ref (vector-ref X i) j) (- k 1)))]))\n  (define (lcs_of_three_helper_2 X Y Z)\n    (for/vector ((i",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n                (else (max (lcs_of_two_helper X Y m (- n 1))\n                           (lcs_of_two_helper X Y (- m 1) n))))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                    (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n              (else (max (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                         (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                         (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                         (lcs_of_three_helper X Y Z (- m 1) n o)\n                         (lcs_of_three_helper X Y Z m (- n 1) o)\n                         (lcs_of_three_helper X Y Z m n (- o 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond\n            [(equal? (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n            [else\n             (max (lcs_of_two_helper X Y m (- n 1))\n                  (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond\n          [(and (equal? (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n                (equal? (vector-ref X (- m 1)) (vector-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n          [else\n           (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                (lcs_of_three_helper X Y Z (- m 1) n o)\n                (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                (lcs_of_three_helper X Y Z m n (- o 1))\n                (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n    (lcs_of_three_helper (vector->list X) (vector->list Y) (vector->list Z) (vector-length X) (vector-length Y) (vector-length Z)))\n  (lcs_of_three",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else (max (lcs_of_two_helper X Y m (- n 1))\n                   (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                 (lcs_of_three_helper X Y Z (- m 1) n o)\n                 (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                 (lcs_of_three_helper X Y Z m n (- o 1))\n                 (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                 (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector (vector-ref X (- m 1))))]\n        [else\n         (let ([a (vector-ref (lcs_of_two_helper X Y (- m 1) n) (- m 1))]\n               [b (vector-ref (lcs_of_two_helper X Y m (- n 1)) (- n 1))])\n           (if (> a b)\n               (vector-append (lcs_of_two_helper X Y (- m 1) n) (vector 0))\n               (vector-append (lcs_of_two_helper X Y m (- n 1)) (vector 0))))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector (vector-ref X (- m 1))))]\n      [else\n       (let ([a (vector-ref (lcs_of_three_helper X Y Z (- m 1) n o) (- m 1))]\n             [b (vector-ref (lcs_of_three_helper X Y Z m (- n 1) o) (- n 1))]\n             [c (vector-ref (lcs_of_three_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (if (or (= i (string-length X)) (= j (string-length Y)))\n          \"\"\n          (let ([x (string-ref X i)]\n                [y (string-ref Y j)])\n            (if (= x y)\n                (string-append (string x) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))\n                (let ([lcs_x (lcs_of_two_helper X Y (+ i 1) j)]\n                      [lcs_y (lcs_of_two_helper X Y i (+ j 1))])\n                  (if (&gt; (string-length lcs_x) (string-length lcs_y))\n                      lcs_x\n                      lcs_y))))))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (if (or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z)))\n        \"\"\n        (let ([x (string-ref X i)]\n              [y (string-ref Y j)]\n              [z (string-ref Z k)])\n          (if (and (= x y) (= y z))\n              (string-append (string x) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))\n              (let ([lcs_x (lcs_of_three_helper X Y Z (+ i 1) j k)]\n                    [lcs_y (lcs_of_three_helper X Y Z i (+ j 1) k)]\n                    [lcs_z (lcs_of_three_helper X Y Z i j (+ k 1))])\n                (if (&gt; (string-length lcs_x) (string-length lcs_y))\n                    (if (&gt; (string-length lcs_x) (string-length lcs_z))\n                        lcs_x\n                        lcs_",
    "  (let loop ([i 1] [j 1] [k 1])\n    (cond\n      [(or (and (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z)))\n           (and (= i (string-length X)) (= j (string-length Y)))\n           (and (= i (string-length X)) (= k (string-length Z)))\n           (and (= j (string-length Y)) (= k (string-length Z))))\n       \"\"]\n      [(and (= (string-ref X (- i 1)) (string-ref Y (- j 1)))\n            (= (string-ref X (- i 1)) (string-ref Z (- k 1))))\n       (string-append (string (string-ref X (- i 1))) (loop (- i 1) (- j 1) (- k 1)))]\n      [else\n       (let ([lcs_of_two_strings (lcs_of_two (string-append (string-take X i) (string-take Y j))\n                                             (string-append (string-take X i) (string-take Z k)))])\n         (if (&gt; (string-length lcs_of_two_strings) (string-length (loop (- i 1) j k)))\n             lcs_of_two_strings\n             (loop (- i 1) j k)))])))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (= (vector-ref X (- m 1)) (vector-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) (- o 1)) (lcs_of_three_helper X Y Z m n (- o 1))))))\n  (lcs_of_three_helper X Y Z (vector-length X) (vector-length Y) (vector-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X))\n         (make-string j #\\_)]\n        [(= j (string-length Y))\n         (make-string i #\\_)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1)) (string (string-ref X i)))]\n        [(> (lcs_of_two_helper X Y (- i 1) j) (lcs_of_two_helper X Y i (- j 1)))]\n        [else\n         (lcs_of_two_helper X Y i (- j 1))]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k))) (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else (max (lcs_of_three_helper (+ i 1) j k)\n                   (lcs_of_three_helper i (+ j 1) k)\n                   (lcs_of_three_helper i j (+ k 1)))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else (max (lcs_of_two_helper X Y m (- n 1))\n                   (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                 (lcs_of_three_helper X Y Z (- m 1) n o)\n                 (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                 (lcs_of_three_helper X Y Z m n (- o 1))\n                 (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                 (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                 (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (if (= x y)\n               (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector x))\n               (if (> (vector-ref (lcs_of_two_helper X Y (- m 1) n) (- m 1))\n                      (vector-ref (lcs_of_two_helper X Y m (- n 1)) (- n 1)))\n                   (lcs_of_two_helper X Y (- m 1) n)\n                   (lcs_of_two_helper X Y m (- n 1))\n                   )\n               )\n           )\n         ]\n        )\n      )\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y))\n    )\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([x (vector-ref X (- m 1))]\n             [y (vector-ref Y (- n 1))]\n             [z (vector-ref Z (- o 1))])\n         (if (and (= x y) (= y z))\n             (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector x))\n             (if (> (vector-ref (lcs_of_three_helper X Y Z (- m 1) n o) (- m 1))\n                    (vector-ref (lcs_of_three_helper X Y Z m (- n 1) o) (- n 1)))\n                 (if",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [else\n         (cond\n           [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n           [else\n            (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n))])]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [else\n       (cond\n         [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n          (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n         [else\n          (max (lcs_of_three_helper X Y Z m (- n 1) o)\n               (max (lcs_of_three_helper X Y Z (- m 1) n o)\n                    (lcs_of_three_helper X Y Z (- m 1) (- n 1) o))])]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0)\n         (make-vector n 0)]\n        [(= n 0)\n         (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (if (= x y)\n               (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector 1))\n               (vector (max (vector-ref (lcs_of_two_helper X Y (- m 1) n) 0)\n                            (vector-ref (lcs_of_two_helper X Y m (- n 1)) 0)))))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0)\n       (make-vector n 0)]\n      [(= n 0)\n       (make-vector m 0)]\n      [(= o 0)\n       (make-vector m 0)]\n      [else\n       (let ([x (vector-ref X (- m 1))]\n             [y (vector-ref Y (- n 1))]\n             [z (vector-ref Z (- o 1))])\n         (if (and (= x y) (= x z))\n             (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector 1))\n             (vector (max (vector-ref (lcs_of_three_helper X Y Z (- m 1) n o) 0)\n                          (vector-ref (lcs_of_three_helper X Y Z m (- n 1) o) 0)\n                          (vector-ref (lcs_of_three_helper X Y Z m n (- o 1)) 0)))))]))\n  (lcs_of_three_helper X Y Z (vector-length X) (vector-length Y",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            ((> (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)) (lcs_of_two_helper X Y m (- n 1)))\n            (else (lcs_of_two_helper X Y (- m 1) n))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          ((> (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)) (lcs_of_three_helper X Y Z m (- n 1) o))\n          ((> (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z (- m 1) n o)) (lcs_of_three_helper X Y Z m n (- o 1)))\n          (else (lcs_of_three_helper X Y Z (- m 1) n o))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (if (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))\n              (max (lcs_of_two_helper X Y m (- n 1))\n                   (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (if (and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n            (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))\n            (max (max (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                      (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))\n                 (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((= m 0) 0)\n            ((= n 0) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((= m 0) 0)\n          ((= n 0) 0)\n          ((= o 0) 0)\n          ((= (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                     (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                     (lcs_of_three_helper X Y Z (- m 1) n (- o 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([prev-row (lcs_of_two_helper (substring X 0 (- m 1)) Y (- m 1) n)])\n           (vector-set! prev-row (- m 1) (vector-ref prev-row (- m 1)))\n           (for ([j (in-range n)])\n             (vector-set! prev-row j (max (vector-ref prev-row j) (vector-ref prev-row (- j 1)))))\n           (for ([i (in-range 1 m)])\n             (let ([curr-row (make-vector n 0)])\n               (vector-set! curr-row 0 (vector-ref curr-row 0))\n               (for ([j (in-range 1 n)])\n                 (vector-set! curr-row j\n                              (if (= (string-ref X i) (string-ref Y j))\n                                  (+ 1 (vector-ref prev-row (- j 1)))\n                                  (max (vector-ref curr-row (- j 1)) (vector-ref prev-row j)))))\n               (vector-set! prev-row (- m 1) (vector-ref curr-row (- n 1)))\n               (vector-set! prev-row (substring curr-row 0 (- n 1)))))\n           prev-row]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([prev-row (lcs_of_three_helper (substring X 0 (- m 1)) Y Z (- m 1) n o)])\n         (vector",
    "  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [o (string-length Z)]\n         [L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n         [i (sub1 m)]\n         [j (sub1 n)]\n         [k (sub1 o)])\n    (for ([i (in-range m)])\n      (for ([j (in-range n)])\n        (for ([k (in-range o)])\n          (cond\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))))]\n            [(or (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)) (= (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) k))))))]\n            [else\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (max (vector-ref (vector-ref (vector-ref L i) j) (sub1 k)) (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (vector-ref (vector-ref",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X))\n         (string)]\n        [(= j (string-length Y))\n         (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([s1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [s2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length s1) (string-length s2))\n               s1\n               s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X))\n       (string)]\n      [(= j (string-length Y))\n       (string)]\n      [(= k (string-length Z))\n       (string)]\n      [(char=? (string-ref X i) (string-ref Y j) (string-ref Z k))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([s1 (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [s2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [s3 (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (cond\n           [(&gt; (string-length s1) (string-length s2))\n            (if (&gt; (string-length s1) (string-length s3))\n                s1\n                s3)]\n           [(&gt; (string-length",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (if (or (= i (string-length X)) (= j (string-length Y)))\n          \"\"\n          (let ([x (string-ref X i)]\n                [y (string-ref Y j)])\n            (if (= x y)\n                (string-append (string x) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))\n                (let ([lcs1 (lcs_of_two_helper X Y (+ i 1) j)]\n                      [lcs2 (lcs_of_two_helper X Y i (+ j 1))])\n                  (if (> (string-length lcs1) (string-length lcs2))\n                      lcs1\n                      lcs2))))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X))\n         (make-string j #\\space)]\n        [(= j (string-length Y))\n         (make-string i #\\space)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1)) (string (string-ref X i)))]\n        [(> (lcs_of_two_helper X Y (- i 1) j) (lcs_of_two_helper X Y i (- j 1)))]\n        [else\n         (lcs_of_two_helper X Y i (- j 1))]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j #\\_)]\n        [(= j (string-length Y)) (make-string i #\\_)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1)) (string (string-ref X i)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y (- i 1) j)]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y i (- j 1))])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (define (lcs_of_two x y)\n    (define (lcs_of_two_helper x y i j)\n      (cond\n        [(or (= i (string-length x)) (= j (string-length y))) \"\" ]\n        [(char=? (string-ref x i) (string-ref y j))\n         (string-append (string (string-ref x i)) (lcs_of_two_helper x y (+ i 1) (+ j 1)))]\n        [else\n         (let ([a (lcs_of_two_helper x y (+ i 1) j)]\n               [b (lcs_of_two_helper x y i (+ j 1))])\n           (if (&gt; (string-length a) (string-length b))\n               a\n               b))]))\n    (lcs_of_two_helper x y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond\n            [(equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n            [else\n             (max (lcs_of_two_helper X Y m (- n 1))\n                  (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond\n          [(and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n          [else\n           (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                (max (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))])))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (string-append (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j)))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_X_Y_i_1_j (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_X_Y_i_j_1) (string-length lcs_of_X_Y_i_1_j))\n               lcs_of_X_Y_i_j_1\n               lcs_of_X_Y_i_1_j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([lcs_of_X_Y_Z_i_j_k_1 (lcs_of_three_helper X Y Z i j (+ k 1))]\n             [lcs_of_X_Y_Z_i_j_1_k (lcs_of_three_helper X Y Z i (+ j 1) k",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i 0) 0]\n        [(= j 0) 0]\n        [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n         (+ 1 (lcs_of_two_helper X Y (- i 1) (- j 1)))]\n        [else\n         (max (lcs_of_two_helper X Y (- i 1) j)\n              (lcs_of_two_helper X Y i (- j 1)))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i 0) 0]\n      [(= j 0) 0]\n      [(= k 0) 0]\n      [(and (char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n            (char=? (string-ref Y (- j 1)) (string-ref Z (- k 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z (- i 1) j k)\n            (lcs_of_three_helper X Y Z i (- j 1) k)\n            (lcs_of_three_helper X Y Z i j (- k 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j)]\n        [(= j (string-length Y)) (make-string i)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (add1 i) (add1 j)) (string (string-ref X i)))]\n        [(> (lcs_of_two_helper X Y (add1 i) j) (lcs_of_two_helper X Y i (add1 j)))]\n        [else (lcs_of_two_helper X Y i (add1 j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (make-string (+ j k))]\n      [(= j (string-length Y)) (make-string (+ i k))]\n      [(= k (string-length Z)) (make-string (+ i j))]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref Y j) (string-ref Z k)))\n       (string-append (lcs_of_three_helper X Y Z (add1 i) (add1 j) (add1 k)) (string (string-ref X i)))]\n      [(> (lcs_of_three_helper X Y Z (add1 i) j k) (lcs_of_three_helper X Y Z i (add1 j) k))]\n      [(> (lcs_of_three_helper X Y Z i j (add1 k)) (lcs_of_three_helper X Y Z i (add1 j) k))]\n      [else (lcs_of_three_helper X Y Z i (add1 j) k)]))\n  (lcs_of_three_helper",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (cond ((or (= n 0) (= m 0)) 0)\n            ((equal? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n             (+ 1 (lcs_of_two_helper X Y (- n 1) (- m 1))))\n            (else (max (lcs_of_two_helper X Y n (- m 1))\n                       (lcs_of_two_helper X Y (- n 1) m)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (cond ((or (= n 0) (= m 0) (= p 0)) 0)\n          ((and (equal? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n                (equal? (string-ref Y (- m 1)) (string-ref Z (- p 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1))))\n          (else (max (lcs_of_three_helper X Y Z n m (- p 1))\n                     (lcs_of_three_helper X Y Z n (- m 1) p)\n                     (lcs_of_three_helper X Y Z (- n 1) m p)\n                     (lcs_of_three_helper X Y Z (- n 1) (- m 1) p)\n                     (lcs_of_three_helper X Y Z (- n 1) m (- p 1))\n                     (lcs_of_three_helper X Y Z n (- m 1) (- p 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_X_Y_i_j_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_X_Y_i_j_1) (string-length lcs_of_two_helper_X_Y_i_j_2))\n               lcs_of_two_helper_X_Y_i_j_1\n               lcs_of_two_helper_X_Y_i_j_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) '()]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (cons (string-ref X i) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([l1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [l2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length l1) (string-length l2))\n               l1\n               l2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (null? X) (null? Y)) (vector)]\n        [(= (vector-ref X i) (vector-ref Y j)) (vector-append (vector (vector-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else (vector-append (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j))]))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) 0 0))\n  (lcs_of_two X Y))\n",
    "  (cond\n    [(or (empty? X) (empty? Y) (empty? Z)) empty]\n    [(and (equal? (first X) (first Y)) (equal? (first Y) (first Z)))\n     (cons (first X) (lcs_of_three (rest X) (rest Y) (rest Z)))]\n    [(and (equal? (first X) (first Y)) (not (equal? (first Y) (first Z))))\n     (lcs_of_three (rest X) (rest Y) Z)]\n    [(and (equal? (first Y) (first Z)) (not (equal? (first X) (first Y))))\n     (lcs_of_three X (rest Y) (rest Z))]\n    [(and (equal? (first X) (first Z)) (not (equal? (first Y) (first Z))))\n     (lcs_of_three (rest X) Y (rest Z))]\n    [else (max (lcs_of_three (rest X) Y Z)\n               (lcs_of_three X (rest Y) Z)\n               (lcs_of_three X Y (rest Z)))]))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_x_y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_x_y_i_1_j (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_x_y_i_j_1) (string-length lcs_x_y_i_1_j))\n               lcs_x_y_i_j_1\n               lcs_x_y_i_1_j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                     (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                     (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                     (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_X_Y_i_1_j (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_X_Y_i_j_1) (string-length lcs_of_X_Y_i_1_j))\n               lcs_of_X_Y_i_j_1\n               lcs_of_X_Y_i_1_j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(and (= i (string-length X)) (= j (string-length Y))) '()]\n        [(or (= i (string-length X)) (= j (string-length Y))) '()]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (cons (string-ref X i) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([x (lcs_of_two_helper X Y (+ i 1) j)]\n               [y (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length x) (string-length y)) x y))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(and (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) '()]\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) '()]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (cons (string-ref X i) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([x (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [y (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [z (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (if (> (string-length x) (string-length y))\n             (if (> (string-length x) (string-length z)) x z)\n             (if (> (string-length",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i 0) 0]\n        [(= j 0) 0]\n        [else\n         (cond\n           [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n            (+ (lcs_of_two_helper X Y (- i 1) (- j 1)) 1)]\n           [else\n            (max (lcs_of_two_helper X Y i (- j 1))\n                 (lcs_of_two_helper X Y (- i 1) j))])]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i 0) 0]\n      [(= j 0) 0]\n      [(= k 0) 0]\n      [else\n       (cond\n         [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)) (string-ref Z (- k 1)))\n          (+ (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)) 1)]\n         [else\n          (max (lcs_of_three_helper X Y Z i (- j 1) k)\n               (max (lcs_of_three_helper X Y Z (- i 1) j k)\n                    (lcs_of_three_helper X Y Z (- i 1) (- j 1) k))])]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_X_Y_i_1_j (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_X_Y_i_j_1) (string-length lcs_of_X_Y_i_1_j))\n               lcs_of_X_Y_i_j_1\n               lcs_of_X_Y_i_1_j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([s1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [s2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length s1) (string-length s2)) s1 s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([s1 (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [s2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [s3 (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (cond\n           [(> (string-length s1) (string-length s2))\n            (if (> (string-length s1) (string-length s3)) s1 s3)]\n           [else\n            (if (> (string-length s2) (string-length s3)) s2 s3)]))]))\n  (lcs_of_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond ((= (string-ref X (sub1 m)) (string-ref Y (sub1 n)))\n                 (+ 1 (lcs_of_two_helper X Y (sub1 m) (sub1 n))))\n                (else (max (lcs_of_two_helper X Y m (sub1 n))\n                           (lcs_of_two_helper X Y (sub1 m) n))))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond ((and (= (string-ref X (sub1 m)) (string-ref Y (sub1 n)))\n                    (= (string-ref X (sub1 m)) (string-ref Z (sub1 o))))\n               (+ 1 (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) (sub1 o))))\n              (else (max (lcs_of_three_helper X Y Z m (sub1 n) o)\n                         (lcs_of_three_helper X Y Z (sub1 m) n o)\n                         (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) o)\n                         (lcs_of_three_helper X Y Z m n (sub1 o))\n                         (lcs_of_three_helper X Y Z m (sub1 n) (sub1 o))\n                         (lcs_of_three_helper X Y Z (sub1 m) n (sub1 o))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (zero? i) (zero? j)) '()]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (cons (string-ref X i) (lcs_of_two_helper X Y (sub1 i) (sub1 j)))]\n        [else\n         (let ([x (lcs_of_two_helper X Y (sub1 i) j)]\n               [y (lcs_of_two_helper X Y i (sub1 j))])\n           (if (&gt; (length x) (length y)) x y))]))\n    (lcs_of_two_helper X Y (sub1 (string-length X)) (sub1 (string-length Y))))\n  (lcs_of_two X (lcs_of_two Y Z)))\n</code>\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper m n o)\n      (cond\n        [(= m 0) (make-string o #\\0)]\n        [(= n 0) (make-string o #\\0)]\n        [(= o 0) (make-string o #\\0)]\n        [(= (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n         (string-append (lcs_of_three_helper (- m 1) (- n 1) (- o 1)) (string (string-ref X (- m 1))))]\n        [else\n         (let ([a (lcs_of_three_helper (- m 1) n o)]\n               [b (lcs_of_three_helper m (- n 1) o)]\n               [c (lcs_of_three_helper m n (- o 1))])\n           (if (&gt; (string-length a) (string-length b))\n               (if (&gt; (string-length a) (string-length c))\n                   a\n                   c)\n               (if (&gt; (string-length b) (string-length c))\n                   b\n                   c)))]))\n    (lcs_of_three_helper m n o)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [else\n         (cond\n           [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n           [else\n            (max (lcs_of_two_helper X Y m (- n 1))\n                 (lcs_of_two_helper X Y (- m 1) n))])]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [else\n       (cond\n         [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n          (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n         [else\n          (max (lcs_of_three_helper X Y Z m (- n 1) o)\n               (max (lcs_of_three_helper X Y Z (- m 1) n o)\n                    (lcs_of_three_helper X Y Z (- m 1) (- n 1) o))])]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1))) (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o) (max (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (if (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))\n              (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n         (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else\n         (max (lcs_of_three_helper (+ i 1) j k)\n              (max (lcs_of_three_helper i (+ j 1) k)\n                   (lcs_of_three_helper i j (+ k 1))))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j)) (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else (max (lcs_of_two_helper X Y (+ i 1) j) (lcs_of_two_helper X Y i (+ j 1)))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k))) (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else (max (lcs_of_three_helper i (+ j 1) (+ k 1))\n                   (lcs_of_three_helper (+ i 1) j (+ k 1))\n                   (lcs_of_three_helper (+ i 1) (+ j 1) k))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else (max (lcs_of_two_helper X Y m (- n 1))\n                   (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                 (lcs_of_three_helper X Y Z (- m 1) n o)\n                 (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                 (lcs_of_three_helper X Y Z m n (- o 1))\n                 (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                 (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i m) (= j n) (= k o)) 0]\n        [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n         (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n        [else\n         (max (lcs_of_three_helper (+ i 1) j k)\n              (lcs_of_three_helper i (+ j 1) k)\n              (lcs_of_three_helper i j (+ k 1)))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o) (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) (- o 1)) (lcs_of_three_helper X Y Z (- m 1) n (- o 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j #\\_)]\n        [(= j (string-length Y)) (make-string i #\\_)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1)) (string (string-ref X i)))]\n        [else\n         (cond\n           [(> (string-length (lcs_of_two_helper X Y (- i 1) j)) (string-length (lcs_of_two_helper X Y i (- j 1))))\n            (lcs_of_two_helper X Y (- i 1) j)]\n           [else (lcs_of_two_helper X Y i (- j 1))])]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (make-string (+ j k) #\\_)]\n      [(= j (string-length Y)) (make-string (+ i k) #\\_)]\n      [(= k (string-length Z)) (make-string (+ i j) #\\_)]\n      [(char=? (string-ref X i) (string-ref Y j) (string-ref Z k))\n       (string-append (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)) (string (string-ref X i)))]\n      [else\n       (cond\n         [(> (string-length (lcs_of_three_helper X Y Z (- i 1) j k)) (string-length (lcs_of_three_helper X Y Z i (- j 1) k)))\n          (cond\n            [(> (string-length (lcs_of_three_helper X Y Z (-",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            ((> (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)) (lcs_of_two_helper X Y m (- n 1)))\n            (else (lcs_of_two_helper X Y (- m 1) n))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          ((> (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) o)) (lcs_of_three_helper X Y Z m n (- o 1)))\n          ((> (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)) (lcs_of_three_helper X Y Z m (- n 1) o))\n          ((> (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z m n (- o 1))) (lcs_of_three_helper X Y Z (- m 1) n o))\n          ((> (lcs_of_three_helper X Y",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (cond\n        [(= n 0) (make-list m 0)]\n        [(= m 0) (make-list n 0)]\n        [(= (string-ref X (- n 1)) (string-ref Y (- m 1)))\n         (cons (add1 (lcs_of_two_helper X Y (- n 1) (- m 1)))\n               (lcs_of_two_helper X Y (- n 1) (- m 1)))]\n        [else (max (lcs_of_two_helper X Y (- n 1) m)\n                   (lcs_of_two_helper X Y n (- m 1)))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (cond\n      [(= n 0) (make-list m 0)]\n      [(= m 0) (make-list n 0)]\n      [(= p 0) (make-list n 0)]\n      [(= (string-ref X (- n 1)) (string-ref Y (- m 1)) (string-ref Z (- p 1)))\n       (cons (add1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1)))\n             (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1)))]\n      [else (max (lcs_of_three_helper X Y Z (- n 1) m p)\n                 (lcs_of_three_helper X Y Z n (- m 1) p)\n                 (lcs_of_three_helper X Y Z n m (- p 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three X Y (substring Z 0 (- o 1)))\n                     (lcs_of_three X (substring Y 0 (- n 1)) Z)\n                     (lcs_of_three (substring X 0 (- m 1)) Y Z)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond [(= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n                [else\n                 (max (lcs_of_two_helper X Y m (- n 1))\n                      (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond [(and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                    (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n              [else\n               (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                    (max (lcs_of_three_helper X Y Z (- m 1) n o)\n                         (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))])))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs_of_two_helper_v (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (cond\n             [(string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (vector-append lcs_of_two_helper_v (vector (+ (vector-ref lcs_of_two_helper_v (- m 2)) 1)))]\n             [else\n              (vector-append lcs_of_two_helper_v (vector (max (vector-ref lcs_of_two_helper_v (- m 2)) (vector-ref lcs_of_two_helper_v (- n 2)))))]))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([lcs_of_three_helper_v (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (cond\n           [(and (string=? (string-ref X (- m 1)) (string-ref Y (- n 1))) (string=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n            (vector-append lcs_of_three_helper_v (vector (+ (vector-ref lcs_of_three_helper_v (- m 2)) 1)))]\n           [else\n            (vector-append lcs_of_three_helper_v (vector (max (vector-ref lcs_of_three_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([lcs_of_three_helper_1 (lcs_of_three_helper X Y Z i (+ j 1) (+ k 1))]\n             [lcs_of_three_helper_2 (lcs_of_three_helper X Y Z (+ i 1) j (+ k 1))]\n             [lcs_of_three_helper_3 (lcs_of_three_helper X",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([a (vector-ref (lcs_of_two_helper (substring X 0 (- m 1)) Y (- m 1) n) (- n 1))]\n               [b (vector-ref (lcs_of_two_helper X (substring Y 0 (- n 1)) m (- n 1)) (- m 1))]\n               [c (vector-ref (lcs_of_two_helper (substring X 0 (- m 1)) (substring Y 0 (- n 1)) (- m 1) (- n 1)) (- m 1))])\n           (cond\n             [(string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (vector-set! c (+ 1 c))\n              c]\n             [else\n              (vector (max a b))]))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([a (vector-ref (lcs_of_three_helper (substring X 0 (- m 1)) Y Z (- m 1) n o) (- n 1))]\n             [b (vector-ref (lcs_of_three_helper X (substring Y 0 (- n 1)) Z m (- n 1) o) (- m 1))]\n             [c (vector-ref (lcs_of_three_helper X Y (substring Z 0 (- o 1)) m n (- o 1)) (- m 1))]\n             [d (vector-ref (lcs_of_three_helper (substring X 0 (- m 1)) (substring Y 0 (-",
    "  (let loop ([i 0] [j 0] [k 0])\n    (cond\n      [(or (and (string=? (substring X i) \"\") (string=? (substring Y j) \"\"))\n           (and (string=? (substring X i) \"\") (string=? (substring Z k) \"\"))\n           (and (string=? (substring Y j) \"\") (string=? (substring Z k) \"\")))\n       \"\"]\n      [(and (string=? (substring X i) \"\") (string=? (substring Y j) \"\") (string=? (substring Z k) \"\"))\n       \"\"]\n      [(string=? (substring X i) (substring Y j))\n       (string-append (substring X i) (loop (+ i 1) (+ j 1) k))]\n      [(string=? (substring X i) (substring Z k))\n       (string-append (substring X i) (loop (+ i 1) j (+ k 1)))]\n      [(string=? (substring Y j) (substring Z k))\n       (string-append (substring Y j) (loop i (+ j 1) (+ k 1)))]\n      [else\n       (let ([l1 (loop (+ i 1) j k)]\n             [l2 (loop i (+ j 1) k)]\n             [l3 (loop i j (+ k 1))])\n         (cond\n           [(> (string-length l1) (string-length l2))\n            (if (> (string-length l1) (string-length l3))\n                l1\n                l3)]\n           [(> (string-length l2) (string-length l3))\n            l2]\n           [else\n            l3]))])))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (if (or (= n 0) (= m 0))\n          0\n          (if (equal? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n              (+ 1 (lcs_of_two_helper X Y (- n 1) (- m 1)))\n              (max (lcs_of_two_helper X Y n (- m 1))\n                   (lcs_of_two_helper X Y (- n 1) m)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (if (or (= n 0) (= m 0) (= p 0))\n        0\n        (if (and (equal? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n                 (equal? (string-ref X (- n 1)) (string-ref Z (- p 1))))\n            (+ 1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1)))\n            (max (lcs_of_three_helper X Y Z n (- m 1) (- p 1))\n                 (lcs_of_three_helper X Y Z (- n 1) m (- p 1))\n                 (lcs_of_three_helper X Y Z (- n 1) (- m 1) p)\n                 (lcs_of_two X Y)\n                 (lcs_of_two X Z)\n                 (lcs_of_two Y Z)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (if (or (= n 0) (= m 0))\n          0\n          (if (char=? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n              (+ 1 (lcs_of_two_helper X Y (- n 1) (- m 1)))\n              (max (lcs_of_two_helper X Y n (- m 1)) (lcs_of_two_helper X Y (- n 1) m)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (if (or (= n 0) (= m 0) (= p 0))\n        0\n        (if (and (char=? (string-ref X (- n 1)) (string-ref Y (- m 1))) (char=? (string-ref X (- n 1)) (string-ref Z (- p 1))))\n            (+ 1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1)))\n            (max (lcs_of_three_helper X Y Z n (- m 1) (- p 1)) (lcs_of_three_helper X Y Z (- n 1) m (- p 1)) (lcs_of_three_helper X Y Z (- n 1) (- m 1) p) (lcs_of_three_helper X Y Z (- n 1) m p) (lcs_of_three_helper X Y Z n (- m 1) p) (lcs_of_three_helper X Y Z n m (- p 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_two X Y) (lcs_of_two X Z) (lcs_of_two Y Z)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0)\n         (make-vector n 0)]\n        [(= n 0)\n         (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (if (char=? x y)\n               (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector 1))\n               (vector-append (vector (max (vector-ref (lcs_of_two_helper X Y (- m 1) n) 0)\n                                          (vector-ref (lcs_of_two_helper X Y m (- n 1)) 0)))\n                              (vector 0))))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0)\n       (make-vector n (make-vector o 0))]\n      [(= n 0)\n       (make-vector m (make-vector o 0))]\n      [(= o 0)\n       (make-vector m (make-vector n 0))]\n      [else\n       (let ([x (vector-ref X (- m 1))]\n             [y (vector-ref Y (- n 1))]\n             [z (vector-ref Z (- o 1))])\n         (if (and (char=? x y) (char=? y z))\n             (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector (vector 1 1 1)))\n             (vector-append (vector (vector (max (vector-ref (vector-ref (lcs_of_three_helper X Y Z (- m 1) n o) 0) 0)\n                                             (vector-ref (vector-ref (lcs_of_three_helper X Y Z m (- n 1)",
    "  (define (lcs-helper m n o)\n    (cond ((and (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= m 0) (= n 0)) (lcs-helper m n (- o 1)))\n          ((and (= m 0) (= o 0)) (lcs-helper m (- n 1) o))\n          ((and (= n 0) (= o 0)) (lcs-helper (- m 1) n o))\n          ((and (= m 0) (= (vector-ref X (- m 1)) (vector-ref Z (- o 1)))) (lcs-helper m (- n 1) (- o 1)))\n          ((and (= n 0) (= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))) (lcs-helper (- m 1) n (- o 1)))\n          ((and (= o 0) (= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))) (lcs-helper (- m 1) (- n 1) o))\n          ((and (= m 0) (= (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))) (lcs-helper m (- n 1) (- o 1)))\n          ((and (= n 0) (= (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))) (lcs-helper (- m 1) n (- o 1)))\n          ((and (= o 0) (= (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))) (lcs-helper (- m 1) (- n 1) o))\n          ((and (= m 0) (= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))) (lcs-helper m (- n 1) (- o 1)))\n          ((and (= n 0) (= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))) (lcs-helper (- m 1) n (- o 1)))\n          ((and (= o 0) (= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))) (lcs-helper (- m 1) (- n 1) o))\n          ((and (= m 0) (= (vector-ref X (- m 1)) (vector-ref Z",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let* ([row (lcs_of_two_helper X Y (- m 1) n)]\n                [col (lcs_of_two_helper X Y m (- n 1))]\n                [diag (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (vector-set! row m (if (char=? (string-ref X m) (string-ref Y n))\n                                 (+ (vector-ref diag (- m 1)) 1)\n                                 (max (vector-ref row (- m 1)) (vector-ref col (- n 1)))))\n           row)]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n o 0)]\n      [(= n 0) (make-vector m o 0)]\n      [(= o 0) (make-vector m n 0)]\n      [else\n       (let* ([row (lcs_of_three_helper X Y Z (- m 1) n o)]\n              [col (lcs_of_three_helper X Y Z m (- n 1) o)]\n              [diag (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)]\n              [diag2 (lcs_of_three_helper X Y Z m n (- o 1))])\n         (vector-set! row m (if (char=? (string-ref X m) (string-ref Y n) (string-ref Z o))\n                               (+ (vector-ref diag (- m 1)) 1)\n                               (max (vector-ref row (- m 1)) (vector-ref col (- n 1)) (vector-ref diag2 (- o 1",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length lcs1) (string-length lcs2)) lcs1 lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_left (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs_of_two_helper_right (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length lcs_of_two_helper_left) (string-length lcs_of_two_helper_right))\n               lcs_of_two_helper_left\n               lcs_of_two_helper_right))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j #\\space)]\n        [(= j (string-length Y)) (make-string i #\\space)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1)) (string (string-ref X i)))]\n        [else\n         (let ([lcs_of_two_helper_X_Y_i_j_minus_1 (lcs_of_two_helper X Y (- i 1) j)]\n               [lcs_of_two_helper_X_Y_i_minus_1_j (lcs_of_two_helper X Y i (- j 1))])\n           (if (&gt; (string-length lcs_of_two_helper_X_Y_i_j_minus_1) (string-length lcs_of_two_helper_X_Y_i_minus_1_j))\n               lcs_of_two_helper_X_Y_i_j_minus_1\n               lcs_of_two_helper_X_Y_i_minus_1_j)))]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (make-string (+ j k) #\\space)]\n      [(= j (string-length Y)) (make-string (+ i k) #\\space)]\n      [(= k (string-length Z)) (make-string (+ i j) #\\space)]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (lcs_of_three_hel",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(= i m) 0]\n        [(= j n) 0]\n        [(= k o) 0]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (add1 (lcs_of_three_helper (add1 i) (add1 j) (add1 k)))]\n        [else\n         (max (lcs_of_three_helper (add1 i) j k)\n              (max (lcs_of_three_helper i (add1 j) k)\n                   (lcs_of_three_helper i j (add1 k))))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([x-1 (substring X 0 (- m 1))]\n               [y-1 (substring Y 0 (- n 1))]\n               [x-1-y-1 (substring X 0 (- m 1))]\n               [y-1-x-1 (substring Y 0 (- n 1))])\n           (if (string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n               (vector-append (lcs_of_two_helper x-1 y-1 (- m 1) (- n 1)) (vector (string-ref X (- m 1))))\n               (vector-append (lcs_of_two_helper x-1-y-1 (- m 1) n) (lcs_of_two_helper y-1-x-1 m (- n 1)))))])\n      (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n    (vector->string (lcs_of_two_helper X Y (string-length X) (string-length Y))))\n  (lcs_of_two X Y))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (if (or (= i (string-length X)) (= j (string-length Y)))\n          \"\"\n          (let ([x (string-ref X i)]\n                [y (string-ref Y j)])\n            (if (= x y)\n                (string-append (string x) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))\n                (let ([l1 (lcs_of_two_helper X Y (+ i 1) j)]\n                      [l2 (lcs_of_two_helper X Y i (+ j 1))])\n                  (if (&gt; (string-length l1) (string-length l2))\n                      l1\n                      l2))))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y)))\n         (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([x (lcs_of_two_helper X Y (+ i 1) j)]\n               [y (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length x) (string-length y))\n               x\n               y))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z)))\n       (string)]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([x (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [y (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [z (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (cond\n           [(&gt; (string-length x) (string-length y))\n            (if (&gt; (string-length x) (string-length z))\n                x\n                z)]\n           [else\n            (if (&gt; (string-length y) (string-length z))\n                y\n                z)]))]))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond [(or (= i m) (= j n) (= k o)) 0]\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref Y j) (string-ref Z k)))\n             (+ 1 (lcs_of_three_helper (+ i 1) (+ j 1) (+ k 1)))]\n            [else (max (lcs_of_three_helper (+ i 1) j k)\n                       (lcs_of_three_helper i (+ j 1) k)\n                       (lcs_of_three_helper i j (+ k 1)))]))\n    (lcs_of_three_helper 0 0 0)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (let ([v (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (vector-set! v (- m 1) (+ 1 (vector-ref v (- m 1))))\n           v)]\n        [else\n         (let ([v1 (lcs_of_two_helper X Y (- m 1) n)]\n              [v2 (lcs_of_two_helper X Y m (- n 1))])\n           (if (> (vector-ref v1 (- m 1)) (vector-ref v2 (- m 1)))\n               v1\n               v2))]))\n    (lcs_of_two_helper (string->vector X) (string->vector Y) (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (let ([v (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (vector-set! v (- m 1) (+ 1 (vector-ref v (- m 1))))\n         v)]\n      [else\n       (let ([v1 (lcs_of_three_helper X Y Z (- m 1) n o)]\n            [v2 (lcs_of_three_helper X Y Z m (- n 1) o)]\n            [v3 (lcs_of_three_helper X Y Z m n (- o 1))])\n         (cond\n           [(&gt",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (letrec ([lcs-of-three-helper (lambda (i j k)\n                                    (cond\n                                      [(and (= i 0) (= j 0) (= k 0)) 0]\n                                      [(and (= i 0) (= j 0)) (lcs-of-three-helper i j (- k 1))]\n                                      [(and (= i 0) (= k 0)) (lcs-of-three-helper i (- j 1) k)]\n                                      [(and (= j 0) (= k 0)) (lcs-of-three-helper (- i 1) j k)]\n                                      [(and (= i 0) (= j 0) (= k 0)) 0]\n                                      [(and (= i 0) (= j 0)) (lcs-of-three-helper i j (- k 1))]\n                                      [(and (= i 0) (= k 0)) (lcs-of-three-helper i (- j 1) k)]\n                                      [(and (= j 0) (= k 0)) (lcs-of-three-helper (- i 1) j k)]\n                                      [(and (= i 0) (= j 0)) (lcs-of-three-helper i j (- k 1))]\n                                      [(and (= i 0) (= k 0)) (lcs-of-three-helper i (- j 1) k)]\n                                      [(and (= j 0) (= k 0)) (lcs-of-three-helper (- i 1) j k)]\n                                      [(and (= i 0) (= j 0)) (lcs-of-three-helper i j (- k 1))]\n                                      [(and (= i 0) (= k 0)) (lcs-of-three-helper i (- j 1) k)]\n                                      [(and (= j 0) (= k 0)) (lcs-of-three-helper (- i 1) j k)]\n                                      [(and (= i 0) (= j 0)) (lcs-of-three-helper i j (- k 1))]\n                                      [(and (= i 0) (= k 0)) (lcs-of-three-helper i",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([prev (lcs_of_two_helper (substring X 0 (- m 1)) (substring Y 0 (- n 1)) (- m 1) (- n 1))])\n           (vector-set! prev 0 (+ (vector-ref prev 0) (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1))) 1 0)))\n           (for ([i (in-range 1 n)])\n             (vector-set! prev i (max (vector-ref prev (- i 1)) (vector-ref prev i))))\n           (for ([i (in-range 1 m)])\n             (vector-set! prev 0 (max (vector-ref prev 0) (vector-ref prev (- i 1))))\n             (for ([j (in-range 1 n)])\n               (vector-set! prev j (max (vector-ref prev (- j 1)) (vector-ref prev j) (+ (vector-ref prev (- j 1)) (if (char=? (string-ref X (- i 1)) (string-ref Y (- j 1))) 1 0))))))\n           prev)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([prev (lcs_of_three_helper (substring X 0 (- m 1)) (substring Y 0 (- n 1)) (substring Z 0 (- o 1)) (- m 1) (- n 1) (- o 1))])\n         (vector-set! prev 0 (+ (vector-ref prev 0) (if (char=? (string-ref X (- m 1)) (string-ref Y",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (cond\n             [(= x y)\n              (let ([prev (lcs_of_two_helper X Y (- m 1) (- n 1))])\n                (vector-append prev (vector (+ 1 (vector-ref prev (- (vector-length prev) 1))))))]\n             [else\n              (let ([prev-x (lcs_of_two_helper X Y (- m 1) n)]\n                    [prev-y (lcs_of_two_helper X Y m (- n 1))])\n                (if (> (vector-ref prev-x (- (vector-length prev-x) 1))\n                      (vector-ref prev-y (- (vector-length prev-y) 1)))\n                    prev-x\n                    prev-y))]))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([x (vector-ref X (- m 1))]\n             [y (vector-ref Y (- n 1))]\n             [z (vector-ref Z (- o 1))])\n         (cond\n           [(and (= x y) (= y z))\n            (let ([prev (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n              (vector-append prev (vector (+ 1 (vector-ref prev (- (vector-length prev) 1))))))]\n           [else\n            (let ([prev-x (lcs_of_three_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((= m 0) 0)\n            ((= n 0) 0)\n            ((char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            ((> (lcs_of_two_helper X Y m (- n 1))\n                (lcs_of_two_helper X Y (- m 1) n))\n             (lcs_of_two_helper X Y m (- n 1)))\n            (else (lcs_of_two_helper X Y (- m 1) n))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((= m 0) 0)\n          ((= n 0) 0)\n          ((= o 0) 0)\n          ((char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          ((> (lcs_of_three_helper X Y Z m (- n 1) o)\n              (lcs_of_three_helper X Y Z (- m 1) n o))\n           (lcs_of_three_helper X Y Z m (- n 1) o))\n          ((> (lcs_of_three_helper X Y Z m n (- o 1))\n              (lcs_of_three_helper X Y Z (- m 1) n o))\n           (lcs_of_three_helper X Y Z m n (- o 1)))\n          (else (lcs_of_three_helper X Y Z (- m 1) n o))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs1) (string-length lcs2))\n               lcs1\n               lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (letrec ([lcs (lambda (i j k)\n                    (cond [(or (= i m) (= j n) (= k o)) 0]\n                          [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref Y j) (string-ref Z k)))\n                           (+ 1 (lcs (+ i 1) (+ j 1) (+ k 1)))]\n                          [else (max (lcs (+ i 1) j k) (lcs i (+ j 1) k) (lcs i j (+ k 1)))]))])\n      (lcs 0 0 0))))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond\n            [(equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n            [else\n             (max (lcs_of_two_helper X Y m (- n 1))\n                  (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond\n          [(and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1))) (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n          [else\n           (max (lcs_of_three_helper X Y Z m n (- o 1))\n                (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)))])))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_X_Y_i_1_j (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_X_Y_i_j_1) (string-length lcs_of_X_Y_i_1_j))\n               lcs_of_X_Y_i_j_1\n               lcs_of_X_Y_i_1_j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (let ([L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))])\n      (for ([i (in-range m)])\n        (for ([j (in-range n)])\n          (for ([k (in-range o)])\n            (cond\n              [(and (char=? (string-ref X i) (string-ref Y j))\n                    (char=? (string-ref X i) (string-ref Z k)))\n               (vector-set! L i j k (add1 (vector-ref (vector-ref L (sub1 i) j k) k)))]\n              [else\n               (vector-set! L i j k (max (vector-ref (vector-ref L i (sub1 j) k) k)\n                                         (vector-ref (vector-ref L i j (sub1 k)) k)\n                                         (vector-ref (vector-ref L (sub1 i) (sub1 j) k) k)\n                                         (vector-ref (vector-ref L (sub1 i) j (sub1 k)) k)\n                                         (vector-ref (vector-ref L i (sub1 j) (sub1 k)) k)))])))))\n    (vector-ref (vector-ref L (sub1 m) (sub1 n) (sub1 o)) (sub1 o))))\n",
    "  (define (lcs_of_two X Y)\n    (let ([m (string-length X)]\n          [n (string-length Y)])\n      (define (lcs_helper X Y m n)\n        (cond [(or (= m 0) (= n 0)) 0]\n              [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n               (+ 1 (lcs_helper X Y (- m 1) (- n 1)))]\n              [else (max (lcs_helper X Y m (- n 1))\n                         (lcs_helper X Y (- m 1) n))]))\n      (lcs_helper X Y m n)))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond [(or (= i (string-length X)) (= j (string-length Y))) 0]\n            [(char=? (string-ref X i) (string-ref Y j))\n             (+ (lcs_of_two_helper X Y (+ i 1) (+ j 1)) 1)]\n            [else (max (lcs_of_two_helper X Y i (+ j 1))\n                       (lcs_of_two_helper X Y (+ i 1) j))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) 0]\n          [(and (char=? (string-ref X i) (string-ref Y j))\n                (char=? (string-ref X i) (string-ref Z k)))\n           (+ (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)) 1)]\n          [else (max (lcs_of_three_helper X Y Z i j (+ k 1))\n                     (max (lcs_of_three_helper X Y Z i (+ j 1) k)\n                          (lcs_of_three_helper X Y Z (+ i 1) j k)))]))\n  (lcs_of_three_helper X Y Z 0 0 0))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X))\n         (make-string j #\\_)]\n        [(= j (string-length Y))\n         (make-string i #\\_)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1)) (string (string-ref X i)))]\n        [(> (lcs_of_two_helper X Y (- i 1) j) (lcs_of_two_helper X Y i (- j 1)))]\n        [else\n         (lcs_of_two_helper X Y i (- j 1))]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [else\n         (let ([x (string-ref X i)]\n               [y (string-ref Y j)])\n           (cond\n             [(char=? x y)\n              (string-append (make-string 1 x) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n             [else\n              (string-append (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j))]))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i))\n                        (lcs_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_rest_of_X (lcs_helper X Y (+ i 1) j)]\n               [lcs_of_rest_of_Y (lcs_helper X Y i (+ j 1))])\n           (if (> (string-length lcs_of_rest_of_X)\n                  (string-length lcs_of_rest_of_Y))\n               lcs_of_rest_of_X\n               lcs_of_rest_of_Y))]))\n    (lcs_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (string)]\n        [(= j (string-length Y)) (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs_2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs_1) (string-length lcs_2))\n               lcs_1\n               lcs_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (string)]\n      [(= j (string-length Y)) (string)]\n      [(= k (string-length Z)) (string)]\n      [(char=? (string-ref X i) (string-ref Y j))\n       (if (char=? (string-ref X i) (string-ref Z k))\n           (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))\n           (let ([lcs_1 (lcs_of_three_helper X Y Z (+ i 1) j k)]\n                 [lcs_2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n                 [lcs_3 (lcs_of_three_helper X Y Z i j (+ k 1))])\n             (if (&gt; (string-length lcs_1) (string-length lcs_2))\n                 (if (&gt; (string-length lcs_1) (string-length l",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_helper i j k)\n      (cond [(or (= i 0) (= j 0) (= k 0)) 0]\n            [(and (= (string-ref X (- m i)) (string-ref Y (- n j))) (= (string-ref X (- m i)) (string-ref Z (- o k))))\n             (+ 1 (lcs_helper (- i 1) (- j 1) (- k 1)))]\n            [else (max (lcs_helper (- i 1) j k)\n                       (lcs_helper i (- j 1) k)\n                       (lcs_helper i j (- k 1)))]))\n    (lcs_helper m n o)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(or (= m 0) (= n 0)) 0]\n        [(= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else (max (lcs_of_two_helper X Y m (- n 1))\n                   (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(or (= m 0) (= n 0) (= o 0)) 0]\n      [(and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else (max (lcs_of_three_helper X Y Z m n (- o 1))\n                 (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                      (lcs_of_three_helper X Y Z (- m 1) n o)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (max (lcs_of_three_helper X Y Z (- m 1) n o)\n                 (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i 0) (make-vector j 0)]\n        [(= j 0) (make-vector i 0)]\n        [else\n         (let ([prev-row (lcs_of_two_helper X Y (- i 1) j)]\n               [prev-col (lcs_of_two_helper X Y i (- j 1))])\n           (vector-set! prev-row (- i 1) (max (vector-ref prev-row (- i 1)) (vector-ref prev-col (- j 1))))\n           (if (string-ref X (- i 1)) = (string-ref Y (- j 1)))\n               (vector-set! prev-row (- i 1) (+ 1 (vector-ref prev-row (- i 1))))\n               prev-row))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i 0) (make-vector j 0)]\n      [(= j 0) (make-vector i 0)]\n      [(= k 0) (make-vector i 0)]\n      [else\n       (let ([prev-row (lcs_of_three_helper X Y Z (- i 1) j k)]\n             [prev-col (lcs_of_three_helper X Y Z i (- j 1) k)]\n             [prev-k (lcs_of_three_helper X Y Z i j (- k 1))])\n         (vector-set! prev-row (- i 1) (max (vector-ref prev-row (- i 1)) (vector-ref prev-col (- j 1)) (vector-ref prev-k (- k 1))))\n         (if (string-ref X (- i 1)) = (string-ref Y (- j 1)) = (string-ref Z (- k 1)))\n             (vector-set! prev-row (- i 1) (+ 1 (vector-ref prev-row (- i 1))))\n             prev-row))]))\n  (",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (let ([L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n          [result #f])\n      (for ([i (in-range m)])\n        (for ([j (in-range n)])\n          (for ([k (in-range o)])\n            (cond\n              [(char=? (string-ref X i) (string-ref Y j))\n               (cond\n                 [(char=? (string-ref X i) (string-ref Z k))\n                  (vector-set! L i j k (add1 (vector-ref (vector-ref L (sub1 i) j k) k)))]\n                 [else\n                  (vector-set! L i j k (max (vector-ref (vector-ref L i (sub1 j) k) k)\n                                            (vector-ref (vector-ref L i j (sub1 k)) k))])]\n              [else\n               (vector-set! L i j k (max (vector-ref (vector-ref L (sub1 i) j k) k)\n                                         (vector-ref (vector-ref L i (sub1 j) k) k)\n                                         (vector-ref (vector-ref L i j (sub1 k)) k))])]))\n      (let loop ([i (sub1 m)] [j (sub1 n)] [k (sub1 o)])\n        (cond\n          [(and (= i -1) (= j -1) (= k -1))\n           (reverse result)]\n          [(and (= i -1) (= j -1))\n           (loop i j (sub1 k))]\n          [(and (= i -1) (= k -1))\n           (loop i (sub1 j) k)]\n          [(and (= j -1) (= k -1))\n           (loop (sub1 i) j k)]\n          [(and (= i -1) (= j -1))\n           (loop i j (sub1 k))]\n          [(and (= i -1) (= k -1",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y)\n      (cond\n        [(empty? X) empty]\n        [(empty? Y) empty]\n        [(char=? (first X) (first Y))\n         (cons (first X) (lcs_of_two_helper (rest X) (rest Y)))]\n        [else\n         (let ([lcs_of_x (lcs_of_two_helper (rest X) Y)]\n               [lcs_of_y (lcs_of_two_helper X (rest Y))])\n           (if (&gt; (length lcs_of_x) (length lcs_of_y))\n               lcs_of_x\n               lcs_of_y))]))\n    (lcs_of_two_helper X Y))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n o)\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) o))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (string-append (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j)))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([s1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [s2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (> (string-length s1) (string-length s2)) s1 s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([s1 (lcs_of_three_helper X Y Z (+ i 1) j k)]\n             [s2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [s3 (lcs_of_three_helper X Y Z i j (+ k 1))])\n         (cond\n           [(> (string-length s1) (string-length s2))\n            (if (> (string-length s1) (string-length s3)) s1 s3)]\n           [(> (string-length s2) (string-length s3)) s2]\n           [else s3]))]))\n  (lcs_of_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([l1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [l2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length l1) (string-length l2)) l1 l2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (cond [(empty? X) empty]\n          [(empty? Y) empty]\n          [(equal? (first X) (first Y))\n           (cons (first X) (lcs_of_two (rest X) (rest Y)))]\n          [else\n           (if (&gt; (length (lcs_of_two X (rest Y)))\n                  (length (lcs_of_two (rest X) Y)))\n               (lcs_of_two X (rest Y))\n               (lcs_of_two (rest X) Y))]))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (zero? i) (zero? j)) 0]\n        [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n         (+ 1 (lcs_of_two_helper X Y (- i 1) (- j 1)))]\n        [else\n         (max (lcs_of_two_helper X Y i (- j 1))\n              (lcs_of_two_helper X Y (- i 1) j))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (zero? i) (zero? j) (zero? k)) 0]\n      [(and (char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n            (char=? (string-ref X (- i 1)) (string-ref Z (- k 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z i (- j 1) k)\n            (max (lcs_of_three_helper X Y Z (- i 1) j k)\n                 (lcs_of_three_helper X Y Z (- i 1) (- j 1) k)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond\n            [(equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n            [else\n             (max (lcs_of_two_helper X Y m (- n 1))\n                  (lcs_of_two_helper X Y (- m 1) n))])))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond\n          [(and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n          [else\n           (max (lcs_of_three_helper X Y Z m n (- o 1))\n                (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)))])))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs1) (string-length lcs2)) lcs1 lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n o)\n            (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n            (lcs_of_three_helper X Y Z m n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let* ([x (vector-ref X (- m 1))]\n                [y (vector-ref Y (- n 1))]\n                [lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1))]\n                [lcs_of_two_helper_result_m (vector-ref lcs_of_two_helper_result (- m 1))]\n                [lcs_of_two_helper_result_n (vector-ref lcs_of_two_helper_result (- n 1))]\n                [lcs_of_two_helper_result_m_n (vector-ref lcs_of_two_helper_result (- m 1) (- n 1))])\n           (cond\n             [(= x y)\n              (vector (vector-ref lcs_of_two_helper_result_m (- n 1))\n                      (vector-ref lcs_of_two_helper_result_n (- m 1))\n                      (+ lcs_of_two_helper_result_m_n 1))]\n             [else\n              (vector (max lcs_of_two_helper_result_m lcs_of_two_helper_result_n)\n                      (max lcs_of_two_helper_result_m lcs_of_two_helper_result_n)\n                      (max lcs_of_two_helper_result_m_n lcs_of_two_helper_result_m lcs_of_two_helper_result_n))])))])\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (let* ([lcs_of_two_result (lcs_of_two X Y)]\n         [lcs_of_two_result_m (vector-",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (if (= x y)\n               (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector x))\n               (if (> (vector-ref (lcs_of_two_helper X Y (- m 1) n) (- m 1))\n                      (vector-ref (lcs_of_two_helper X Y m (- n 1)) (- n 1)))\n                   (lcs_of_two_helper X Y (- m 1) n)\n                   (lcs_of_two_helper X Y m (- n 1))))))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([x (vector-ref X (- m 1))]\n             [y (vector-ref Y (- n 1))]\n             [z (vector-ref Z (- o 1))])\n         (if (and (= x y) (= y z))\n             (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector x))\n             (if (> (vector-ref (lcs_of_three_helper X Y Z (- m 1) n o) (- m 1))\n                    (vector-ref (lcs_of_three_helper X Y Z m (- n 1) o) (- n 1)))\n                 (if (> (vector-ref (lcs_of_three_helper X Y Z",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) 0]\n        [(= n 0) 0]\n        [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n         (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n        [else\n         (max (lcs_of_two_helper X Y m (- n 1))\n              (lcs_of_two_helper X Y (- m 1) n))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) 0]\n      [(= n 0) 0]\n      [(= o 0) 0]\n      [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z m (- n 1) o)\n            (lcs_of_three_helper X Y Z (- m 1) n o)\n            (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n            (lcs_of_three_helper X Y Z m n (- o 1))\n            (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n            (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond\n            [(equal? (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n             (add1 (lcs_of_two_helper X Y (sub1 m) (sub1 n)))]\n            [else\n             (max (lcs_of_two_helper X Y m (sub1 n))\n                  (lcs_of_two_helper X Y (sub1 m) n))])))\n    (lcs_of_two_helper (string->vector X) (string->vector Y) (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond\n          [(and (equal? (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n                (equal? (vector-ref X (sub1 m)) (vector-ref Z (sub1 o))))\n           (add1 (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) (sub1 o)))]\n          [else\n           (max (lcs_of_three_helper X Y Z m (sub1 n) (sub1 o))\n                (max (lcs_of_three_helper X Y Z (sub1 m) n (sub1 o))\n                     (lcs_of_three_helper X Y Z (sub1 m) (sub1 n) o)))])))\n  (lcs_of_three_helper (string->vector X) (string->vector Y) (string->vector Z) (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j #\\space)]\n        [(= j (string-length Y)) (make-string i #\\space)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (lcs_of_two_helper X Y (- i 1) (- j 1))\n                        (string (string-ref X i)))]\n        [(> (lcs_of_two_helper X Y (- i 1) j)\n            (lcs_of_two_helper X Y i (- j 1)))]\n        [else (lcs_of_two_helper X Y i (- j 1))]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (make-string (+ j k) #\\space)]\n      [(= j (string-length Y)) (make-string (+ i k) #\\space)]\n      [(= k (string-length Z)) (make-string (+ i j) #\\space)]\n      [(and (char=? (string-ref X i) (string-ref Y j))\n            (char=? (string-ref X i) (string-ref Z k)))\n       (string-append (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1))\n                      (string (string-ref X i)))]\n      [(> (lcs_of_three_helper X Y Z (- i 1) j k)\n          (lcs_of_three_helper X Y Z i (- j 1) k))]\n      [(> (lcs_of_three_helper X Y Z (- i 1) j k)\n          (lcs_of_three_helper X Y Z i j (- k 1)))]\n      [else (lcs_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (string-append (substring Y j) (substring Y (add1 j)))]\n        [(= j (string-length Y)) (string-append (substring X i) (substring X (add1 i)))]\n        [(char=? (string-ref X i) (string-ref Y j)) (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (add1 i) (add1 j)))]\n        [else (string-append (substring X i) (substring X (add1 i)) (substring Y j) (substring Y (add1 j)))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three X Y Z)\n                     (lcs_of_three Y Z X)\n                     (lcs_of_three Z X Y)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y)))\n         (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_helper X Y (+ i 1) j)]\n               [lcs2 (lcs_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs1) (string-length lcs2))\n               lcs1\n               lcs2))]))\n    (lcs_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (let ([m (string-length X)]\n          [n (string-length Y)])\n      (define (lcs_helper m n)\n        (cond\n          [(= m 0) (make-vector n 0)]\n          [(= n 0) (make-vector m 0)]\n          [else\n           (let ([prev (lcs_helper (- m 1) (- n 1))])\n             (vector-set! prev 0 (+ (vector-ref prev 0)\n                                    (if (char=? (string-ref X (- m 1))\n                                                (string-ref Y (- n 1)))\n                                        1\n                                        0)))])))]\n      (lcs_helper m n)))\n  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_helper m n o)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= o 0) (make-vector m 0)]\n        [else\n         (let ([prev (lcs_helper (- m 1) (- n 1) (- o 1))])\n           (vector-set! prev 0 (+ (vector-ref prev 0)\n                                  (if (and (char=? (string-ref X (- m 1))\n                                                   (string-ref Y (- n 1)))\n                                           (char=? (string-ref X (- m 1))\n                                                   (string-ref Z (- o 1))))\n                                      1\n                                      0)))]))]\n    (lcs_helper m n o)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond ((string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                 (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n                (else (max (lcs_of_two_helper X Y m (- n 1))\n                           (lcs_of_two_helper X Y (- m 1) n))))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (cond ((and (string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                    (string=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n               (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n              (else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                         (lcs_of_three_helper X Y Z (- m 1) n o)\n                         (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                         (lcs_of_three_helper X Y Z m n (- o 1))\n                         (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                         (lcs_of_three_helper X Y Z (- m 1) n (- o 1)))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (if (or (= i (string-length X)) (= j (string-length Y)))\n          \"\"\n          (let ((a (substring X i (+ i 1)))\n                (b (substring Y j (+ j 1))))\n            (if (string=? a b)\n                (string-append a (lcs_of_two_helper X Y (+ i 1) (+ j 1)))\n                (let ((c (lcs_of_two_helper X Y i (+ j 1)))\n                      (d (lcs_of_two_helper X Y (+ i 1) j)))\n                  (if (> (string-length c) (string-length d))\n                      c\n                      d))))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs1) (string-length lcs2))\n               lcs1\n               lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (if (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))\n              (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (if (and (equal? (string-ref X (- m 1)) (string-ref Y (- n 1))) (equal? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n            (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))\n            (max (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)) (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (string-append (substring Y j) (substring Z j))]\n        [(= j (string-length Y)) (string-append (substring X i) (substring Z i))]\n        [(= (string-ref X i) (string-ref Y j)) (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [(> (lcs_of_two_helper X Y (+ i 1) j) (lcs_of_two_helper X Y i (+ j 1)))]\n        [else (lcs_of_two_helper X Y i (+ j 1))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two X (lcs_of_two Y Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string j)]\n        [(= j (string-length Y)) (make-string i)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string i)\n                        (string-append (make-string 1 (string-ref X i))\n                                       (lcs_of_two_helper X Y (+ i 1) (+ j 1))))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y (+ i 1) j)]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y i (+ j 1))])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three X Y Z)\n                     (lcs_of_three Y Z X)\n                     (lcs_of_three Z X Y)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (letrec ([lcs_of_two (lambda (X Y m n)\n                           (let ([L (make-vector (add1 m) (make-vector (add1 n) 0))])\n                             (for ([i (in-range m)])\n                               (for ([j (in-range n)])\n                                 (cond\n                                   [(char=? (string-ref X i) (string-ref Y j))\n                                    (vector-set! (vector-ref L i) j\n                                                 (add1 (vector-ref (vector-ref L (sub1 i)) (sub1 j))))]\n                                   [else\n                                    (vector-set! (vector-ref L i) j\n                                                 (max (vector-ref (vector-ref L i) (sub1 j))\n                                                      (vector-ref (vector-ref L (sub1 i)) j)))]))\n                             (vector-ref (vector-ref L (sub1 m)) (sub1 n)))]\n                          [lcs_of_three (lambda (X Y Z m n o)\n                                          (let ([L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0))])])\n                                            (for ([i (in-range m)])\n                                              (for ([j (in-range n)])\n                                                (for ([k (in-range o)])\n                                                  (cond\n                                                    [(and (char=? (string-ref X i) (string-ref Y j))\n                                                          (char=? (string-ref X i) (string-ref Z k)))\n                                                     (vector-set! (vector-ref (vector-ref L i) j) k\n                                                                  (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))]\n                                                    [else\n                                                     (vector-set! (vector-ref (vector-ref L i) j) k",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond [(= i (string-length X)) (substring Y j)]\n            [(= j (string-length Y)) (substring X i)]\n            [(char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n            [else\n             (let ([sub1 (lcs_of_two_helper X Y (+ i 1) j)]\n                   [sub2 (lcs_of_two_helper X Y i (+ j 1))])\n               (if (&gt; (string-length sub1) (string-length sub2))\n                   sub1\n                   sub2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper m n)\n      (if (or (= m 0) (= n 0))\n          '()\n          (if (equal? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (cons (string-ref X (- m 1)) (lcs_of_two_helper (- m 1) (- n 1)))\n              (if (&gt; (lcs_of_two_helper (- m 1) n) (lcs_of_two_helper m (- n 1)))\n                  (lcs_of_two_helper (- m 1) n)\n                  (lcs_of_two_helper m (- n 1))))))\n    (lcs_of_two_helper (string-length X) (string-length Y)))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i 0) (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref (vector-ref",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (define lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1)))\n         (vector-set! lcs_of_two_helper_result m\n                      (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                          (+ (vector-ref lcs_of_two_helper_result (- m 1)) 1)\n                          (max (vector-ref lcs_of_two_helper_result (- m 1))\n                               (vector-ref lcs_of_two_helper_result m))))\n         lcs_of_two_helper_result]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n o 0)]\n      [(= n 0) (make-vector m o 0)]\n      [(= o 0) (make-vector m n 0)]\n      [else\n       (define lcs_of_three_helper_result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))\n       (vector-set! lcs_of_three_helper_result m n o\n                    (if (and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                             (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n                        (+ (vector-ref lcs_of_three_helper_result (- m 1) (- n 1) (- o 1)) 1)\n                        (max (vector-ref lcs_of_three_helper_result (- m 1) n o)\n                             (vector-ref",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([prev (lcs_of_two_helper (substring X 0 (- m 1)) (substring Y 0 (- n 1)) (- m 1) (- n 1))])\n           (vector-set! prev m (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                                   (+ 1 (vector-ref prev (- m 1)))\n                                   (max (vector-ref prev (- m 1)) (vector-ref prev m))))\n           prev)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([prev (lcs_of_three_helper (substring X 0 (- m 1)) (substring Y 0 (- n 1)) (substring Z 0 (- o 1)) (- m 1) (- n 1) (- o 1))])\n         (vector-set! prev m (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)) (string-ref Z (- o 1)))\n                                 (+ 1 (vector-ref prev (- m 1)))\n                                 (max (vector-ref prev (- m 1)) (vector-ref prev m))))\n         prev)]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs_of_two_helper_v (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (vector-set! lcs_of_two_helper_v m (if (char=? (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n                                                  (+ 1 (vector-ref lcs_of_two_helper_v (- m 1)))\n                                                  (max (vector-ref lcs_of_two_helper_v (- m 1)) (vector-ref lcs_of_two_helper_v m))))\n           lcs_of_two_helper_v)]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([lcs_of_three_helper_v (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (vector-set! lcs_of_three_helper_v m (if (and (char=? (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n                                                      (char=? (vector-ref X (- m 1)) (vector-ref Z (- o 1))))\n                                                 (+ 1 (vector-ref lcs_of_three_helper_v (- m 1)))\n                                                 (max (vector-ref lcs_of_three_helper_v (- m 1)) (vector-ref lcs_of_three_helper_v m))))\n         lcs",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            ((&gt; (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)) (lcs_of_two_helper X Y m (- n 1)))\n            (else (lcs_of_two_helper X Y (- m 1) n))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1))) (= (string-ref X (- m 1)) (string-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          ((&gt; (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)) (lcs_of_three_helper X Y Z m (- n 1) o))\n          ((&gt; (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) o)) (lcs_of_three_helper X Y Z m n (- o 1)))\n          ((&gt; (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z m n (- o 1))) (lcs_of_three_helper X Y Z (- m 1) n o))\n          (else (lcs_",
    "  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper i j k)\n      (cond\n        [(or (= i 0) (= j 0) (= k 0)) 0]\n        [(and (= (string-ref X (- m i)) (string-ref Y (- n j))) (= (string-ref X (- m i)) (string-ref Z (- o k))))\n         (+ 1 (lcs_of_three_helper (- i 1) (- j 1) (- k 1)))]\n        [(or (= (string-ref X (- m i)) (string-ref Y (- n j))) (= (string-ref X (- m i)) (string-ref Z (- o k))))\n         (max (lcs_of_three_helper (- i 1) j k) (lcs_of_three_helper i (- j 1) k) (lcs_of_three_helper i j (- k 1)))]\n        [else (max (lcs_of_three_helper (- i 1) j k) (lcs_of_three_helper i (- j 1) k) (lcs_of_three_helper i j (- k 1)))])\n      )\n    (lcs_of_three_helper m n o)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let* ([row (lcs_of_two_helper X Y (- m 1) n)]\n                [col (lcs_of_two_helper X Y m (- n 1))]\n                [diag (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (vector-set! row m (if (char=? (string-ref X m) (string-ref Y n))\n                                 (+ (vector-ref diag (- m 1)) 1)\n                                 (max (vector-ref row (- m 1)) (vector-ref col (- n 1)))))\n           row)]))\n    (lcs_of_two_helper X Y (- (string-length X) 1) (- (string-length Y) 1)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n o 0)]\n      [(= n 0) (make-vector m o 0)]\n      [(= o 0) (make-vector m n 0)]\n      [else\n       (let* ([row (lcs_of_three_helper X Y Z (- m 1) n o)]\n              [col (lcs_of_three_helper X Y Z m (- n 1) o)]\n              [diag (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)]\n              [diag2 (lcs_of_three_helper X Y Z m n (- o 1))])\n         (vector-set! row m (if (char=? (string-ref X m) (string-ref Y n) (string-ref Z o))\n                               (+ (vector-ref diag (- m 1)) 1)\n                               (max (vector-ref row (- m 1)) (vector-ref col (- n 1)) (vector-ref diag2 (- o 1",
    "  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [o (string-length Z)]\n         [L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n         [i (sub1 m)]\n         [j (sub1 n)]\n         [k (sub1 o)])\n    (for ([i (in-range m)])\n      (for ([j (in-range n)])\n        (for ([k (in-range o)])\n          (cond\n            [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))))]\n            [(or (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-ref (vector-ref L (sub1 i)) (sub1 j))))]\n            [(or (char=? (string-ref X i) (string-ref Z k)) (char=? (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-ref (vector-ref L i) (sub1 j))))]\n            [(or (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref X i) (string-ref Z k)))\n             (vector-set! L i (vector-ref (vector-ref L (sub1 i)) j))]\n            [else\n             (vector-set! L i (vector-set! (vector-ref L i) j (max (vector-ref (",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                     (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                     (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                     (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (cond\n      [(or (null? X) (null? Y)) empty]\n      [(equal? (first X) (first Y))\n       (cons (first X) (lcs_of_two (rest X) (rest Y)))]\n      [else\n       (let ([lcs_of_rest_of_X_and_Y (lcs_of_two (rest X) Y)])\n         (let ([lcs_of_rest_of_Y_and_X (lcs_of_two X (rest Y))])\n           (if (&gt; (length lcs_of_rest_of_X_and_Y) (length lcs_of_rest_of_Y_and_X))\n               lcs_of_rest_of_X_and_Y\n               lcs_of_rest_of_Y_and_X)))]))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_X_Y_i_j_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_X_Y_i_j_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_X_Y_i_j_1) (string-length lcs_of_two_helper_X_Y_i_j_2))\n               lcs_of_two_helper_X_Y_i_j_1\n               lcs_of_two_helper_X_Y_i_j_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(= i (string-length X)) (make-string 0)]\n      [(= j (string-length Y)) (make-string 0)]\n      [(= k (string-length Z)) (make-string 0)]\n      [(char=? (string-ref X i) (string-ref Y j))\n       (if (char=? (string-ref X i) (string-ref Z k))\n           (string-append (make-string 1 (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))\n           (let ([lcs_of_three_helper_X_",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n             (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1))\n                       (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                (= (string-ref X (- m 1)) (string-ref Z (- o 1))))\n           (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1))\n                     (lcs_of_three_helper X Y Z m (- n 1) o)\n                     (lcs_of_three_helper X Y Z (- m 1) n o)\n                     (lcs_of_three X Y Z)\n                     (lcs_of_three X Z Y)\n                     (lcs_of_three Y X Z)\n                     (lcs_of_three Y Z X)\n                     (lcs_of_three Z X Y)\n                     (lcs_of_three Z Y X)))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0)\n         (make-vector n 0)]\n        [(= n 0)\n         (make-vector m 0)]\n        [else\n         (let ([x (vector-ref X (- m 1))]\n               [y (vector-ref Y (- n 1))])\n           (cond\n             [(char=? x y)\n              (let ([lcs (lcs_of_two_helper X Y (- m 1) (- n 1))])\n                (vector-set! lcs (- m 1) (+ 1 (vector-ref lcs (- m 1))))\n                lcs)]\n             [else\n              (let ([lcs1 (lcs_of_two_helper X Y (- m 1) n)]\n                    [lcs2 (lcs_of_two_helper X Y m (- n 1))])\n                (if (> (vector-ref lcs1 (- m 1)) (vector-ref lcs2 (- m 1)))\n                    lcs1\n                    lcs2))]))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (let ([lcs1 (lcs_of_two X Y)]\n        [lcs2 (lcs_of_two X Z)])\n    (let loop ([i 0])\n      (if (= i (vector-length lcs1))\n          (vector-ref lcs1 (- i 1))\n          (let ([v1 (vector-ref lcs1 i)]\n                [v2 (vector-ref lcs2 i)])\n            (vector-set! lcs1 i (min v1 v2))\n            (loop (+ i 1)))))))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (vector-append\n          (lcs_of_two_helper X Y (- m 1) (- n 1))\n          (vector (vector-ref X (- m 1))))]\n        [else\n         (let ([lcs_of_two_helper_m_minus_1_n (lcs_of_two_helper X Y (- m 1) n)]\n               [lcs_of_two_helper_m_n_minus_1 (lcs_of_two_helper X Y m (- n 1))])\n           (if (> (vector-length lcs_of_two_helper_m_minus_1_n) (vector-length lcs_of_two_helper_m_n_minus_1))\n               lcs_of_two_helper_m_minus_1_n\n               lcs_of_two_helper_m_n_minus_1))]))\n    (lcs_of_two_helper (string->vector X) (string->vector Y) (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (vector-append\n        (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))\n        (vector (vector-ref X (- m 1))))]\n      [else\n       (let ([lcs_of_three_helper_m_minus_1_n_o (l",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (if (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))\n              (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (if (or (= m 0) (= n 0) (= o 0))\n        0\n        (if (and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1))) (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n            (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))\n            (max (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o) (lcs_of_three_helper X Y Z m n (- o 1))))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (cond\n      [(empty? X) empty]\n      [(empty? Y) empty]\n      [(char=? (first X) (first Y))\n       (cons (first X) (lcs_of_two (rest X) (rest Y)))]\n      [else\n       (let ([lcs_of_rest_of_X_and_Y (lcs_of_two (rest X) Y)])\n         (let ([lcs_of_X_and_rest_of_Y (lcs_of_two X (rest Y))])\n           (if (&gt; (length lcs_of_rest_of_X_and_Y) (length lcs_of_X_and_rest_of_Y))\n               lcs_of_rest_of_X_and_Y\n               lcs_of_X_and_rest_of_Y)))]))\n  (lcs_of_two (lcs_of_two X Y) Z))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (> (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n"
  ]
}