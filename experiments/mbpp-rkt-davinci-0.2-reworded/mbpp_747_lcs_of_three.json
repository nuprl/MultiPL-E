{
  "name": "mbpp_747_lcs_of_three",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n(define (lcs_of_three X Y Z)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate lcs_of_three))\n    (check-equal? (candidate \"AGGT12\" \"12TXAYB\" \"12XBA\") 2)\n    (check-equal? (candidate \"Reels\" \"Reelsfor\" \"ReelsforReels\") 5)\n    (check-equal? (candidate \"abcd1e2\" \"bc12ea\" \"bd1ea\") 3)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (cond ((or (= n 0) (= m 0)) 0)\n            ((= (string-ref X (- n 1)) (string-ref Y (- m 1))) (+ 1 (lcs_of_two_helper X Y (- n 1) (- m 1))))\n            ((&gt; (lcs_of_two_helper X Y n (- m 1)) (lcs_of_two_helper X Y (- n 1) m)) (lcs_of_two_helper X Y n (- m 1)))\n            (else (lcs_of_two_helper X Y (- n 1) m))))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (cond ((or (= n 0) (= m 0) (= p 0)) 0)\n          ((and (= (string-ref X (- n 1)) (string-ref Y (- m 1))) (= (string-ref X (- n 1)) (string-ref Z (- p 1)))) (+ 1 (lcs_of_three_helper X Y Z (- n 1) (- m 1) (- p 1))))\n          ((&gt; (lcs_of_three_helper X Y Z n (- m 1) p) (lcs_of_three_helper X Y Z (- n 1) m p)) (lcs_of_three_helper X Y Z n (- m 1) p))\n          ((&gt; (lcs_of_three_helper X Y Z n m (- p 1)) (lcs_of_three_helper X Y Z (- n 1) m p)) (lcs_of_three_helper X Y Z n m (- p 1)))\n          (else (lcs_of_three_helper X Y Z (- n 1) m p))))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [o (string-length Z)]\n         [L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n         [i (sub1 m)]\n         [j (sub1 n)]\n         [k (sub1 o)])\n    (for ([i (in-range m)])\n      (for ([j (in-range n)])\n        (for ([k (in-range o)])\n          (cond\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))))]\n            [(or (= (string-ref X i) (string-ref Y j)) (= (string-ref X i) (string-ref Z k)) (= (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (vector-ref (vector-ref (vector-ref L i) j) (sub1 k)))))))]\n            [else\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (vector-ref (vector-ref",
    "  (define (lcs_of_two X Y)\n    (cond\n      [(empty? X) empty]\n      [(empty? Y) empty]\n      [(char=? (first X) (first Y))\n       (cons (first X) (lcs_of_two (rest X) (rest Y)))]\n      [else\n       (cond\n         [(&gt; (length (lcs_of_two X (rest Y)))\n             (length (lcs_of_two (rest X) Y)))\n          (lcs_of_two X (rest Y))]\n         [else\n          (lcs_of_two (rest X) Y)])]))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (zero? i) (zero? j)) 0]\n        [(char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n         (+ 1 (lcs_of_two_helper X Y (- i 1) (- j 1)))]\n        [else\n         (max (lcs_of_two_helper X Y i (- j 1))\n              (lcs_of_two_helper X Y (- i 1) j))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (zero? i) (zero? j) (zero? k)) 0]\n      [(and (char=? (string-ref X (- i 1)) (string-ref Y (- j 1)))\n            (char=? (string-ref X (- i 1)) (string-ref Z (- k 1))))\n       (+ 1 (lcs_of_three_helper X Y Z (- i 1) (- j 1) (- k 1)))]\n      [else\n       (max (lcs_of_three_helper X Y Z i j (- k 1))\n            (max (lcs_of_three_helper X Y Z i (- j 1) k)\n                 (lcs_of_three_helper X Y Z (- i 1) j k)))]))\n  (lcs_of_three_helper X Y Z (string-length X) (string-length Y) (string-length Z)))\n",
    "  (let* ([m (string-length X)]\n         [n (string-length Y)]\n         [o (string-length Z)]\n         [L (make-vector (add1 m) (make-vector (add1 n) (make-vector (add1 o) 0)))]\n         [i (sub1 m)]\n         [j (sub1 n)]\n         [k (sub1 o)])\n    (for ([i (in-range m)])\n      (for ([j (in-range n)])\n        (for ([k (in-range o)])\n          (cond\n            [(and (= (string-ref X i) (string-ref Y j)) (= (string-ref Y j) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) (sub1 k))))))]\n            [(or (= (string-ref X i) (string-ref Y j)) (= (string-ref Y j) (string-ref Z k)) (= (string-ref X i) (string-ref Z k)))\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (add1 (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (vector-ref (vector-ref (vector-ref L (sub1 i)) (sub1 j)) k))))))]\n            [else\n             (vector-set! L i (vector-set! (vector-ref L i) j (vector-set! (vector-ref (vector-ref L i) j) k (max (max (vector-ref (vector-ref (vector-ref L i) (sub1 j)) k) (max (vector-ref (vector-ref (vector-ref L (sub1 i)) j) k) (vector-",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (define (lcs_of_three_helper X Y Z i j k)\n    (cond\n      [(or (= i (string-length X)) (= j (string-length Y)) (= k (string-length Z))) \"\" ]\n      [(and (char=? (string-ref X i) (string-ref Y j)) (char=? (string-ref Y j) (string-ref Z k)))\n       (string-append (string (string-ref X i)) (lcs_of_three_helper X Y Z (+ i 1) (+ j 1) (+ k 1)))]\n      [else\n       (let ([lcs_of_three_helper_1 (lcs_of_three_helper X Y Z i j (+ k 1))]\n             [lcs_of_three_helper_2 (lcs_of_three_helper X Y Z i (+ j 1) k)]\n             [lcs_of_three_helper_3 (lcs_of_three_helper X Y Z (+ i 1)",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (if (or (= m 0) (= n 0))\n          0\n          (cond [(equal? (vector-ref X (sub1 m)) (vector-ref Y (sub1 n)))\n                 (+ 1 (lcs_of_two_helper X Y (sub1 m) (sub1 n)))]\n                [else\n                 (max (lcs_of_two_helper X Y m (sub1 n))\n                      (lcs_of_two_helper X Y (sub1 m) n))])))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) (vector-length X) (vector-length Y)))\n  (lcs_of_two X Y))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (define lcs_of_two_helper_result\n           (lcs_of_two_helper X Y (- m 1) (- n 1)))\n         (define lcs_of_two_helper_result_vector\n           (vector-ref lcs_of_two_helper_result (- m 1)))\n         (define lcs_of_two_helper_result_vector_value\n           (vector-ref lcs_of_two_helper_result_vector (- n 1)))\n         (cond\n           [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n            (vector-set! lcs_of_two_helper_result_vector (- n 1) (+ lcs_of_two_helper_result_vector_value 1))\n            lcs_of_two_helper_result]\n           [else\n            (define lcs_of_two_helper_result_vector_value_1\n              (vector-ref lcs_of_two_helper_result_vector (- n 2)))\n            (define lcs_of_two_helper_result_vector_value_2\n              (vector-ref lcs_of_two_helper_result (- m 2) (- n 1)))\n            (cond\n              [(> lcs_of_two_helper_result_vector_value_1 lcs_of_two_helper_result_vector_value_2)\n               (vector-set! lcs_of_two_helper_result_vector (- n 1) lcs_of_two_helper_result_vector_value_1)\n               lcs_of_two_helper_result]\n              [else\n               (vector-set! lcs_of_two_helper_result_vector (- n 1) lcs_of_two_helper_result_vector_value_2)\n               l",
    "  (define (lcs_of_two X Y)\n    (let ([m (string-length X)]\n          [n (string-length Y)])\n      (define (lcs_of_two_helper X Y m n)\n        (cond\n          [(or (= m 0) (= n 0)) 0]\n          [(char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n           (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1)))]\n          [else (max (lcs_of_two_helper X Y m (- n 1))\n                     (lcs_of_two_helper X Y (- m 1) n))]))\n      (lcs_of_two_helper X Y m n)))\n  (let ([m (string-length X)]\n        [n (string-length Y)]\n        [o (string-length Z)])\n    (define (lcs_of_three_helper X Y Z m n o)\n      (cond\n        [(or (= m 0) (= n 0) (= o 0)) 0]\n        [(and (char=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n              (char=? (string-ref X (- m 1)) (string-ref Z (- o 1))))\n         (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)))]\n        [else (max (lcs_of_three_helper X Y Z m (- n 1) o)\n                   (lcs_of_three_helper X Y Z (- m 1) n o)\n                   (lcs_of_three_helper X Y Z (- m 1) (- n 1) o)\n                   (lcs_of_three_helper X Y Z (- m 1) n (- o 1))\n                   (lcs_of_three_helper X Y Z m (- n 1) (- o 1))\n                   (lcs_of_three_helper X Y Z m n (- o 1)))]))\n    (lcs_of_three_helper X Y Z m n o)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y n m)\n      (cond\n        [(= n 0) (make-vector m 0)]\n        [(= m 0) (make-vector n 0)]\n        [else\n         (let ([prev-row (lcs_of_two_helper (substring X 0 (- n 1)) Y (- n 1) m)]\n               [prev-col (lcs_of_two_helper X (substring Y 0 (- m 1)) n (- m 1))])\n           (vector-set! prev-row (- m 1)\n                        (if (char=? (string-ref X (- n 1)) (string-ref Y (- m 1)))\n                            (+ 1 (vector-ref prev-col (- m 1)))\n                            (max (vector-ref prev-row (- m 1)) (vector-ref prev-col (- m 1)))))\n           prev-row)]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z n m p)\n    (cond\n      [(= n 0) (make-vector m (make-vector p 0))]\n      [(= m 0) (make-vector n (make-vector p 0))]\n      [(= p 0) (make-vector n (make-vector m 0))]\n      [else\n       (let ([prev-row (lcs_of_three_helper (substring X 0 (- n 1)) Y Z (- n 1) m p)]\n             [prev-col (lcs_of_three_helper X (substring Y 0 (- m 1)) Z n (- m 1) p)]\n             [prev-dep (lcs_of_three_helper X Y (substring Z 0 (- p 1)) n m (- p 1))])\n         (vector-set! prev-row (- m 1)\n                      (vector-set! (vector-ref prev-row (- m 1)) (- p 1)\n                                   (if (char=? (string-ref X (- n 1)) (string-ref Y (- m 1)) (string-ref",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs-of-two-helper-result (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (cond\n             [(char=? (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n              (vector-set! lcs-of-two-helper-result (- m 1) (+ 1 (vector-ref lcs-of-two-helper-result (- m 1))))]\n             [else\n              (vector-set! lcs-of-two-helper-result (- m 1) (max (vector-ref lcs-of-two-helper-result (- m 1)) (vector-ref lcs-of-two-helper-result (- m 2))))])\n           lcs-of-two-helper-result)])\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [else\n       (let ([lcs-of-three-helper-result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (cond\n           [(and (char=? (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (char=? (vector-ref X (- m 1)) (vector-ref Z (- o 1))))\n            (vector-set! lcs-of-three-helper-result (- m 1) (+ 1 (vector-ref lcs-of-three-helper-result (- m 1))))]\n           [else\n            (vector-set! lcs-of-three",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([lcs_of_two_helper_result (lcs_of_two_helper X Y (- m 1) (- n 1))])\n           (let ([lcs_of_two_helper_result_m (vector-ref lcs_of_two_helper_result (- m 1))])\n             (let ([lcs_of_two_helper_result_n (vector-ref lcs_of_two_helper_result (- n 1))])\n               (let ([lcs_of_two_helper_result_m_n (vector-ref lcs_of_two_helper_result (- m 1) (- n 1))])\n                 (if (string=? (string-ref X (- m 1)) (string-ref Y (- n 1)))\n                     (vector lcs_of_two_helper_result_m lcs_of_two_helper_result_n (+ lcs_of_two_helper_result_m_n 1))\n                     (vector (max lcs_of_two_helper_result_m lcs_of_two_helper_result_n) lcs_of_two_helper_result_n lcs_of_two_helper_result_m_n)))))))]))\n    (lcs_of_two_helper X Y (string-length X) (string-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n o 0)]\n      [(= n 0) (make-vector m o 0)]\n      [(= o 0) (make-vector m n 0)]\n      [else\n       (let ([lcs_of_three_helper_result (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))])\n         (let ([",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (make-string 0)]\n        [(= j (string-length Y)) (make-string 0)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (make-string 1 (string-ref X i))\n                        (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs_of_two_helper_1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs_of_two_helper_2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs_of_two_helper_1) (string-length lcs_of_two_helper_2))\n               lcs_of_two_helper_1\n               lcs_of_two_helper_2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(or (= i (string-length X)) (= j (string-length Y))) \"\" ]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([lcs1 (lcs_of_two_helper X Y i (+ j 1))]\n               [lcs2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length lcs1) (string-length lcs2))\n               lcs1\n               lcs2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper X Y (- m 1) n)])\n           (vector-set! row m 0)\n           (for ([j (in-range n)])\n             (cond\n               [(char=? (string-ref X (- m 1)) (string-ref Y j))\n                (vector-set! row m (+ (vector-ref row (- m 1)) 1))]\n               [else\n                (vector-set! row m (max (vector-ref row (- m 1)) (vector-ref row m)))]))\n           row)]))\n    (define (lcs_of_two_helper_2 X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper_2 X Y (- m 1) n)])\n           (vector-set! row m 0)\n           (for ([j (in-range n)])\n             (cond\n               [(char=? (string-ref X (- m 1)) (string-ref Y j))\n                (vector-set! row m (+ (vector-ref row (- m 1)) 1))]\n               [else\n                (vector-set! row m (max (vector-ref row (- m 1)) (vector-ref row m)))]))\n           row)]))\n    (define (lcs_of_two_helper_3 X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [else\n         (let ([row (lcs_of_two_helper_3 X Y (- m 1) n)])\n           (vector-set! row m 0)\n           (for ([j (in-range n)])\n             (cond\n              ",
    "  (cond\n    [(empty? X) (lcs Y Z)]\n    [(empty? Y) (lcs X Z)]\n    [(empty? Z) (lcs X Y)]\n    [else\n     (let* ([x (first X)]\n            [y (first Y)]\n            [z (first Z)])\n       (cond\n         [(char=? x y)\n          (cons x (lcs_of_three (rest X) (rest Y) (rest Z)))]\n         [(char=? x z)\n          (cons x (lcs_of_three (rest X) Y (rest Z)))]\n         [(char=? y z)\n          (cons y (lcs_of_three X (rest Y) (rest Z)))]\n         [else\n          (let* ([lcs_xy (lcs X Y)]\n                 [lcs_xz (lcs X Z)]\n                 [lcs_yz (lcs Y Z)])\n            (cond\n              [(> (length lcs_xy) (length lcs_xz))\n               (if (> (length lcs_xy) (length lcs_yz))\n                   lcs_xy\n                   lcs_yz)]\n              [(> (length lcs_xz) (length lcs_yz))\n               lcs_xz]\n              [else\n               lcs_yz]))]))]))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond\n        [(= m 0) (make-vector n 0)]\n        [(= n 0) (make-vector m 0)]\n        [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)))\n         (vector-append (lcs_of_two_helper X Y (- m 1) (- n 1)) (vector (vector-ref X (- m 1))))]\n        [else\n         (let ([a (lcs_of_two_helper X Y (- m 1) n)]\n               [b (lcs_of_two_helper X Y m (- n 1))])\n           (if (> (vector-length a) (vector-length b)) a b))]))\n    (lcs_of_two_helper X Y (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond\n      [(= m 0) (make-vector n 0)]\n      [(= n 0) (make-vector m 0)]\n      [(= o 0) (make-vector m 0)]\n      [(= (vector-ref X (- m 1)) (vector-ref Y (- n 1)) (vector-ref Z (- o 1)))\n       (vector-append (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1)) (vector (vector-ref X (- m 1))))]\n      [else\n       (let ([a (lcs_of_three_helper X Y Z (- m 1) n o)]\n             [b (lcs_of_three_helper X Y Z m (- n 1) o)]\n             [c (lcs_of_three_helper X Y Z m n (- o 1))])\n         (cond\n           [(> (vector-length a) (vector-length b))\n            (if (> (vector-length a) (vector-length c)) a c)]\n           [(> (vector-length b) (vector-length c)) b]\n           [else c]))]))\n  (",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y m n)\n      (cond ((or (= m 0) (= n 0)) 0)\n            ((= (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (+ 1 (lcs_of_two_helper X Y (- m 1) (- n 1))))\n            (else (max (lcs_of_two_helper X Y m (- n 1)) (lcs_of_two_helper X Y (- m 1) n)))))\n    (lcs_of_two_helper (vector->list X) (vector->list Y) (vector-length X) (vector-length Y)))\n  (define (lcs_of_three_helper X Y Z m n o)\n    (cond ((or (= m 0) (= n 0) (= o 0)) 0)\n          ((and (= (vector-ref X (- m 1)) (vector-ref Y (- n 1))) (= (vector-ref X (- m 1)) (vector-ref Z (- o 1)))) (+ 1 (lcs_of_three_helper X Y Z (- m 1) (- n 1) (- o 1))))\n          (else (max (lcs_of_three_helper X Y Z m n (- o 1)) (lcs_of_three_helper X Y Z m (- n 1) o) (lcs_of_three_helper X Y Z (- m 1) n o)))))\n  (lcs_of_three_helper (vector->list X) (vector->list Y) (vector->list Z) (vector-length X) (vector-length Y) (vector-length Z)))\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond\n        [(= i (string-length X)) (string)]\n        [(= j (string-length Y)) (string)]\n        [(char=? (string-ref X i) (string-ref Y j))\n         (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1)))]\n        [else\n         (let ([s1 (lcs_of_two_helper X Y i (+ j 1))]\n               [s2 (lcs_of_two_helper X Y (+ i 1) j)])\n           (if (&gt; (string-length s1) (string-length s2))\n               s1\n               s2))]))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n</code>\n",
    "  (define (lcs_of_two X Y)\n    (define (lcs_of_two_helper X Y i j)\n      (cond ((or (= i (string-length X)) (= j (string-length Y))) \"\")\n            ((char=? (string-ref X i) (string-ref Y j))\n             (string-append (string (string-ref X i)) (lcs_of_two_helper X Y (+ i 1) (+ j 1))))\n            (else (max (lcs_of_two_helper X Y i (+ j 1)) (lcs_of_two_helper X Y (+ i 1) j)))))\n    (lcs_of_two_helper X Y 0 0))\n  (lcs_of_two (lcs_of_two X Y) Z))\n"
  ]
}