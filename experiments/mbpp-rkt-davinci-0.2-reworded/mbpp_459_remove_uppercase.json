{
  "name": "mbpp_459_remove_uppercase",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove uppercase substrings from a given string.\n(define (remove_uppercase str1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_uppercase))\n    (check-equal? (candidate \"cAstyoUrFavoRitETVshoWs\") \"cstyoravoitshos\")\n    (check-equal? (candidate \"wAtchTheinTernEtrAdIo\") \"wtchheinerntrdo\")\n    (check-equal? (candidate \"VoicESeaRchAndreComMendaTionS\") \"oiceachndreomendaion\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (not (char-upper-case? x))) str1)))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (string-append (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-append\n   (filter (lambda (x) (not (char-upper-case? x))) str1)))\n",
    "  (define (remove_uppercase-helper str1 str2)\n    (if (string-empty? str1)\n        str2\n        (if (char-upper-case? (string-ref str1 0))\n            (remove_uppercase-helper (substring str1 1) str2)\n            (remove_uppercase-helper (substring str1 1) (string-append str2 (string (string-ref str1 0)))))))\n  (remove_uppercase-helper str1 \"\"))\n",
    "  (string-append (regexp-replace* #rx\"[A-Z]+\" str1 \"\")))\n",
    "  (let loop ([str str1] [result '()])\n    (if (empty? str)\n        (list->string (reverse result))\n        (if (char-upper-case? (car str))\n            (loop (cdr str) result)\n            (loop (cdr str) (cons (car str) result))))))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (string-join (filter (lambda (x) (not (char-upper-case? (string-ref x 0)))) (string-split str1 #\\space)) \" \"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n",
    "  (regexp-replace* #rx\"[A-Z]+\" str1 \"\"))\n"
  ]
}