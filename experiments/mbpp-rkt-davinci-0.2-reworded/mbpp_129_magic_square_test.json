{
  "name": "mbpp_129_magic_square_test",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to calculate whether the matrix is a magic square.\n(define (magic_square_test my_matrix)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate magic_square_test))\n    (check-equal? (candidate (list (list 7 12 1 14) (list 2 13 8 11) (list 16 3 10 5) (list 9 6 15 4))) #t)\n    (check-equal? (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 8))) #t)\n    (check-equal? (candidate (list (list 2 7 6) (list 9 5 1) (list 4 3 7))) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (magic_square_test_helper my_matrix row_sum)\n    (if (null? my_matrix)\n        (if (null? (cdr my_matrix))\n            #t\n            (if (equal? row_sum (apply + (car my_matrix)))\n                (magic_square_test_helper (cdr my_matrix) row_sum)\n                #f))\n        #f))\n  (magic_square_test_helper my_matrix (apply + (car my_matrix))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [sum (apply + (car my_matrix))]\n         [sum_row (lambda (row) (apply + row))]\n         [sum_col (lambda (col) (apply + (map (lambda (row) (list-ref row col)) my_matrix)))]\n         [sum_diag (lambda (diag) (apply + (map (lambda (row) (list-ref row (diag row))) my_matrix)))])\n    (and (= n m)\n         (= (sum_row (car my_matrix)) sum)\n         (= (sum_col 0) sum)\n         (= (sum_diag (lambda (x) x)) sum)\n         (= (sum_diag (lambda (x) (- n 1 x))) sum))))\n",
    "  (let ([n (length my_matrix)])\n    (and (= n (length (car my_matrix)))\n         (= (apply + (map (lambda (x) (apply + x)) my_matrix))\n            (* n (+ 1 (* n n)))))))\n",
    "  (define (magic_square_test_helper my_matrix)\n    (if (null? my_matrix)\n        (if (= (length (car my_matrix)) (length (cdr my_matrix)))\n            (if (= (length (car my_matrix)) (length (car (cdr my_matrix))))\n                (if (= (length (car my_matrix)) (length (car (cdr (cdr my_matrix)))))\n                    (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr my_matrix))))))\n                        (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr my_matrix)))))))\n                            (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr my_matrix))))))))\n                                (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr (cdr my_matrix)))))))))\n                                    (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr my_matrix))))))))))\n                                        (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr my_matrix)))))))))))\n                                            (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr my_matrix))))))))))))\n                                                (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr (cdr my_matrix)))))))))))))\n                                                    (if (= (length (car my_matrix)) (length (car (cdr (cdr (cdr (cdr (cdr (cdr (c",
    "  (let ([n (length my_matrix)])\n    (and\n     (andmap (lambda (x) (= (length x) n)) my_matrix)\n     (andmap (lambda (x) (= (apply + x) (/ (* n (+ n 1)) 2))) my_matrix)\n     (andmap (lambda (x) (= (apply + x) (/ (* n (+ n 1)) 2))) (transpose my_matrix))\n     (= (apply + (diagonal my_matrix)) (/ (* n (+ n 1)) 2))\n     (= (apply + (diagonal (reverse my_matrix))) (/ (* n (+ n 1)) 2)))))\n",
    "  (let ((n (length my_matrix)))\n    (and (= n (length (car my_matrix)))\n         (andmap (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                                (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n                 (range 1 n))\n         (andmap (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                                (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n                 (range 1 n))\n         (andmap (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                                (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n                 (range 1 n))\n         (andmap (lambda (i) (= (sum (map (lambda (row) (list-ref row i)) my_matrix))\n                                (sum (map (lambda (row) (list-ref row 0)) my_matrix))))\n                 (range 1 n)))))\n",
    "  (let ((matrix_size (length my_matrix)))\n    (let ((magic_number (apply + (list-ref my_matrix 0))))\n      (let ((row_sums (map (lambda (row) (apply + row)) my_matrix)))\n        (let ((col_sums (map (lambda (col_index) (apply + (map (lambda (row) (list-ref row col_index)) my_matrix))) (range matrix_size))))\n          (let ((diag_sums (list (apply + (map (lambda (index) (list-ref (list-ref my_matrix index) index)) (range matrix_size)))\n                                (apply + (map (lambda (index) (list-ref (list-ref my_matrix index) (- matrix_size 1 index))) (range matrix_size))))))\n            (and (every? (lambda (x) (= x magic_number)) (append row_sums col_sums diag_sums))\n                 (every? (lambda (x) (and (>= x 1) (<= x (expt matrix_size 2)))) (flatten my_matrix)))))))))\n",
    "  (define (sum_of_row my_matrix row_num)\n    (apply + (list-ref my_matrix row_num)))\n  (define (sum_of_col my_matrix col_num)\n    (apply + (map (lambda (row) (list-ref row col_num)) my_matrix)))\n  (define (sum_of_diag my_matrix)\n    (apply + (map (lambda (row) (list-ref row row)) my_matrix)))\n  (define (sum_of_anti_diag my_matrix)\n    (apply + (map (lambda (row) (list-ref row (- (length my_matrix) row 1))) my_matrix)))\n  (define (sum_of_all_rows my_matrix)\n    (map (lambda (row) (sum_of_row my_matrix row)) (range (length my_matrix))))\n  (define (sum_of_all_cols my_matrix)\n    (map (lambda (col) (sum_of_col my_matrix col)) (range (length my_matrix))))\n  (define (sum_of_all_diags my_matrix)\n    (list (sum_of_diag my_matrix) (sum_of_anti_diag my_matrix)))\n  (define (sum_of_all_sides my_matrix)\n    (append (sum_of_all_rows my_matrix) (sum_of_all_cols my_matrix) (sum_of_all_diags my_matrix)))\n  (define (all_equal? my_list)\n    (cond ((null? my_list) #t)\n          ((null? (cdr my_list)) #t)\n          ((equal? (car my_list) (cadr my_list)) (all_equal? (cdr my_list)))\n          (else #f)))\n  (all_equal? (sum_of_all_sides my_matrix)))\n",
    "  (let ([n (length my_matrix)])\n    (let ([sum (apply + (map (lambda (x) (apply + x)) my_matrix))])\n      (and\n       (andmap (lambda (x) (= sum (apply + x))) my_matrix)\n       (andmap (lambda (x) (= sum (apply + (map (lambda (y) (list-ref y x)) my_matrix)))) (range n))))))\n",
    "  (let ((n (length my_matrix)))\n    (and\n     (= n (length (car my_matrix)))\n     (let ((sum (apply + (car my_matrix))))\n       (and\n        (for/and ([row my_matrix])\n                 (= sum (apply + row)))\n        (for/and ([col (in-range n)])\n                 (= sum (apply + (map (lambda (row) (list-ref row col)) my_matrix))))\n        (= sum (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (in-range n))))\n        (= sum (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) (- n 1 i))) (in-range n))))))))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [sum (apply + (car my_matrix))])\n    (and (= n m)\n         (andmap (lambda (row) (= sum (apply + row))) my_matrix)\n         (andmap (lambda (col) (= sum (apply + (map (lambda (row) (list-ref row col)) my_matrix))))\n                 (build-list n (lambda (i) i))))))\n",
    "  (let ((n (array-length my_matrix)))\n    (let ((m (array-length (array-ref my_matrix 0))))\n      (let ((sum (array-ref (array-ref my_matrix 0) 0)))\n        (let ((row_sum (array-ref (array-ref my_matrix 0) 0)))\n          (let ((col_sum (array-ref (array-ref my_matrix 0) 0)))\n            (let ((diag_sum (array-ref (array-ref my_matrix 0) 0)))\n              (let ((diag_sum2 (array-ref (array-ref my_matrix 0) 0)))\n                (for ([i (in-range 1 n)])\n                  (set! sum (+ sum (array-ref (array-ref my_matrix i) 0)))\n                  (set! row_sum (+ row_sum (array-ref (array-ref my_matrix 0) i)))\n                  (set! col_sum (+ col_sum (array-ref (array-ref my_matrix i) 0)))\n                  (set! diag_sum (+ diag_sum (array-ref (array-ref my_matrix i) i)))\n                  (set! diag_sum2 (+ diag_sum2 (array-ref (array-ref my_matrix i) (- m i 1)))))\n                (for ([i (in-range 1 n)])\n                  (for ([j (in-range 1 m)])\n                    (set! row_sum (+ row_sum (array-ref (array-ref my_matrix i) j)))\n                    (set! col_sum (+ col_sum (array-ref (array-ref my_matrix j) i)))\n                    (set! diag_sum (+ diag_sum (array-ref (array-ref my_matrix i) j)))\n                    (set! diag_sum2 (+ diag_sum2 (array-ref (array-ref my_matrix i) (- m j 1))))))\n                (if (and (= row_sum sum) (= col_sum sum) (= diag_sum sum) (= diag_sum2 sum))\n                    #t\n                    #f))))))))))\n\n",
    "  (let ([n (length my_matrix)])\n    (and\n     (= n (length (car my_matrix)))\n     (let ([row-sum (apply + (car my_matrix))])\n       (andmap\n        (lambda (row) (= row-sum (apply + row)))\n        my_matrix))\n     (let ([col-sum (apply + (map (lambda (i) (list-ref (car my_matrix) i)) (range n)))])\n       (andmap\n        (lambda (i) (= col-sum (apply + (map (lambda (row) (list-ref row i)) my_matrix))))\n        (range n)))\n     (let ([diag-sum (apply + (map (lambda (i) (list-ref (car my_matrix) i)) (range n)))])\n       (= diag-sum (apply + (map (lambda (i) (list-ref (car my_matrix) i)) (reverse (range n)))))))))\n",
    "  (let ((n (length my_matrix)))\n    (let ((magic_number (* n (+ n 1) (/ (+ n 1) 2))))\n      (and\n       (andmap (lambda (x) (= magic_number (apply + x))) my_matrix)\n       (andmap (lambda (x) (= magic_number (apply + x))) (transpose my_matrix))\n       (= magic_number (apply + (diagonal my_matrix)))\n       (= magic_number (apply + (diagonal (reverse my_matrix))))))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [s (sum (car my_matrix))])\n    (and (= n m)\n         (andmap (lambda (row) (= s (sum row))) my_matrix)\n         (andmap (lambda (col) (= s (sum (map (lambda (row) (list-ref row col)) my_matrix)))) (range m))\n         (= s (sum (map (lambda (row) (list-ref row (- n 1))) my_matrix)))\n         (= s (sum (map (lambda (row) (list-ref row 0)) my_matrix))))))\n",
    "  (define (sum_of_row row)\n    (apply + (vector-ref my_matrix row)))\n  (define (sum_of_column column)\n    (apply + (for/vector ([row (in-range (vector-length my_matrix))])\n                (vector-ref (vector-ref my_matrix row) column))))\n  (define (sum_of_diagonal diagonal)\n    (apply + (for/vector ([row (in-range (vector-length my_matrix))])\n                (vector-ref (vector-ref my_matrix row)\n                            (if (= diagonal 0) row (- (vector-length my_matrix) row 1))))))\n  (define (all_equal? lst)\n    (cond [(empty? lst) #t]\n          [(empty? (rest lst)) #t]\n          [else (and (= (first lst) (second lst))\n                     (all_equal? (rest lst)))]))\n  (all_equal? (append (for/list ([row (in-range (vector-length my_matrix))])\n                         (list (sum_of_row row) (sum_of_column row) (sum_of_diagonal row)))\n                       (list (sum_of_diagonal -1)))))\n",
    "  (let* ([n (length my_matrix)]\n         [sum (apply + (map (lambda (x) (apply + x)) my_matrix))]\n         [sum_cols (map (lambda (x) (apply + (map (lambda (y) (list-ref y x)) my_matrix))) (range n))]\n         [sum_diag1 (apply + (map (lambda (x) (list-ref (list-ref my_matrix x) x)) (range n)))]\n         [sum_diag2 (apply + (map (lambda (x) (list-ref (list-ref my_matrix x) (- n 1 x))) (range n)))])\n    (and (= sum (apply + sum_cols))\n         (= sum sum_diag1)\n         (= sum sum_diag2))))\n",
    "  (let* ([n (length my_matrix)]\n         [m (length (car my_matrix))]\n         [magic_sum (apply + (car my_matrix))]\n         [row_sums (map (lambda (row) (apply + row)) my_matrix)]\n         [col_sums (map (lambda (col) (apply + (map (lambda (row) (list-ref row col)) my_matrix))) (range m))]\n         [diag_sums (list (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (range n)))\n                          (apply + (map (lambda (i) (list-ref (list-ref my_matrix i) (- n i 1))) (range n))))])\n    (and (apply = row_sums)\n         (apply = col_sums)\n         (apply = diag_sums)\n         (apply = (list magic_sum magic_sum)))))\n",
    "  (let* ([n (length my_matrix)]\n         [s (sum (car my_matrix))])\n    (and (= (length (car my_matrix)) n)\n         (andmap (lambda (row) (= s (sum row))) my_matrix)\n         (andmap (lambda (col) (= s (sum (map (lambda (row) (list-ref row col)) my_matrix)))) (range n))\n         (= s (sum (map (lambda (i) (list-ref (list-ref my_matrix i) i)) (range n))))\n         (= s (sum (map (lambda (i) (list-ref (list-ref my_matrix i) (- n 1 i))) (range n)))))))\n",
    "  (let ((n (length my_matrix)))\n    (let ((sum (apply + (map (lambda (x) (apply + x)) my_matrix))))\n      (and\n       (= sum (* n (/ (+ n 1) 2)))\n       (andmap (lambda (x) (= sum (apply + x))) my_matrix)\n       (andmap (lambda (x) (= sum (apply + (map (lambda (y) (list-ref y x)) my_matrix)))) (iota n))))))\n"
  ]
}