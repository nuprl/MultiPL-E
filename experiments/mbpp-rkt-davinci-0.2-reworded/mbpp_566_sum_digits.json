{
  "name": "mbpp_566_sum_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get the sum of the digits of a non-negative integer.\n(define (sum_digits n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_digits))\n    (check-equal? (candidate 345) 12)\n    (check-equal? (candidate 12) 3)\n    (check-equal? (candidate 97) 16)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10)\n             (sum_digits (quotient n 10)))]))\n",
    "  (if (zero? n)\n      0\n      (+ (modulo n 10)\n         (sum_digits (quotient n 10)))))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond [(zero? n) 0]\n        [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (modulo n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (cond\n    [(zero? n) 0]\n    [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n",
    "  (if (&lt; n 10)\n      n\n      (+ (modulo n 10) (sum_digits (quotient n 10)))))\n",
    "  (cond [(zero? n) 0]\n        [else (+ (remainder n 10) (sum_digits (quotient n 10)))]))\n"
  ]
}