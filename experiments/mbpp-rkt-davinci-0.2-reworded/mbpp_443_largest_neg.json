{
  "name": "mbpp_443_largest_neg",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the largest negative number from the given list.\n(define (largest_neg list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_neg))\n    (check-equal? (candidate (list 1 2 3 -4 -6)) -6)\n    (check-equal? (candidate (list 1 2 3 -8 -9)) -9)\n    (check-equal? (candidate (list 1 2 3 4 -1)) -1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list1) (error \"List is empty\")]\n    [(< (first list1) 0) (first list1)]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(< (first list1) 0) (max (first list1) (largest_neg (rest list1)))]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(< (car list1) 0) (max (car list1) (largest_neg (cdr list1)))]\n    [else (largest_neg (cdr list1))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(and (number? (car list1)) (negative? (car list1)))\n     (if (null? (cdr list1))\n         (car list1)\n         (max (car list1) (largest_neg (cdr list1))))]\n    [else (largest_neg (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) (error \"List is empty\")]\n    [(negative? (first list1)) (first list1)]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) '()]\n    [(and (negative? (first list1)) (or (empty? (rest list1)) (positive? (first (rest list1))))) (first list1)]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) (error \"empty list\")]\n    [(< (first list1) 0) (first list1)]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(and (negative? (first list1)) (negative? (largest_neg (rest list1))))\n     (first list1)]\n    [(and (negative? (first list1)) (not (negative? (largest_neg (rest list1)))))\n     (largest_neg (rest list1))]\n    [(and (not (negative? (first list1))) (negative? (largest_neg (rest list1))))\n     (largest_neg (rest list1))]\n    [(and (not (negative? (first list1))) (not (negative? (largest_neg (rest list1)))))\n     0]))\n",
    "  (cond\n    [(empty? list1) '()]\n    [(and (negative? (first list1)) (empty? (rest list1))) (first list1)]\n    [(and (negative? (first list1)) (positive? (first (rest list1)))) (first list1)]\n    [(and (negative? (first list1)) (negative? (first (rest list1)))) (largest_neg (rest list1))]\n    [(and (positive? (first list1)) (negative? (first (rest list1)))) (largest_neg (rest list1))]\n    [(and (positive? (first list1)) (positive? (first (rest list1)))) (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) '()]\n    [(negative? (first list1)) (first list1)]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(null? list1) 0]\n    [(< (car list1) 0) (max (car list1) (largest_neg (cdr list1)))]\n    [else (largest_neg (cdr list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(negative? (first list1)) (max (first list1) (largest_neg (rest list1)))]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(and (negative? (first list1)) (positive? (second list1))) (largest_neg (rest list1))]\n    [(and (negative? (first list1)) (negative? (second list1))) (max (first list1) (largest_neg (rest list1)))]\n    [(and (positive? (first list1)) (negative? (second list1))) (max (first list1) (largest_neg (rest list1)))]\n    [(and (positive? (first list1)) (positive? (second list1))) (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(and (negative? (first list1))\n          (or (positive? (second list1))\n              (empty? (rest list1))))\n     (first list1)]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(< (car list1) 0) (cons (car list1) (largest_neg (cdr list1)))]\n    [else (largest_neg (cdr list1))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [(and (not (null? list1)) (not (negative? (car list1)))) (largest_neg (cdr list1))]\n    [(and (not (null? list1)) (negative? (car list1))) (max (car list1) (largest_neg (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(< (first list1) 0) (max (first list1) (largest_neg (rest list1)))]\n    [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) (error \"empty list\")]\n    [(and (negative? (first list1)) (empty? (rest list1))) (first list1)]\n    [(and (negative? (first list1)) (negative? (largest_neg (rest list1)))) (first list1)]\n    [(and (negative? (first list1)) (positive? (largest_neg (rest list1)))) (largest_neg (rest list1))]\n    [(and (positive? (first list1)) (empty? (rest list1))) (error \"no negative numbers\")]\n    [(and (positive? (first list1)) (negative? (largest_neg (rest list1)))) (largest_neg (rest list1))]\n    [(and (positive? (first list1)) (positive? (largest_neg (rest list1)))) (error \"no negative numbers\")]))\n",
    "  (cond [(empty? list1) 0]\n        [(and (negative? (first list1))\n              (or (positive? (second list1)) (empty? (rest list1))))\n         (first list1)]\n        [else (largest_neg (rest list1))]))\n",
    "  (cond\n    [(empty? list1) 0]\n    [(negative? (first list1)) (max (first list1) (largest_neg (rest list1)))]\n    [else (largest_neg (rest list1))]))\n"
  ]
}