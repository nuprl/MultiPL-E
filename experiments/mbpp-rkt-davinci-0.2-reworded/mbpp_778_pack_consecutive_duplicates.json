{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to pack consecutive duplicates of a given list elements into sublists.\n(define (pack_consecutive_duplicates list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pack_consecutive_duplicates))\n    (check-equal? (candidate (list 0 0 1 2 3 4 4 5 6 6 6 7 8 9 4 4)) (list (list 0 0) (list 1) (list 2) (list 3) (list 4 4) (list 5) (list 6 6 6) (list 7) (list 8) (list 9) (list 4 4)))\n    (check-equal? (candidate (list 10 10 15 19 18 18 17 26 26 17 18 10)) (list (list 10 10) (list 15) (list 19) (list 18 18) (list 17) (list 26 26) (list 17) (list 18) (list 10)))\n    (check-equal? (candidate (list \"a\" \"a\" \"b\" \"c\" \"d\" \"d\")) (list (list \"a\" \"a\") (list \"b\") (list \"c\") (list \"d\" \"d\")))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1))\n                (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n",
    "  (define (pack_consecutive_duplicates_iter list1 result)\n    (if (null? list1)\n        result\n        (let ((first (car list1))\n              (rest (cdr list1)))\n          (if (null? rest)\n              (cons (list first) result)\n              (if (equal? first (car rest))\n                  (pack_consecutive_duplicates_iter rest (cons (cons first (car result)) (cdr result)))\n                  (pack_consecutive_duplicates_iter rest (cons (list first) result)))))))\n  (pack_consecutive_duplicates_iter list1 (list)))\n",
    "  (cond\n    [(null? list1) '()]\n    [else (cons (list (car list1))\n                (pack_consecutive_duplicates (cdr list1)))]))\n",
    "  (cond [(empty? list1) empty]\n        [else (cons (list (first list1))\n                    (pack_consecutive_duplicates (remove (first list1) list1)))]))\n",
    "  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [(empty? result) (pack_consecutive_duplicates_iter (rest list1) (list (list (first list1))))]\n      [(equal? (first (first result)) (first list1)) (pack_consecutive_duplicates_iter (rest list1) (cons (cons (first list1) (first result)) (rest result)))]\n      [else (pack_consecutive_duplicates_iter (rest list1) (cons (list (first list1)) result))]))\n  (reverse (pack_consecutive_duplicates_iter list1 '())))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (remove (first list1) (rest list1))))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else (cons (list (first list1))\n                (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [(empty? (rest list1)) (list list1)]\n    [else\n     (if (equal? (first list1) (first (rest list1)))\n         (cons (list (first list1)) (pack_consecutive_duplicates (rest list1)))\n         (cons (list (first list1)) (pack_consecutive_duplicates (rest list1))))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (list (first list1))\n      (pack_consecutive_duplicates (rest list1)))]))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons\n      (cons (first list1)\n            (filter (lambda (x) (equal? x (first list1))) list1))\n      (pack_consecutive_duplicates (filter (lambda (x) (not (equal? x (first list1)))) list1)))]))\n",
    "  (cond\n    [(null? list1) '()]\n    [else\n     (let ([sublist (list (car list1))])\n       (for ([elem (cdr list1)])\n         (if (equal? elem (car sublist))\n             (set! sublist (append sublist (list elem)))\n             (set! list1 (append (list sublist) (list elem))\n                   sublist (list elem))))\n       list1)]))\n",
    "  (cond [(empty? list1) empty]\n        [else (cons (list (first list1))\n                    (pack_consecutive_duplicates (filter (lambda (x) (not (= x (first list1)))) (rest list1))))]))\n",
    "  (let loop ((list1 list1)\n             (acc '()))\n    (cond ((null? list1) acc)\n          ((null? (cdr list1)) (cons (list (car list1)) acc))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (cadr list1)) acc)))\n          (else (loop (cdr list1) (cons (list (car list1)) acc))))))\n",
    "  (define (pack_consecutive_duplicates_iter list1 result)\n    (cond\n      [(empty? list1) result]\n      [else\n       (let* ([first (first list1)]\n              [rest (rest list1)]\n              [first_rest (cons first rest)]\n              [first_rest_duplicates (filter (lambda (x) (equal? x first)) first_rest)]\n              [rest_duplicates (filter (lambda (x) (not (equal? x first))) first_rest)])\n         (pack_consecutive_duplicates_iter rest_duplicates (cons first_rest_duplicates result)))]))\n  (pack_consecutive_duplicates_iter list1 '()))\n",
    "  (let loop ((list1 list1)\n             (list2 '()))\n    (cond ((null? list1) (reverse list2))\n          ((null? (cdr list1)) (reverse (cons (list (car list1)) list2)))\n          ((equal? (car list1) (cadr list1))\n           (loop (cdr list1) (cons (cons (car list1) (car list2)) (cdr list2))))\n          (else (loop (cdr list1) (cons (list (car list1)) list2))))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (first list1))\n           (pack_consecutive_duplicates (rest list1)))]))\n",
    "  (cond ((null? list1) '())\n        ((null? (cdr list1)) (list list1))\n        ((equal? (car list1) (cadr list1))\n         (cons (list (car list1) (cadr list1))\n               (pack_consecutive_duplicates (cdr list1))))\n        (else (cons (list (car list1))\n                    (pack_consecutive_duplicates (cdr list1))))))\n",
    "  (cond\n    [(empty? list1) empty]\n    [else\n     (cons (list (car list1))\n           (pack_consecutive_duplicates (cdr list1)))]))\n"
  ]
}