{
  "name": "mbpp_222_check_type",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to check if all the elements in list have same data type or not.\n(define (check_type test_tuple)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_type))\n    (check-equal? (candidate (list 5 6 7 3 5 6)) #t)\n    (check-equal? (candidate (list 1 2 \"4\")) #f)\n    (check-equal? (candidate (list 3 2 1 4 5)) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(and (number? (car test_tuple)) (check_type (cdr test_tuple))) #t]\n    [else #f]))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n",
    "  (let loop ([lst (car test_tuple)]\n             [type (cdr test_tuple)])\n    (if (null? lst)\n        #t\n        (if (equal? (type-tag (car lst)) type)\n            (loop (cdr lst) type)\n            #f))))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple))) (check_type (cdr test_tuple))]\n    [else #f]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (if (null? (cdr test_tuple))\n      #t\n      (if (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n          (check_type (cdr test_tuple))\n          #f)))\n",
    "  (cond\n    [(empty? test_tuple) #t]\n    [(not (equal? (type-tag (first test_tuple)) (type-tag (second test_tuple)))) #f]\n    [else (check_type (rest test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n               (check_type (cdr test_tuple)))]))\n",
    "  (cond\n    [(null? test_tuple) true]\n    [(null? (cdr test_tuple)) true]\n    [else (and (equal? (type-tag (car test_tuple)) (type-tag (car (cdr test_tuple))))\n               (check_type (cdr test_tuple)))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(not (equal? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))) #f]\n    [else (check_type (cdr test_tuple))]))\n",
    "  (cond\n    [(null? test_tuple) #t]\n    [(null? (cdr test_tuple)) #t]\n    [(eq? (type-tag (car test_tuple)) (type-tag (cadr test_tuple)))\n     (check_type (cdr test_tuple))]\n    [else #f]))\n"
  ]
}