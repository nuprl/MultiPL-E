{
  "name": "mbpp_772_remove_length",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to remove all the words with k length in the given string.\n(define (remove_length test_str K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate remove_length))\n    (check-equal? (candidate \"The person is most value tet\" 3) \"person is most value\")\n    (check-equal? (candidate \"If you told me about this ok\" 4) \"If you me about ok\")\n    (check-equal? (candidate \"Forces of darkeness is come into the play\" 4) \"Forces of darkeness is the\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (regexp-replace* #rx(word: (repeat K (not space))) test_str \"\"))\n",
    "  (define (remove_length_helper test_str K result)\n    (cond\n      [(empty? test_str) result]\n      [(= K (string-length (car test_str))) (remove_length_helper (cdr test_str) K result)]\n      [else (remove_length_helper (cdr test_str) K (append result (list (car test_str))))]))\n  (remove_length_helper (string-split test_str) K '()))\n",
    "  (regexp-replace* #rx (string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\") test_str \"\"))\n",
    "  (string-join (filter (lambda (x) (not (= (string-length x) K))) (string-split test_str #\\space)) \" \"))\n",
    "  (regexp-replace* #rx\"\\w{k}\" test_str \"\"))\n",
    "  (regexp-replace* #rx(,(string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\")) test_str \"\"))\n",
    "  (regexp-replace* #rx\"\\w{K}\" test_str \"\"))\n",
    "  (regexp-replace* #rx\"\\w{K}\" test_str \"\"))\n",
    "  (define (remove_length_helper test_str K result)\n    (cond\n      [(empty? test_str) result]\n      [(= K (string-length (first test_str))) (remove_length_helper (rest test_str) K result)]\n      [else (remove_length_helper (rest test_str) K (append result (list (first test_str))))]))\n  (remove_length_helper (string-split test_str) K '()))\n",
    "  (regexp-replace* #rx(,(string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\")) test_str \"\"))\n",
    "  (for/list ([word (in-list (string-split test_str))]\n             #:when (not (= (string-length word) K)))\n    word))\n",
    "  (regexp-replace* #rx(word{K}) test_str \"\"))\n",
    "  (regexp-replace* #rx\"\\w{K}\" test_str \"\"))\n",
    "  (define (remove_length-helper test_str K result)\n    (cond ((null? test_str) (reverse result))\n          ((= K (string-length (car test_str)))\n           (remove_length-helper (cdr test_str) K result))\n          (else (remove_length-helper (cdr test_str) K (cons (car test_str) result)))))\n  (remove_length-helper (string-split test_str) K '()))\n",
    "  (regexp-replace* #rx\"\\w{K}\" test_str \"\"))\n",
    "  (regexp-replace* #rx (string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\") test_str \"\"))\n",
    "  (regexp-replace* #rx (string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\") test_str \"\"))\n",
    "  (regexp-replace* #rx (string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\") test_str \"\"))\n",
    "  (regexp-replace* #rx(word-boundary (repeat K (not space)) word-boundary) test_str \"\"))\n",
    "  (regexp-replace* #rx (string-append \"\\\\b\\\\w{\" (number->string K) \"}\\\\b\") test_str \"\"))\n"
  ]
}