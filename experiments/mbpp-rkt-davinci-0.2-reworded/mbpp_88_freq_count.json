{
  "name": "mbpp_88_freq_count",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to get the frequency of all the elements in a list, returned as a hash.\n(define (freq_count list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate freq_count))\n    (check-equal? (candidate (list 10 10 10 10 20 20 20 20 40 40 50 50 30)) #hash((10 .  4) (20 .  4) (40 .  2) (50 .  2) (30 .  1)))\n    (check-equal? (candidate (list 1 2 3 4 3 2 4 1 3 1 4)) #hash((1 .  3) (2 .  2) (3 .  3) (4 .  3)))\n    (check-equal? (candidate (list 5 6 7 4 9 10 4 5 6 7 9 5)) #hash((10 .  1) (5 .  3) (6 .  2) (7 .  2) (4 .  2) (9 .  2)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (freq_count-helper list1 hash)\n    (cond [(empty? list1) hash]\n          [else (define (get-or-zero key hash)\n                  (if (hash-has-key? hash key)\n                      (hash-ref hash key)\n                      0))\n               (define (inc-or-add key hash)\n                 (if (hash-has-key? hash key)\n                     (hash-set hash key (+ 1 (hash-ref hash key)))\n                     (hash-set hash key 1)))\n               (inc-or-add (first list1) hash)\n               (freq_count-helper (rest list1) hash)]))\n  (freq_count-helper list1 (make-hash)))\n",
    "  (define (freq_count_helper list2 hash)\n    (cond [(empty? list2) hash]\n          [else (define (inc_or_add key hash)\n                  (cond [(hash-has-key? hash key)\n                         (hash-update hash key add1)]\n                        [else (hash-update hash key (lambda (x) 1))]))\n                (freq_count_helper (rest list2) (inc_or_add (first list2) hash))]))\n  (freq_count_helper list1 (make-hash)))\n",
    "  (define (freq_count-helper list1 hash)\n    (cond\n      [(empty? list1) hash]\n      [else (freq_count-helper (rest list1)\n                               (hash-update (first list1)\n                                            (lambda (x) (if (null? x) 1 (+ 1 x)))\n                                            hash))]))\n  (freq_count-helper list1 (make-hash)))\n",
    "  (let ([freq (make-hash)])\n    (for ([elem list1])\n      (hash-update! freq elem add1 0))\n    freq))\n",
    "  (define (freq_count_helper list1 freq_hash)\n    (cond\n      [(empty? list1) freq_hash]\n      [else\n       (define (get-val key)\n         (hash-ref freq_hash key 0))\n       (define (set-val key val)\n         (hash-set! freq_hash key val))\n       (define (inc-val key)\n         (set-val key (+ 1 (get-val key))))\n       (inc-val (first list1))\n       (freq_count_helper (rest list1) freq_hash)]))\n  (freq_count_helper list1 (make-hash)))\n",
    "  (define (freq_count_helper list1 hash)\n    (cond\n      [(empty? list1) hash]\n      [else (freq_count_helper (rest list1) (hash-update (first list1) add1 0 hash))]))\n  (freq_count_helper list1 (make-hash)))\n",
    "  (hash '() list1))\n",
    "  (let ([hash (make-hash)])\n    (for ([i list1])\n      (hash-update hash i add1 0))\n    hash))\n",
    "  (let ([freq (make-hash)])\n    (for ([x list1])\n      (hash-update! freq x add1 0))\n    freq))\n",
    "  (hash '() list1))\n",
    "  (define (freq_count_iter list1 hash)\n    (cond\n      [(empty? list1) hash]\n      [else\n       (define key (car list1))\n       (define val (hash-ref hash key 0))\n       (hash-set! hash key (+ val 1))\n       (freq_count_iter (cdr list1) hash)]))\n  (freq_count_iter list1 (make-hash)))\n",
    "  (define (freq_count_helper list1 hash)\n    (cond\n      [(empty? list1) hash]\n      [else (freq_count_helper (rest list1) (hash-update (first list1) (lambda (x) (+ x 1)) 0 hash))]))\n  (freq_count_helper list1 (make-hash)))\n",
    "  (define (freq_count-helper list1 hash)\n    (cond\n      [(empty? list1) hash]\n      [else\n       (define key (car list1))\n       (define value (hash-ref hash key 0))\n       (hash-set! hash key (+ value 1))\n       (freq_count-helper (cdr list1) hash)]))\n  (freq_count-helper list1 (make-hash)))\n",
    "  (hash '() list1))\n",
    "  (hash-ref (for/fold ([h (make-hash)])\n                ([x list1])\n                (hash-update h x add1 0))\n            'not-found\n            0))\n",
    "  (define (freq_count-helper list1 result)\n    (cond\n      [(empty? list1) result]\n      [else (freq_count-helper (rest list1) (hash-update result (first list1) add1 0))]))\n  (freq_count-helper list1 (make-hash)))\n",
    "  (let ([freq-hash (make-hash)])\n    (for ([elem list1])\n      (hash-update! freq-hash elem add1 0))\n    freq-hash))\n",
    "  (hash '() list1))\n",
    "  (let ([freq (make-hash)])\n    (for ([i list1])\n      (hash-update! freq i add1 0))\n    freq))\n",
    "  (letrec ([freq (make-hash)])\n    (for ([i list1])\n      (hash-set! freq i (+ 1 (hash-ref freq i 0))))\n    freq))\n"
  ]
}