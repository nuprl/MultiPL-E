{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n(define (toggle_middle_bits n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate toggle_middle_bits))\n    (check-equal? (candidate 9) 15)\n    (check-equal? (candidate 10) 12)\n    (check-equal? (candidate 11) 13)\n    (check-equal? (candidate 65) 127)\n    (check-equal? (candidate 77) 115)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (define (toggle_middle_bits_iter n i)\n    (cond\n      [(= i 1) n]\n      [(= i 32) n]\n      [else (toggle_middle_bits_iter (bitwise-xor n (bitwise-shift-left 1 (- i 2))) (- i 1))]))\n  (toggle_middle_bits_iter n 31))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (bitwise-xor n (bitwise-rotate-bit-field n 1 (- (bit-length n) 2))))\n",
    "  (let ([mask (bitwise-ior (bitwise-not (bitwise-shift-left 1 (bit-length n))) (bitwise-not 1))])\n    (bitwise-xor n mask)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (define (toggle-middle-bits-iter n mask)\n    (if (= mask 0)\n        n\n        (toggle-middle-bits-iter (bitwise-xor n mask) (bitwise-arithmetic-shift mask -1))))\n  (toggle-middle-bits-iter n (bitwise-arithmetic-shift (bitwise-arithmetic-shift -1 -1) 2)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (let ([mask (bitwise-ior (bitwise-shift-left 1 (- (bit-length n) 2)) (bitwise-shift-left 1 1))])\n    (bitwise-xor n mask)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1) (bitwise-arithmetic-shift n 1)))\n",
    "  (bitwise-xor n (bitwise-arithmetic-shift n -1)))\n",
    "  (bitwise-xor n (bitwise-rotate-bit-field n 1 (- (bit-length n) 2))))\n"
  ]
}