{
  "name": "mbpp_409_min_product_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (list (car x) (cdr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzz9vlq1d.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzz9vlq1d.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzz9vlq1d.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphx6htabb.rkt:12:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphx6htabb.rkt:13:4\nactual:     2\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphx6htabb.rkt:14:4\nactual:     5\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map list list1 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (define (min_product_tuple_iter list1 min)\n    (if (null? list1)\n        min\n        (let ((min_product (apply * (car list1))))\n          (if (&lt; min_product min)\n              (min_product_tuple_iter (cdr list1) min_product)\n              (min_product_tuple_iter (cdr list1) min)))))\n  (min_product_tuple_iter list1 (apply * (car list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124266,
      "stdout": "",
      "stderr": "/tmp/tmp1uuwpn_m.rkt:4:0: read-syntax: expected a `)` to close `(`\n  possible cause: indentation suggests a missing `)` before line 14\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:186:17: body\n   /work/arjunguha-research-group/software/racket/collects/syntax/module-reader.rkt:183:2: wrap-internal\n   /work/arjunguha-research-group/software/racket/collects/racket/../syntax/module-reader.rkt:67:9: wrap-internal/wrapper\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map list1 (range 1 (length list1)))))))\n</code>\nI am getting the following error:\n<code>application: not a procedure;\n expected a procedure that can be applied to arguments\n  given: '(1 2 3 4)\n  arguments...: [none]\n</code>\nI am not sure what I am doing wrong.\n\n\nA:\n\nThe problem is that you're calling <code>list1</code> as a function, but it's not a function. It's a list.\nYou probably meant to call <code>list</code> instead.\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "/tmp/tmpank1eljx.rkt:18:67: unquote: not in quasiquote\n  in: (unquote but)\n  location...:\n   /tmp/tmpank1eljx.rkt:18:67\n  context...:\n   /work/arjunguha-research-group/software/racket/collects/syntax/wrap-modbeg.rkt:46:4\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (combinations 2 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljgu5pga.rkt:12:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljgu5pga.rkt:13:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpljgu5pga.rkt:14:4\n\nin-combinations: contract violation\n  expected: list?\n  given: 2\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (first x) (second x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (let ([min_product (apply min (map * list1))])\n    (list min_product (list-ref list1 (list-index min_product list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "/tmp/tmp8t8_mzb8.rkt:6:39: list-index: unbound identifier\n  in: list-index\n  location...:\n   /tmp/tmp8t8_mzb8.rkt:6:39\n",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9l16ldzq.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9l16ldzq.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9l16ldzq.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:12:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:13:4\nactual:     2\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:14:4\nactual:     5\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map list list1 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map list list1 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (map list list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o_3f1ya.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o_3f1ya.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_o_3f1ya.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (define (min_product_tuple_helper list1 list2)\n    (if (null? list1)\n        (if (null? list2)\n            0\n            (min_product_tuple_helper list1 (cdr list2)))\n        (if (null? list2)\n            (min_product_tuple_helper (cdr list1) list1)\n            (min (min_product_tuple_helper (cdr list1) list2)\n                 (min_product_tuple_helper list1 (cdr list2))\n                 (* (car list1) (car list2))))))\n  (min_product_tuple_helper list1 list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqvg5vbp4.rkt:22:4\n\n*: contract violation\n  expected: number?\n  given: '(4 9)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqvg5vbp4.rkt:23:4\n\n*: contract violation\n  expected: number?\n  given: '(5 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqvg5vbp4.rkt:24:4\n\n*: contract violation\n  expected: number?\n  given: '(12 9)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (if (null? list1)\n      0\n      (let ((min (apply min (map * (car list1) (cdr list1)))))\n        (if (null? (cdr list1))\n            min\n            (min min (min_product_tuple (cdr list1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_eawisj.rkt:17:4\n\nmap: all lists must have same size\n  first list length: 2\n  other list length: 3\n  procedure: #<procedure:*>\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_eawisj.rkt:18:4\n\n*: contract violation\n  expected: number?\n  given: '(15 2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg_eawisj.rkt:19:4\n\nmap: all lists must have same size\n  first list length: 2\n  other list length: 3\n  procedure: #<procedure:*>\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (define (min_product_tuple_helper list1 min)\n    (if (null? list1)\n        min\n        (let ([x (car list1)])\n          (if (< (car x) min)\n              (min_product_tuple_helper (cdr list1) (car x))\n              (min_product_tuple_helper (cdr list1) min)))))\n  (min_product_tuple_helper list1 (car (car list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj18neia4.rkt:19:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj18neia4.rkt:20:4\nactual:     5\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj18neia4.rkt:21:4\nactual:     10\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '((2 7) (2 7))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '((10 20) (10 20))\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4r9btmcc.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '((11 44) (11 44))\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:12:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:13:4\nactual:     2\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:14:4\nactual:     5\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (apply * x)) (apply append (map (lambda (x) (map (lambda (y) (list x y)) list1)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkxy15fyz.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (cond\n    [(empty? list1) #f]\n    [else\n     (let* ([min (apply min (car list1))]\n            [max (apply max (car list1))]\n            [min_max (cons min max)]\n            [min_max_list (list min_max)]\n            [min_max_list (append min_max_list (min_product_tuple (cdr list1)))])\n       (apply min (map * min_max_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1umn5t3_.rkt:20:4\n\nmap: contract violation\n  expected: list?\n  given: '((4 . 9) . #f)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1umn5t3_.rkt:21:4\n\nmap: contract violation\n  expected: list?\n  given: '((5 . 10) . #f)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1umn5t3_.rkt:22:4\n\nmap: contract violation\n  expected: list?\n  given: '((9 . 12) . #f)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map list list1 list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfp2bl2v5.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (define (min_product_tuple_helper list1 list2)\n    (if (null? list1)\n        (if (null? list2)\n            0\n            (min_product_tuple_helper list2 (cdr list2)))\n        (if (null? list2)\n            (min_product_tuple_helper (cdr list1) (cdr list1))\n            (min (min_product_tuple_helper (cdr list1) (cdr list2))\n                 (* (car list1) (car list2))))))\n  (min_product_tuple_helper list1 list1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4194tlob.rkt:21:4\n\n*: contract violation\n  expected: number?\n  given: '(4 9)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4194tlob.rkt:22:4\n\n*: contract violation\n  expected: number?\n  given: '(5 10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4194tlob.rkt:23:4\n\n*: contract violation\n  expected: number?\n  given: '(12 9)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:12:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:13:4\nactual:     2\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:14:4\nactual:     5\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:12:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:13:4\nactual:     2\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:14:4\nactual:     5\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (map list x)) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj7b4rtbx.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (if (null? list1)\n      0\n      (let ((min (apply min (map (lambda (x) (* (car x) (cadr x))) list1))))\n        (if (null? (cdr list1))\n            min\n            (min min (min_product_tuple (cdr list1)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5d_g5e9.rkt:17:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 8\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5d_g5e9.rkt:18:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 30\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv5d_g5e9.rkt:19:4\n\napplication: not a procedure;\n expected a procedure that can be applied to arguments\n  given: 100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * (apply append (map (lambda (x) (list (car x) (cadr x))) list1)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:12:4\nactual:     1\nexpected:   8\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:13:4\nactual:     2\nexpected:   30\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp88ctu6eh.rkt:14:4\nactual:     5\nexpected:   100\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map (lambda (x) (* (car x) (cadr x))) (partition 2 1 list1))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1666124267,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9l16ldzq.rkt:12:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9l16ldzq.rkt:13:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9l16ldzq.rkt:14:4\n\npartition: arity mismatch;\n the expected number of arguments does not match the given number\n  expected: 2\n  given: 3\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a function to find the minimum product from the pairs of lists within a given list.\n(define (min_product_tuple list1)\n  (apply min (map * list1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate min_product_tuple))\n    (check-equal? (candidate (list (list 2 7) (list 2 6) (list 1 8) (list 4 9))) 8)\n    (check-equal? (candidate (list (list 10 20) (list 15 2) (list 5 10))) 30)\n    (check-equal? (candidate (list (list 11 44) (list 10 15) (list 20 5) (list 12 9))) 100)\n))\n\n(test-humaneval)",
      "timestamp": 1665509723,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:12:4\n\n*: contract violation\n  expected: number?\n  given: '(2 7)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:13:4\n\n*: contract violation\n  expected: number?\n  given: '(10 20)\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_csff6o.rkt:14:4\n\n*: contract violation\n  expected: number?\n  given: '(11 44)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}