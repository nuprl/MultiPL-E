{
  "name": "mbpp_592_sum_Of_product",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the sum of the product of consecutive binomial co-efficients.\n(define (sum_Of_product n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sum_Of_product))\n    (check-equal? (candidate 3) 15)\n    (check-equal? (candidate 4) 56)\n    (check-equal? (candidate 1) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (binomial n k) (sum_Of_product_helper n (- k 1)))))\n  (sum_Of_product_helper n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* (factorial n) 1.0) (* (factorial k) (factorial (- n k))))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (* (binomial n k) (binomial n (- k 1))) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (helper n i)\n    (if (= i n)\n        1\n        (* (binomial n i) (helper n (+ i 1)))))\n  (helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* (factorial n) 1.0) (* (factorial k) (factorial (- n k))))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (helper k)\n    (if (= k 0)\n        1\n        (* (binomial n k) (helper (- k 1)))))\n  (helper n))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum-of-product n)\n    (if (= n 1)\n        1\n        (+ (* (binomial-coefficient n 1) (binomial-coefficient (- n 1) 0))\n           (sum-of-product (- n 1)))))\n  (sum-of-product n))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_help n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_help n (+ k 1)))))\n  (sum_of_product_help n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (let loop ([i 1] [sum 0])\n    (cond [(= i n) (+ sum (* (binomial n i) (binomial n (+ i 1))))]\n          [else (loop (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))])))\n",
    "  (define (sum_Of_product_iter n i sum)\n    (if (= i n)\n        sum\n        (sum_Of_product_iter n (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (* (binomial n k) (binomial n (- k 1))) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (product_of_binomial_coefficients n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (* (binomial_coefficient n k) (product_of_binomial_coefficients n (+ k 1)))))\n  (define (sum_of_product_of_binomial_coefficients n k)\n    (if (= k n)\n        (product_of_binomial_coefficients n k)\n        (+ (product_of_binomial_coefficients n k) (sum_of_product_of_binomial_coefficients n (+ k 1)))))\n  (sum_of_product_of_binomial_coefficients n 0))\n",
    "  (define (product_of_binomial_coefficients n k)\n    (if (= k 0)\n        1\n        (* (binomial_coefficient n k)\n           (product_of_binomial_coefficients n (- k 1)))))\n  (define (sum_of_product n)\n    (if (= n 0)\n        0\n        (+ (product_of_binomial_coefficients n n)\n           (sum_of_product (- n 1)))))\n  (sum_of_product n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (binomial n k) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (product_of_binomial_coeff n k)\n    (if (= k 1)\n        (binomial_coeff n k)\n        (* (binomial_coeff n k) (product_of_binomial_coeff n (- k 1)))))\n  (define (sum_of_product_of_binomial_coeff n k)\n    (if (= k 1)\n        (product_of_binomial_coeff n k)\n        (+ (product_of_binomial_coeff n k) (sum_of_product_of_binomial_coeff n (- k 1)))))\n  (sum_of_product_of_binomial_coeff n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (binomial n k) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k 0)\n        0\n        (+ (binomial n k) (sum_Of_product_iter n (- k 1)))))\n  (sum_Of_product_iter n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1)))\n           (sum_of_product_iter n (+ k 1)))))\n  (sum_of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (sum_Of_product_iter n i sum)\n    (if (= i n)\n        sum\n        (sum_Of_product_iter n (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n r)\n    (/ (factorial n) (* (factorial r) (factorial (- n r)))))\n  (define (sum_Of_product_helper n r)\n    (if (= r n)\n        (binomial_coefficient n r)\n        (+ (binomial_coefficient n r) (sum_Of_product_helper n (+ r 1)))))\n  (sum_Of_product_helper n 1))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= n k)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k 0)\n        sum\n        (sum_Of_product_iter n (- k 1) (+ sum (* (binomial n k) (binomial n (- k 1)))))))\n  (sum_Of_product_iter n n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n</code>\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (if (= n 1)\n      1\n      (+ (* (binomial n 1) (sum_Of_product (- n 1)))\n         (* (binomial n 2) (sum_Of_product (- n 2)))\n         (* (binomial n 3) (sum_Of_product (- n 3)))\n         (* (binomial n 4) (sum_Of_product (- n 4)))\n         (* (binomial n 5) (sum_Of_product (- n 5)))\n         (* (binomial n 6) (sum_Of_product (- n 6)))\n         (* (binomial n 7) (sum_Of_product (- n 7)))\n         (* (binomial n 8) (sum_Of_product (- n 8)))\n         (* (binomial n 9) (sum_Of_product (- n 9)))\n         (* (binomial n 10) (sum_Of_product (- n 10))))))\n",
    "  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        0\n        (+ (* (binomial n i) (binomial n (+ i 1))) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (binomial_coefficient n k)\n    (cond ((= k 0) 1)\n          ((= k n) 1)\n          (else (+ (binomial_coefficient (- n 1) (- k 1))\n                   (binomial_coefficient (- n 1) k)))))\n  (define (sum_of_product_iter n k sum)\n    (cond ((= k n) sum)\n          (else (sum_of_product_iter n (+ k 1) (+ sum (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))))))))\n  (sum_of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial-coefficient n k) (binomial-coefficient n (+ k 1)))\n           (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_Of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_Of_product_helper n (+ k 1)))))\n  (sum_Of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_helper n (+ k 1)))))\n  (sum_Of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n i sum)\n    (if (= i n)\n        sum\n        (sum_Of_product_iter n (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (helper n k)\n    (cond\n      [(= n k) 1]\n      [(= k 0) 1]\n      [else (+ (helper (- n 1) (- k 1)) (helper (- n 1) k))]))\n  (define (sum_of_product_helper n k)\n    (cond\n      [(= k n) 0]\n      [else (+ (* (helper n k) (helper n (+ k 1))) (sum_of_product_helper n (+ k 1)))]))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (binomial n k)\n    (if (= k 0)\n        1\n        (if (= k n)\n            1\n            (+ (binomial (- n 1) (- k 1)) (binomial (- n 1) k)))))\n  (define (product n)\n    (if (= n 1)\n        1\n        (* (binomial n (- n 1)) (product (- n 1)))))\n  (define (sum n)\n    (if (= n 1)\n        (product n)\n        (+ (product n) (sum (- n 1)))))\n  (sum n))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 1))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_Of_product_helper n (+ k 1)))))\n  (sum_Of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (sum_Of_product_iter n1 n2 n3 n4)\n    (if (= n1 n)\n        n4\n        (sum_Of_product_iter (+ n1 1) (+ n2 1) (+ n3 1) (+ (* n2 n3) n4))))\n  (sum_Of_product_iter 1 2 3 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (/ (* (factorial n) 1.0) (* (factorial k) (factorial (- n k))))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (binomial-coefficient n k)\n    (cond ((= k 0) 1)\n          ((= k n) 1)\n          ((= k 1) n)\n          (else (+ (binomial-coefficient (- n 1) (- k 1))\n                   (binomial-coefficient (- n 1) k)))))\n  (define (sum-of-product-helper n k)\n    (cond ((= k n) 0)\n          (else (+ (* (binomial-coefficient n k)\n                      (binomial-coefficient n (+ k 1)))\n                   (sum-of-product-helper n (+ k 1))))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_product n)\n    (if (= n 0)\n        0\n        (+ (binomial_coefficient n 0) (sum_product (- n 1)))))\n  (sum_product n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        0\n        (+ (* (binomial n i) (binomial n (+ i 1))) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (sum_Of_product_iter n i sum)\n    (if (= i n)\n        sum\n        (sum_Of_product_iter n (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (- n k))) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k)\n           (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (product n)\n    (if (= n 0)\n        1\n        (* (binomial n n) (product (- n 1)))))\n  (product n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (binomial n k)\n    (if (= k 0)\n        1\n        (if (= k n)\n            1\n            (+ (binomial (- n 1) (- k 1))\n               (binomial (- n 1) k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1)))\n           (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        0\n        (+ (binomial-coefficient n i) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k 0)\n        sum\n        (sum_Of_product_iter n (- k 1) (+ sum (* (binomial n k) (binomial n (- k 1)))))))\n  (sum_Of_product_iter n n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (binomial-coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial-coefficient (- n 1) (- k 1)))))\n  (define (sum-of-product-helper n i)\n    (if (= i n)\n        0\n        (+ (* (binomial-coefficient n i) (binomial-coefficient n (+ i 1))) (sum-of-product-helper n (+ i 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (product-of-binomial-coefficients n)\n    (if (= n 1)\n        (binomial-coefficient n 1)\n        (* (binomial-coefficient n 1) (product-of-binomial-coefficients (- n 1)))))\n  (define (sum-of-product n)\n    (if (= n 1)\n        (product-of-binomial-coefficients n)\n        (+ (product-of-binomial-coefficients n) (sum-of-product (- n 1)))))\n  (sum-of-product n))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        0\n        (+ (* (binomial n i) (binomial n (+ i 1))) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        (binomial-coefficient n i)\n        (+ (binomial-coefficient n i) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        (binomial n i)\n        (+ (binomial n i) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 1))\n",
    "  (define (fact n)\n    (if (= n 1)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n i)\n    (if (= i n)\n        (binomial n i)\n        (+ (binomial n i) (sum_Of_product_iter n (+ i 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (product_of_binomial_coeff n)\n    (define (factorial n)\n      (if (= n 0)\n          1\n          (* n (factorial (- n 1)))))\n    (define (binomial_coeff n k)\n      (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n    (define (product_of_binomial_coeff_helper n k)\n      (if (= k n)\n          (binomial_coeff n k)\n          (+ (binomial_coeff n k) (product_of_binomial_coeff_helper n (+ k 1)))))\n    (product_of_binomial_coeff_helper n 0))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (product_of_binomial_coeff k)\n        (+ (product_of_binomial_coeff k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_helper n (+ k 1)))))\n  (sum_Of_product_helper n 1))\n",
    "  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1)))\n           (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial x)\n    (if (= x 0)\n        1\n        (* x (factorial (- x 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_of_consecutive_binomial_coefficients n)\n    (if (= n 1)\n        1\n        (+ (binomial_coefficient n 1) (sum_of_product_of_consecutive_binomial_coefficients (- n 1)))))\n  (sum_of_product_of_consecutive_binomial_coefficients n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* (factorial n) 1.0) (* (factorial k) (factorial (- n k))))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (if (= n 0)\n      1\n      (+ (* (binomial n 1) (sum_Of_product (- n 1)))\n         (* (binomial n 2) (sum_Of_product (- n 2)))\n         (* (binomial n 3) (sum_Of_product (- n 3))))))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (product_of_binomial_coefficients n k)\n    (* (binomial_coefficient n k) (binomial_coefficient n (- k 1))))\n  (define (sum_of_product_of_binomial_coefficients n)\n    (if (= n 1)\n        1\n        (+ (product_of_binomial_coefficients n 1) (sum_of_product_of_binomial_coefficients (- n 1)))))\n  (sum_of_product_of_binomial_coefficients n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (if (= k 0)\n        1\n        (/ (* (factorial n) 1.0) (* (factorial k) (factorial (- n k))))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial n k) (binomial n (+ k 1))) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (binomial_coefficient n k)\n    (if (= k 0)\n        1\n        (* (/ n k) (binomial_coefficient (- n 1) (- k 1)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coeff n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k 0)\n        0\n        (+ (binomial_coeff n k) (sum_of_product_helper n (- k 1)))))\n  (sum_of_product_helper n n))\n",
    "  (define (product_of_binomial_coefficients n)\n    (define (factorial n)\n      (if (= n 0)\n          1\n          (* n (factorial (- n 1)))))\n    (define (binomial_coefficient n k)\n      (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n    (define (product_of_binomial_coefficients_iter n k)\n      (if (= k 0)\n          1\n          (* (binomial_coefficient n k) (product_of_binomial_coefficients_iter n (- k 1)))))\n    (product_of_binomial_coefficients_iter n n))\n  (define (sum_of_product_of_binomial_coefficients_iter n)\n    (if (= n 0)\n        0\n        (+ (product_of_binomial_coefficients n) (sum_of_product_of_binomial_coefficients_iter (- n 1)))))\n  (sum_of_product_of_binomial_coefficients_iter n))\n",
    "  (define (sum_Of_product_iter n i sum)\n    (if (= i n)\n        sum\n        (sum_Of_product_iter n (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (product_of_binomial_coefficients n)\n    (if (= n 0)\n        1\n        (* (binomial_coefficient n (- n 1)) (product_of_binomial_coefficients (- n 1)))))\n  (define (sum_of_product_of_binomial_coefficients n)\n    (if (= n 0)\n        1\n        (+ (product_of_binomial_coefficients n) (sum_of_product_of_binomial_coefficients (- n 1)))))\n  (sum_of_product_of_binomial_coefficients n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (+ k 1))) sum))))\n  (sum_Of_product_iter n 1 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 1))\n",
    "  (let loop ([i 1] [sum 0])\n    (cond [(= i n) (+ sum (* (binomial n i) (binomial n (+ i 1))))]\n          [else (loop (+ i 1) (+ sum (* (binomial n i) (binomial n (+ i 1)))))])))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n",
    "  (define (fact n)\n    (if (= n 1)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 1))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ (* (binomial n k) (binomial n (- n k))) sum))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 1)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 1))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (fact n)\n    (if (= n 0)\n        1\n        (* n (fact (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (fact n) (* (fact k) (fact (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        0\n        (+ (* (binomial_coefficient n k) (binomial_coefficient n (+ k 1)))\n           (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n r)\n    (if (= r 0)\n        1\n        (/ (* (factorial n) 1.0) (* (factorial r) (factorial (- n r))))))\n  (define (sum_Of_product_iter n r)\n    (if (= r n)\n        0\n        (+ (* (binomial n r) (binomial n (+ r 1))) (sum_Of_product_iter n (+ r 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial_coefficient n k)\n        (+ (binomial_coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k)\n    (if (= k n)\n        (binomial n k)\n        (+ (binomial n k) (sum_Of_product_iter n (+ k 1)))))\n  (sum_Of_product_iter n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_of_product_helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum_of_product_helper n (+ k 1)))))\n  (sum_of_product_helper n 0))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum_Of_product_iter n k sum)\n    (if (= k n)\n        sum\n        (sum_Of_product_iter n (+ k 1) (+ sum (* (binomial n k) (binomial n (+ k 1)))))))\n  (sum_Of_product_iter n 0 0))\n",
    "  (define (factorial x)\n    (if (= x 0)\n        1\n        (* x (factorial (- x 1)))))\n  (define (binomial_coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (product_of_binomial_coefficients n k)\n    (* (binomial_coefficient n k) (binomial_coefficient n (- k 1))))\n  (define (sum_of_product_of_binomial_coefficients n k)\n    (if (= k 1)\n        (product_of_binomial_coefficients n k)\n        (+ (product_of_binomial_coefficients n k) (sum_of_product_of_binomial_coefficients n (- k 1)))))\n  (sum_of_product_of_binomial_coefficients n n))\n",
    "  (define (factorial n)\n    (if (= n 0)\n        1\n        (* n (factorial (- n 1)))))\n  (define (binomial-coefficient n k)\n    (/ (factorial n) (* (factorial k) (factorial (- n k)))))\n  (define (sum-of-product-helper n k)\n    (if (= k n)\n        (binomial-coefficient n k)\n        (+ (binomial-coefficient n k) (sum-of-product-helper n (+ k 1)))))\n  (sum-of-product-helper n 0))\n"
  ]
}