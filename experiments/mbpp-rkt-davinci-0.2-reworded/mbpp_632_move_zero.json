{
  "name": "mbpp_632_move_zero",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) acc)]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else\n         (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list))\n                  (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond ((null? num_list) '())\n        ((zero? (car num_list))\n         (append (move_zero (cdr num_list)) (list 0)))\n        (else (cons (car num_list) (move_zero (cdr num_list))))))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list (first num_list)))]\n        [else\n         (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else\n         (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else\n         (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (\u03bb (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list))\n             (list 0))]\n    [else\n     (cons (first num_list)\n           (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) (reverse result)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) result)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) result))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (rest num_list) (list (first num_list)))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (rest num_list) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append result (list 0)))]\n      [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list empty))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append acc (list 0)))]\n      [else (move_zero_helper (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_helper num_list (list)))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) acc)]\n          [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list)\n  (filter (lambda (x) (zero? x)) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond ((null? num_list) acc)\n          ((zero? (car num_list)) (move_zero_iter (cdr num_list) (append acc (list 0))))\n          (else (move_zero_iter (cdr num_list) (append acc (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_helper num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append result (list 0)))]\n      [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [else\n     (cond\n       [(zero? (first num_list))\n        (append (move_zero (rest num_list)) (list 0))]\n       [else\n        (cons (first num_list) (move_zero (rest num_list)))])]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) (cons (car num_list) acc))]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) (cdr acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (append (list (first num_list))\n                      (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [else (append (filter (lambda (x) (not (= x 0))) num_list)\n                  (filter (lambda (x) (= x 0)) num_list))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list)\n  (filter (lambda (x) (zero? x)) num_list))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond ((null? num_list) acc)\n          ((zero? (car num_list))\n           (move_zero_iter (cdr num_list) (append acc (list 0))))\n          (else (move_zero_iter (cdr num_list) (append acc (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [else\n     (cond\n       [(zero? (first num_list))\n        (append (move_zero (rest num_list)) (list (first num_list)))]\n       [else\n        (cons (first num_list) (move_zero (rest num_list)))])]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons 0 acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list empty))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond ((null? num_list) (reverse acc))\n          ((zero? (car num_list)) (move_zero_helper (cdr num_list) (cons (car num_list) acc)))\n          (else (move_zero_helper (cdr num_list) (cons (car num_list) acc)))))\n  (move_zero_helper num_list '()))\n",
    "  (define (move_zero_helper num_list acc)\n    (cond ((null? num_list) acc)\n          ((zero? (car num_list)) (move_zero_helper (cdr num_list) (append acc (list 0))))\n          (else (move_zero_helper (cdr num_list) (append acc (list (car num_list)))))))\n  (move_zero_helper num_list '()))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (append (list (first num_list))\n                      (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (= x 0))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n",
    "  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n",
    "  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n",
    "  (filter (lambda (x) (not (zero? x))) num_list))\n"
  ]
}