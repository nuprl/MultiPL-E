{
  "name": "mbpp_56_checks",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to check if a given number is one less than twice its reverse.\n(define (checks n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate checks))\n    (check-equal? (candidate 70) #f)\n    (check-equal? (candidate 23) #f)\n    (check-equal? (candidate 73) #t)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (if (= n (+ 1 (* 2 (reverse-number n))))\n      #t\n      #f))\n",
    "  (let* ([r (string->number (string-reverse (number->string n)))]\n         [d (- (* 2 r) n)])\n    (if (= d 1)\n        #t\n        #f)))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* (modulo n 10) (expt 10 (- (length (number->string n)) 1))) (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (let* ([r (reverse n)]\n         [s (string-append r r)])\n    (and (equal? (- (string->number s) n) 1)\n         (equal? (string-length s) (string-length n)))))\n",
    "  (if (= n (+ (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? r 0)))))\n",
    "  (if (= n (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (= (- (* 2 n) 1) r))))\n",
    "  (let* ([rev (reverse n)]\n         [rev-n (string->number rev)])\n    (= (- (* 2 rev-n) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= n (reverse r)))))\n",
    "  (if (= (- n (* 2 (reverse n))) 1)\n      #t\n      #f))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* 10 (modulo n 10)) (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* 10 (modulo n 10)) (reverse (quotient n 10)))))\n  (= (- (* 2 (reverse n)) n) 1))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (checks r))))\n",
    "  (let ([rev (reverse n)])\n    (and (= (- n 1) (* 2 rev))\n         (not (zero? (remainder n 2))))))\n",
    "  (and (= (- n (reverse n)) 1)\n       (= (modulo n 2) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (modulo n 2))))))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (add1 n) (mul 2 r))\n         (not (equal? n r)))))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      'true\n      'false))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= n (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (add1 n) (mul 2 r))\n         (equal? (add1 r) (mul 2 n)))))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (= (- (* 2 n) 1) r))))\n",
    "  (let ([r (reverse n)])\n    (and (equal? n (sub1 (* 2 r)))\n         (equal? n (sub1 (* 2 r))))))\n",
    "  (if (= (abs n) n)\n      (if (= (- n (* 2 (reverse-digits n))) 1)\n          #t\n          #f)\n      #f))\n",
    "  (if (= n (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (cond\n    [(= n (sub1 (* 2 (reverse-number n)))) #t]\n    [else #f]))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= n (+ (- (* 2 (string->number (number->string (reverse n)))) 1) n))\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (define (iter n r)\n      (if (zero? n)\n          r\n          (iter (quotient n 10) (+ (* r 10) (remainder n 10)))))\n    (iter n 0))\n  (define (twice n)\n    (* 2 n))\n  (define (one-less n)\n    (- n 1))\n  (define (is-equal? n1 n2)\n    (= n1 n2))\n  (is-equal? (one-less (twice (reverse n))) n))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (modulo n 2))))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (remainder n 2))))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-digits n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (define (rev n)\n    (if (= n 0)\n        0\n        (+ (* (remainder n 10) (expt 10 (floor (log n 10))))\n           (rev (quotient n 10)))))\n  (if (= n (- (* 2 (rev n)) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= (modulo n 10) 0)\n      #f\n      (if (= (- n (* 2 (reverse-digits n))) 1)\n          #t\n          #f)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (modulo n 10))))))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1))) (reverse (quotient n 10)))))\n  (if (= (- n (reverse n)) 1)\n      #t\n      #f))\n",
    "  (let ([n (number->string n)])\n    (let ([n (string->number n)])\n      (let ([n (reverse n)])\n        (let ([n (number->string n)])\n          (let ([n (string->number n)])\n            (let ([n (* 2 n)])\n              (let ([n (- n 1)])\n                (let ([n (number->string n)])\n                  (let ([n (string->number n)])\n                    (let ([n (reverse n)])\n                      (let ([n (number->string n)])\n                        (let ([n (string->number n)])\n                          (if (= n n)\n                              (display \"true\")\n                              (display \"false\")))))))))))))))))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= (- n (* 2 (reverse n))) 1)\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (= n r)))))\n",
    "  (let ([n (string->number (number->string n))])\n    (and (= (- n (reverse-number n)) 1)\n         (= (- n (reverse-number n)) 1))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (reverse n)])\n    (and (= (sub1 (* 2 rev)) n)\n         (not (zero? (modulo n 10))))))\n",
    "  (if (= n (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (let* ([r (number->string (reverse n))]\n         [d (string->number r)])\n    (if (= (- n d) 1)\n        #t\n        #f)))\n",
    "  (if (= n (* 2 (- n (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (reverse-number n)])\n    (and (= (- n 1) (* 2 rev))\n         (= n (reverse-number rev)))))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (if (= (- n (reverse n)) 1)\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (remainder n 2))))))\n",
    "  (let ([rev (string->number (string-reverse (number->string n)))])\n    (= (- n rev) 1)))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (let ([r (reverse-number n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([n (string->number (number->string n))])\n    (= n (- (* 2 (reverse n)) 1))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-number n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (* 10 (reverse (quotient n 10))) (remainder n 10))]))\n  (define (twice n)\n    (+ n n))\n  (define (one-less n)\n    (- n 1))\n  (define (is-equal? n1 n2)\n    (= n1 n2))\n  (is-equal? (one-less (twice (reverse n))) n))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([n (number->string n)]\n        [n (string->number (reverse n))])\n    (if (= n (- (* 2 n) 1))\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (= (- (* 2 n) 1) r))))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (= n (- (* 2 (reverse n)) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (= (- (* 2 n) 1) r))))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (sub1 (quotient n 10))))\n           (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (not (zero? (remainder n 2))))))\n",
    "  (if (= n (+ (- (* 2 (reverse n)) 1) (reverse n)))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (checks r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (not (= n r)))))\n",
    "  (let ([n (string->number (number->string n))])\n    (and (= (- n (* 2 (reverse n))) 1)\n         (= (- n (* 2 (reverse n))) 1))))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (equal? r 0)))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (= (- (* 2 n) 1) r))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-digits n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (not (zero? (remainder n 2))))))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (remainder n 2))))))\n",
    "  (if (= (- (* 2 (reverse n)) 1) n)\n      #t\n      #f))\n",
    "  (if (= n (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (define (iter n r)\n      (if (zero? n)\n          r\n          (iter (quotient n 10) (+ (* r 10) (remainder n 10)))))\n    (iter n 0))\n  (define (twice n)\n    (* n 2))\n  (define (one-less n)\n    (- n 1))\n  (define (reverse-twice n)\n    (reverse (twice n)))\n  (define (one-less-reverse-twice n)\n    (one-less (reverse-twice n)))\n  (equal? n (one-less-reverse-twice n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (reverse n)])\n    (and (= (- (string->number n) 1) (* 2 (string->number rev)))\n         (not (equal? n rev)))))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (modulo n 10) (expt 10 (- (number->string n) 1))) (reverse (quotient n 10)))))\n  (if (= n (- (* 2 (reverse n)) 1))\n      'true\n      'false))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= (- n (* 2 (reverse n))) 1)\n        #t\n        #f)))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (let ([n-rev (string->number (string-reverse (number->string n)))])\n    (= (- (* 2 n-rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (- n 1) (* 2 r))\n         (not (equal? n r)))))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* 10 (modulo n 10)) (reverse (quotient n 10)))))\n  (= (- n (reverse n)) 1))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= n (+ (- (* 2 (string->number (number->string (reverse n)))) 1) n))\n        #t\n        #f)))\n",
    "  (if (= n (+ (- (* 2 (reverse n)) 1) (reverse n)))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (zero? (modulo n 10))\n         (zero? (modulo (- n r) 9)))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= n (+ 1 (* 2 (reverse-number n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (if (= n (- (* 2 (reverse n)) 1))\n      #t\n      #f))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (equal? (sub1 (* 2 n)) r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([n-reverse (string->number (string-reverse (number->string n)))]\n        [n-twice (* 2 n-reverse)])\n    (if (= (- n-twice 1) n)\n        #t\n        #f)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let* ([r (reverse n)]\n         [r2 (* 2 r)])\n    (equal? (sub1 r2) n)))\n",
    "  (let ([n (string->number (number->string n))])\n    (if (= (- n (* 2 (string->number (number->string (reverse n)))) 1) 0)\n        #t\n        #f)))\n",
    "  (let* ([rev (reverse-number n)]\n         [twice (* 2 rev)])\n    (equal? (- twice 1) n)))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (equal? (sub1 (* 2 n)) r))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ((r (reverse n)))\n    (= (- (* 2 r) 1) n)))\n",
    "  (define (reverse n)\n    (if (= n 0)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (number->string n) 1)))\n           (reverse (quotient n 10)))))\n  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (if (= (- n (reverse n)) 1)\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (- (* 2 r) 1) n)\n         (not (equal? r n)))))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (- (* 2 r) 1) n)\n         (not (equal? n r)))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-digits n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (let ([rev (reverse n)])\n    (and (= (- n 1) (* 2 rev))\n         (not (zero? (remainder n 2))))))\n",
    "  (let ([n (number->string n)])\n    (and (equal? (string-length n) (string-length (string-reverse n)))\n         (= (- n (string->number (string-reverse n))) 1))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-digits n))))\n      #t\n      #f))\n",
    "  (if (= n (* 2 (- n (reverse n))))\n      #t\n      #f))\n",
    "  (let ([n (number->string n)])\n    (and (equal? (string-length n) (string-length (reverse n)))\n         (= (- n (string->number (reverse n))) 1))))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (length (number->string n)) 1)))\n           (reverse (quotient n 10)))))\n  (= n (- (* 2 (reverse n)) 1)))\n",
    "  (if (= (modulo n 10) 0)\n      false\n      (= (- n (* 2 (reverse n))) 1)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (= (- (* 2 n) 1) r))))\n",
    "  (and (= (modulo n 10) 0)\n       (= (- n (reverse n)) 1)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (and (= n (- (* 2 (reverse n)) 1))\n       (not (zero? n))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= n (reverse r)))))\n",
    "  (let ([n (number->string n)]\n        [r (string-reverse n)])\n    (and (= (string-length n) (string-length r))\n         (= (- (string->number n) 1) (* 2 (string->number r))))))\n",
    "  (if (= n (* 2 (- n (reverse n))))\n      #t\n      #f))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (and (equal? n (- (* 2 r) 1))\n         (not (equal? n r)))))\n",
    "  (and (= n (- (* 2 (reverse n)) 1))\n       (not (zero? n))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (modulo n 2))))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let* ([rev (string-&gt;number (string-reverse (number-&gt;string n)))]\n         [dif (- n (* 2 rev))])\n    (if (= dif 1)\n        #t\n        #f)))\n</code>\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (equal? (sub1 (* 2 n)) r))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (= n (reverse r)))))\n",
    "  (define (reverse n)\n    (cond\n      [(zero? n) 0]\n      [else (+ (* 10 (modulo n 10)) (reverse (quotient n 10)))]))\n  (define (twice n)\n    (* 2 n))\n  (define (one-less n)\n    (- n 1))\n  (define (is-equal? n1 n2)\n    (= n1 n2))\n  (is-equal? (one-less (twice (reverse n))) n))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (add1 n) (mul 2 r))\n         (equal? (add1 r) (mul 2 n)))))\n",
    "  (if (= n (+ (- (* 2 (reverse n)) 1) (reverse n)))\n      #t\n      #f))\n",
    "  (and (= (- n (reverse n)) 1)\n       (= (- n (reverse n)) 1)))\n",
    "  (let ([rev (reverse-digits n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (reverse n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- n 1) (* 2 r))))\n",
    "  (let ([rev (reverse n)])\n    (and (= (- n 1) (* 2 rev))\n         (not (= n rev)))))\n",
    "  (let* ([n-str (number->string n)]\n         [n-rev (string->number (reverse n-str))])\n    (= n (- (* 2 n-rev) 1))))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (remainder n 2))))))\n",
    "  (let ([n-rev (reverse n)])\n    (and (= (- (* 2 n-rev) 1) n)\n         (not (zero? (modulo n 2))))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- (* 2 r) 1) n)\n         (not (zero? (remainder n 2))))))\n",
    "  (if (= n (+ (- (* 2 (reverse n))) 1))\n      #t\n      #f))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- (* 2 rev) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (equal? (- (* 2 r) 1) n)))\n",
    "  (let ([r (reverse n)])\n    (and (equal? (sub1 (* 2 r)) n)\n         (not (zero? (modulo n 10))))))\n",
    "  (let ([n (number->string n)]\n        [n-rev (reverse n)])\n    (if (= (- (* 2 (string->number n-rev)) 1) (string->number n))\n        #t\n        #f)))\n",
    "  (let ((n-str (number->string n))\n        (n-rev (number->string (reverse n))))\n    (and (= (- n (* 2 n-rev)) 1)\n         (not (zero? (modulo n 10))))))\n",
    "  (let ([r (reverse n)])\n    (and (= (- n 1) (* 2 r))\n         (not (zero? (remainder n 2))))))\n",
    "  (if (= n (+ 1 (* 2 (reverse-number n))))\n      #t\n      #f))\n",
    "  (define (reverse n)\n    (if (zero? n)\n        0\n        (+ (* (remainder n 10) (expt 10 (- (quotient n 10) 1))) (reverse (quotient n 10)))))\n  (if (= (- n (reverse n)) 1)\n      #t\n      #f))\n",
    "  (if (= n (+ 1 (* 2 (reverse n))))\n      #t\n      #f))\n",
    "  (let ([r (reverse n)])\n    (= (- (* 2 r) 1) n)))\n",
    "  (let ([rev (reverse-number n)])\n    (= (- (* 2 rev) 1) n)))\n"
  ]
}