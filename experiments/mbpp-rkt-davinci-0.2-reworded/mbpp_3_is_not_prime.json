{
  "name": "mbpp_3_is_not_prime",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to identify non-prime numbers.\n(define (is_not_prime n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_not_prime))\n    (check-equal? (candidate 2) #f)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate 35) #t)\n    (check-equal? (candidate 37) #f)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (is_prime n)\n    (cond ((= n 1) #t)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is_prime_helper n 3))))\n  (not (is_prime n)))\n",
    "  (define (is_prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (not (is_prime n)))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= n 2) #f]\n    [(even? n) #t]\n    [(is_not_prime_helper n 3) #t]\n    [else #f]))\n",
    "  (define (is_prime n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n    (= n (find-divisor n 2)))\n  (not (is_prime n)))\n",
    "  (cond\n    [(= n 1) #t]\n    [(= n 2) #f]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #t]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #t]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #t]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #t]\n    [(= n 26) #t]\n    [(= n 27) #t]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #t]\n    [(= n 34) #t]\n    [(= n 35) #t]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #t]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #t]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #t]\n    [(= n 50) #t]\n    [(= n 51) #",
    "  (and\n   (not (is_prime n))\n   (not (zero? n))))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (not (is_prime n)))\n",
    "  (cond\n    [(= n 1) #true]\n    [(= n 2) #false]\n    [(even? n) #true]\n    [else\n     (for/or ([i (in-range 3 n)])\n       (zero? (modulo n i)))]))\n",
    "  (define (divides? a b)\n    (= (remainder b a) 0))\n  (define (find-divisor n test-divisor)\n    (cond ((> (square test-divisor) n) n)\n          ((divides? test-divisor n) test-divisor)\n          (else (find-divisor n (+ test-divisor 1)))))\n  (not (= n (find-divisor n 2))))\n",
    "  (define (is_prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n          (else (is_prime_helper n 3))))\n  (not (is_prime n)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (not (is_prime n)))\n",
    "  (define (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define (is_prime? n)\n      (cond ((= n 1) #f)\n            ((= n 2) #t)\n            ((is_divisible? n 2) #f)\n            (else (is_prime? (- n 1)))))\n    (is_prime? n))\n  (not (is_prime n)))\n",
    "  (define (is_prime n)\n    (cond\n      [(= n 1) #t]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23) #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(= n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n      [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71) #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(= n 89) #t]\n      [(= n 97) #t]\n      [(= n 101) #t]\n      [(= n 103) #t]\n      [(= n 107) #t]\n      [(= n 109) #t]\n      [(= n 113) #t]\n      [(= n 127) #t]\n      [(= n 131) #t]\n      [(= n 137) #t]\n      [(= n 139) #t]\n      [(= n 149) #t]\n      [(= n 151) #t]\n      [(= n 157) #t]\n      [(= n 163) #t]\n      [(= n 167) #t]\n      [(= n 173) #t]\n      [(= n 179) #t]\n      [(= n 181) #t]\n      [(= n 191) #t]\n      [(= n 193) #t]\n      [(= n 197) #t]\n      [(= n 199) #t]\n      [(= n 211) #t]\n      [(= n 223) #t]\n      [(= n 227) #",
    "  (cond\n    [(= n 1) #t]\n    [(= n 2) #f]\n    [(= n 3) #f]\n    [(= n 4) #t]\n    [(= n 5) #f]\n    [(= n 6) #t]\n    [(= n 7) #f]\n    [(= n 8) #t]\n    [(= n 9) #t]\n    [(= n 10) #t]\n    [(= n 11) #f]\n    [(= n 12) #t]\n    [(= n 13) #f]\n    [(= n 14) #t]\n    [(= n 15) #t]\n    [(= n 16) #t]\n    [(= n 17) #f]\n    [(= n 18) #t]\n    [(= n 19) #f]\n    [(= n 20) #t]\n    [(= n 21) #t]\n    [(= n 22) #t]\n    [(= n 23) #f]\n    [(= n 24) #t]\n    [(= n 25) #t]\n    [(= n 26) #t]\n    [(= n 27) #t]\n    [(= n 28) #t]\n    [(= n 29) #f]\n    [(= n 30) #t]\n    [(= n 31) #f]\n    [(= n 32) #t]\n    [(= n 33) #t]\n    [(= n 34) #t]\n    [(= n 35) #t]\n    [(= n 36) #t]\n    [(= n 37) #f]\n    [(= n 38) #t]\n    [(= n 39) #t]\n    [(= n 40) #t]\n    [(= n 41) #f]\n    [(= n 42) #t]\n    [(= n 43) #f]\n    [(= n 44) #t]\n    [(= n 45) #t]\n    [(= n 46) #t]\n    [(= n 47) #f]\n    [(= n 48) #t]\n    [(= n 49) #t]\n    [(= n 50) #t]\n    [(= n 51) #",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (not (is_prime n)))\n",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (not (is_prime n)))\n",
    "  (cond [(= n 1) #t]\n        [(= n 2) #f]\n        [(even? n) #t]\n        [else\n         (for/or ([i (in-range 3 (floor (sqrt n)) 2)])\n           (= (modulo n i) 0))]))\n",
    "  (define (is_divisible? a b)\n    (= (remainder a b) 0))\n  (define (iter i)\n    (cond ((= i n) #f)\n          ((is_divisible? n i) #t)\n          (else (iter (+ i 1)))))\n  (iter 2))\n",
    "  (define (is_prime n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n      [(= n 4) #f]\n      [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11) #t]\n      [(= n 12) #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(= n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n      [(= n 19) #t]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22) #f]\n      [(= n 23) #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(= n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n      [(= n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33) #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(= n 37) #t]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n      [(= n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44) #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(= n 48) #f]\n      [(= n 49) #f]\n      [(= n 50) #",
    "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (remainder n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (not (is_prime n)))\n"
  ]
}