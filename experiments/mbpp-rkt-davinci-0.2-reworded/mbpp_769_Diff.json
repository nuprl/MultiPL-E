{
  "name": "mbpp_769_Diff",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to get the difference between two lists.\n(define (Diff li1 li2)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Diff))\n    (check-equal? (candidate (list 10 15 20 25 30 35 40) (list 25 40 35)) (list 10 20 30 15))\n    (check-equal? (candidate (list 1 2 3 4 5) (list 6 7 1)) (list 2 3 4 5 6 7))\n    (check-equal? (candidate (list 1 2 3) (list 6 7 1)) (list 2 3 6 7))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(null? li1) '()]\n    [(member (car li1) li2) (Diff (cdr li1) li2)]\n    [else (cons (car li1) (Diff (cdr li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond [(empty? li1) '()]\n        [(empty? li2) li1]\n        [(member (first li1) li2) (Diff (rest li1) li2)]\n        [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(empty? li2) li1]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) '()]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n",
    "  (cond\n    [(empty? li1) empty]\n    [(member (first li1) li2) (Diff (rest li1) li2)]\n    [else (cons (first li1) (Diff (rest li1) li2))]))\n"
  ]
}