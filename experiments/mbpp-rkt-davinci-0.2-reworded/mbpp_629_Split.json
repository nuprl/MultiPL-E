{
  "name": "mbpp_629_Split",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find even numbers from a list of numbers.\n(define (Split list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Split))\n    (check-equal? (candidate (list 1 2 3 4 5)) (list 2 4))\n    (check-equal? (candidate (list 4 5 6 7 8 0 1)) (list 4 6 8 0))\n    (check-equal? (candidate (list 8 12 15 19)) (list 8 12))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (if (null? list)\n      (list '() '())\n      (let* ((rest (Split (cdr list)))\n             (evens (car rest))\n             (odds (cadr rest)))\n        (if (even? (car list))\n            (list (cons (car list) evens) odds)\n            (list evens (cons (car list) odds))))))\n",
    "  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond ((null? list) '())\n        ((even? (car list)) (cons (car list) (Split (cdr list))))\n        (else (Split (cdr list)))))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) (cons '() '())]\n    [(even? (car list))\n     (cons (list (car list)) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) (list '() '())]\n    [(even? (car list))\n     (let* ([pair (Split (cdr list))]\n            [evens (car pair)]\n            [odds (cadr pair)])\n       (list (cons (car list) evens) odds))]\n    [else\n     (let* ([pair (Split (cdr list))]\n            [evens (car pair)]\n            [odds (cadr pair)])\n       (list evens (cons (car list) odds)))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) (list empty empty)]\n    [(even? (first list))\n     (cons (list (first list)) (Split (rest list)))]\n    [else (cons empty (Split (rest list)))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list))\n     (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (if (null? list)\n      (list '() '())\n      (let ((rest (Split (cdr list))))\n        (list (cons (car list) (car rest))\n              (cadr rest)))))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond [(empty? list) empty]\n        [(even? (first list)) (cons (first list) (Split (rest list)))]\n        [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(empty? list) empty]\n    [(even? (first list)) (cons (first list) (Split (rest list)))]\n    [else (Split (rest list))]))\n",
    "  (cond\n    [(null? list) '()]\n    [(even? (car list)) (cons (car list) (Split (cdr list)))]\n    [else (Split (cdr list))]))\n"
  ]
}