{
  "name": "mbpp_479_first_Digit",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (/ n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vcon60i.rkt:18:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vcon60i.rkt:19:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vcon60i.rkt:20:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? (remainder n 10))\n      (first_Digit (/ n 10))\n      (remainder n 10)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn7l5wwgk.rkt:14:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn7l5wwgk.rkt:15:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn7l5wwgk.rkt:16:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:14:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:15:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54ooq0wi.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54ooq0wi.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54ooq0wi.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) \"0\"]\n    [(< n 10) (number->string n)]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ot3zrkp.rkt:15:4\nactual:     \"1\"\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ot3zrkp.rkt:16:4\nactual:     \"4\"\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ot3zrkp.rkt:17:4\nactual:     \"1\"\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) n]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond [(< n 10) n]\n        [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(negative? n) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54ooq0wi.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54ooq0wi.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp54ooq0wi.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7gypgfl.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7gypgfl.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7gypgfl.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:15:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:16:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:17:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [(> n 0) (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124272,
      "stdout": "",
      "stderr": "",
      "exit_code": -1,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkrnfu_d8.rkt:14:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkrnfu_d8.rkt:15:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkrnfu_d8.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (first_Digit (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2ntlu5q.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2ntlu5q.rkt:17:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2ntlu5q.rkt:18:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (/ n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vcon60i.rkt:18:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vcon60i.rkt:19:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1vcon60i.rkt:20:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- 0 n))]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98szf2am.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98szf2am.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp98szf2am.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (positive? n)\n          (first_Digit (quotient n 10))\n          (first_Digit (quotient (- n) 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1qudcgk.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1qudcgk.rkt:17:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1qudcgk.rkt:18:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) (display \"0\")]\n    [(< n 10) (display n)]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "141",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt2wsr6_.rkt:15:4\nactual:     #<void>\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt2wsr6_.rkt:16:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqt2wsr6_.rkt:17:4\nactual:     #<void>\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (/ n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7gypgfl.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7gypgfl.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7gypgfl.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:15:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:16:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:17:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (- (first_Digit (- n)))\n          (if (zero? (remainder n 10))\n              (first_Digit (/ n 10))\n              (remainder n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_mrdi9ro.rkt:18:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_mrdi9ro.rkt:19:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_mrdi9ro.rkt:20:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3_lc7uml.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3_lc7uml.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3_lc7uml.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (< n 10)\n          n\n          (first_Digit (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (positive? n)\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10)))\n          (if (< n -10)\n              (first_Digit (quotient n 10))\n              (- n)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond [(zero? n) n]\n        [(< n 10) n]\n        [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia3yheds.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia3yheds.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia3yheds.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) (display \"0\")]\n    [(= n 1) (display \"1\")]\n    [(= n 2) (display \"2\")]\n    [(= n 3) (display \"3\")]\n    [(= n 4) (display \"4\")]\n    [(= n 5) (display \"5\")]\n    [(= n 6) (display \"6\")]\n    [(= n 7) (display \"7\")]\n    [(= n 8) (display \"8\")]\n    [(= n 9) (display \"9\")]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "141",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpncz2p05z.rkt:23:4\nactual:     #<void>\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpncz2p05z.rkt:24:4\nactual:     #<void>\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpncz2p05z.rkt:25:4\nactual:     #<void>\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) n]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [else (remainder (abs n) 10)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3tza873e.rkt:14:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3tza873e.rkt:15:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3tza873e.rkt:16:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:15:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:16:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:17:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (first_Digit (quotient n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124259,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbyicea51.rkt:14:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbyicea51.rkt:15:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbyicea51.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:14:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:15:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) \"0\"]\n    [(negative? n) (first_Digit (- n))]\n    [(< n 10) (number->string n)]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124259,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7k8x2jrz.rkt:16:4\nactual:     \"1\"\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7k8x2jrz.rkt:17:4\nactual:     \"4\"\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7k8x2jrz.rkt:18:4\nactual:     \"1\"\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:14:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:15:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoay1udzv.rkt:16:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:15:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:16:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:17:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond ((< n 10) n)\n        (else (first_Digit (/ n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124259,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5wnimcl.rkt:13:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5wnimcl.rkt:14:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5wnimcl.rkt:15:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (negative? n)\n          (first_Digit (- n))\n          (if (< n 10)\n              n\n              (first_Digit (quotient n 10))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124259,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 0) (first_Digit (- n))]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:15:4\nactual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:16:4\nactual:     0\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1dygqkj.rkt:17:4\nactual:     0\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:15:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:16:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp2wdbpg.rkt:17:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (modulo n 10))\n          (first_Digit (quotient n 10))\n          (modulo n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr6or2uh_.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(= n 0) 0]\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:15:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:16:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuf1ykeoj.rkt:17:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (/ n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124258,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:14:4\nactual:     123/100\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:15:4\nactual:     114/25\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbhfmr37a.rkt:16:4\nactual:     6/5\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond ((< n 10) n)\n        (else (first_Digit (quotient n 10)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1666124259,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (if (zero? n)\n      0\n      (if (zero? (remainder n 10))\n          (first_Digit (quotient n 10))\n          (remainder n 10))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:16:4\nactual:     3\nexpected:   1\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:17:4\nactual:     6\nexpected:   4\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0hmq9aq.rkt:18:4\nactual:     2\nexpected:   1\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to find the first digit of a given number.\n(define (first_Digit n)\n  (cond\n    [(zero? n) 0]\n    [(< n 10) n]\n    [else (first_Digit (quotient n 10))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate first_Digit))\n    (check-equal? (candidate 123) 1)\n    (check-equal? (candidate 456) 4)\n    (check-equal? (candidate 12) 1)\n))\n\n(test-humaneval)",
      "timestamp": 1665510671,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}