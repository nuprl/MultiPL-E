{
  "name": "mbpp_740_tuple_to_dict",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given list to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/rktthon-convert-list-to-adjacent-pair-hash/\n(define (tuple_to_dict test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_dict))\n    (check-equal? (candidate (list 1 5 7 10 13 5)) #hash((1 .  5) (7 .  10) (13 .  5)))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #hash((1 .  2) (3 .  4) (5 .  6)))\n    (check-equal? (candidate (list 7 8 9 10 11 12)) #hash((7 .  8) (9 .  10) (11 .  12)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([keys (take test_tup half)]\n                [vals (drop test_tup half)])\n            (dict keys vals)))\n        (error \"Length of tuple must be even\"))))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cddr test_tup) (hash-set result (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (if (= tup_len 1)\n            (cons (car test_tup) '())\n            (cons (car test_tup) (tuple_to_dict (cdr test_tup)))))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n",
    "  (let loop ((tup test_tup) (dict '()))\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ((tup test_tup) (dict '()))\n    (if (null? tup)\n        dict\n        (loop (cdr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n"
  ]
}