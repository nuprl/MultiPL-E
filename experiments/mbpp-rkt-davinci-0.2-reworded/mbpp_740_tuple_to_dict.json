{
  "name": "mbpp_740_tuple_to_dict",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to convert the given list to a key-value hash using adjacent elements. https://www.geeksforgeeks.org/rktthon-convert-list-to-adjacent-pair-hash/\n(define (tuple_to_dict test_tup)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate tuple_to_dict))\n    (check-equal? (candidate (list 1 5 7 10 13 5)) #hash((1 .  5) (7 .  10) (13 .  5)))\n    (check-equal? (candidate (list 1 2 3 4 5 6)) #hash((1 .  2) (3 .  4) (5 .  6)))\n    (check-equal? (candidate (list 7 8 9 10 11 12)) #hash((7 .  8) (9 .  10) (11 .  12)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([keys (take test_tup half)]\n                [vals (drop test_tup half)])\n            (dict keys vals)))\n        (error \"Length of tuple must be even\"))))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cddr test_tup) (hash-set result (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (if (= tup_len 1)\n            (cons (car test_tup) '())\n            (cons (car test_tup) (tuple_to_dict (cdr test_tup)))))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n",
    "  (let loop ((tup test_tup) (dict '()))\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ((tup test_tup) (dict '()))\n    (if (null? tup)\n        dict\n        (loop (cdr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (dict-set (tuple_to_dict (sublist test_tup 0 mid))\n                    (list-ref test_tup mid)\n                    (list-ref test_tup (+ mid 1))))\n        (error \"List length is odd\"))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (hash-set dict (car tup) (cadr tup))))))\n",
    "  (cond [(empty? test_tup) empty]\n        [(empty? (rest test_tup)) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (dict-set dict (car tup) (cadr tup))))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (empty? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([test_tup test_tup] [acc '()])\n    (if (null? test_tup)\n        acc\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc)))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([keys (take test_tup half)]\n                [vals (drop test_tup half)])\n            (dict-from-lists keys vals)))\n        (error \"Odd number of elements in tuple\"))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([first_half (take test_tup half)]\n                [second_half (drop test_tup half)])\n            (let ([first_half_keys (map car first_half)]\n                  [second_half_keys (map car second_half)])\n              (let ([first_half_vals (map cdr first_half)]\n                    [second_half_vals (map cdr second_half)])\n                (let ([first_half_dict (dict first_half_keys first_half_vals)]\n                      [second_half_dict (dict second_half_keys second_half_vals)])\n                  (dict-merge first_half_dict second_half_dict)))))\n          )\n        (error \"The list must have an even number of elements.\"))\n    )\n  )\n",
    "  (let ([keys (car test_tup)]\n        [vals (cdr test_tup)])\n    (let loop ([keys keys]\n               [vals vals]\n               [acc '()])\n      (if (null? keys)\n          acc\n          (loop (cdr keys)\n                (cdr vals)\n                (cons (cons (car keys) (car vals)) acc))))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([keys (take test_tup half)]\n                [vals (drop test_tup half)])\n            (dict-from-pairs (map (lambda (k v) (list k v)) keys vals))))\n        (error \"tuple_to_dict: odd number of elements in tuple\"))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (empty? test_tup)\n        result\n        (tuple_to_dict_helper (rest test_tup) (hash-set result (first test_tup) (second test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (define (helper tup acc)\n    (if (null? tup)\n        acc\n        (helper (cddr tup) (hash-set acc (car tup) (cadr tup)))))\n  (helper test_tup (hash)))\n",
    "  (let ([tup_len (length test_tup)]\n        [dict (make-hash)])\n    (for ([i (in-range 0 (- tup_len 1))])\n      (hash-set! dict (list-ref test_tup i) (list-ref test_tup (+ i 1))))\n    dict))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (cond [(empty? test_tup) acc]\n          [(empty? (cdr test_tup)) (cons (cons (car test_tup) (car acc)) acc)]\n          [else (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (car acc)) acc))]))\n  (tuple_to_dict_helper test_tup (list)))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (cond\n      [(empty? test_tup) acc]\n      [(empty? (rest test_tup)) (cons (cons (first test_tup) '()) acc)]\n      [else (tuple_to_dict_helper (rest (rest test_tup)) (cons (cons (first test_tup) (second test_tup)) acc))]))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (cond\n    [(empty? test_tup) '()]\n    [(empty? (rest test_tup)) '()]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (car (cdr test_tup))) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([keys (car test_tup)]\n        [vals (cdr test_tup)])\n    (dict-from-pairs (map (lambda (k v) (list k v)) keys vals))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([test_tup test_tup] [dict '()])\n    (if (null? test_tup)\n        dict\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict)))))\n",
    "  (cond\n    [(empty? test_tup) '()]\n    [(empty? (cdr test_tup)) '()]\n    [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr (cdr test_tup))))]))\n",
    "  (let ([tuple_len (length test_tup)])\n    (cond\n      [(= tuple_len 0) '()]\n      [(= tuple_len 1) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([test_tup test_tup] [acc '()])\n    (if (null? test_tup)\n        acc\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (let ([key (car test_tup)]\n              [val (cadr test_tup)])\n          (cons (cons key val) (tuple_to_dict (cddr test_tup)))))))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let loop ([test_tup test_tup] [dict '()])\n    (if (empty? test_tup)\n        dict\n        (loop (rest (rest test_tup)) (cons (cons (first test_tup) (second test_tup)) dict)))))\n",
    "  (define (tuple_to_dict_iter test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_iter (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_iter test_tup '()))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (cond [(empty? test_tup) empty]\n        [(empty? (rest test_tup)) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup))\n              (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup)\n    (if (null? test_tup)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict_helper (cddr test_tup)))))\n  (tuple_to_dict_helper test_tup))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (for/fold ([dict '()]) ([i (in-range mid)])\n            (dict-set dict (list-ref test_tup (* 2 i)) (list-ref test_tup (+ (* 2 i) 1)))))\n        (error \"List length is not even\"))))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) dict)))))\n",
    "  (cond [(empty? test_tup) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) dict)))))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup))\n              (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (dict-set (tuple_to_dict (take test_tup mid)) (list-ref test_tup mid) (list-ref test_tup (+ mid 1))))\n        (dict))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (hash-from-pairs test_tup))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (hash-set dict (car tup) (cadr tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (cond [(empty? lst) dict]\n          [else (loop (cddr lst) (hash-set dict (car lst) (cadr lst)))])))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (let ([first (first test_tup)]\n              [rest (rest test_tup)])\n          (if (= len 1)\n              (cons first '())\n              (cons first (tuple_to_dict rest)))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(even? len)\n       (let ([mid (quotient len 2)])\n         (for/fold ([acc '()]) ([i (in-range mid)])\n           (cons (cons (list-ref test_tup (* 2 i)) (list-ref test_tup (+ (* 2 i) 1))) acc)))]\n      [(odd? len)\n       (let ([mid (quotient len 2)])\n         (for/fold ([acc '()]) ([i (in-range mid)])\n           (cons (cons (list-ref test_tup (* 2 i)) (list-ref test_tup (+ (* 2 i) 1))) acc)))])))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (hash-set dict (car lst) (cadr lst))))))\n",
    "  (let loop ([test_tup test_tup] [acc '()])\n    (if (null? test_tup)\n        acc\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc)))))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cdr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (define (helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (reverse (helper test_tup '())))\n",
    "  (let ([tuple_len (length test_tup)])\n    (cond\n      [(= tuple_len 0) '()]\n      [(= tuple_len 1) (cons (cons (car test_tup) '()) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (define (helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (helper test_tup '()))\n",
    "  (define (helper tup acc)\n    (if (empty? tup)\n        acc\n        (helper (cddr tup) (hash-set acc (car tup) (cadr tup)))))\n  (helper test_tup (make-hash)))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (hash-set dict (car tup) (cadr tup))))))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (even? tup_len)\n        (let ([key_list (take test_tup (/ tup_len 2))]\n              [val_list (drop test_tup (/ tup_len 2))])\n          (hash-from-pairs (map list key_list val_list)))\n        (error \"The given list is not of even length.\"))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([test_tup test_tup]\n             [acc '()])\n    (if (null? test_tup)\n        acc\n        (loop (cddr test_tup)\n              (cons (cons (car test_tup) (cadr test_tup)) acc)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (hash-set dict (car lst) (cadr lst))))))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([test_tup test_tup] [acc '()])\n    (if (null? test_tup)\n        acc\n        (loop (cddr test_tup)\n              (cons (cons (car test_tup) (cadr test_tup)) acc)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (reverse (tuple_to_dict_helper test_tup '())))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (hash-set dict (car lst) (cadr lst))))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (let ([first-half (take test_tup mid)]\n                [second-half (drop test_tup mid)])\n            (for/fold ([acc '()]) ([i (in-range mid)])\n              (cons (cons (list-ref first-half i) (list-ref second-half i)) acc))))\n        (error \"Length of list is not even\"))))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (hash-set dict (car tup) (cadr tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([kvs (for/list ([i (in-range 0 (- len 1) 2)])\n                     (list (list-ref test_tup i) (list-ref test_tup (+ i 1))))])\n          (apply hash-map kvs))\n        (error \"list length is not even\"))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (cond [(empty? tup) dict]\n          [else (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict))])))\n",
    "  (define (tuple_to_dict_helper test_tup)\n    (if (null? test_tup)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict_helper (cddr test_tup)))))\n  (tuple_to_dict_helper test_tup))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup))\n              (tuple_to_dict (cddr test_tup))))))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cdr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let ([tup_len (length test_tup)])\n    (cond\n      [(zero? tup_len) '()]\n      [(= 1 tup_len) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (cond\n    [(empty? test_tup) '()]\n    [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))]))\n",
    "  (let ([tup_len (length test_tup)])\n    (cond\n      [(zero? tup_len) '()]\n      [(= 1 tup_len) (list (list (car test_tup) '()))]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (hash)))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let loop ([test_tup test_tup]\n             [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup)\n              (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (empty? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (if (null? lst)\n        acc\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) acc)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (hash-from-pairs test_tup))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup)))))))\n",
    "  (let ([keys (car test_tup)]\n        [values (cdr test_tup)])\n    (hash-from-pairs keys values)))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([test_tup test_tup] [dict '()])\n    (if (null? test_tup)\n        dict\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (cond [(= len 0) '()]\n          [(= len 1) (cons (car test_tup) '())]\n          [else (cons (car test_tup) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (cond [(empty? test_tup) empty]\n        [(empty? (rest test_tup)) empty]\n        [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([lst test_tup] [acc '()])\n    (cond [(empty? lst) acc]\n          [(empty? (rest lst)) (cons (cons (first lst) '()) acc)]\n          [else (loop (rest (rest lst)) (cons (cons (first lst) (second lst)) acc))])))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (even? tup_len)\n        (let ([dict (make-hash)])\n          (for ([i (in-range 0 (quotient tup_len 2))])\n            (hash-set! dict (list-ref test_tup (* 2 i)) (list-ref test_tup (+ (* 2 i) 1))))\n          dict)\n        (error \"tuple length is not even\"))))\n",
    "  (let ([tup_len (length test_tup)])\n    (cond\n      [(= tup_len 0) '()]\n      [(= tup_len 1) (cons (car test_tup) '())]\n      [else (cons (car test_tup) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([first-half (take test_tup half)]\n                [second-half (drop test_tup half)])\n            (let ([first-half-dict (tuple_to_dict first-half)]\n                  [second-half-dict (tuple_to_dict second-half)])\n              (let ([first-half-dict-keys (hash-keys first-half-dict)]\n                    [second-half-dict-keys (hash-keys second-half-dict)])\n                (if (and (empty? first-half-dict-keys)\n                         (empty? second-half-dict-keys))\n                    (hash (first test_tup) (second test_tup))\n                    (hash (first first-half-dict-keys) (hash-ref first-half-dict (first first-half-dict-keys))\n                          (first second-half-dict-keys) (hash-ref second-half-dict (first second-half-dict-keys)))))))))\n        (error \"List length must be even\"))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (null? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (cond\n      [(empty? test_tup) acc]\n      [else (tuple_to_dict_helper (cdr test_tup) (hash-set acc (car test_tup) (cadr test_tup)))]))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(= (length test_tup) 1) (cons (cons (first test_tup) empty) empty)]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (letrec ([tuple-to-dict-helper (lambda (tup acc)\n                                   (if (null? tup)\n                                       acc\n                                       (tuple-to-dict-helper (cddr tup) (hash-set acc (car tup) (cadr tup)))))]\n           [tuple-to-dict (lambda (tup)\n                            (tuple-to-dict-helper tup (make-hash)))])\n    (tuple-to-dict test_tup)))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (empty? lst)\n        dict\n        (loop (cddr lst) (hash-set dict (car lst) (cadr lst))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([keys (take test_tup half)]\n                [vals (drop test_tup half)])\n            (dict-from-pairs (map list keys vals))))\n        (error \"The list is not even\"))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup]\n             [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup)\n              (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(= len 0) '()]\n      [(= len 1) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (define (tuple_to_dict_iter test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_iter (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_iter test_tup '()))\n",
    "  (let loop ([test_tup test_tup] [result '()])\n    (if (empty? test_tup)\n        result\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result)))))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (cond [(empty? lst) dict]\n          [else (loop (cddr lst) (hash-set dict (car lst) (cadr lst)))])))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) '()]\n      [(= 1 len) (cons (list (car test_tup) '()) '())]\n      [else (cons (list (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) '()]\n      [(= len 1) (cons (cons (first test_tup) '()) '())]\n      [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))])))\n",
    "  (let loop ([test_tup test_tup] [acc '()])\n    (if (null? test_tup)\n        acc\n        (loop (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc)))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (let ([first (car test_tup)]\n              [second (cadr test_tup)])\n          (cons (cons first second)\n                (tuple_to_dict (cddr test_tup)))))))\n",
    "  (let ([len (length test_tup)])\n    (cond\n      [(zero? len) (hash)]\n      [(= len 1) (hash (list-ref test_tup 0) '())]\n      [else (hash-set (tuple_to_dict (sublist test_tup 1)) (list-ref test_tup 0) (list-ref test_tup 1))])))\n",
    "  (let ([test_tup (reverse test_tup)])\n    (define (helper tup dict)\n      (if (null? tup)\n          dict\n          (helper (cdr tup) (hash-set dict (car tup) (car (cdr tup))))))\n    (helper test_tup (make-hash))))\n</code>\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (hash-set dict (car tup) (cadr tup))))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (let ([tup_len (length test_tup)])\n    (cond\n      [(= tup_len 0) '()]\n      [(= tup_len 1) (cons (car test_tup) '())]\n      [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cddr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (empty? tup)\n        dict\n        (loop (cddr tup) (hash-set dict (car tup) (cadr tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (dict-set (tuple_to_dict (take test_tup mid)) (list-ref test_tup mid) (list-ref test_tup (+ mid 1))))\n        (dict))))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup)))))))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (if (null? lst)\n        dict\n        (loop (cddr lst) (cons (cons (car lst) (cadr lst)) dict)))))\n",
    "  (let ([key (car test_tup)]\n        [val (cadr test_tup)])\n    (hash key val)))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (let ([first-half (take test_tup mid)]\n                [second-half (drop test_tup mid)])\n            (dict-from-pairs (map list first-half second-half))))\n        (error \"The list is not even\"))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([tup_len (length test_tup)])\n    (cond\n      [(= tup_len 0) '()]\n      [(= tup_len 1) (cons (car test_tup) '())]\n      [(= tup_len 2) (cons (car test_tup) (cadr test_tup))]\n      [else (cons (car test_tup) (tuple_to_dict (cdr test_tup)))])))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (define (tuple_to_dict_helper test_tup dict)\n    (if (null? test_tup)\n        dict\n        (tuple_to_dict_helper (cdr test_tup) (hash-set dict (car test_tup) (cadr test_tup)))))\n  (tuple_to_dict_helper test_tup (make-hash)))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([half (quotient len 2)])\n          (let ([keys (take test_tup half)]\n                [vals (drop test_tup half)])\n            (dict keys vals)))\n        (error \"tuple_to_dict: odd length tuple\"))))\n",
    "  (let ([len (length test_tup)])\n    (cond [(= len 0) '()]\n          [(= len 1) (error \"Odd number of elements in the list\")]\n          [else (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))])))\n",
    "  (cond\n    [(empty? test_tup) empty]\n    [(empty? (rest test_tup)) empty]\n    [else (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup))))]))\n",
    "  (let ([len (length test_tup)])\n    (if (= len 0)\n        '()\n        (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (cond\n      [(empty? test_tup) acc]\n      [else (tuple_to_dict_helper (cdr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))]))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let loop ([tup test_tup] [dict '()])\n    (if (null? tup)\n        dict\n        (loop (cddr tup) (cons (cons (car tup) (cadr tup)) dict)))))\n",
    "  (let loop ([lst test_tup] [dict '()])\n    (cond [(empty? lst) dict]\n          [else (loop (cddr lst) (hash-set dict (car lst) (cadr lst)))])))\n",
    "  (let ([tup_len (length test_tup)])\n    (if (= tup_len 0)\n        '()\n        (cons (cons (first test_tup) (second test_tup)) (tuple_to_dict (rest (rest test_tup)))))))\n",
    "  (define (tuple_to_dict_helper test_tup acc)\n    (if (null? test_tup)\n        acc\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) acc))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (let ([len (length test_tup)])\n    (if (even? len)\n        (let ([mid (/ len 2)])\n          (dict-set (tuple_to_dict (take test_tup mid))\n                    (list-ref test_tup (+ mid 1))\n                    (list-ref test_tup mid)))\n        (error \"Odd number of elements in tuple\"))))\n",
    "  (define (tuple_to_dict_helper test_tup result)\n    (if (null? test_tup)\n        result\n        (tuple_to_dict_helper (cddr test_tup) (cons (cons (car test_tup) (cadr test_tup)) result))))\n  (tuple_to_dict_helper test_tup '()))\n",
    "  (if (null? test_tup)\n      '()\n      (cons (cons (car test_tup) (cadr test_tup)) (tuple_to_dict (cddr test_tup)))))\n"
  ]
}