{
  "name": "mbpp_444_trim_tuple",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to trim each list by k in the given list list.\n(define (trim_tuple test_list K)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate trim_tuple))\n    (check-equal? (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 2) \"[(2,), (9,), (2,), (2,)]\")\n    (check-equal? (candidate (list (list 5 3 2 1 4) (list 3 4 9 2 1) (list 9 1 2 3 5) (list 4 8 2 1 7)) 1) \"[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]\")\n    (check-equal? (candidate (list (list 7 8 4 9) (list 11 8 12 4) (list 4 1 7 8) (list 3 6 9 7)) 1) \"[(8, 4), (8, 12), (1, 7), (6, 9)]\")\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst)\n         (cond\n           [(empty? lst) empty]\n           [(<= (length lst) K) lst]\n           [else (take lst K)]))\n       test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (lst)\n         (if (&gt; (length lst) K)\n             (sublist lst 0 K)\n             lst))\n       test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (take x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (trim lst K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (sublist lst K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (sublist lst K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (lst)\n         (map (lambda (x) (- x K)) lst))\n       test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (take lst K)) test_list))\n",
    "  (map (lambda (x) (drop x K)) test_list))\n",
    "  (map (lambda (lst) (take lst K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (list) (trim_list list K)) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (if (null? test_list)\n      '()\n      (cons (trim_list (car test_list) K) (trim_tuple (cdr test_list) K))))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-ref x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (sublist lst K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (list-trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim-list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (sublist x K (sub1 (length x)))) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (list) (trim_list list K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (lst) (trim_list lst K)) test_list))\n",
    "  (map (lambda (x) (list-tail x K)) test_list))\n",
    "  (map (lambda (x) (trim x K)) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n",
    "  (map (lambda (x) (sublist x 0 (- (length x) K))) test_list))\n",
    "  (map (lambda (x) (trim_list x K)) test_list))\n"
  ]
}