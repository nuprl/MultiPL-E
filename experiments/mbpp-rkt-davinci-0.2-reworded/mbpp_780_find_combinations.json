{
  "name": "mbpp_780_find_combinations",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the combinations of sums with lists in the given list list. https://www.geeksforgeeks.org/rktthon-combinations-of-sum-with-lists-in-list-list/\n(define (find_combinations test_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_combinations))\n    (check-equal? (candidate (list (list 2 4) (list 6 7) (list 5 1) (list 6 10))) (list (list 8 11) (list 7 5) (list 8 14) (list 11 8) (list 12 17) (list 11 11)))\n    (check-equal? (candidate (list (list 3 5) (list 7 8) (list 6 2) (list 7 11))) (list (list 10 13) (list 9 7) (list 10 16) (list 13 10) (list 14 19) (list 13 13)))\n    (check-equal? (candidate (list (list 4 6) (list 8 9) (list 7 3) (list 8 12))) (list (list 12 15) (list 11 9) (list 12 18) (list 15 12) (list 16 21) (list 15 15)))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (define (find_combinations_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [(empty? (first test_list)) (find_combinations_helper (rest test_list) result)]\n      [(empty? (rest test_list)) (find_combinations_helper (rest test_list) (append result (list (first test_list))))]\n      [else (find_combinations_helper (rest test_list) (append result (list (first test_list)) (list (append (first test_list) (first (rest test_list))))))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (if (null? test_list)\n        result_list\n        (let ([first_element (car test_list)]\n              [rest_of_list (cdr test_list)])\n          (if (null? rest_of_list)\n              (cons (list first_element) result_list)\n              (let ([first_element_combinations (find_combinations_helper (car first_element) (list))]\n                    [rest_of_list_combinations (find_combinations_helper rest_of_list (list))])\n                (append (map (lambda (x) (cons first_element x)) first_element_combinations)\n                        (map (lambda (x) (cons first_element x)) rest_of_list_combinations)\n                        result_list))))))\n  (find_combinations_helper test_list (list)))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (car test_list)) (find_combinations_helper (cdr test_list) result_list)]\n      [(empty? (cdr test_list)) (find_combinations_helper (cdr test_list) (cons (car test_list) result_list))]\n      [else (find_combinations_helper (cdr test_list) (cons (car test_list) (cons (append (car test_list) (car (cdr test_list))) result_list)))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (first test_list)) (find_combinations_helper (rest test_list) result_list)]\n      [(empty? (rest test_list)) (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list)))))\n      (else (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list) (first (rest test_list))))))))))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (first test_list)) (find_combinations_helper (rest test_list) result_list)]\n      [(empty? (rest test_list)) (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list)))))\n      (else (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list) (first (rest test_list)))))))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (rest test_list)) (cons (list (first test_list)) result_list)]\n      [else\n       (let ([first_element (first test_list)]\n             [rest_list (rest test_list)]\n             [rest_result (find_combinations_helper rest_list result_list)])\n         (append (map (lambda (x) (cons first_element x)) rest_result)\n                 (find_combinations_helper rest_list (cons (list first_element) result_list))))]))\n  (find_combinations_helper test_list '()))\n",
    "  (cond\n    [(empty? test_list) empty]\n    [(empty? (rest test_list)) (list (list (first test_list)))]\n    [else\n     (let ([rest_combinations (find_combinations (rest test_list))])\n       (append\n        (map (lambda (x) (cons (first test_list) x)) rest_combinations)\n        rest_combinations))]))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(null? test_list) result_list]\n      [(null? (car test_list)) (find_combinations_helper (cdr test_list) result_list)]\n      [else\n       (define (find_combinations_helper_2 test_list result_list)\n         (cond\n           [(null? test_list) result_list]\n           [(null? (car test_list)) (find_combinations_helper_2 (cdr test_list) result_list)]\n           [else\n            (define (find_combinations_helper_3 test_list result_list)\n              (cond\n                [(null? test_list) result_list]\n                [(null? (car test_list)) (find_combinations_helper_3 (cdr test_list) result_list)]\n                [else\n                 (define (find_combinations_helper_4 test_list result_list)\n                   (cond\n                     [(null? test_list) result_list]\n                     [(null? (car test_list)) (find_combinations_helper_4 (cdr test_list) result_list)]\n                     [else\n                      (define (find_combinations_helper_5 test_list result_list)\n                        (cond\n                          [(null? test_list) result_list]\n                          [(null? (car test_list)) (find_combinations_helper_5 (cdr test_list) result_list)]\n                          [else\n                           (define (find_combinations_helper_6 test_list result_list)\n                             (cond\n                               [(null? test_list) result_list]\n                               [(null? (car test_list)) (find_combinations_helper_6 (cdr test_list) result_list)]\n                               [else\n                                (define (find_combinations_helper_7 test_list result_list)\n                                  (cond\n                                    [(null? test_list) result_list]\n                                    [(null? (car test_list)) (find_combinations_helper_7 (",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (define first_element (first test_list))\n       (define rest_of_list (rest test_list))\n       (define new_result_list (append result_list (list (list first_element))))\n       (define new_result_list (append new_result_list (list (list (first first_element)))))\n       (define new_result_list (append new_result_list (list (list (second first_element)))))\n       (define new_result_list (append new_result_list (list (list (first first_element) (second first_element)))))\n       (find_combinations_helper rest_of_list new_result_list)]))\n  (find_combinations_helper test_list '()))\n",
    "  (let loop ([lst test_list] [acc '()])\n    (cond\n      [(empty? lst) acc]\n      [(list? (first lst)) (loop (rest lst) (append acc (find_combinations (first lst))))]\n      [else (loop (rest lst) (append acc (list (first lst))))])))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (first test_list)) (find_combinations_helper (rest test_list) result_list)]\n      [else (find_combinations_helper (rest test_list) (append result_list (map (lambda (x) (cons (first test_list) x)) (find_combinations_helper (rest test_list) result_list))))]))\n  (find_combinations_helper test_list (list (list))))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (let* ([first_element (first test_list)]\n              [rest_list (rest test_list)]\n              [first_element_sum (apply + first_element)]\n              [rest_list_sum (apply + (map (lambda (x) (apply + x)) rest_list))])\n         (cond\n           [(= first_element_sum rest_list_sum)\n            (find_combinations_helper rest_list (cons (cons first_element rest_list) result_list))]\n           [else\n            (find_combinations_helper rest_list result_list)]))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result)\n    (cond\n      [(empty? test_list) result]\n      [else\n       (define (find_combinations_helper_helper test_list result)\n         (cond\n           [(empty? test_list) result]\n           [else\n            (define (find_combinations_helper_helper_helper test_list result)\n              (cond\n                [(empty? test_list) result]\n                [else\n                 (define (find_combinations_helper_helper_helper_helper test_list result)\n                   (cond\n                     [(empty? test_list) result]\n                     [else\n                      (define (find_combinations_helper_helper_helper_helper_helper test_list result)\n                        (cond\n                          [(empty? test_list) result]\n                          [else\n                           (define (find_combinations_helper_helper_helper_helper_helper_helper test_list result)\n                             (cond\n                               [(empty? test_list) result]\n                               [else\n                                (define (find_combinations_helper_helper_helper_helper_helper_helper_helper test_list result)\n                                  (cond\n                                    [(empty? test_list) result]\n                                    [else\n                                     (define (find_combinations_helper_helper_helper_helper_helper_helper_helper_helper test_list result)\n                                       (cond\n                                         [(empty? test_list) result]\n                                         [else\n                                          (define (find_combinations_helper_helper_helper_helper_helper_helper_helper_helper_helper test_list result)\n                                            (cond\n                                              [(empty? test_list) result]\n                                              [else\n                                               (define (find_combinations_helper_helper_helper_helper_helper_helper_helper_helper_helper_helper test_list result)\n                                                 (cond\n                                                   [(empty",
    "  (define (find_combinations_helper test_list result)\n    (if (null? test_list)\n        result\n        (let ([first (car test_list)]\n              [rest (cdr test_list)])\n          (if (list? first)\n              (find_combinations_helper rest (append result (list (apply + first))))\n              (find_combinations_helper rest (append result (list first)))))))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (first test_list)) (find_combinations_helper (rest test_list) result_list)]\n      [(empty? (rest test_list)) (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list))))) ]\n      [else (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list) (first (rest test_list))))))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list current_list)\n    (cond\n      [(null? test_list) (list current_list)]\n      [(list? (car test_list))\n       (append (find_combinations_helper (cdr test_list) (append current_list (car test_list)))\n               (find_combinations_helper (cdr test_list) current_list))]\n      [else (append (find_combinations_helper (cdr test_list) (append current_list (list (car test_list))))\n                    (find_combinations_helper (cdr test_list) current_list))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (find_combinations_helper test_list combinations)\n    (if (null? test_list)\n        combinations\n        (find_combinations_helper (cdr test_list)\n                                  (append combinations\n                                          (map (lambda (x) (cons (car test_list) x))\n                                               combinations)))))\n  (find_combinations_helper test_list (list (list))))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [(empty? (first test_list)) (find_combinations_helper (rest test_list) result_list)]\n      [(empty? (rest test_list)) (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list))))) ]\n      [else (find_combinations_helper (rest test_list) (append result_list (list (list (first test_list)) (list (first test_list) (first (rest test_list))))))]))\n  (find_combinations_helper test_list '()))\n",
    "  (define (helper test_list acc)\n    (cond\n      [(empty? test_list) (list acc)]\n      [(list? (first test_list))\n       (append (helper (rest test_list) (append acc (first test_list)))\n               (helper (rest test_list) acc))]\n      [else (helper (rest test_list) (append acc (list (first test_list))))]))\n  (helper test_list '()))\n",
    "  (define (find_combinations_helper test_list result_list)\n    (cond\n      [(empty? test_list) result_list]\n      [else\n       (let ([first (first test_list)]\n             [rest (rest test_list)])\n         (find_combinations_helper rest\n                                   (append result_list\n                                           (map (lambda (x) (cons first x))\n                                                result_list))))]))\n  (find_combinations_helper test_list (list (list))))\n"
  ]
}