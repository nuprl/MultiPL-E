{
  "name": "mbpp_440_find_adverb_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverb_position))\n    (check-equal? (candidate \"clearly!! we can see the sky\") (list 0 7 \"clearly\"))\n    (check-equal? (candidate \"seriously!! there are many roses\") (list 0 9 \"seriously\"))\n    (check-equal? (candidate \"unfortunately!! sita is going to home\") (list 0 13 \"unfortunately\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (adverb) (list-index adverb words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (list (first text) (second text))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (pos-tagged-list text)))\n",
    "  (define adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (null? adverbs)\n        '()\n        (if (string-contains text (car adverbs))\n            (cons (car adverbs) (cons (string-index text (car adverbs)) (find-adverb-position-helper text (cdr adverbs))))\n            (find-adverb-position-helper text (cdr adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))]\n               [adverb (in-list adverbs)])\n      (if (string=? word adverb)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(and (equal? (first text) \" \") (equal? (second text) \" \")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \",\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \".\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"!\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"?\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \";\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \":\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"\\\"\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"'\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"(\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \")\")) (find-adverb-position-hel",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"loudly\" \"quietly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)])\n    (if (empty? adverbs)\n        (list \"No adverbs found\" 0)\n        (list (first adverbs) (position (first adverbs) words)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [positions (in-positions (lambda (x) (string=? adverb x)) (string-split text))])\n      (list adverb positions))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"eagerly\"))) words)]\n         [positions (map (lambda (word) (list-index word words)) adverbs)])\n    (cons adverbs positions)))\n",
    "  (let ((adverbs (list)))\n    (for/list ([word (in-list (string-split text))]\n               [position (in-naturals)])\n      (if (adverb? word)\n          (cons word position)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (\u03bb (x) (string-contains x \"ly\")) words)])\n    (if (empty? adverbs)\n        (printf \"No adverbs found.\\n\")\n        (printf \"The first adverb is: ~a\\n\" (first adverbs))\n        (printf \"The position of the first adverb is: ~a\\n\" (position (first adverbs) words)))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"quickly\")\n            (cons (cons (first text) pos) (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index text word)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (adverb) (string-index text adverb)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (if (empty? text)\n        adverb-list\n        (if (equal? (first text) \"adverb\")\n            (find-adverb-position-helper (rest text) (cons (list (first text) (second text)) adverb-list))\n            (find-adverb-position-helper (rest text) adverb-list))))\n  (find-adverb-position-helper text '()))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"adverb\")\n            (cons pos (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper text 0))\n"
  ]
}