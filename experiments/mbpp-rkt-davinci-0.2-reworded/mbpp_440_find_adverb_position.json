{
  "name": "mbpp_440_find_adverb_position",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find the first adverb and their positions in a given sentence.\n(define (find_adverb_position text)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_adverb_position))\n    (check-equal? (candidate \"clearly!! we can see the sky\") (list 0 7 \"clearly\"))\n    (check-equal? (candidate \"seriously!! there are many roses\") (list 0 9 \"seriously\"))\n    (check-equal? (candidate \"unfortunately!! sita is going to home\") (list 0 13 \"unfortunately\"))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (adverb) (list-index adverb words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (list (first text) (second text))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (pos-tagged-list text)))\n",
    "  (define adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (null? adverbs)\n        '()\n        (if (string-contains text (car adverbs))\n            (cons (car adverbs) (cons (string-index text (car adverbs)) (find-adverb-position-helper text (cdr adverbs))))\n            (find-adverb-position-helper text (cdr adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))]\n               [adverb (in-list adverbs)])\n      (if (string=? word adverb)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(and (equal? (first text) \" \") (equal? (second text) \" \")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \",\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \".\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"!\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"?\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \";\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \":\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"\\\"\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"'\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \"(\")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(and (equal? (first text) \" \") (equal? (second text) \")\")) (find-adverb-position-hel",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"loudly\" \"quietly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)])\n    (if (empty? adverbs)\n        (list \"No adverbs found\" 0)\n        (list (first adverbs) (position (first adverbs) words)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [positions (in-positions (lambda (x) (string=? adverb x)) (string-split text))])\n      (list adverb positions))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"eagerly\"))) words)]\n         [positions (map (lambda (word) (list-index word words)) adverbs)])\n    (cons adverbs positions)))\n",
    "  (let ((adverbs (list)))\n    (for/list ([word (in-list (string-split text))]\n               [position (in-naturals)])\n      (if (adverb? word)\n          (cons word position)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (\u03bb (x) (string-contains x \"ly\")) words)])\n    (if (empty? adverbs)\n        (printf \"No adverbs found.\\n\")\n        (printf \"The first adverb is: ~a\\n\" (first adverbs))\n        (printf \"The position of the first adverb is: ~a\\n\" (position (first adverbs) words)))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"quickly\")\n            (cons (cons (first text) pos) (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index text word)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (adverb) (string-index text adverb)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (if (empty? text)\n        adverb-list\n        (if (equal? (first text) \"adverb\")\n            (find-adverb-position-helper (rest text) (cons (list (first text) (second text)) adverb-list))\n            (find-adverb-position-helper (rest text) adverb-list))))\n  (find-adverb-position-helper text '()))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) \"adverb\")\n            (cons pos (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          ((equal? (car text) \"slowly\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          ((equal? (car text) \"carefully\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          (else (find-adverb-position-iter (cdr text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([acc '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (string-index text word)) acc))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"lazily\" \"noisily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"loudly\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"slowly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"happily\") (list (car text) (cadr text)))\n          ((equal? (car text) \"sadly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"angrily\") (list (car text) (cadr text)))\n          ((equal? (car text) \"fearfully\") (list (car text) (cadr text)))\n          ((equal? (car text) \"calmly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"carefully\") (list (car text) (cadr text)))\n          ((equal? (car text) \"loudly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"quietly\") (list (car text) (cadr text)))\n          (else (find-adverb-helper (cdr text)))))\n  (find-adverb-helper text))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (equal? word adverb)\n        (list word (position word (string-split text)))))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)])\n    (if (empty? adverbs)\n        \"No adverbs found\"\n        (list (car adverbs) (position (car adverbs) words)))))\n",
    "  (let* ((words (string-split text))\n         (adverbs (filter (lambda (word) (string-contains word \"ly\")) words)))\n    (map (lambda (adverb) (list adverb (list-index adverb words))) adverbs)))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (list (first text) (second text))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (pos-tag text)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"loudly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"eagerly\" \"happily\" \"sadly\")])\n    (let loop ([text text] [pos 0])\n      (cond\n        [(empty? text) '()]\n        [(member (first text) adverbs) (list (first text) pos)]\n        [else (loop (rest text) (+ pos 1))]))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found!\")\n        (list (first adverbs) (regexp-index (first adverbs) text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")]\n        [positions (list)])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (string=? word adverb)\n        (set! positions (cons (string-index text word) positions))))\n    (reverse positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")]\n        [positions (list)])\n    (for ([adverb adverbs])\n      (let ([position (string-index text adverb)])\n        (if (not (eq? position #f))\n            (set! positions (append positions (list position))))))\n    (if (empty? positions)\n        #f\n        (sort positions <))))\n",
    "  (define (find_adverb_position_iter text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) \"very\") (cons (cons (car text) pos) '()))\n          ((equal? (car text) \"much\") (cons (cons (car text) pos) '()))\n          ((equal? (car text) \"so\") (cons (cons (car text) pos) '()))\n          ((equal? (car text) \"too\") (cons (cons (car text) pos) '()))\n          ((equal? (car text) \"enough\") (cons (cons (car text) pos) '()))\n          (else (find_adverb_position_iter (cdr text) (+ pos 1)))))\n  (find_adverb_position_iter text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons word result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"loudly\")])\n    (for ([word (in-list (string-split text))]\n          [adverb (in-list adverbs)])\n      (when (equal? word adverb)\n        (list word (string-index text word))))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/list ([adverb adverbs]\n               #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (let* ([words (string-split text)]\n         [positions (for/list ([word words])\n                      (if (string-contains word \"ly\")\n                          (list (string-index word \"ly\") word)\n                          #f))])\n    (filter (lambda (x) (not (eq? x #f))) positions)))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(equal? (first text) 'adverb) (cons pos (find-adverb-position-iter (rest text) (+ pos 1)))]\n      [else (find-adverb-position-iter (rest text) (+ pos 1))]))\n  (find-adverb-position-iter text 0))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (cond ((null? text) '())\n            ((equal? (car text) 'adverb) (list (car (cdr text)) (car (cdr (cdr text)))))\n            (else (find-adverb-helper (cdr text)))))\n    (find-adverb-helper (cdr text)))\n  (find-adverb (sentence->word-pos-tags text)))\n",
    "  (define (find_adverb_position-iter text pos)\n    (cond\n      [(empty? text) pos]\n      [(string=? (first text) \" \") (find_adverb_position-iter (rest text) (add1 pos))]\n      [(string=? (first text) \",\") (find_adverb_position-iter (rest text) (add1 pos))]\n      [(string=? (first text) \".\") (find_adverb_position-iter (rest text) (add1 pos))]\n      [(string=? (first text) \"!\") (find_adverb_position-iter (rest text) (add1 pos))]\n      [(string=? (first text) \"?\") (find_adverb_position-iter (rest text) (add1 pos))]\n      [(string=? (first text) \"ly\") (find_adverb_position-iter (rest text) (add1 pos))]\n      [else (find_adverb_position-iter (rest text) (add1 pos))]))\n  (find_adverb_position-iter text 0))\n",
    "  (define (find_adverb_position-iter text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find_adverb_position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201a\")",
    "  (let ((adverbs (list)))\n    (for/list ([word (in-list (string-split text #\\space))])\n      (if (equal? (get-pos word) 'adv)\n          (cons word (list (position word (string-split text #\\space))))\n          (cons '() '())))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\" \"angrily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([positions '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) positions)\n          positions))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (string-index text word)) result))))\n",
    "  (let ((adverbs (list)))\n    (for ([word (in-list (string-split text))])\n      (when (adverb? word)\n        (set! adverbs (append adverbs (list word)))))\n    adverbs))\n",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(string-contains? (first text) \"ly\") (cons (first text) (cons (string-index (first text) \"ly\") empty))]\n      [else (find-adverb-position-helper (rest text))]))\n  (find-adverb-position-helper (string-split text)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (adverb) (find-first-index (lambda (word) (string=? adverb word)) words)) adverbs)])\n    (map (lambda (adverb position) (list adverb position)) adverbs positions)))\n",
    "  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((equal? (cadr text) 'ADV) (list (car text) (cadr text)))\n          (else (find-adverb (cdr text)))))\n  (find-adverb text))\n",
    "  (define adverbs '(\"quickly\" \"slowly\" \"carefully\" \"loudly\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (null? adverbs)\n        '()\n        (if (string-contains text (car adverbs))\n            (cons (car adverbs) (string-index text (car adverbs)))\n            (find-adverb-position-helper text (cdr adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (string-contains x adverb))\n                                   (string-split text))])\n      (list adverb pos))))\n",
    "  (define adverbs '(\"quickly\" \"slowly\" \"happily\" \"sadly\"))\n  (define (find-adverb-position-helper text adverbs)\n    (if (null? adverbs)\n        '()\n        (if (string-contains text (car adverbs))\n            (cons (car adverbs) (cons (string-index text (car adverbs)) '()))\n            (find-adverb-position-helper text (cdr adverbs)))))\n  (find-adverb-position-helper text adverbs))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (cond ((null? text) '())\n            ((equal? (car text) \"very\") (list (car text) (cadr text)))\n            ((equal? (car text) \"much\") (list (car text) (cadr text)))\n            ((equal? (car text) \"so\") (list (car text) (cadr text)))\n            ((equal? (car text) \"how\") (list (car text) (cadr text)))\n            ((equal? (car text) \"too\") (list (car text) (cadr text)))\n            (else (find-adverb-helper (cdr text)))))\n    (find-adverb-helper text))\n  (find-adverb text))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (cond\n      [(empty? text) adverb-list]\n      [(equal? (first text) \" \") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \",\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \".\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"!\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"?\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \";\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \":\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"\\\"\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"\\'\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"(\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \")\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"[\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"]\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"{\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"}\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(equal? (first text) \"&\") (find",
    "  (define (find_adverb_position_helper text adverb-list)\n    (if (empty? text)\n        adverb-list\n        (let ((word (first text))\n              (position (add1 (length adverb-list))))\n          (if (equal? (part-of-speech word) 'adverb)\n              (find_adverb_position_helper (rest text) (append adverb-list (list (list word position))))\n              (find_adverb_position_helper (rest text) adverb-list)))))\n  (find_adverb_position_helper (sentence->word-list text) '()))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b[A-Za-z]+ly\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx\"\\b\" adverb text)))))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        (cons '() '())\n        (if (equal? (first text) 'adverb)\n            (cons (first text) (cons (list (first (rest text))) '()))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper text))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (cond\n        [(empty? text) empty]\n        [(string-contains? (first text) \"ly\") (cons (first text) (find-adverb-helper (rest text)))]\n        [else (find-adverb-helper (rest text))]))\n    (find-adverb-helper (string-split text #\\space)))\n  (define (find-adverb-position text)\n    (define (find-adverb-position-helper text)\n      (cond\n        [(empty? text) empty]\n        [(string-contains? (first text) \"ly\") (cons (string-index (first text) \"ly\") (find-adverb-position-helper (rest text)))]\n        [else (find-adverb-position-helper (rest text))]))\n    (find-adverb-position-helper (string-split text #\\space)))\n  (list (find-adverb text) (find-adverb-position text)))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((string=? (car text) \"very\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          (else (find-adverb-position-iter (cdr text) (+ pos 1)))))\n  (find-adverb-position-iter (string-split text) 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b[a-zA-Z]+ly\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx\"\\b[a-zA-Z]+ly\\b\" text)))))\n",
    "  (let* ([sentences (sentencify text)]\n         [sentence (car sentences)]\n         [words (wordify sentence)])\n    (find-first-adverb words)))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b[a-zA-Z]+ly\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx\"\\b[a-zA-Z]+ly\\b\" text)))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(equal? (first text) \"adverb\") (cons (first text) (cons (second text) empty))]\n      [else (find-adverb-position-helper (rest text))]))\n  (find-adverb-position-helper (sentence->word-position-list text)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \"quickly\") (cons (first text) (find-adverb (rest text)))]\n      [(string=? (first text) \"slowly\") (cons (first text) (find-adverb (rest text)))]\n      [(string=? (first text) \"happily\") (cons (first text) (find-adverb (rest text)))]\n      [(string=? (first text) \"sadly\") (cons (first text) (find-adverb (rest text)))]\n      [else (find-adverb (rest text))]))\n  (find-adverb text))\n",
    "  (let ([adverb-list (list 'quickly 'slowly 'carefully 'happily 'sadly 'angrily 'lazily 'loudly 'quietly)])\n    (for/fold ([result '()])\n              ([adverb adverb-list])\n              (let ([position (string-index text adverb)])\n                (if (not (eq? position #f))\n                    (cons (list adverb position) result)\n                    result)))))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (cond ((null? text) adverb-list)\n          ((equal? (car text) \"very\")\n           (find-adverb-position-helper (cdr text) (cons (list (car text) (length adverb-list)) adverb-list)))\n          ((equal? (car text) \"much\")\n           (find-adverb-position-helper (cdr text) (cons (list (car text) (length adverb-list)) adverb-list)))\n          ((equal? (car text) \"so\")\n           (find-adverb-position-helper (cdr text) (cons (list (car text) (length adverb-list)) adverb-list)))\n          ((equal? (car text) \"really\")\n           (find-adverb-position-helper (cdr text) (cons (list (car text) (length adverb-list)) adverb-list)))\n          (else (find-adverb-position-helper (cdr text) adverb-list))))\n  (find-adverb-position-helper text '()))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        empty\n        (if (equal? (first text) \"adverb\")\n            (cons (first text) (cons (second text) empty))\n            (find-adverb-position-helper (rest text)))))\n  (find-adverb-position-helper (sentence->word-position-list text)))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) empty]\n      [(and (string=? (first text) \" \") (string=? (second text) \" \")) (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n     ",
    "  (let ([adverbs (regexp-match* #rx\"\\b[a-zA-Z]+ly\\b\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found!\")\n        (list (car adverbs) (regexp-match-positions #rx\"\\b[a-zA-Z]+ly\\b\" text)))))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (if (empty? text)\n          (error \"No adverb found\")\n          (if (equal? (first text) \"adverb\")\n              (first text)\n              (find-adverb-helper (rest text)))))\n    (find-adverb-helper (parse-sentence text)))\n  (find-adverb text))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) \"very\") (cons pos (find-adverb-position-helper (cdr text) (+ pos 1))))\n          (else (find-adverb-position-helper (cdr text) (+ pos 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (define adverbs '(quickly slowly))\n  (define (find-adverb text)\n    (cond\n      [(empty? text) '()]\n      [(member (first text) adverbs) (list (first text) (first (rest text)))]\n      [else (find-adverb (rest text))]))\n  (find-adverb text))\n",
    "  (let* ([tagged (pos-tag-string text)]\n         [adverbs (filter (lambda (x) (equal? (cadr x) 'RB)) tagged)]\n         [adverb-positions (map (lambda (x) (list (car x) (cadr x))) adverbs)])\n    adverb-positions))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (cond\n        [(member word adverbs)\n         (cons (list word (position word (string-split text))) result)]\n        [else result]))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index adverb text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")]\n        [positions (list)])\n    (for ([adverb adverbs])\n      (let ([position (string-index text adverb)])\n        (if (not (eq? position #f))\n            (set! positions (append positions (list position))))))\n    (if (empty? positions)\n        (list #f)\n        positions)))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \"quickly\") (cons (first text) (cons (position (first text) text) empty))]\n      [(string=? (first text) \"slowly\") (cons (first text) (cons (position (first text) text) empty))]\n      [else (find-adverb (rest text))]))\n  (find-adverb text))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\.)])\n        (if (and (not (null? pos))\n                 (string=? (string-downcase (substring word (add1 pos))) \"ly\"))\n            (cons (list (substring word 0 pos) (add1 pos)) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")]\n        [positions (list)])\n    (for ([adverb adverbs])\n      (let ([position (string-index text adverb)])\n        (if (not (eq? position #f))\n            (set! positions (cons position positions)))))\n    (reverse positions)))\n",
    "  (let ((adverb-list (list \"quickly\" \"slowly\" \"carefully\" \"lazily\" \"happily\" \"sadly\" \"angrily\" \"excitedly\" \"joyfully\" \"loudly\" \"quietly\" \"noisily\" \"calmly\" \"peacefully\" \"cheerfully\" \"merrily\" \"playfully\" \"politely\" \"rudely\" \"sarcastically\" \"seriously\" \"shyly\" \"sincerely\" \"sleepily\" \"smoothly\" \"softly\" \"speedily\" \"stealthily\" \"sternly\" \"strangely\" \"stupidly\" \"suspiciously\" \"swiftly\" \"tenderly\" \"tensely\" \"thoughtfully\" \"tightly\" \"tiredly\" \"tremendously\" \"triumphantly\" \"truthfully\" \"unexpectedly\" \"vigorously\" \"violently\" \"warmly\" \"weakly\" \"wearily\" \"wildly\" \"wisely\" \"worriedly\" \"wryly\" \"zealously\" \"zestfully\" \"zestily\")))\n    (for/first ([adverb adverb-list]\n                [pos (in-list (string-indexes text adverb))])\n      (cons adverb pos))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")))\n    (for/first ([adverb adverbs]\n                [position (in-indexes (regexp-match* #rx\"\\w+\" text))])\n      (if (string=? adverb (list-ref text position))\n          (list adverb position)))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond\n      [(empty? text) empty]\n      [(adverb? (first text)) (cons (first text) (cons (position (first text) text) empty))]\n      [else (find-adverb-position-helper (rest text))]))\n  (find-adverb-position-helper (tokenize text)))\n",
    "  (define (find-adverb-position-helper text-list)\n    (cond\n      [(empty? text-list) empty]\n      [(and (string=? (first text-list) \"very\") (string=? (second text-list) \"good\"))\n       (cons (first text-list) (cons (second text-list) (cons (third text-list) empty)))]\n      [else (find-adverb-position-helper (rest text-list))]))\n  (find-adverb-position-helper (string-split text)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([adverb adverbs])\n      (let ([pos (string-index text adverb)])\n        (if (not (equal? pos #f))\n            (cons (list adverb pos) result)\n            result)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [else (cons (list (first text) pos) (find-adverb-position-helper (rest text) (+ pos 1)))]))\n  (find-adverb-position-helper text 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"elegantly\" \"noisily\"))) words)]\n         [adverb-positions (map (lambda (adverb) (member-position adverb words)) adverbs)])\n    (list adverbs adverb-positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"eagerly\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))]\n                              [index (in-naturals)])\n      (if (member word adverbs)\n          (cons (list word index) result)\n          result))))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-first-adverb text adverb)))))\n",
    "  (let* ((words (string-split text))\n         (adverbs (filter (lambda (word) (string-contains word \"ly\")) words)))\n    (list (first adverbs) (position (first adverbs) words))))\n",
    "  (define (find-adverb text)\n    (cond\n      [(empty? text) empty]\n      [(eq? (first text) 'adverb) (first text)]\n      [else (find-adverb (rest text))]))\n  (define (find-adverb-position text)\n    (cond\n      [(empty? text) empty]\n      [(eq? (first text) (find-adverb text)) (first text)]\n      [else (find-adverb-position (rest text))]))\n  (list (find-adverb text) (find-adverb-position text)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (x) (string-contains x \"ly\")) words)]\n         [positions (map (lambda (x) (string-index x text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let* ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")]\n         [words (string-split text #\\space)]\n         [positions (map (lambda (word) (if (member word adverbs) (list word (position word words)) #f)) words)])\n    (filter (lambda (x) (not (eq? x #f))) positions)))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (cond ((empty? text) '())\n            ((equal? (first text) 'adverb) (list (first text) (second text)))\n            (else (find-adverb-helper (rest text)))))\n    (find-adverb-helper (sentence->word-pos-tags text)))\n  (find-adverb text))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (string-index text word)) result))))\n",
    "  (let ((adverbs (list)))\n    (for ((word (in-list (string-split text))))\n      (if (adverb? word)\n          (set! adverbs (cons (list word (position word (string-split text))) adverbs))))\n    (reverse adverbs)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)])\n    (if (empty? adverbs)\n        (list \"No adverb found!\")\n        (list (first adverbs) (list-index (first adverbs) words)))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-suffix? \"ly\" word)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (let ([pos (string-index word #\\.)])\n        (if (and pos (equal? (substring word pos (+ pos 3)) \"ly\"))\n            (cons (list (substring word 0 pos) (length result)) result)\n            result)))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) 'adverb) (list (car (cdr text)) (car (cdr (cdr text)))))\n          (else (find-adverb-position-helper (cdr text)))))\n  (find-adverb-position-helper (pos-tag text)))\n",
    "  (let* ([words (string-split text)]\n         [positions (map (lambda (word) (string-index word \"ly\")) words)]\n         [positions-filtered (filter (lambda (position) (not (equal? position #f))) positions)])\n    (if (empty? positions-filtered)\n        (error \"No adverb found\")\n        (list (list-ref words (car positions-filtered)) (car positions-filtered)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index text word)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([adverbs (list-ref (pos-tag text) 1)])\n    (for/list ([adverb (in-list adverbs)])\n      (list (car adverb) (cadr adverb)))))\n",
    "  (define (find-adverb-position-iter text position)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (cons position (find-adverb-position-iter (rest text) (+ position 1)))\n            (find-adverb-position-iter (rest text) (+ position 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (string-suffix? \"ly\" word)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-first-adverb text adverb)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"carefully\"))) words)]\n         [positions (map (lambda (adverb) (list-position words adverb)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([words (string-split text)])\n    (for/first ([word words]\n                #:when (string-contains word \"ly\"))\n      (list word (position word words)))))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (let ([adverbs (list->set (regexp-match* #rx\"\\w+ly\" text))])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-match* #rx\"\\w+ly\" text)))))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (for/list ([adverb adverbs])\n      (list adverb (find-adverb-position text adverb)))))\n",
    "  (define (find_adverb_position_helper text)\n    (if (empty? text)\n        empty\n        (if (equal? (first text) \"adverb\")\n            (cons (first text) (cons (first (rest text)) empty))\n            (find_adverb_position_helper (rest (rest text))))))\n  (find_adverb_position_helper (string-split text)))\n",
    "  (let* ([sentences (sentencify text)]\n         [sentence (first sentences)]\n         [words (wordify sentence)])\n    (find-first-adverb words)))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words] #:when (string-contains word \"ly\"))\n      (cons (list word (string-index word \"ly\")) result))))\n",
    "  (define adverbs '(\"quickly\" \"slowly\" \"happily\" \"sadly\"))\n  (define (find-adverb-position-iter text adverbs)\n    (cond\n      [(empty? adverbs) empty]\n      [(regexp-match? (regexp (string-append \"\\\\b\" (first adverbs) \"\\\\b\")) text)\n       (cons (first adverbs) (regexp-match-positions (regexp (string-append \"\\\\b\" (first adverbs) \"\\\\b\")) text))]\n      [else (find-adverb-position-iter text (rest adverbs))]))\n  (find-adverb-position-iter text adverbs))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201e\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\")",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"calmly\" \"passionately\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (let ((adverb-list (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"merrily\" \"sadly\")))\n    (for/list ([adverb adverb-list]\n               #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      (list adverb (regexp-match-positions (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text)))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) (list '() '())]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (list '() '())]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (list '() '())]\n      [(string=? (first text) \"?\") (list '() '())]\n      [(string=? (first text) \";\") (list '() '())]\n      [(string=? (first text) \":\") (list '() '())]\n      [(string=? (first text) \"\\\"\") (list '() '())]\n      [(string=? (first text) \"'\") (list '() '())]\n      [(string=? (first text) \"(\") (list '() '())]\n      [(string=? (first text) \")\") (list '() '())]\n      [(string=? (first text) \"\u201c\") (list '() '())]\n      [(string=? (first text) \"\u201d\") (list '() '())]\n      [(string=? (first text) \"\u2018\") (list '() '())]\n      [(string=? (first text) \"\u2019\") (list '() '())]\n      [(string=? (first text) \"\u201e\") (list '() '())]\n      [(string=? (first text) \"\u201d\") (list '() '())]\n      [(string=? (first text) \"\u2039\") (list '() '())]\n      [(string=? (first text) \"\u203a\") (list '() '())]\n      [(string=? (first text) \"\u00ab\") (list '() '())]\n      [(string=? (first text) \"\u00bb\") (list '() '())]\n      [(string=? (first text) \"\u2039\") (list '() '())]\n      [(string=? (",
    "  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((equal? (car text) 'adverb) (list (car text) (cadr text)))\n          (else (find-adverb (cdr text)))))\n  (find-adverb text))\n",
    "  (define (find-adverb text)\n    (define (find-adverb-helper text)\n      (cond ((null? text) '())\n            ((equal? (car text) 'adverb) (list (car (cdr text)) (car (cdr (cdr text)))))\n            (else (find-adverb-helper (cdr text)))))\n    (find-adverb-helper (cadr text)))\n  (find-adverb text))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"'\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"(\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \")\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1)))\n         ",
    "  (define (find_adverb_position-iter text index)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find_adverb_position-iter (rest text) (+ index 1))]\n      [(string=? (first text) \",\") (find_adverb_position-iter (rest text) (+ index 1))]\n      [(string=? (first text) \".\") (find_adverb_position-iter (rest text) (+ index 1))]\n      [(string=? (first text) \"!\") (find_adverb_position-iter (rest text) (+ index 1))]\n      [(string=? (first text) \"?\") (find_adverb_position-iter (rest text) (+ index 1))]\n      [(string=? (first text) \"ly\") (cons (list (string-append (first text) (second text)) (+ index 1)) (find_adverb_position-iter (rest text) (+ index 1)))]\n      [else (find_adverb_position-iter (rest text) (+ index 1))]))\n  (find_adverb_position-iter text 0))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (member word '(\"quickly\" \"slowly\" \"loudly\" \"quietly\"))) words)]\n         [positions (map (lambda (adverb) (member-position adverb words)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(and (equal? (first text) \" \") (equal? (second text) \" \")) (find-adverb-position-helper (rest (rest text)) (+ pos 2))]\n      [(equal? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"'\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"(\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \")\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"[\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"]\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first text) \"{\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(equal? (first",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (curry string=? adverb) (string-split text))])\n      (list adverb pos))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) pos]\n      [(equal? (first text) \"quickly\") (cons (list pos (add1 pos)) (find-adverb-position-iter (rest text) (add1 pos)))]\n      [else (find-adverb-position-iter (rest text) (add1 pos))]))\n  (find-adverb-position-iter (string-&gt;list text) 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))] #:when (member word adverbs))\n      (cons (list word (string-index text word)) result))))\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (list (car text) 0))\n          ((equal? (car text) \"slowly\") (list (car text) 0))\n          ((equal? (car text) \"happily\") (list (car text) 0))\n          ((equal? (car text) \"sadly\") (list (car text) 0))\n          (else (cons (find-adverb-position-helper (cdr text)) (list 1)))))\n  (find-adverb-position-helper (string-&gt;list text)))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (define (find-adverb-position-helper text pos)\n    (if (empty? text)\n        '()\n        (if (equal? (first text) 'adverb)\n            (cons (list (first text) pos) (find-adverb-position-helper (rest text) (+ pos 1)))\n            (find-adverb-position-helper (rest text) (+ pos 1)))))\n  (find-adverb-position-helper text 0))\n",
    "  (define (find-adverb-helper text index)\n    (cond\n      [(empty? text) '()]\n      [(string=? (first text) \"adverb\") (cons (list (first text) index) (find-adverb-helper (rest text) (+ index 1)))]\n      [else (find-adverb-helper (rest text) (+ index 1))]))\n  (find-adverb-helper (string-split text) 0))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (cond\n      [(empty? text) adverb-list]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"'\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"(\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \")\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text) adverb-list)]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text)",
    "  (let ([adverbs (regexp-match* #rx\"\\b(?<adverb>\\w+ly)\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list (regexp-match* #rx\"\\b(?<adverb>\\w+ly)\\b\" text)\n            (regexp-match* #rx\"\\b(?<adverb>\\w+ly)\\b\" text)))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ((adverbs (list)))\n    (for ([i (in-range (string-length text))])\n      (let ((char (string-ref text i)))\n        (if (char=? char #\\e)\n            (set! adverbs (cons (list i (string-ref text (+ i 1))) adverbs)))))\n    adverbs))\n",
    "  (for/list ([word (in-list (string-split text))]\n             [i (in-list (range (length (string-split text))))])\n    (cond\n      [(string-contains word \"ly\")\n       (list word i)])))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\'\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\n\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\t\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\r\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\f\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\v\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\b\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(",
    "  (define (find-adverb text)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"slowly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"loudly\") (list (car text) (cadr text)))\n          ((equal? (car text) \"quietly\") (list (car text) (cadr text)))\n          (else (find-adverb (cdr text)))))\n  (find-adverb text))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (regexp-index (first adverbs) text)))))\n",
    "  (let ([adverbs (find-all-adverbs text)])\n    (map (lambda (adverb)\n           (list adverb (find-first-adverb-position text adverb)))\n         adverbs)))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b[a-z]+ly\\b\" text)])\n    (if (null? adverbs)\n        (error \"No adverbs found\")\n        (list (car adverbs) (regexp-match-positions #rx\"\\b[a-z]+ly\\b\" text)))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index adverb text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"merrily\")])\n    (for/fold ([result '()])\n              ([word (in-list (string-split text))]\n               [adverb (in-list adverbs)])\n      (if (string=? word adverb)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (let* ([words (string-split text)]\n         [adverbs (filter (lambda (word) (string-contains word \"ly\")) words)]\n         [positions (map (lambda (word) (string-index word text)) adverbs)])\n    (list adverbs positions)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\")])\n    (for/list ([adverb adverbs]\n               [position (in-list (regexp-match* #rx\"\\w+\" text))])\n      (when (string=? adverb (list-ref text position))\n        (list adverb position)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                [position (in-indexes text)])\n      (if (string-contains text adverb)\n          (list adverb position)))))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (cond ((null? text) adverb-list)\n          ((equal? (car text) \"very\") (find-adverb-position-helper (cdr text) (cons (list (car text) (list (car (cdr text)))) adverb-list)))\n          ((equal? (car text) \"much\") (find-adverb-position-helper (cdr text) (cons (list (car text) (list (car (cdr text)))) adverb-list)))\n          (else (find-adverb-position-helper (cdr text) adverb-list))))\n  (find-adverb-position-helper text '()))\n",
    "  (define (find-adverb-helper text)\n    (if (empty? text)\n        (list '() '())\n        (let ((word (first text))\n              (rest (rest text)))\n          (if (equal? (second word) 'adverb)\n              (list (list (first word) (third word)) rest)\n              (find-adverb-helper rest)))))\n  (find-adverb-helper (pos-tag text)))\n",
    "  (define (find-adverb-position-iter text)\n    (if (null? text)\n        '()\n        (if (equal? (car text) \"adverb\")\n            (list (car (cdr text)) (car text))\n            (find-adverb-position-iter (cdr text)))))\n  (find-adverb-position-iter text))\n",
    "  (let ([adverbs (list->set (regexp-match* #rx\"\\w+ly\" text))])\n    (map (lambda (adverb)\n           (list adverb (regexp-match* #rx(string-append adverb) text)))\n         adverbs)))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")))\n    (for/first ((adverb adverbs))\n      (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (string-index text word)) result)\n          result))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb-position-helper (rest text) (+ pos 1)))\n          ((equal? (first text) \"\") (find-adverb",
    "  (for/list ([word (in-string text)])\n    (cond\n      [(adverb? word) (list word (string-index text word))]\n      [else #f])))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"happily\" \"sadly\" \"angrily\" \"calmly\" \"carefully\" \"cleverly\" \"crazily\" \"cutely\" \"elegantly\" \"foolishly\" \"gracefully\" \"lazily\" \"loudly\" \"mysteriously\" \"noisily\" \"obnoxiously\" \"perfectly\" \"politely\" \"quietly\" \"rapidly\" \"shyly\" \"silently\" \"sleepily\" \"stupidly\" \"suspiciously\" \"thoughtfully\" \"vivaciously\" \"wildly\")))\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (equal? x adverb)) (string-split text))])\n      (values adverb pos))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) (list '() '())]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"(\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \")\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (let ([first-adverb (first adverbs)])\n          (list (string-index text first-adverb)\n                (string-index text first-adverb (+ (string-length first-adverb) 1)))))))\n",
    "  (define (find-adverb-position-helper text adverb-list)\n    (if (null? text)\n        adverb-list\n        (if (equal? (car text) 'adverb)\n            (cons (list (car text) (cadr text)) adverb-list)\n            (find-adverb-position-helper (cdr text) adverb-list))))\n  (find-adverb-position-helper text '()))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        empty\n        (if (equal? (first text) 'adverb)\n            (cons (first text) (cons (first (rest text)) empty))\n            (find-adverb-position-helper (rest (rest text))))))\n  (find-adverb-position-helper (sentence->word-positions text)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons (list word (position word (string-split text))) result)\n          result))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (first text) \"quickly\") (cons pos (find-adverb-position-iter (rest text) (+ pos 1))))\n          ((equal? (first text) \"slowly\") (cons pos (find-adverb-position-iter (rest text) (+ pos 1))))\n          ((equal? (first text) \"happily\") (cons pos (find-adverb-position-iter (rest text) (+ pos 1))))\n          ((equal? (first text) \"sadly\") (cons pos (find-adverb-position-iter (rest text) (+ pos 1))))\n          (else (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (for/list ([adverb adverbs])\n      (list (string-index text adverb)\n            (string-index text adverb (add1 (string-index text adverb)))))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"calmly\" \"noisily\")])\n    (for/fold ([result '()]) ([word (in-list (string-split text))])\n      (if (member word adverbs)\n          (cons word result)\n          result))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\" \"sadly\")])\n    (for/first ([adverb adverbs]\n                #:when (regexp-match? (regexp (string-append \"\\\\b\" adverb \"\\\\b\")) text))\n      adverb)))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\" \"happily\")])\n    (for/fold ([result '()]) ([adverb adverbs])\n      (let ([positions (regexp-match* #rx\"\\w+\" text)])\n        (for/fold ([result result]) ([position positions])\n          (if (string=? adverb (string-downcase position))\n              (cons position result)\n              result))))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\")])\n    (for/first ([adverb adverbs]\n                [pos (in-positions (lambda (x) (string=? x adverb)) text)])\n      (list adverb pos))))\n",
    "  (let ((adverbs (list \"quickly\" \"slowly\" \"carefully\" \"lazily\")))\n    (for/list ([adverb adverbs])\n      (let ([position (string-index text adverb)])\n        (if position\n            (list adverb position)\n            #f)))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b(adv|ADV)\\b\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (regexp-match-positions #rx\"\\b(adv|ADV)\\b\" text)))))\n",
    "  (let ([words (string-split text)])\n    (for/fold ([result '()]) ([word words])\n      (if (and (string-contains word \"ly\")\n               (not (string-contains word \"lyly\")))\n          (cons (list word (string-index word \"ly\")) result)\n          result))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\b[a-zA-Z]+ly\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list adverb (regexp-index-positions #rx\"\\b[a-zA-Z]+ly\\b\" text adverb)))))\n",
    "  (define (find-adverb-position-helper text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\\\"\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"'\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"(\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \")\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201c\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u201d\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2018\") (find-adverb-position-helper (rest text) (+ pos 1))]\n      [(string=? (first text) \"\u2019\") (find-adverb-position-helper (rest text) (+ pos 1))]\n",
    "  (define (find-adverb-position-helper text)\n    (cond ((null? text) '())\n          ((equal? (car text) 'adverb) (list (car text) (cadr text)))\n          (else (find-adverb-position-helper (cdr text)))))\n  (find-adverb-position-helper (pos-tag text)))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((empty? text) '())\n          ((equal? (first text) 'adverb) (cons (list (first text) pos) '()))\n          (else (find-adverb-position-iter (rest text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"badly\")])\n    (for/first ([adverb (in-list adverbs)]\n                [position (in-indexed text)])\n      (and (equal? (string-ref text (cdr position)) (string-ref adverb 0))\n           (equal? (substring text (cdr position) (+ (cdr position) (string-length adverb))) adverb)\n           (cons adverb (cdr position))))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\badverb\\b\" text)])\n    (for/list ([adverb adverbs])\n      (list (string-index text adverb)\n            (string-length adverb)))))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        (error \"No adverbs found\")\n        (list (first adverbs) (regexp-index text #rx\"\\w+ly\")))))\n",
    "  (define (find-adverb-position-helper text position)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (list position))\n          ((equal? (car text) \"slowly\") (list position))\n          ((equal? (car text) \"happily\") (list position))\n          ((equal? (car text) \"sadly\") (list position))\n          (else (find-adverb-position-helper (cdr text) (+ position 1)))))\n  (find-adverb-position-helper (string-split text) 0))\n",
    "  (define (find-adverb-helper text pos)\n    (cond\n      [(empty? text) '()]\n      [(string-contains (first text) \"ly\") (cons (cons (first text) pos) (find-adverb-helper (rest text) (+ pos 1)))]\n      [else (find-adverb-helper (rest text) (+ pos 1))]))\n  (find-adverb-helper (string-split text) 0))\n",
    "  (let ([adverbs (list-ref (pos-tag text) 1)])\n    (for/list ([adverb adverbs])\n      (list (car adverb) (cadr adverb)))))\n",
    "  (for/fold ([result '()]) ([word (in-list (string-split text))])\n    (if (equal? (get-pos word) 'adverb)\n        (cons (list word (position word (string-split text))) result)\n        result)))\n",
    "  (define (find-adverb-position-helper text)\n    (if (empty? text)\n        empty\n        (if (equal? (first text) \"adverb\")\n            (cons (first text) (cons (first (rest text)) empty))\n            (find-adverb-position-helper (rest (rest text))))))\n  (find-adverb-position-helper text))\n",
    "  (let* ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"loudly\")]\n         [adverb-positions (list)]\n         [words (string-split text)]\n         [word-positions (list)])\n    (for ([word words] [i (in-naturals)])\n      (when (member word adverbs)\n        (set! adverb-positions (append adverb-positions (list word)))\n        (set! word-positions (append word-positions (list i)))))\n    (list adverb-positions word-positions)))\n",
    "  (let* ([tokens (tokenize text)]\n         [adverbs (filter (lambda (token) (adverb? token)) tokens)])\n    (if (empty? adverbs)\n        '()\n        (list (first adverbs) (position (first adverbs) tokens)))))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond\n      [(empty? text) '()]\n      [(string-contains (first text) \"ly\") (cons (cons (first text) pos) (find-adverb-position-iter (rest text) (+ pos 1)))]\n      [else (find-adverb-position-iter (rest text) (+ pos 1))]))\n  (find-adverb-position-iter (string-split text) 0))\n",
    "  (define (find-adverb-position-iter text pos)\n    (cond ((null? text) '())\n          ((equal? (car text) \"quickly\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          ((equal? (car text) \"slowly\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          ((equal? (car text) \"loudly\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          ((equal? (car text) \"quietly\") (cons pos (find-adverb-position-iter (cdr text) (+ pos 1))))\n          (else (find-adverb-position-iter (cdr text) (+ pos 1)))))\n  (find-adverb-position-iter text 0))\n",
    "  (define (find_adverb_position_iter text pos)\n    (cond\n      [(empty? text) empty]\n      [(string=? (first text) \" \") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [(string=? (first text) \",\") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [(string=? (first text) \".\") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"!\") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [(string=? (first text) \"?\") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [(string=? (first text) \";\") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [(string=? (first text) \":\") (find_adverb_position_iter (rest text) (+ pos 1))]\n      [else (cons (list (first text) pos) (find_adverb_position_iter (rest text) (+ pos 1)))]))\n  (find_adverb_position_iter (string-&gt;list text) 0))\n",
    "  (let ([adverbs (regexp-match* #rx\"\\w+ly\" text)])\n    (if (empty? adverbs)\n        (error 'find_adverb_position \"No adverbs found\")\n        (list (first adverbs) (regexp-index (first adverbs) text)))))\n",
    "  (let ([adverbs (list \"quickly\" \"slowly\" \"carefully\" \"happily\")])\n    (for/list ([adverb adverbs]\n               [pos (in-list (regexp-match* #rx\"\\w+\" text))])\n      (if (string=? adverb (list-ref text pos))\n          (list adverb pos)))))\n",
    "  (define (find-adverb text)\n    (cond ((empty? text) empty)\n          ((equal? (first text) 'adverb) (first text))\n          (else (find-adverb (rest text)))))\n  (define (find-adverb-position text)\n    (cond ((empty? text) empty)\n          ((equal? (first text) (find-adverb text)) (first text))\n          (else (find-adverb-position (rest text)))))\n  (find-adverb-position text))\n"
  ]
}