{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rktthon-exercises/lambda/rktthon-lambda-exercise-24.php\n(define (divisible_by_digits startnum endnum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisible_by_digits))\n    (check-equal? (candidate 1 22) (list 1 2 3 4 5 6 7 8 9 11 12 15 22))\n    (check-equal? (candidate 1 15) (list 1 2 3 4 5 6 7 8 9 11 12 15))\n    (check-equal? (candidate 20 25) (list 22 24))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100) (divisible? x 1000))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (divisible? x y))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (define (divisible-by-digits-helper startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper2 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper2 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper3 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper3 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper4 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper4 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper5 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper5 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper6 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper6 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper7 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper7 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper8 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper8 (+ startnum 1) endnum))))\n ",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter\n   (lambda (x)\n     (every\n      (lambda (y)\n        (zero? (modulo x y)))\n      (string->list (number->string x))))\n   (range startnum endnum)))\n"
  ]
}