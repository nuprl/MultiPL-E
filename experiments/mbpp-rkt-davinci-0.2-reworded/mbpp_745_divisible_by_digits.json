{
  "name": "mbpp_745_divisible_by_digits",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/rktthon-exercises/lambda/rktthon-lambda-exercise-24.php\n(define (divisible_by_digits startnum endnum)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate divisible_by_digits))\n    (check-equal? (candidate 1 22) (list 1 2 3 4 5 6 7 8 9 11 12 15 22))\n    (check-equal? (candidate 1 15) (list 1 2 3 4 5 6 7 8 9 11 12 15))\n    (check-equal? (candidate 20 25) (list 22 24))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "completions": [
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (andmap (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100) (divisible? x 1000))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (divisible? x y))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (define (divisible-by-digits-helper startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper2 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper2 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper3 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper3 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper4 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper4 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper5 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper5 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper6 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper6 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper7 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper7 (+ startnum 1) endnum))))\n  (define (divisible-by-digits-helper8 startnum endnum)\n    (if (= startnum endnum)\n        (list endnum)\n        (cons startnum (divisible-by-digits-helper8 (+ startnum 1) endnum))))\n ",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter\n   (lambda (x)\n     (every\n      (lambda (y)\n        (zero? (modulo x y)))\n      (string->list (number->string x))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (let loop ([x x] [divisor 10])\n              (cond [(zero? x) #t]\n                    [(zero? (modulo x divisor)) (loop (quotient x 10) 10)]\n                    [(zero? (modulo x (modulo divisor 10))) (loop x (quotient divisor 10))]\n                    [else #f])))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (remainder x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x (first (digits x))) (divisible? x (second (digits x))))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (and (zero? (modulo n (quotient n 10)))\n                   (if (zero? (modulo n 10))\n                       #t\n                       (divisible? (quotient n 10)))))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100) (divisible? x 1000))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (= (modulo x y) 0)) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100) (divisible? x 1000))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter\n   (lambda (x)\n     (let loop ([x x] [y (number->string x)])\n       (if (zero? (string-length y))\n           #t\n           (and (zero? (modulo x (string->number (string-ref y 0))))\n                (loop (quotient x 10) (substring y 1))))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (list->set (string->list (number->string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (remainder i x))) (number->list i))\n        i\n        '())))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (andmap (lambda (d) (= (modulo n d) 0))\n                    (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100) (divisible? x 1000))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (cond\n              [(= 0 (modulo x (quotient x 10))) #t]\n              [(= 0 (modulo x (remainder x 10))) #t]\n              [else #f]))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x (modulo x 10)) (divisible? x (modulo x 100 10)) (divisible? x (modulo x 1000 100 10)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (cond ((= n 0) #t)\n                    ((= (modulo x n) 0) (divisible? (quotient x 10)))\n                    (else #f)))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (\u03bb (x) (= (modulo i x) 0)) (string->list (number->string i)))))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter\n   (lambda (x)\n     (every\n      (lambda (y)\n        (zero? (modulo x y)))\n      (string->list (number->string x))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n</code>\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (for/and ([d (in-list (string->list (number->string n)))]\n                      #:when (not (zero? (modulo n (string->number (number->string d))))))\n              #t))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (digits x)))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (define (divisible-by-digit? n d)\n                (if (= d 0)\n                    #t\n                    (if (zero? (modulo n d))\n                        (divisible-by-digit? n (- d 1))\n                        #f)))\n              (divisible-by-digit? n (modulo n 10)))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n</code>\n",
    "  (filter (lambda (x) (and (divisible? x (first (digits x))) (divisible? x (second (digits x))) (divisible? x (third (digits x))))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (remainder x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (define (divisible-by-digits-helper num)\n    (define (divisible-by-digits-helper-helper num divisor)\n      (if (&lt;= num 0)\n          #t\n          (if (zero? (modulo num divisor))\n              (divisible-by-digits-helper-helper (/ num 10) divisor)\n              #f)))\n    (divisible-by-digits-helper-helper num num))\n  (filter divisible-by-digits-helper (range startnum endnum)))\n",
    "  (filter\n   (lambda (x)\n     (let loop ([x x] [result #t])\n       (cond\n         [(zero? x) result]\n         [(zero? (modulo x 10)) (loop (quotient x 10) result)]\n         [else (loop (quotient x 10) (and result (zero? (modulo x (quotient x 10)))))])))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (define (divisible-by-digit? n d)\n                (if (= d 0)\n                    #t\n                    (if (= (modulo n d) 0)\n                        (divisible-by-digit? n (- d 1))\n                        #f)))\n              (divisible-by-digit? n (modulo n 10)))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (every (lambda (d)\n                     (zero? (modulo n d)))\n                   (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (every (lambda (d)\n                     (zero? (modulo n d)))\n                   (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (= (modulo x y) 0)) (map string->number (string-&gt;list (number-&gt;string x))))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (every? (lambda (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x (first (digits x))) (divisible? x (second (digits x))))) (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (lambda (x) (zero? (modulo i x))) (string->list (number->string i)))))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (lambda (x) (zero? (modulo i x))) (string->list (number->string i)))))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (lambda (x) (= (modulo i x) 0)) (string->list (number->string i)))))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (and (zero? (modulo n (quotient n 10)))\n                   (if (zero? (quotient n 10))\n                       #t\n                       (divisible? (quotient n 10)))))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (if (zero? n)\n                  #t\n                  (if (zero? (modulo x n))\n                      (divisible? (quotient n 10))\n                      #f)))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (let loop ([x x] [y (number->string x)])\n              (if (zero? (string-length y))\n                  #t\n                  (and (zero? (modulo x (string->number (string-ref y 0))))\n                       (loop (quotient x 10) (substring y 1))))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (every (lambda (y) (zero? (modulo x y))) (string->list (number->string x)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (remainder x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x (first (string->list (number->string x)))) (divisible? x (second (string->list (number->string x)))))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (cond\n                [(zero? n) #t]\n                [(zero? (modulo x (remainder n 10))) #f]\n                [else (divisible? (quotient n 10))]))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string-&gt;list (number-&gt;string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x (modulo x 10)) (divisible? x (/ x 10)))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (map string->number (string-&gt;list (number-&gt;string x)))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (if (= n 0)\n                  #t\n                  (and (zero? (modulo x n))\n                       (divisible? (quotient n 10)))))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100))) (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible-by-digits? x) (divisible-by-digits? x))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (= (modulo i x) 0)) (map string->number (string-&gt;list (number-&gt;string i))))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter\n   (lambda (x)\n     (andmap\n      (lambda (y)\n        (zero? (modulo x y)))\n      (string->list (number->string x))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible? x (quotient x 10)) (divisible? x (modulo x 10)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (define (divisible-by-digit? n d)\n                (if (= d 0)\n                    #t\n                    (if (zero? (modulo n d))\n                        (divisible-by-digit? n (/ d 10))\n                        #f)))\n              (divisible-by-digit? n x))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo i d)))\n            (string->list (number->string i)))))\n",
    "  (filter (lambda (n)\n            (andmap (lambda (d)\n                      (zero? (modulo n d)))\n                    (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (every (lambda (d)\n                     (zero? (modulo n d)))\n                   (string->list (number->string n))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (x) (zero? (modulo i x))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x (string->number (string y)))))\n                    (string-&gt;list (number-&gt;string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (define (divisible? n)\n              (and (zero? (modulo n (quotient n 10)))\n                   (if (zero? (quotient n 10))\n                       #t\n                       (divisible? (quotient n 10)))))\n            (divisible? x))\n          (range startnum endnum)))\n",
    "  (filter\n   (lambda (n)\n     (andmap\n      (lambda (d)\n        (zero? (modulo n d)))\n      (string->list (number->string n))))\n   (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x) (and (divisible-by? x (remainder x 10)) (divisible-by? x (quotient x 10)))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (andmap (\u03bb (d) (zero? (modulo i d))) (string->list (number->string i)))))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string-&gt;list (number-&gt;string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (num)\n            (every (lambda (digit)\n                     (zero? (modulo num digit)))\n                   (string->list (number->string num))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (every (lambda (y)\n                     (zero? (modulo x y)))\n                   (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (let loop ([x x] [divisor 10])\n              (cond [(zero? x) #t]\n                    [(zero? (modulo x divisor)) (loop (quotient x 10) 10)]\n                    [(zero? (modulo x (quotient divisor 10))) (loop x (quotient divisor 10))]\n                    [else #f])))\n          (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y) (= (modulo x y) 0))\n                    (string->list (number->string x))))\n          (range startnum endnum)))\n",
    "  (for/list ([i (in-range startnum endnum)])\n    (if (andmap (\u03bb (d) (zero? (remainder i d))) (string->list (number->string i)))\n        i\n        #f)))\n",
    "  (filter (lambda (x) (and (divisible? x 10) (divisible? x 100))) (range startnum endnum)))\n",
    "  (filter (lambda (x)\n            (andmap (lambda (y)\n                      (zero? (modulo x y)))\n                    (string-&gt;list (number-&gt;string x))))\n          (range startnum endnum)))\n",
    "  (filter (lambda (n)\n            (andmap (lambda (d) (= (modulo n d) 0))\n                    (string->list (number->string n))))\n          (range startnum endnum)))\n"
  ]
}