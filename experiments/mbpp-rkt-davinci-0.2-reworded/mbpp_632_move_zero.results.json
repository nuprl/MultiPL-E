{
  "name": "mbpp_632_move_zero",
  "language": "rkt",
  "prompt": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py",
  "prompt_terminology": "reworded",
  "tests": "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
  "stop_tokens": [
    "\n(define ",
    "\n#|",
    "\n;",
    "\n("
  ],
  "results": [
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) acc)]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsr_1uyil.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsr_1uyil.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsr_1uyil.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else\n         (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list))\n                  (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond ((null? num_list) '())\n        ((zero? (car num_list))\n         (append (move_zero (cdr num_list)) (list 0)))\n        (else (cons (car num_list) (move_zero (cdr num_list))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list (first num_list)))]\n        [else\n         (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else\n         (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else\n         (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (\u03bb (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bjdd9sf.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bjdd9sf.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7bjdd9sf.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list))\n             (list 0))]\n    [else\n     (cons (first num_list)\n           (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc24_t8o.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc24_t8o.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc24_t8o.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) (reverse result)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) result)]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) result))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpftj4hok4.rkt:17:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpftj4hok4.rkt:18:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpftj4hok4.rkt:19:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (rest num_list) (list (first num_list)))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rxzaqpa.rkt:16:4\nactual:     '(1 2 0 3 4 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rxzaqpa.rkt:17:4\nactual:     '(2 3 2 0 4 0 5 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rxzaqpa.rkt:18:4\nactual:     '(1 0 1 1 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (rest num_list) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfdpfn6pn.rkt:17:4\nactual:     '(1 2 0 3 4 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfdpfn6pn.rkt:18:4\nactual:     '(2 3 2 0 4 0 5 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfdpfn6pn.rkt:19:4\nactual:     '(1 0 1 1 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append result (list 0)))]\n      [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiolen9sg.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiolen9sg.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiolen9sg.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0nu2yf3.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0nu2yf3.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0nu2yf3.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (append result (list 0)))]\n      [else (move_zero_iter (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptybcbbso.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptybcbbso.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptybcbbso.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) acc]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append acc (list 0)))]\n      [else (move_zero_helper (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_helper num_list (list)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjkt9xbv.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjkt9xbv.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjkt9xbv.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_helper (rest num_list) acc)]\n          [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzbp8ve8q.rkt:16:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzbp8ve8q.rkt:17:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzbp8ve8q.rkt:18:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list)\n  (filter (lambda (x) (zero? x)) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6k9t3s5.rkt:13:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6k9t3s5.rkt:14:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6k9t3s5.rkt:15:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond ((null? num_list) acc)\n          ((zero? (car num_list)) (move_zero_iter (cdr num_list) (append acc (list 0))))\n          (else (move_zero_iter (cdr num_list) (append acc (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lo7ql_3.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lo7ql_3.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2lo7ql_3.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(null? num_list) '()]\n    [(zero? (car num_list)) (append (move_zero (cdr num_list)) (list 0))]\n    [else (cons (car num_list) (move_zero (cdr num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list result)\n    (cond\n      [(empty? num_list) result]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (append result (list 0)))]\n      [else (move_zero_helper (rest num_list) (append result (list (first num_list))))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsn6ckgb9.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsn6ckgb9.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsn6ckgb9.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [else\n     (cond\n       [(zero? (first num_list))\n        (append (move_zero (rest num_list)) (list 0))]\n       [else\n        (cons (first num_list) (move_zero (rest num_list)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) (reverse acc)]\n          [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n          [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc24_t8o.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc24_t8o.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc24_t8o.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(null? num_list) (reverse acc)]\n      [(zero? (car num_list)) (move_zero_iter (cdr num_list) (cons (car num_list) acc))]\n      [else (move_zero_iter (cdr num_list) (cons (car num_list) (cdr acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeul2ewip.rkt:17:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeul2ewip.rkt:18:4\n\ncdr: contract violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeul2ewip.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (append (list (first num_list))\n                      (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [else (append (filter (lambda (x) (not (= x 0))) num_list)\n                  (filter (lambda (x) (= x 0)) num_list))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list)\n  (filter (lambda (x) (zero? x)) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6k9t3s5.rkt:13:4\nactual:     '(0 0)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6k9t3s5.rkt:14:4\nactual:     '(0 0 0 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp6k9t3s5.rkt:15:4\nactual:     '(0 0)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond ((null? num_list) acc)\n          ((zero? (car num_list))\n           (move_zero_iter (cdr num_list) (append acc (list 0))))\n          (else (move_zero_iter (cdr num_list) (append acc (list (car num_list)))))))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfv67y7ha.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfv67y7ha.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfv67y7ha.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_helper (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_helper (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd2y_zcna.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [else\n     (cond\n       [(zero? (first num_list))\n        (append (move_zero (rest num_list)) (list (first num_list)))]\n       [else\n        (cons (first num_list) (move_zero (rest num_list)))])]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) '()]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons 0 acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list empty))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nw2kru6.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nw2kru6.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nw2kru6.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond ((null? num_list) (reverse acc))\n          ((zero? (car num_list)) (move_zero_helper (cdr num_list) (cons (car num_list) acc)))\n          (else (move_zero_helper (cdr num_list) (cons (car num_list) acc)))))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wut47dc.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wut47dc.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wut47dc.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_helper num_list acc)\n    (cond ((null? num_list) acc)\n          ((zero? (car num_list)) (move_zero_helper (cdr num_list) (append acc (list 0))))\n          (else (move_zero_helper (cdr num_list) (append acc (list (car num_list)))))))\n  (move_zero_helper num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjeiwis2q.rkt:16:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjeiwis2q.rkt:17:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjeiwis2q.rkt:18:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) (rest acc)))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0nu2yf3.rkt:17:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu0nu2yf3.rkt:18:4\n\nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0nu2yf3.rkt:19:4\nactual:     '(1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list))\n         (append (move_zero (rest num_list)) (list 0))]\n        [else (append (list (first num_list))\n                      (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list (first num_list)))]\n    [else (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond [(empty? num_list) acc]\n          [(zero? (first num_list))\n           (move_zero_iter (rest num_list) (append acc (list 0)))]\n          [else (move_zero_iter (rest num_list) (append acc (list (first num_list))))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123894,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ry62u5s.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ry62u5s.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ry62u5s.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond [(empty? num_list) empty]\n        [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n        [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (= x 0))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0y30vz5i.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list))\n     (append (move_zero (rest num_list)) (list 0))]\n    [else\n     (append (list (first num_list)) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (cond\n    [(empty? num_list) empty]\n    [(zero? (first num_list)) (append (move_zero (rest num_list)) (list 0))]\n    [else (cons (first num_list) (move_zero (rest num_list)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (define (move_zero_iter num_list acc)\n    (cond\n      [(empty? num_list) (reverse acc)]\n      [(zero? (first num_list)) (move_zero_iter (rest num_list) (cons (first num_list) acc))]\n      [else (move_zero_iter (rest num_list) (cons (first num_list) acc))]))\n  (move_zero_iter num_list '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1666123893,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:17:4\nactual:     '(1 0 2 0 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:18:4\nactual:     '(2 3 2 0 0 4 0 5 0)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw7y9xfn0.rkt:19:4\nactual:     '(0 1 0 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "#lang racket\n\n;; Write a rktthon function to move all zeroes to the end of the given list.\n(define (move_zero num_list)\n  (filter (lambda (x) (not (zero? x))) num_list))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate move_zero))\n    (check-equal? (candidate (list 1 0 2 0 3 4)) (list 1 2 3 4 0 0))\n    (check-equal? (candidate (list 2 3 2 0 0 4 0 5 0)) (list 2 3 2 4 5 0 0 0 0))\n    (check-equal? (candidate (list 0 1 0 1 1)) (list 1 1 1 0 0))\n))\n\n(test-humaneval)",
      "timestamp": 1665510497,
      "stdout": "",
      "stderr": "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:12:4\nactual:     '(1 2 3 4)\nexpected:   '(1 2 3 4 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:13:4\nactual:     '(2 3 2 4 5)\nexpected:   '(2 3 2 4 5 0 0 0 0)\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ul6yygc.rkt:14:4\nactual:     '(1 1 1)\nexpected:   '(1 1 1 0 0)\n--------------------\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}