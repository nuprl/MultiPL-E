{
  "language": "d",
  "name": "HumanEval_98_count_upper",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(immutable index, immutable char c; s) \n    {\n        if(index % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) \n        {\n            result++;\n        }\n    }\n    return result;\n}\n/*\n    Write a function that takes in a set of integers and returns an array of the powerset\n    of that set.\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppbtwhi8v.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppbtwhi8v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r = 0;\n    foreach(immutable c; s)\n    {\n        if((c >= 'A' && c <= 'Z') && (r++ & 1) == 0)\n            continue;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpx0m7vqey.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpx0m7vqey.__unittest_L25_C1() [0x427ab6]\n??:? void tmpx0m7vqey.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            if(i % 2 == 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n/*\n    Write a function that returns the count of a given character in a string.\n    \n    For example:\n    >>> char_count(\"foobar\", 'o')\n    2L\n    >>> char_count(\"bazzzzzz\", 'z')\n    5L\n    >>> char_count(\"count\", 'x')\n    0L\n*/\nlong char_count(string s, char c) \n{\n    long count = 0;\n    foreach(i, d; s)\n    {\n        if(d == c)\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n    Write a function that returns true if the first half of a string is the\n    same as the second half, otherwise false.\n    \n    For example:\n    >>> half_match(\"foobar\")\n    false\n    >>> half_match(\"abcdabcd\")\n    true\n    >>> half_match(\"\")\n    true\n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] == toupper(s[i]))\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf_g1ccyd.d(20): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf_g1ccyd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    // Your code here\n    int count = 0;\n    foreach(i, c; s)\n    {\n        if(isUpper(c) && (i % 2 == 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n// NOTE: The following autograder code must remain at the bottom of this file\n//       uncommented so that it can be executed by the autograder.\n//\n// POST SUBMISSION: remove all of the code below this line\n//\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb3ccf4yj.d(33): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb3ccf4yj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result;\n    long i;\n    result = 0L;\n    foreach (c; s)\n    {\n        if (c in ['A', 'E', 'I', 'O', 'U'])\n        {\n            i++;\n            if (i % 2L == 0L)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx0g36ova.d(22): Error: incompatible types for `(c) in (['A', 'E', 'I', 'O', 'U'])`: `immutable(char)` and `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx0g36ova.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(index, i; s) \n    {\n        if(index % 2 == 0) \n        {\n            foreach(char c; \"AEIOU\") \n            {\n                if(s[i] == c) \n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpcithyp6v.d(24): Range violation\n----------------\n??:? _d_arrayboundsp [0x427f56]\n??:? long tmpcithyp6v.count_upper(immutable(char)[]) [0x427ab9]\n??:? void tmpcithyp6v.__unittest_L33_C1() [0x427aff]\n??:? void tmpcithyp6v.__modtest() [0x427c28]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc3f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aad2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc65]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430114]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbf1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaa9]\n??:? runModuleUnitTests [0x42ba15]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int ",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(idx, char ch; s) \n    {\n        if((idx & 1) == 0 && isupper(ch))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbjg62ela.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjg62ela.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sum = 0;\n    for (auto i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n            sum++;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7yjv08af.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmp7yjv08af.__unittest_L27_C1() [0x427ae2]\n??:? void tmp7yjv08af.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc07]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa9a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc2d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]\n??:? runModuleUnitTests [0x42b9dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428330]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long result = 0;\n  for (size_t i = 0; i < s.length; i++)\n  {\n    if (i % 2 == 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n      result++;\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(char c; s[2..$])\n    {\n        // Even indices.\n        if(toupper(c) == 'A' || toupper(c) == 'E' || toupper(c) == 'I' || toupper(c) == 'O' || toupper(c) == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4b5j2un9.d(21): Error: undefined identifier `toupper`\n/tmp/tmp4b5j2un9.d(21): Error: undefined identifier `toupper`\n/tmp/tmp4b5j2un9.d(21): Error: undefined identifier `toupper`\n/tmp/tmp4b5j2un9.d(21): Error: undefined identifier `toupper`\n/tmp/tmp4b5j2un9.d(21): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4b5j2un9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r;\n    foreach(char c; 0 .. s.length)\n    {\n        if(('A' <= c && c <= 'Z') && c.isVowel && c % 2 == 0)\n        {\n            r += 1;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpe7tfeacx.d(18): Error: cannot implicitly convert expression `s.length` of type `ulong` to `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpe7tfeacx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long result = 0;\n  foreach(i,c; s)\n  {\n    if(i % 2 == 0 && isupper(c))\n    {\n      result++;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp46hc3g9h.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46hc3g9h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n        if (isVowel(s[i]) && isUpper(s[i]))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjz2ya0wd.d(20): Error: undefined identifier `isVowel`\n/tmp/tmpjz2ya0wd.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjz2ya0wd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, e; s) \n    {\n        if (i % 2 == 0 && isupper(e)) \n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n    Write a function that returns the index of the first negative number in a \n    given array. The array is not sorted.\n    \n    For example:\n    >>> index_first_negative([1, -2, 3, -4, -5, 6, 7])\n    1L\n    >>> index_first_negative([1, -2, 3, -4, -5, 6, 7, -8])\n    1L\n    >>> index_first_negative([1, 2, 3, 4, 5, 6, 7])\n    -1L\n*/\nlong index_first_negative(long[] a) \n{\n    long[]::size_type index = 0;\n    while (index < a.length && a[index] >= 0) \n    {\n        index++;\n    }\n    if (index < a.length) \n    {\n        return index;\n    }\n    return -1;\n}\n/*\n    Write a function that takes a string s and a double d and returns the number \n    of digits in d that exist in s.\n    \n    For example:\n    >>> count_digits(\"abcdef\", 5.82)\n    2L\n    >>> count_digits(\"jfkaljfd\", 5.82)\n    0L\n    >>> count_digits(\"jfkal5jfd2\", 5.82)\n    2L\n*/\nlong count_digits(string s, double d) \n{\n    long count = 0;\n    foreach(c; s) \n    {\n        if (isdigit(c)) \n        {\n            foreach(n; to!string(d)) \n            {\n                if (c == n) \n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n/*\n    Write a function that takes two strings s and t and returns true if they \n    overlap each other.\n\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3jgr73wn.d(41): Error: no identifier for declarator `long[]`\n/tmp/tmp3jgr73wn.d(41): Error: found `:` instead of statement\n/tmp/tmp3jgr73wn.d(82): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3jgr73wn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long l = 0;\n    auto c = s.length;\n    for (int i = 0; i < c; i += 2)\n    {\n        if (i % 2 == 0)\n        {\n            if (toupper(s[i]) == 'A' || toupper(s[i]) == 'E' || toupper(s[i]) == 'I' || toupper(s[i]) == 'O' || toupper(s[i]) == 'U')\n            {\n                l++;\n            }\n        }\n    }\n    return l;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9jhszgcl.d(23): Error: undefined identifier `toupper`\n/tmp/tmp9jhszgcl.d(23): Error: undefined identifier `toupper`\n/tmp/tmp9jhszgcl.d(23): Error: undefined identifier `toupper`\n/tmp/tmp9jhszgcl.d(23): Error: undefined identifier `toupper`\n/tmp/tmp9jhszgcl.d(23): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9jhszgcl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sum = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n            sum += 1;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpumpkow6r.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmpumpkow6r.__unittest_L27_C1() [0x427ada]\n??:? void tmpumpkow6r.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa92]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc25]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa69]\n??:? runModuleUnitTests [0x42b9d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428328]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long l = 0;\n    foreach(immutable c; s)\n    {\n        if(c >= 'A' && c <= 'Z' && l % 2 == 0)\n            l++;\n        l++;\n    }\n    return l / 2;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpu08bwx8f.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpu08bwx8f.__unittest_L26_C1() [0x427ad2]\n??:? void tmpu08bwx8f.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long count = 0;\n  foreach(immutable char c; s)\n  {\n    if(isupper(c) && (count % 2 == 0))\n      count++;\n  }\n  return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbox4muqu.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbox4muqu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count;\n    for (long i = 0; i < s.length; i += 2)\n    {\n        if (i == 0)\n        {\n            if (isupper(s[i]))\n            {\n                count = 1;\n            }\n            else\n            {\n                count = 0;\n            }\n        }\n        else\n        {\n            if (isupper(s[i]))\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\n \nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpycq6dkfj.d(22): Error: undefined identifier `isupper`\n/tmp/tmpycq6dkfj.d(33): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpycq6dkfj.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    static string vowels = \"AEIOU\";\n    foreach(immutable i, immutable c; s) \n    {\n        if (c >= 'A' && c <= 'Z' && i % 2 == 0 && vowels.indexOf(c) != -1)\n            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbbw656pi.d(21): Error: no property `indexOf` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbbw656pi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count;\n    foreach(c; s)\n    {\n        if(isupper(c) && count % 2 == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxlwzxaqx.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxlwzxaqx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int cnt = 0;\n    for (int i = 0; i < s.length; i += 2) \n    {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            cnt++;\n    }\n    return cnt;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count;\n    foreach(int i, char c; s) \n    {\n        if (isEven(i) && isUpper(c) && isVowel(c)) \n        {\n            count++;\n        }\n    }\n    return count;\n}\n \nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt9fcw1me.d(20): Error: undefined identifier `isEven`\n/tmp/tmpt9fcw1me.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpt9fcw1me.d(20): Error: undefined identifier `isVowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt9fcw1me.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long j = 0;\n    foreach(i, v; s)\n    {\n        if(i%2 != 0)\n        {\n            if(v == 'A' || v == 'E' || v == 'I' || v == 'O' || v == 'U')\n            {\n                j++;\n            }\n        }\n    }\n    return j;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp1xd4olm.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpp1xd4olm.__unittest_L30_C1() [0x427aca]\n??:? void tmpp1xd4olm.__modtest() [0x427bd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long uppercaseVowels = 0;\n    foreach(immutable i, immutable c; s) \n    {\n        //i is the character index\n        if(i % 2) \n        {\n            if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n            {\n                uppercaseVowels++;\n            }\n        }\n    }\n    return uppercaseVowels;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6yvpy7sb.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmp6yvpy7sb.__unittest_L31_C1() [0x427ac6]\n??:? void tmp6yvpy7sb.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(inout char c; s[0..$/2])\n    {\n        if (('A' <= c) && (c <= 'Z'))\n            if (isVowel(char.toLower(c)))\n                result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpongl8qec.d(18): Error: variable `tmpongl8qec.count_upper.c` `inout` variables can only be declared inside `inout` functions\n/tmp/tmpongl8qec.d(21): Error: undefined identifier `isVowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpongl8qec.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (isupper(s[i]) && isEven(i))\n        {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpicgb5t8s.d(20): Error: undefined identifier `isupper`\n/tmp/tmpicgb5t8s.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpicgb5t8s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    uint count = 0;\n    foreach(char c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfje04nn2.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpfje04nn2.__unittest_L27_C1() [0x427b0e]\n??:? void tmpfje04nn2.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    string vowels = \"aeiouAEIOU\";\n    foreach(i,ch; s)\n    {\n        if(i % 2 == 0 && i != 0)\n        {\n            auto ind = indexOf(vowels,ch);\n            if(ind > 4)\n            {\n                counter += 1;\n            }\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptxntzec9.d(23): Error: undefined identifier `indexOf`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptxntzec9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long cnt = 0;\n    for (int i = 0; i < s.length; i += 2) \n    {\n        if (i % 2 == 0 && s[i] isin ['A', 'E', 'I', 'O', 'U']) \n        {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n/*\n    Given a string s, count the number of lowercase vowels in even indices.\n    \n    For example:\n    >>> count_lower(\"aBCdEf\")\n    0L\n    >>> count_lower(\"abcdefg\")\n    1L\n    >>> count_lower(\"dBBE\")\n    1L\n    \n*/\nlong count_lower(string s) \n{\n    long cnt = 0;\n    for (int i = 0; i < s.length; i += 2) \n    {\n        if (i % 2 == 0 && s[i] isin ['a', 'e', 'i', 'o', 'u']) \n        {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n/*\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    >>> count_upper_odd(\"aBCdEf\")\n    1L\n    >>> count_upper_odd(\"abcdefg\")\n    1L\n    >>> count_upper_odd(\"dBBE\")\n    0L\n    \n*/\nlong count_upper_odd(string s) \n{\n    long cnt = 0;\n    for (int i = 1; i < s.length; i += 2) \n    {\n        if (i % 2 == 1 && s[i] isin ['A', 'E', 'I', 'O', 'U']) \n        {\n            cnt++;\n        }\n    }\n    return cnt;\n}\n/*\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    >>> count_lower_odd(\"aBCdEf\")\n    0L\n    >>> count_lower_odd(\"abcdefg\")\n    1\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmput3z8mrb.d(20): Error: found `isin` when expecting `)`\n/tmp/tmput3z8mrb.d(20): Error: found `)` when expecting `;` following statement\n/tmp/tmput3z8mrb.d(44): Error: found `isin` when expecting `)`\n/tmp/tmput3z8mrb.d(44): Error: found `)` when expecting `;` following statement\n/tmp/tmput3z8mrb.d(68): Error: found `isin` when expecting `)`\n/tmp/tmput3z8mrb.d(68): Error: found `)` when expecting `;` following statement\n/tmp/tmput3z8mrb.d(75): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmput3z8mrb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if (isEven(i) && isVowel(c) && isUpper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwqc6q4ki.d(20): Error: undefined identifier `isEven`\n/tmp/tmpwqc6q4ki.d(20): Error: undefined identifier `isVowel`\n/tmp/tmpwqc6q4ki.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwqc6q4ki.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    auto is_upper_vowel = [](dchar c) { \n        return c.isUpper && \"AEIOU\".canFind(c);\n    };\n    long num = 0;\n    for (size_t i = 0; i < s.length; i += 2)\n    {\n        if (is_upper_vowel(s[i]))\n            num++;\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa2lcspu2.d(17): Error: found `c` when expecting `.` following dchar\n/tmp/tmpa2lcspu2.d(17): Error: found `)` when expecting identifier following `dchar`.\n/tmp/tmpa2lcspu2.d(17): Error: found `{` when expecting `,`\n/tmp/tmpa2lcspu2.d(18): Error: expression expected, not `return`\n/tmp/tmpa2lcspu2.d(18): Error: found `c` when expecting `,`\n/tmp/tmpa2lcspu2.d(18): Error: found `;` when expecting `,`\n/tmp/tmpa2lcspu2.d(19): Error: expression expected, not `}`\n/tmp/tmpa2lcspu2.d(19): Error: found `;` when expecting `,`\n/tmp/tmpa2lcspu2.d(20): Error: found `num` when expecting `.` following long\n/tmp/tmpa2lcspu2.d(20): Error: found `=` when expecting identifier following `long`.\n/tmp/tmpa2lcspu2.d(20): Error: found `0` when expecting `,`\n/tmp/tmpa2lcspu2.d(20): Error: expression expected, not `;`\n/tmp/tmpa2lcspu2.d(21): Error: found `for` when expecting `,`\n/tmp/tmpa2lcspu2.d(21): Error: found `i` when expecting `)`\n/tmp/tmpa2lcspu2.d(21): Error: found `;` when expecting `,`\n/tmp/tmpa2lcspu2.d(21): Error: fo",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    auto count = 0L;\n    foreach(i, e; iota(s.length))\n    {\n        if (e % 2 == 0 && isUpper(s[e]))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphsdpqy7x.d(18): Error: undefined identifier `iota`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsdpqy7x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    string vowels = \"AEIOU\";\n    foreach(i, char c; s) \n    {\n        if(i % 2 == 0 && c >= 'A' && c <= 'Z' && c != ' ') \n        {\n            count += 1;\n        }\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmhihg5hl.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmhihg5hl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ret = 0;\n    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && in(c, \"AEIOU\")) ret++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm5u7elek.d(20): Error: expression expected, not `in`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm5u7elek.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    auto count = 0L;\n    auto m = s.length;\n    foreach(i; 0..m)\n    {\n        if (i % 2 == 0)\n        {\n            switch(s[i])\n            {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj3vfgody.d(23): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj3vfgody.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(immutable i, c; s) \n    {\n        if(i % 2 == 0 && isUpper(c)) \n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpob0y9xwt.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpob0y9xwt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long len = s.length;\n    long sum = 0;\n    foreach(index,ch; s)\n    {\n        if (index % 2 == 0 && ch >= 'A' && ch <= 'Z')\n            sum++;\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0m3aefcc.d(30): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmp0m3aefcc.__unittest_L26_C1() [0x427ab2]\n??:? void tmp0m3aefcc.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s) \n    {\n        if((i % 2 == 0) && (c in ['A', 'E', 'I', 'O', 'U']))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_sl73uph.d(20): Error: incompatible types for `(c) in (['A', 'E', 'I', 'O', 'U'])`: `immutable(char)` and `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_sl73uph.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    char [] vowels = ['A', 'E', 'I', 'O', 'U'];\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && c.upperof in vowels)\n            count++;\n    }\n    return count;\n}\n/*\n    \n    Given a string s of integers and a number k, find the sum of all elements of s at indices that have k neighbors above them.\n    \n    For example:\n    >>> sum_neighbors(\"1,2,3,4,5,6,7,8,9,10\", 2)\n    7L\n    >>> sum_neighbors(\"-2,2,2,2,2,-2,2,2,2,2\", 1)\n    4L\n    >>> sum_neighbors(\"1,2,3,4,5,6,7,8,9,10\", 5)\n    0L\n    \n*/\nlong sum_neighbors(string s, long k) \n{\n    long [] arr = s.split(\",\").map!(to!long);\n    long sum = 0;\n    for(long i = 0; i < arr.length; i++)\n    {\n        long count = 0;\n        for(long j = i - k; j <= i + k; j++)\n        {\n            if(0 <= j && j < arr.length && arr[j] > arr[i])\n                count++;\n        }\n        if(count == k)\n            sum += arr[i];\n    }\n    return sum;\n}\n/*\n    \n    Given a string s of integers, find the largest value that occurs at the middle index of a tuple of 3 indices.\n    \n    For example:\n    >>> largest_mid(\"1,2,3,4,5,6,7,8,9,10\")\n    6L\n    >>> largest_mid(\"1,2,2,2,2,2,2,2,2,2\")\n    2L\n    >>> largest_mid(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphvvv6w6w.d(56): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvvv6w6w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ret = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n        ret += (i % 2 == 0 && isupper(s[i]));\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqnvgk0jc.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqnvgk0jc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return s.count!((c) { return (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') && (s.indexOf(c) % 2 == 0); });\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7l4o5kc7.d(17): Error: no property `count` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7l4o5kc7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163948
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && isUpper(s[i]))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpltdnq6_1.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpltdnq6_1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (int i = 0; i < s.length; i += 2) \n    {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count_if(s, (c)\n    {\n        return (1 - (c & 32) >> 5) & (1 - ((c & 31) & ~9) >> 5) & ((s.length + (s.length & 1) & 1) | (s.length & 1 & 1) | (1 ^ (s.length & 1 & 1)));\n    });\n}\n/*\n    \n    Written by \"Swift Lord\" (lol)\n    \n    I don't know how it works.\n    \n    It works.\n    \n    - D\n    \n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxhvzol_q.d(17): Error: undefined identifier `count_if`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxhvzol_q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long num_upper = 0;\n    foreach(i, v; s)\n    {\n        if (v >= 'A' && v <= 'Z' && i % 2 == 0)\n        {\n            num_upper++;\n        }\n    }\n    return num_upper;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0w1dg9gy.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp0w1dg9gy.__unittest_L27_C1() [0x427ab6]\n??:? void tmp0w1dg9gy.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    string uppers = \"AEIOU\";\n    for (size_t i = 0; i < s.length; i++) {\n        if (i % 2 == 0 && uppers.find(s[i]) != string.npos) {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp51bz6nqv.d(20): Error: no property `find` for type `string`\n/tmp/tmp51bz6nqv.d(20): Error: no property `npos` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp51bz6nqv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count!(c => c.isUpper && c.isVowel && (s.indexOf(c) % 2) == 0)(s);\n}\n \n \n/*\n    Write a function that returns the smallest prime factor\n    of a number that is greater than 1.\n    \n    For example:\n    >>> smallest_prime_factor(10)\n    2L\n    >>> smallest_prime_factor(11)\n    11L\n    >>> smallest_prime_factor(12)\n    2L\n    >>> smallest_prime_factor(21)\n    3L\n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyonukpgf.d(17): Error: template instance `count!((c) => c.isUpper && c.isVowel && (s.indexOf(c) % 2 == 0))` template `count` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyonukpgf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long n = 0;\n    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'))\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result;\n    foreach(idx, elem; s)\n    {\n        if(isEven(idx) && isUpper(elem))\n        {\n            result += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1_dx3eyq.d(20): Error: undefined identifier `isEven`\n/tmp/tmp1_dx3eyq.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1_dx3eyq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long res = 0;\n    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && 'A' <= c && c <= 'Z')\n            res++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpivbwgoki.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpivbwgoki.__unittest_L25_C1() [0x427ab2]\n??:? void tmpivbwgoki.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i+=2)\n    {\n        if (std.math.isupper(s[i]))\n        {\n            switch (s[i])\n            {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    count++;\n                    break;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp24dqd3ic.d(20): Error: undefined identifier `isupper` in module `std.math`\n/tmp/tmp24dqd3ic.d(22): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp24dqd3ic.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long res = 0;\n    long even=0;\n    foreach(c; s)\n    {\n        if(c=='A'||c=='E'||c=='I'||c=='O'||c=='U')\n        {\n            if(even%2==0)\n            {\n                res++;\n            }\n        }\n        even++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i += 2) \n    {\n        switch (s[i])\n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                count++;\n                break;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3pkgv1uh.d(20): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3pkgv1uh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long num = 0;\n    string vowels = \"AEIOU\";\n    foreach(i, e; s)\n    {\n        if(i % 2 == 0 && vowels.canFind(toupper(e)))\n            num++;\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0v8l7vuq.d(21): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0v8l7vuq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable c; s[0..$-1:2])\n    {\n        if(isUpperCase(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5cy1vn3o.d(18): Error: found `:` when expecting `,`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5cy1vn3o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(dchar c; s) \n    {\n        if(isVowel(c) && isUpper(c) && (count % 2) == 0) \n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\n    Given two strings, check if one is a permutation of the other\n    \n    For example:\n    >>> is_permutation(\"Michael Sorens\", \"michael sorens\")\n    true\n    >>> is_permutation(\"Michael Sorens\", \"michael soren\")\n    false\n    >>> is_permutation(\"Michael Sorens\", \"MICHAEL SORENS\")\n    true\n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpy9yj4wsm.d(20): Error: undefined identifier `isVowel`\n/tmp/tmpy9yj4wsm.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpy9yj4wsm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int num_vowels = 0;\n    foreach(i, letter; s) \n    {\n        if (letter == 'A' || letter == 'E' || letter == 'I' || letter == 'O' || letter == 'U') \n        {\n            if (i % 2 == 0) \n            {\n                num_vowels++;\n            }\n        }\n    }\n    return num_vowels;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(ch; 2..s.length by 2) \n    {\n        switch(s[ch])\n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                result++;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj7la05zi.d(18): Error: found `by` when expecting `)`\n/tmp/tmpj7la05zi.d(18): Error: found `)` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj7la05zi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count(filter!(i => i % 2 == 0)(s.byElem), c => isUpper(c));\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5l2qs8c1.d(17): Error: undefined identifier `count`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5l2qs8c1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r = 0;\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && c in \"AEIOU\")\n            r++;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjatg2tn7.d(20): Error: incompatible types for `(c) in (\"AEIOU\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjatg2tn7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long count = 0;\n  foreach(immutable c; s)\n  {\n    if((c >= 'A' && c <= 'Z') && isEven(count))\n    {\n      count++;\n    }\n  }\n  return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwz9fq8zb.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwz9fq8zb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if((i % 2) == 0 && c >= 'A' && c <= 'Z')\n        {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprc5co0o7.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmprc5co0o7.__unittest_L27_C1() [0x427ab6]\n??:? void tmprc5co0o7.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result;\n    foreach(immutable index, immutable c; s)\n    {\n        if((index % 2 == 0) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'))\n        {\n            result += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    import std.algorithm : filter, count;\n    import std.range : map;\n    import std.ascii : isUpper;\n    import std.string : strip;\n    import std.conv : to;\n    return to!long(count(filter(strip(s).map!((x) => x.isUpper && x.index % 2 == 0))));\n}\n \n// main function\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpln030d01.d(18): Error: module `std.range` import `map` not found\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpln030d01.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int result = 0;\n    foreach(immutable char; s)\n    {\n        if(isOdd(result) && isUpper(s))\n            result++;\n        else\n            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpygc5_46j.d(18): Error: no identifier for declarator `char`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpygc5_46j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    import std.string;\n    import std.algorithm;\n    import std.range;\n    enum vowels = \"AEIOU\";\n    long num_upper = 0;\n    long sz = s.length;\n    foreach(idx;iota(sz))\n    {\n        if(idx % 2 == 0)\n        {\n            auto vowel = s[idx];\n            if(vowels.canFind(vowel))\n            {\n                if(toUpper(vowel) == vowel)\n                {\n                    num_upper++;\n                }\n            }\n        }\n    }\n    return num_upper;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163951
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long num_vowels = 0;\n    foreach(int i, char c; s)\n    {\n        if (isEven(i) && isVowel(c) && isUpper(c)) num_vowels++;\n    }\n    return num_vowels;\n}\n// -----------------------------------------------\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp96_5ewys.d(20): Error: undefined identifier `isEven`\n/tmp/tmp96_5ewys.d(20): Error: undefined identifier `isVowel`\n/tmp/tmp96_5ewys.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp96_5ewys.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    // TODO\n    return 0L;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3wivd6rb.d(24): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmp3wivd6rb.__unittest_L20_C1() [0x427a3a]\n??:? void tmp3wivd6rb.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int i;\n    long count = 0;\n    for (i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            if (i % 2 == 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result;\n    int i;\n    foreach(i, char c; s)\n    {\n        if (isupper(c) && i % 2 == 0)\n            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo4catlda.d(19): Error: variable `i` is shadowing variable `tmpo4catlda.count_upper.i`\n/tmp/tmpo4catlda.d(21): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo4catlda.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long num = 0;\n    foreach(immutable c; s)\n    {\n        if (c in ['A', 'E', 'I', 'O', 'U']) num += (c.isUpper & (s.indexOf(c) % 2 == 0));\n    }\n    return num;\n}\n \n/*\n    This is another solution to the count uppercase vowels problem.\n    \n    It was contributed by Timon Gehr.\n*/\nlong count_upper_2(string s)\n{\n    long x = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if ((i & 1) == 0 && (c in ['A', 'E', 'I', 'O', 'U'])) x++;\n    }\n    return x;\n}\n \nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5wklpy3m.d(20): Error: incompatible types for `(c) in (['A', 'E', 'I', 'O', 'U'])`: `immutable(char)` and `char[]`\n/tmp/tmp5wklpy3m.d(20): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmp5wklpy3m.d(20): Error: no property `indexOf` for type `string`\n/tmp/tmp5wklpy3m.d(35): Error: incompatible types for `(c) in (['A', 'E', 'I', 'O', 'U'])`: `immutable(char)` and `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5wklpy3m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long upper = 0;\n    foreach(i, char c; s)\n    {\n        if(i % 2 == 0 && isUpper(c))\n            upper++;\n    }\n    return upper;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9sqzu34b.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9sqzu34b.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if (i % 2 == 0 && isUpper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi4_uadfk.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi4_uadfk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if ((s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') && i % 2 == 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int result = 0;\n    // YOUR CODE HERE\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpymq4098s.d(25): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpymq4098s.__unittest_L21_C1() [0x427a46]\n??:? void tmpymq4098s.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    auto ret = 0L;\n    auto it = s.begin();\n    auto ie = s.end();\n    while (it != ie) {\n        if (isVowel(*it) && isupper(*it) && (distance(s.begin(), it) % 2 == 0)) {\n            ret++;\n        }\n        it++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp50y4_9yv.d(18): Error: no property `begin` for type `string`\n/tmp/tmp50y4_9yv.d(19): Error: no property `end` for type `string`\n/tmp/tmp50y4_9yv.d(21): Error: undefined identifier `isVowel`\n/tmp/tmp50y4_9yv.d(21): Error: undefined identifier `isupper`\n/tmp/tmp50y4_9yv.d(21): Error: undefined identifier `distance`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp50y4_9yv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable index, immutable c; s) \n    {\n        if(c.isUpper)\n        {\n            if(isEven(index))\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpanvscscw.d(20): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmpanvscscw.d(22): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpanvscscw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            if (i % 2 == 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long n = 0;\n    foreach(immutable i, const c; s) {\n        if (c.isUpper && (i % 2 == 0))\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw0e7svnt.d(19): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw0e7svnt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r = 0;\n    for (int i = 0; i < s.length; i += 2)\n    {\n        if (isdigit(s[i]))\n            continue;\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            r++;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd6p306p2.d(20): Error: undefined identifier `isdigit`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd6p306p2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    auto ret = 0L;\n    auto v = [\"A\",\"E\",\"I\",\"O\",\"U\"];\n    foreach(i, c; s) \n    {\n        if(i % 2 == 0 && c in v)\n            ret++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1155_iip.d(21): Error: incompatible types for `(c) in (v)`: `immutable(char)` and `string[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1155_iip.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return s.filter!((ref c)=>c.isUpper && cast(int)c.to!char % 2 == 0).length;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpc2sfiqyp.d(17): Error: no property `filter` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpc2sfiqyp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long c = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (s[i] >= 'A' && s[i] <= 'Z' && i % 2 == 0)\n            c++;\n    }\n    return c;\n}\n/*\n    Not sure what is the best way to test this so far.\n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3zbh9lv0.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427e65]\n??:? void tmp3zbh9lv0.__unittest_L28_C1() [0x427ada]\n??:? void tmp3zbh9lv0.__modtest() [0x427be8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbff]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa92]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc25]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300d4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa69]\n??:? runModuleUnitTests [0x42b9d5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428328]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable i, immutable char; s)\n    {\n        if(i % 2 == 0 && isUpperCase(char))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpguggnii6.d(18): Error: no identifier for declarator `char`\n/tmp/tmpguggnii6.d(20): Error: found `)` when expecting `.` following char\n/tmp/tmpguggnii6.d(20): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpguggnii6.d(21): Error: found `{` when expecting `,`\n/tmp/tmpguggnii6.d(22): Error: found `;` when expecting `,`\n/tmp/tmpguggnii6.d(23): Error: expression expected, not `}`\n/tmp/tmpguggnii6.d(24): Error: found `}` when expecting `,`\n/tmp/tmpguggnii6.d(25): Error: expression expected, not `return`\n/tmp/tmpguggnii6.d(25): Error: found `count` when expecting `,`\n/tmp/tmpguggnii6.d(25): Error: expression expected, not `;`\n/tmp/tmpguggnii6.d(26): Error: found `}` when expecting `,`\n/tmp/tmpguggnii6.d(27): Error: expression expected, not `unittest`\n/tmp/tmpguggnii6.d(28): Error: found `{` when expecting `,`\n/tmp/tmpguggnii6.d(29): Error: expression expected, not `alias`\n/tmp/tmpguggnii6.d(29): Error: found `candidate` when expecting `,`\n/tmp/tmpguggnii6.d(29): Error: expression expecte",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i++) \n    {\n        if (isEven(i) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu9cta1ap.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu9cta1ap.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long cnt = 0;\n    foreach(i, ch; s)\n    {\n        if (i % 2 == 0 && ch >= 'A' && ch <= 'Z')\n            cnt++;\n    }\n    return cnt;\n}\n \n/*\n    Given a string s, count the number of uppercase consonants in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    2L\n    \n*/\nlong count_consonants(string s) \n{\n    long cnt = 0;\n    foreach(i, ch; s)\n    {\n        if (i % 2 == 0 && ch >= 'A' && ch <= 'Z' && ch != 'A' && ch != 'E' && ch != 'I' && ch != 'O' && ch != 'U')\n            cnt++;\n    }\n    return cnt;\n}\n \n/*\n    Given a string s, count the number of lowercase vowels in odd indices.\n    \n    For example:\n    >>> count_lower(\"aBCdEf\")\n    2L\n    >>> count_lower(\"abcdefg\")\n    3L\n    >>> count_lower(\"dBBE\")\n    0L\n    \n*/\nlong count_lower(string s) \n{\n    long cnt = 0;\n    foreach(i, ch; s)\n    {\n        if (i % 2 == 1 && ch >= 'a' && ch <= 'z')\n            cnt++;\n    }\n    return cnt;\n}\n \n/*\n    Given a string s, count the number of lowercase consonants in odd indices.\n    \n    For example:\n    >>> count_lower(\"aBCdEf\")\n    1L\n    >>> count_lower(\"abcdefg\")\n    2L\n    >>> count_lower(\"dBBE\")\n    0L\n    \n*/\nlong count_lower_consonants(string s) \n{\n    long cnt = 0;\n    foreach(i, ch; s)\n\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjdss34w8.d(89): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjdss34w8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    int len = s.length;\n    for (int i = 0; i < len; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp90uaznoi.d(18): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp90uaznoi.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(immutable letter; s)\n    {\n        if (letter.isUpper)\n        {\n            if (s.count ~ isEven)\n            {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp36227f8x.d(20): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmp36227f8x.d(22): Error: no property `count` for type `string`\n/tmp/tmp36227f8x.d(22): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp36227f8x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return accumulate(s.length, 0L, cast(long)&s[0], __lambda2(size_t i, long a, char x)\n    {\n        return isUpper(x) && i % 2 == 0 ? a + 1 : a;\n    });\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvl5v0hr4.d(17): Error: found `i` when expecting `,`\n/tmp/tmpvl5v0hr4.d(17): Error: expression expected, not `,`\n/tmp/tmpvl5v0hr4.d(17): Error: found `long` when expecting `,`\n/tmp/tmpvl5v0hr4.d(17): Error: found `x` when expecting `.` following char\n/tmp/tmpvl5v0hr4.d(17): Error: found `)` when expecting identifier following `char`.\n/tmp/tmpvl5v0hr4.d(18): Error: found `{` when expecting `,`\n/tmp/tmpvl5v0hr4.d(19): Error: expression expected, not `return`\n/tmp/tmpvl5v0hr4.d(19): Error: found `isUpper` when expecting `,`\n/tmp/tmpvl5v0hr4.d(19): Error: found `;` when expecting `,`\n/tmp/tmpvl5v0hr4.d(20): Error: expression expected, not `}`\n/tmp/tmpvl5v0hr4.d(20): Error: found `;` when expecting `,`\n/tmp/tmpvl5v0hr4.d(21): Error: expression expected, not `}`\n/tmp/tmpvl5v0hr4.d(22): Error: found `unittest` when expecting `,`\n/tmp/tmpvl5v0hr4.d(34): Error: found `void` when expecting `,`\n/tmp/tmpvl5v0hr4.d(34): Error: found `{` when expecting `,`\n/tmp/tmpvl5v0hr4.d(34): Error: expression expected, not `}`\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    int size = s.length;\n    for (int i = 0; i < size; i += 2) \n    {\n        switch (s[i]) \n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                result++;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpseudrkxr.d(18): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\n/tmp/tmpseudrkxr.d(21): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpseudrkxr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n\tint count = 0;\n\tforeach(char c; s)\n\t{\n\t\tif(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n\t\t{\n\t\t\tif(s.indexof(c) % 2 == 0)\n\t\t\t{\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpet8hos8d.d(22): Error: no property `indexof` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpet8hos8d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s) \n    {\n        if (isVowel(c) && i % 2 == 0 && isUpper(c))\n            count++;\n    }\n    return count;\n}\n```\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprqeq2shn.d(25): Error: declaration expected, not `\"\"`\n/tmp/tmprqeq2shn.d(25): Error: unterminated string constant starting at /tmp/tmprqeq2shn.d(25)\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprqeq2shn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(const char c; s)\n    {\n        if (c < 'a' || c > 'z')\n            continue;\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            continue;\n        if (size_t(c - 'a') % 2 == 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuald_heo.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpuald_heo.__unittest_L29_C1() [0x427ade]\n??:? void tmpuald_heo.__modtest() [0x427bec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa26]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430068]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9fd]\n??:? runModuleUnitTests [0x42b969]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (isupper(s[i]) && i % 2 == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4ik6lh1y.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4ik6lh1y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n\tlong uppercount = 0;\n\tfor (size_t i = 0; i < s.length; i += 2)\n\t{\n\t\tif (isupper(s[i]))\n\t\t{\n\t\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n\t\t\t{\n\t\t\t\tuppercount++;\n\t\t\t}\n\t\t}\n\t}\n\treturn uppercount;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp71jsugx2.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp71jsugx2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (long i = 0; i < s.length; i++) \n    {\n        result += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') && (i % 2 == 0);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (isVowel(s[i]) && (i % 2 == 0) && (isUpper(s[i])))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu0g3_pb1.d(20): Error: undefined identifier `isVowel`\n/tmp/tmpu0g3_pb1.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0g3_pb1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && 'A' <= c && c <= 'Z')\n            count++;\n    }\n    return count;\n}\n/*\n    Given a string s, return its reversal with the upper case vowels in reverse order.\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2d4hw_ax.d(25): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2d4hw_ax.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(i,ch; s)\n    {\n        if(i%2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n            ++result;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcibeaxri.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e85]\n??:? void tmpcibeaxri.__unittest_L27_C1() [0x427afa]\n??:? void tmpcibeaxri.__modtest() [0x427c08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aab2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc45]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300f4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbd1]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa89]\n??:? runModuleUnitTests [0x42b9f5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428348]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s) \n    {\n        if(i % 2 == 0 && to!char.isupper(c)) \n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvj0cx6ox.d(20): Error: template instance `to!char` template `to` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvj0cx6ox.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i,e; s)\n    {\n        if(i % 2 == 0 && isUpper(e))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqy1o94ty.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqy1o94ty.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long result = 0;\n  for (size_t i = 0; i < s.length; i += 2) \n  {\n    result += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U');\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n\tlong count = 0;\n\tforeach(i, char c; s)\n\t{\n\t\tif(isalpha(c) && isupper(c) && isEven(i))\n\t\t{\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppa7mrz8o.d(20): Error: undefined identifier `isalpha`\n/tmp/tmppa7mrz8o.d(20): Error: undefined identifier `isupper`\n/tmp/tmppa7mrz8o.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppa7mrz8o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && isupper(s[i]))\n        {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu0bqg2sh.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu0bqg2sh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(i, c; s)\n    {\n        if((i % 2 == 0) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'))\n        {\n            result += 1;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i++) \n    {\n        char c = s[i];\n        if ((i % 2 == 0) && (inSet('A', 'E', 'I', 'O', 'U')(c))) \n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjqje0f14.d(21): Error: undefined identifier `inSet`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjqje0f14.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long vowels = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            vowels += 1;\n        }\n    }\n    return vowels;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7imbqsws.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ef5]\n??:? void tmp7imbqsws.__unittest_L27_C1() [0x427bbe]\n??:? void tmp7imbqsws.__modtest() [0x427c78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc8f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab22]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fcb5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430164]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc41]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aaf9]\n??:? runModuleUnitTests [0x42ba65]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4283b8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    string vowels = \"AEIOU\";\n    foreach(i, char ch; s)\n    {\n        if (ch >= 'A' && ch <= 'Z' && i % 2 == 0 && vowels.find(ch) != -1)\n            count++;\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9nf5tk31.d(26): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9nf5tk31.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s)\n    {\n        if (i % 2 == 0 && \"AEIOU\".canFind(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk0j0a190.d(20): Error: no property `canFind` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk0j0a190.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n\tlong result = 0;\n\tforeach(char c; s) \n\t{\n\t\t// if even index and uppercase vowel\n\t\tif(distance(s.begin(), c) % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) \n\t\t{\n\t\t\tresult++;\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphvfuiqw1.d(21): Error: undefined identifier `distance`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphvfuiqw1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return enumerate(s)\n        .filter!((a) => isEven(a[0]))\n        .filter!((a) => isUpper(a[1]))\n        .count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwyfb42kk.d(17): Error: undefined identifier `enumerate`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwyfb42kk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int i;\n    long sum = 0;\n    foreach(char c; s)\n    {\n        if (i % 2 == 0 && isupper(c))\n            sum++;\n        i++;\n    }\n    return sum;\n}\n/*\n    Remove trailing whitespace from a string in place.\n    \n    For example:\n    >>> string s = \"hello world  \";\n    >>> rstrip(s);\n    >>> assert(s == \"hello world\");\n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2sv_bxnl.d(21): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2sv_bxnl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if(isEven(i) && c.isUpper) count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqtbp4vnc.d(20): Error: undefined identifier `isEven`\n/tmp/tmpqtbp4vnc.d(20): Error: no property `isUpper` for type `immutable(char)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqtbp4vnc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ans=0;\n    foreach(i, c; s)\n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            ans += (i % 2) == 0;\n        }\n    }\n    return ans;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long i = 0;\n    long count = 0;\n    foreach(c; s)\n    {\n        if (isEven(i) && isUpper(c))\n        {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgswpt1zt.d(21): Error: undefined identifier `isEven`\n/tmp/tmpgswpt1zt.d(21): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgswpt1zt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r = 0;\n    for (size_t i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            r++;\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i++) \n    {\n        char c = s[i];\n        if (isalpha(c) && isupper(c) && i % 2 == 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5w6b_v85.d(21): Error: undefined identifier `isalpha`\n/tmp/tmp5w6b_v85.d(21): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w6b_v85.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    int sLength = s.length;\n    for (int i = 0; i < sLength; i += 2) \n    {\n        switch (s[i]) \n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                result++;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpvw8ub857.d(18): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\n/tmp/tmpvw8ub857.d(21): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpvw8ub857.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, const ch; s)\n    {\n        if (isalpha(ch) && isupper(ch) && i % 2 == 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz0oclh87.d(20): Error: undefined identifier `isalpha`\n/tmp/tmpz0oclh87.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz0oclh87.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ret = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            ret++;\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(char c; s) \n    {\n        if(c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            if(result % 2 == 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd04gu5as.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427e5d]\n??:? void tmpd04gu5as.__unittest_L30_C1() [0x427b26]\n??:? void tmpd04gu5as.__modtest() [0x427be0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb83]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa16]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430058]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9ed]\n??:? runModuleUnitTests [0x42b959]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282ac]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s) \n    {\n        if (i % 2 == 0 && isupper(c)) \n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd94dbtho.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd94dbtho.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, dchar c; s)\n    {\n        if( i % 2 == 0 && isUpper(c) && c in ['A', 'E', 'I', 'O', 'U'])\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo7xeml6r.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpo7xeml6r.d(20): Error: incompatible types for `(c) in (['A', 'E', 'I', 'O', 'U'])`: `dchar` and `char[]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7xeml6r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (long i = 0; i < s.length; i += 2) \n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    auto len = s.length;\n    if (len == 0) return 0;\n    for (long i = 0; i < len; i += 2) \n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') count++;\n    }\n    return count;\n}\n/*\n    Given a date, return the number of seconds between a given date and January 1, 1970.\n    \n    >>> get_seconds(\"2018/08/27\")\n    1535356800L\n    >>> get_seconds(\"2019/01/01\")\n    1546300800L\n    >>> get_seconds(\"1970/01/01\")\n    0L\n    \n*/\nlong get_seconds(string date)\n{\n    import std.datetime : DateTime;\n    auto dt = DateTime(date);\n    return dt.toEpochTime;\n}\n/*\n    Given an array of integers, return the number of doubles.\n    \n    >>> count_doubles([1, 2, 3, 4, 5, 6])\n    0L\n    >>> count_doubles([1, 1, 2, 3, 4, 5, 6])\n    1L\n    >>> count_doubles([1, 1, 2, 2, 3, 4, 5, 6])\n    2L\n*/\nlong count_doubles(long[] a)\n{\n    if (a.length < 2) return 0;\n    long count = 0;\n    for (long i = 0; i < a.length - 1; i++)\n    {\n        if (a[i] == a[i + 1]) count++;\n    }\n    return count;\n}\n/*\n    Given an array of integers and a number n, return the number of integers in the array that are \n    evenly divisible by n.\n    \n    >>> count_div(5, [1, 2, 3, 4, 5, 6])\n    1L\n    >>> count_div(5, [1, 2, 3, 4, 1, 2, 3,\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbd_bni07.d(63): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbd_bni07.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sum = 0;\n    foreach(i, c; s)\n    {\n        if((isVowel(c) || c == 'y') && isEven(i) && isUpper(c))\n        {\n            sum++;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxfx0xcv9.d(20): Error: undefined identifier `isVowel`\n/tmp/tmpxfx0xcv9.d(20): Error: undefined identifier `isEven`\n/tmp/tmpxfx0xcv9.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxfx0xcv9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s)\n    {\n        if(i%2 == 0 && isalpha(c) && isupper(c))\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdtf29cqg.d(20): Error: undefined identifier `isalpha`\n/tmp/tmpdtf29cqg.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdtf29cqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable c; s)\n    {\n        if (isUpperCase(c) && isEven(count))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi_gfwgiy.d(20): Error: undefined identifier `isUpperCase`\n/tmp/tmpi_gfwgiy.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi_gfwgiy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    auto len = s.length;\n    for (long i = 0; i < len; i++)\n    {\n        if (is_upper(s[i]) && (i % 2 == 0))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpflm9vmw1.d(21): Error: undefined identifier `is_upper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpflm9vmw1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(i, e; s)\n    {\n        if (i % 2 == 0 && e == toUpper(e))\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppdmtp97n.d(20): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppdmtp97n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    long sz = s.length;\n    for (long i = 0; i < sz; i+=2) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    foreach(i, char c; s)\n    {\n        if (i % 2 == 0 && isupper(c))\n            counter++;\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5ngpc0dt.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5ngpc0dt.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z')\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt6bqyq58.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e6d]\n??:? void tmpt6bqyq58.__unittest_L27_C1() [0x427ae2]\n??:? void tmpt6bqyq58.__modtest() [0x427bf0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc07]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa9a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc2d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300dc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fbb9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aa71]\n??:? runModuleUnitTests [0x42b9dd]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428330]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count(s, (elem,idx)=>elem=='A'||elem=='E'||elem=='I'||elem=='O'||elem=='U');\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprsmf3agh.d(17): Error: undefined identifier `count`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprsmf3agh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sz = s.length;\n    long result = 0;\n    for (size_t i = 0; i < sz; i++)\n    {\n        if (i % 2 == 0 && isUpper(s[i]))\n        {\n            result++;\n        }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1mekhuu7.d(28): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1mekhuu7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long evencount = 0;\n    char vowelcheck;\n    char vowels[5] = \"AEIOU\";\n    foreach(string i; 0..strlen(s))\n    {\n        if(i % 2 == 0)\n        {\n            vowelcheck = toupper(s[i]);\n            foreach(char j; vowels)\n            {\n                if(vowelcheck == j)\n                {\n                    evencount++;\n                }\n            }\n        }\n    }\n    return evencount;\n}\n/*\n    Given a string s, count the number of uppercase vowels in odd indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    2L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long oddcount = 0;\n    char vowelcheck;\n    char vowels[5] = \"AEIOU\";\n    foreach(string i; 0..strlen(s))\n    {\n        if(i % 2 != 0)\n        {\n            vowelcheck = toupper(s[i]);\n            foreach(char j; vowels)\n            {\n                if(vowelcheck == j)\n                {\n                    oddcount++;\n                }\n            }\n        }\n    }\n    return oddcount;\n}\n/*\n    Given two strings s and t, returns an array of each character in s and t.\n    \n    For example:\n    >>> makeArray(\"A\", \"B\")\n    ['A', 'B']\n    >>> makeArray(\"aaa\", \"bbb\")\n    ['a', 'b', 'a', 'b', 'a', 'b']\n    \n*/\nchar[] makeArray(string s, string t) \n{\n    char array[strlen(s) + strlen(t)];\n    foreach(string i; 0..strlen(s))\n    {\n        array[i] = s[i];\n    }\n    foreach(string i; 0..strlen(t))\n    {\n        array[i\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa30qnc1m.d(19): Deprecation: instead of C-style syntax, use D-style syntax `char[5] vowels`\n/tmp/tmpa30qnc1m.d(52): Deprecation: instead of C-style syntax, use D-style syntax `char[5] vowels`\n/tmp/tmpa30qnc1m.d(81): Deprecation: instead of C-style syntax, use D-style syntax `char[strlen(s) + strlen(t)] array`\n/tmp/tmpa30qnc1m.d(89): Error: found `unittest` when expecting `,`\n/tmp/tmpa30qnc1m.d(101): Error: found `void` when expecting `,`\n/tmp/tmpa30qnc1m.d(101): Error: found `{` when expecting `,`\n/tmp/tmpa30qnc1m.d(101): Error: expression expected, not `}`\n/tmp/tmpa30qnc1m.d(101): Error: found `End of File` when expecting `,`\n/tmp/tmpa30qnc1m.d(101): Error: found `End of File` when expecting `]`\n/tmp/tmpa30qnc1m.d(101): Error: found `End of File` when expecting `;` following statement\n/tmp/tmpa30qnc1m.d(101): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpa30qnc1m.d(101): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-u",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable c; 0 .. s.length)\n    {\n        if(isEven(c) && s[c] >= 'A' && s[c] <= 'Z') count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpomgyuoni.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpomgyuoni.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(int i, char c; s)\n    {\n        if(is_upper(c) && i % 2 == 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp09srg7mr.d(20): Error: undefined identifier `is_upper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp09srg7mr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable c; s)\n    {\n        if(isupper(c) && c in \"AEIOU\")\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxrjri7y2.d(20): Error: undefined identifier `isupper`\n/tmp/tmpxrjri7y2.d(20): Error: incompatible types for `(c) in (\"AEIOU\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxrjri7y2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (isupper(s[i]) && i % 2 == 0)\n        {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplrvxs19h.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplrvxs19h.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if(c >= 'A' && c <= 'Z' && i % 2 == 0)\n            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0z5r2uq0.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp0z5r2uq0.__unittest_L25_C1() [0x427aba]\n??:? void tmp0z5r2uq0.__modtest() [0x427bc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] in \"AEIOU\")\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpl5qtezzr.d(20): Error: incompatible types for `(s[cast(ulong)i]) in (\"AEIOU\")`: `immutable(char)` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpl5qtezzr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163949
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i,j; s)\n    {\n        if(i%2==0)\n        {\n            if(j=='A'||j=='E'||j=='I'||j=='O'||j=='U')\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long res = 0;\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && c >= 'A' && c <= 'Z')\n            res++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr9fdqniz.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpr9fdqniz.__unittest_L25_C1() [0x427ab2]\n??:? void tmpr9fdqniz.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count!((x) => (x[1] % 2 == 0) && (x[0] in 'AEIOU'))(enumerate(s));\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwukot5a3.d(17): Error: unterminated character constant\n/tmp/tmpwukot5a3.d(17): Error: unterminated character constant\n/tmp/tmpwukot5a3.d(17): Error: found `EIOU` when expecting `)`\n/tmp/tmpwukot5a3.d(17): Error: found `63U` when expecting `)` following template argument list\n/tmp/tmpwukot5a3.d(17): Error: found `)` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwukot5a3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (size_t i = 0; i < s.length; i += 2)\n    {\n        char c = s[i];\n        count += isUpper(c) && isVowel(c);\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9_av1djp.d(21): Error: undefined identifier `isUpper`\n/tmp/tmp9_av1djp.d(21): Error: undefined identifier `isVowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9_av1djp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    string vowels = \"AEIOU\";\n    for (long i = 0; i < s.length; i++) {\n        char c = s[i];\n        if (i % 2 == 0 && c in vowels)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgnpqv76e.d(21): Error: incompatible types for `(c) in (vowels)`: `char` and `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgnpqv76e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(immutable i, immutable c; s)\n    {\n        if(i%2 == 0 && isUpper(c))\n            result++;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps0l17i3t.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0l17i3t.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    foreach(i, e; s) \n    {\n        if(i % 2 == 0 && isupper(e))\n            counter++;\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0xhv375l.d(20): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0xhv375l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long i;\n    long count = 0;\n    for (i = 0; i < s.length; i += 2) \n    {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    enum vowels = ['A', 'E', 'I', 'O', 'U'];\n    long num_upper = 0;\n    foreach(index, c; s) \n    {\n        if (index % 2 == 0 && std.algorithm.any!(isUpper)(vowels, c))\n            num_upper++;\n    }\n    return num_upper;\n}\n \nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi46hi__q.d(21): Error: undefined identifier `algorithm` in package `std`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi46hi__q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (long i = 0; i < s.length; i += 2)\n    {\n        if (s[i] in ['A', 'E', 'I', 'O', 'U'])\n        {\n            count++;\n        }\n    }\n    return count;\n}\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptlrl9pjm.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptlrl9pjm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long res = 0;\n    foreach(immutable i, immutable c; s) \n    {\n        if (i % 2 == 0 && isUpper(c)) \n        {\n            res++;\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw8j6b45s.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw8j6b45s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        if (isVowel(s[i]) && s[i] == toupper(s[i]) && i % 2 == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_8ziw6_u.d(20): Error: undefined identifier `isVowel`\n/tmp/tmp_8ziw6_u.d(20): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_8ziw6_u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    char uc;\n    foreach(immutable index, immutable ch; s)\n    {\n        uc = toUpper(ch);\n        if(index % 2 == 0 && (uc == 'A' || uc == 'E' || uc == 'I' || uc == 'O' || uc == 'U'))\n        {\n            counter++;\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzm_0ya64.d(21): Error: undefined identifier `toUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzm_0ya64.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    int vowels = 0;\n    for (int i = 0; i < s.length; i++)\n    {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            if (i % 2 == 0)\n            {\n                vowels++;\n            }\n        }\n    }\n    return vowels;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long numUppers = 0;\n    foreach(immutable index, immutable c; s) \n    {\n        if(index % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')) \n        {\n            numUppers++;\n        }\n    }\n    return numUppers;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n\tlong counter = 0;\n\tforeach(i, c; s)\n\t{\n\t\tif(isVowel(c) && isUpper(c) && isEven(i))\n\t\t{\n\t\t\tcounter++;\n\t\t}\n\t}\n\treturn counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyjazg26.d(20): Error: undefined identifier `isVowel`\n/tmp/tmpoyjazg26.d(20): Error: undefined identifier `isUpper`\n/tmp/tmpoyjazg26.d(20): Error: undefined identifier `isEven`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyjazg26.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long result = 0;\n  foreach(i, x; s) \n  {\n    if (x >= 'A' && x <= 'Z' && i % 2 == 0) \n    {\n      result++;\n    }\n  }\n  return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_f0okaun.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmp_f0okaun.__unittest_L27_C1() [0x427ab6]\n??:? void tmp_f0okaun.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    static uint[] vowel = [\n        ('A'.ord),\n        ('E'.ord),\n        ('I'.ord),\n        ('O'.ord),\n        ('U'.ord)\n    ];\n    long sum = 0;\n    foreach(i, c; s)\n    {\n        auto o = c.ord;\n        if(o > 64 && o < 91)\n        {\n            auto d = o - 65;\n            foreach(i, v; vowel)\n            {\n                if(v == d)\n                {\n                    sum++;\n                    break;\n                }\n            }\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8uskmtju.d(18): Error: no property `ord` for type `char`\n/tmp/tmp8uskmtju.d(19): Error: no property `ord` for type `char`\n/tmp/tmp8uskmtju.d(20): Error: no property `ord` for type `char`\n/tmp/tmp8uskmtju.d(21): Error: no property `ord` for type `char`\n/tmp/tmp8uskmtju.d(22): Error: no property `ord` for type `char`\n/tmp/tmp8uskmtju.d(27): Error: no property `ord` for type `immutable(char)`\n/tmp/tmp8uskmtju.d(31): Error: variable `i` is shadowing variable `tmp8uskmtju.count_upper.i`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8uskmtju.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    //size_t size = s.size();\n    long count = 0;\n    for (size_t i = 0; i < s.size(); i += 2)\n    {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8fbkbpi2.d(19): Error: no property `size` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fbkbpi2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long n = 0;\n    for (size_t i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && isUpperCase(s[i]))\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgl61hsx2.d(20): Error: undefined identifier `isUpperCase`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgl61hsx2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ret = 0;\n    foreach(char c; s) \n    {\n        switch(c) \n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                ret += (s.length - s.indexof(c)) % 2;\n                break;\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4dblwzq.d(27): Error: no property `indexof` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4dblwzq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ct = 0;\n    foreach( immutable dchar c; s )\n    {\n        if( ct % 2 == 0 && isUpper(c) && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') )\n            ct++;\n    }\n    return ct;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppp9s5g9q.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppp9s5g9q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    foreach(i, c; s) \n    {\n        if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') \n        {\n            if (i % 2 == 0) \n            {\n                result += 1;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    uint i = 0;\n    long ret = 0;\n    foreach(c; s)\n    {\n        if(i % 2 == 0 && c >= 'A' && c <= 'Z')\n            ret++;\n        i++;\n    }\n    return ret;\n}\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuojfor_2.d(27): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuojfor_2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long count = 0;\n  foreach( immutable c; s)\n  {\n    static if(isUpper(c))\n    {\n      count++;\n    }\n  }\n  return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp16dl10ov.d(20): Error: undefined identifier `isUpper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp16dl10ov.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long upper = 0;\n    foreach(char c; s)\n    {\n        if(isupper(c) && (s.indexOf(c) % 2) == 0)\n        {\n            upper++;\n        }\n    }\n    return upper;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa_rq2ji4.d(20): Error: undefined identifier `isupper`, did you mean variable `upper`?\n/tmp/tmpa_rq2ji4.d(20): Error: no property `indexOf` for type `string`\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long res = 0;\n    auto vowels = \"AEIOU\";\n    foreach(immutable idx, immutable c; s)\n    {\n        if (idx % 2 == 0 && toupper(c) in vowels)\n            res++;\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp279p1mde.d(21): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp279p1mde.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, char c; s)\n    {\n        if (c >= 'A' && c <= 'Z' && i % 2 == 0)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpre8pdz4d.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpre8pdz4d.__unittest_L25_C1() [0x427ab6]\n??:? void tmpre8pdz4d.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long r = 0;\n    foreach(i, c; s) \n    {\n        if (c >= 'A' && c <= 'Z' && (i & 1) == 0) \n        {\n            r++;\n        }\n    }\n    return r;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmz92spor.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427e45]\n??:? void tmpmz92spor.__unittest_L27_C1() [0x427ab6]\n??:? void tmpmz92spor.__modtest() [0x427bc4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb6b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb91]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430040]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb1d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9d5]\n??:? runModuleUnitTests [0x42b941]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428294]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long vowels = 0;\n    long size = s.length;\n    for (long i = 0; i < size; i += 2)\n    {\n        switch (s[i])\n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                vowels++;\n                break;\n        }\n    }\n    return vowels;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo7ldovds.d(21): Error: `switch` statement without a `default`; use `final switch` or add `default: assert(0);` or add `default: break;`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo7ldovds.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n  long ret = 0;\n  foreach( i, c; s)\n  {\n    if( is_upper(c) && (i % 2) == 0)\n    {\n      ++ret;\n    }\n  }\n  return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7pyhjc7v.d(20): Error: undefined identifier `is_upper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7pyhjc7v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable int i, immutable char c; s) \n    {\n        if(i % 2 == 0 && c in ['A', 'E', 'I', 'O', 'U'])\n            count++;\n    }\n    return count;\n}\n/*\n    Given a string s, count the number of substrings that start with the prefix \"a\".\n    \n    For example:\n    >>> count_a(\"a\")\n    1L\n    >>> count_a(\"banana\")\n    1L\n    >>> count_a(\"aardvark\")\n    2L\n*/\nlong count_a(string s) \n{\n    long count = 0;\n    immutable int n = s.length;\n    foreach(immutable int i; 0..n) \n    {\n        if(s[i..n].startsWith(\"a\"))\n            count++;\n    }\n    return count;\n}\n/*\n    Given a string s, count the number of substrings that start with the prefix \"ab\".\n    \n    For example:\n    >>> count_ab(\"ab\")\n    1L\n    >>> count_ab(\"ababab\")\n    3L\n    >>> count_ab(\"bababab\")\n    0L\n*/\nlong count_ab(string s) \n{\n    long count = 0;\n    immutable int n = s.length;\n    foreach(immutable int i; 0..n) \n    {\n        if(s[i..n].startsWith(\"ab\"))\n            count++;\n    }\n    return count;\n}\n/*\n    Given a string s, count the number of contiguous substrings of length at least 2 \n    whose maximum is the same as their minimum.\n    \n    For example:\n    >>> count_maxmin(\"aa\")\n    1L\n    >>> count_maxmin(\"abac\")\n    2L\n    >>> count_maxmin(\"abba\")\n    1L\n*/\nlong count_maxmin(string s) \n{\n    long count = 0;\n    immutable int n = s.length;\n    foreach(immutable int i; 0..n) \n    {\n        fore\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpntpjr_ly.d(88): Error: found `unittest` when expecting `;` following statement\n/tmp/tmpntpjr_ly.d(100): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpntpjr_ly.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpntpjr_ly.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long counter = 0;\n    foreach(int i; 0 .. s.length)\n    {\n        if (i % 2 != 0)\n        {\n            switch(toupper(s[i]))\n            {\n                case 'A':\n                case 'E':\n                case 'I':\n                case 'O':\n                case 'U':\n                    counter++;\n                    break;\n            }\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpieq7045a.d(18): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpieq7045a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long vowels = 0;\n    foreach(i, c; s)\n    {\n        if (i % 2 == 0 && 'AEIOU'.indexOf(c) != -1)\n            vowels++;\n    }\n    return vowels;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpiu3i8yhu.d(20): Error: unterminated character constant\n/tmp/tmpiu3i8yhu.d(20): Error: found `EIOU` when expecting `)`\n/tmp/tmpiu3i8yhu.d(20): Error: unterminated character constant\n/tmp/tmpiu3i8yhu.d(20): Error: found `indexOf` when expecting `;` following statement\n/tmp/tmpiu3i8yhu.d(20): Error: found `)` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpiu3i8yhu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    size_t length = s.length;\n    long count = 0;\n    for (size_t i = 0; i < length; i++)\n    {\n        if (i % 2 == 0)\n        {\n            if (isupper(s[i])) count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp311aq95g.d(23): Error: undefined identifier `isupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp311aq95g.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count(s, (x) => (x >= 'A' && x <= 'Z') && (x % 2 == 0));\n}\n \n/*\n    Given a string s and a character c, count the number of occurrences of the character in the string.\n    \n    For example:\n    >>> count(\"hello\", 'l')\n    2L\n    >>> count(\"hello\", 'x')\n    0L\n    >>> count(\"\", 'x')\n    0L\n    \n*/\nlong count(string s, char c) \n{\n    return count(s, (x) => x == c);\n}\n \n/*\n    Given a vector of unsigned integers and a value, count the number of instances of the value in the vector.\n    \n    For example:\n    >>> count([0,0,0,1,1,1,2,2,2], 0u)\n    3L\n    >>> count([0,0,0,1,1,1,2,2,2], 3u)\n    0L\n    >>> count([], 0u)\n    0L\n*/\nlong count(in uint[] v, uint n) \n{\n    return count(v, (x) => x == n);\n}\n \n/*\n    Given a string s, return true if the string is \"clean\", meaning it has only letters and no punctuation, numbers, or symbols.\n    \n    For example:\n    >>> is_clean(\"ab cd\")\n    true\n    >>> is_clean(\"ab12cd\")\n    false\n    >>> is_clean(\"ab*&^cd\")\n    false\n*/\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxgbajcs3.d(17): Error: none of the overloads of `count` are callable using argument types `(string, void)`, candidates are:\n/tmp/tmpxgbajcs3.d(32):        `tmpxgbajcs3.count(string s, char c)`\n/tmp/tmpxgbajcs3.d(48):        `tmpxgbajcs3.count(const(uint[]) v, uint n)`\n/tmp/tmpxgbajcs3.d(34): Error: none of the overloads of `count` are callable using argument types `(string, void)`, candidates are:\n/tmp/tmpxgbajcs3.d(32):        `tmpxgbajcs3.count(string s, char c)`\n/tmp/tmpxgbajcs3.d(48):        `tmpxgbajcs3.count(const(uint[]) v, uint n)`\n/tmp/tmpxgbajcs3.d(50): Error: none of the overloads of `count` are callable using argument types `(const(uint[]), void)`, candidates are:\n/tmp/tmpxgbajcs3.d(32):        `tmpxgbajcs3.count(string s, char c)`\n/tmp/tmpxgbajcs3.d(48):        `tmpxgbajcs3.count(const(uint[]) v, uint n)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxgbajcs3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i, c; s) \n    {\n        if(i % 2 && c == toupper(c)) \n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppgbyjafo.d(20): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppgbyjafo.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count_if!(i =>\n    (\n        (i.length > 1) && \n        ((i[0] + 0) % 2) == 0 && \n        (\n            (i[1] == 'A') || \n            (i[1] == 'E') || \n            (i[1] == 'I') || \n            (i[1] == 'O') || \n            (i[1] == 'U')\n        )\n    ))(s.zip);\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp168y5q5u.d(17): Error: template instance `count_if!((i) => i.length > 1 && ((i[0] + 0) % 2 == 0) && (i[1] == 'A' || i[1] == 'E' || i[1] == 'I' || i[1] == 'O' || i[1] == 'U'))` template `count_if` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp168y5q5u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long ret = 0;\n    int len = s.length;\n    for (int i = 0; i < len; i+=2) {\n        ret += (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U');\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnedkv9ex.d(18): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnedkv9ex.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long n = 0;\n    foreach(j, w; enumerate(s))\n    {\n        if(j % 2 == 0 && 'A' <= w && w <= 'Z')\n            n++;\n    }\n    return n;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppd4t6uxf.d(18): Error: undefined identifier `enumerate`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppd4t6uxf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(immutable c; s)\n    {\n        if (c.isUpper && 'AEIOU'.canFind(c) && c == 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsmr4w7pf.d(20): Error: unterminated character constant\n/tmp/tmpsmr4w7pf.d(20): Error: found `EIOU` when expecting `)`\n/tmp/tmpsmr4w7pf.d(20): Error: unterminated character constant\n/tmp/tmpsmr4w7pf.d(20): Error: found `canFind` when expecting `;` following statement\n/tmp/tmpsmr4w7pf.d(20): Error: found `)` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsmr4w7pf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long acc = 0;\n    foreach(ind, ch; s) \n    {\n        if(ind % 2 == 0 && ch >= 'A' && ch <= 'Z')\n            acc++;\n    }\n    return acc;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkiaitry.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427e3d]\n??:? void tmpdkiaitry.__unittest_L25_C1() [0x427ab2]\n??:? void tmpdkiaitry.__modtest() [0x427bc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb63]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a9f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430038]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9cd]\n??:? runModuleUnitTests [0x42b939]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42828c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    // TODO\n    long count=0;\n    foreach(int i;0..s.length)\n    {\n        if((i%2==0)&&(toupper(s[i])=='A'||toupper(s[i])=='E'||toupper(s[i])=='I'||toupper(s[i])=='O'||toupper(s[i])=='U'))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfk36kuoq.d(19): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfk36kuoq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    return count!((c) { return (c >= 'A' && c <= 'Z') && (s.indexOf(c) % 2 == 0); })(s);\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp46_l84c8.d(17): Error: template instance `count!((c)\n{\nreturn c >= 'A' && (c <= 'Z') && (s.indexOf(c) % 2 == 0);\n}\n)` template `count` is not defined\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp46_l84c8.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n\tlong result = 0;\n\tlong s_size = s.length;\n\tfor (long i = 0; i < s_size; i++) \n\t{\n\t\tif (i % 2 == 0) \n\t\t{\n\t\t\tif (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') \n\t\t\t{\n\t\t\t\tresult += 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long sum = 0;\n    foreach(i, c; s)\n    {\n        if (i%2 == 0 && c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U')\n        {\n            sum++;\n        }\n    }\n    return sum;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpero2bdqj.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427e55]\n??:? void tmpero2bdqj.__unittest_L27_C1() [0x427b1a]\n??:? void tmpero2bdqj.__modtest() [0x427bd4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb7b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aa0e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fba1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430050]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb2d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a9e5]\n??:? runModuleUnitTests [0x42b951]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4282a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 0,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long num = 0;\n    foreach(i, c; s)\n    {\n        if(i % 2 == 0 && (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U'))\n        {\n            num += 1;\n        }\n    }\n    return num;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    foreach(i,c; s)\n    {\n        if(i % 2 == 0 && c.isUpper && c.isVowel) count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgcra6aza.d(20): Error: no property `isUpper` for type `immutable(char)`\n/tmp/tmpgcra6aza.d(20): Error: no property `isVowel` for type `immutable(char)`\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (int i = 0; i < s.length; i += 2)\n    {\n        if (is_upper(s[i]))\n        {\n            if (is_vowel(s[i]))\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4w9a3md5.d(20): Error: undefined identifier `is_upper`\n/tmp/tmp4w9a3md5.d(22): Error: undefined identifier `is_vowel`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4w9a3md5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long result = 0;\n    auto b = s.begin;\n    auto e = s.end;\n    for (auto i = b; i < e; i+=2)\n    {\n        switch(*i)\n        {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n                result++;\n                break;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdd2ienre.d(18): Error: no property `begin` for type `string`\n/tmp/tmpdd2ienre.d(19): Error: no property `end` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdd2ienre.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long count = 0;\n    for (long i = 0; i < s.length; i++)\n    {\n        if (i % 2 == 0 && s[i] == toupper(s[i]))\n        {\n            count++;\n        }\n    }\n    return count;\n}\n \nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3f1yh5e3.d(20): Error: undefined identifier `toupper`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3f1yh5e3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    },
    {
      "exit_code": 1,
      "program": "import std.math;\n/*\n\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    >>> count_upper(\"aBCdEf\")\n    1L\n    >>> count_upper(\"abcdefg\")\n    0L\n    >>> count_upper(\"dBBE\")\n    0L\n    \n*/\nlong count_upper(string s) \n{\n    long even_upper = 0;\n    foreach(i,c;iota(s.length))\n    {\n        if(isupper(s[i]) && (i%2)==0)\n        {\n            even_upper++;\n        }\n    }\n    return even_upper;\n}\n/*\n    Bonus Question:\n    Can you make this code shorter without using for or foreach loops?\n*/\nlong count_upper_bonus(string s)\n{\n    long even_upper = 0;\n    foreach(i,c;iota(s.length))\n    {\n        if(isupper(s[i]) && (i%2)==0)\n        {\n            even_upper++;\n        }\n    }\n    return even_upper;\n}\n/*\nunittest\n{\n    alias candidate = count_upper;\n\n    assert(candidate(\"aBCdEf\") == 1L);\n    assert(candidate(\"abcdefg\") == 0L);\n    assert(candidate(\"dBBE\") == 0L);\n    assert(candidate(\"B\") == 0L);\n    assert(candidate(\"U\") == 1L);\n    assert(candidate(\"\") == 0L);\n    assert(candidate(\"EEEE\") == 2L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3y8azmyn.d(43): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3y8azmyn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163950
    }
  ]
}