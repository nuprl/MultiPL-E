name: HumanEval_101_words_string
language: jl
prompt: "\"\"\"\n    You will be given a string of words separated by commas or spaces.\
  \ Your task is\n    to split the string into words and return a vector of the words.\n\
  \    \n    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"\
  Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
  \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
  ]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
  Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
  One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"\
  five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"\
  ])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
  , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
  \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
completions: ["    \n\"\"\"\n    You will be given a string of words separated by\
    \ commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of words as a list of\n    strings. For example:\n    >>> words_string(\"\
    Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   \
    \ >>> words_string(\"One, two, three, four, five, six\")\n    [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"]\n\"\"\"", '    #Your code goes here',
  '"""', "    words_string = split(s, \", \")\nend", "    \n    let wordsArray = split(s)\
    \ \n    \n    wordsArray \nend\n</cell>\n<code language=julia-1.1>\n\"\"\"\n \
    \   words_string(string::String, regex_pattern::String)\n    \n    split a string\
    \ into words by using a regular expression. The pattern should\n    be specified\
    \ as an additional parameter. For example, if the\n    original string is \"A\
    \ B C\" and your regex pattern is \"[A-C]\", the\n    function will return a vector\
    \ [\"A\",\"B\",\"C\"]\n    \n    For example,\n    >>> words_string(\"A B C\"\
    , \"[A-C]\")\n    [\"A\",\"B\",\"C\"]\n    \"\"\"", "\t\n\twords = []\n\tfor (word\
    \ in split(s))\n\t\tpush!(words, word)\n\treturn words\nend", "    \"\"\"Split\
    \ the string into words separated by commas or spaces.\"\"\"\n    words = split(s)\n\
    \    if length(words)==0 || words[0] == \"\"\n    else words\nend", "    # initialize\
    \ an empty array\n    array = []\n    # split the string into words\n    for word\
    \ in split(s, \" \")\n        push!(array, word)\n    end\n    return array\n\
    end", "    words = split(s)\n    words_vec = Dict{String, Vector{String}}()\n\
    \    for word in words\n        words_vec[word] = get!(words_vec, word, [])\n\
    \        push!(words_vec[word], word)\n    end\n    return words_vec\nend #end\
    \ words_string()\n</cell>\n<text>\nNotice that words_string uses split and the\
    \ get! function, which are built-in functions in Julia. get! returns the value\
    \ at key if key exists, otherwise it returns the default value, in this case an\
    \ empty array. We can use get! to update words_vec by setting its key.", "   \
    \ split_string(s)\nend ", "    words_split = split(s, \",| \")\n    return words_split\n\
    end", "    \"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n    return split(s, ',')", "    return split(s,\
    \ \",\")\nend", "    splitted = split(s, \", | \")\n    return [w for w in splitted\
    \ if w]\nend", "    \n    words = split(s, \" \")\n    words_vector = []\n   \
    \ for word in words\n        push!(words_vector, word)\n    end\n    \n    return\
    \ words_vector\nend", "    \"\"\"\n    You will need to write a function for this\
    \ part. \n    \"\"\"", "    words = []\n    s = split(s, \" \")\n    for word\
    \ in s\n        push!(words,word)\n    end\n    return words\nend\n</cell>\n<code\
    \ language=julia-1.0>", "    parts = split(s,\" \")\n    \n    lengths = []\n\
    \    \n    for part in parts\n        push!(lengths, length(split(part,\",\")))\n\
    \    end", "    str = split(s, \" \")\n    str = sort(str)\n    return str\nend",
  "    words = split(s,\", \")\n    return words\nend", "    return split(s)\nend",
  "    \"\"\"\n    \n    Input: \n    \n    A string with words separated by commas\
    \ or spaces.\n    \n    Output:\n    \n    A vector of the words.\n    \n    Constraints:\n\
    \    \n    The number of words in the string can vary.\n    \n    The string can\
    \ contain alphanumeric, space, and punctuation characters.\n    \n    Note: \n\
    \    \n    You may assume that the string is composed of alphanumeric characters\
    \ only\n    and spaces only.\n    \n    You can use regular expressions for finding\
    \ the words in the string.\n    \n    Example: \n    \n    >>> words_string(\"\
    Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   \
    \ \"\"\"", "    split = split(s, ',')\n    words = unique(split)\n    return words\n\
    end", "    \n    \n    \"\"\"\n    Function words_string takes one positional\
    \ argument s. It takes the\n    string s as its argument, and returns a vector\
    \ with all the words\n    separated by commas.\n    \n    \"\"\"\n    \n    \n\
    \    \"\"\"\n    Exercise 2\n    \n    Given a vector v of positive real numbers,\
    \ return the vector u of\n    negative real numbers, such that u[1] v[1], u[2]\
    \ v[2], ..., u[n] v[n]\n    is a positive real number and a u with the same number\
    \ of elements\n    as v has all negative real numbers in the same order. \n  \
    \  \n    \"\"\"\n    \n    \n    \"\"\"\n    Exercise 3\n    \n    Given a vector\
    \ v of positive real numbers, return the vector u of\n    negative real numbers,\
    \ such that u[1] v[1], u[2] v[2], ..., u[n] v[n]\n    is a positive real number\
    \ and a u with the same number of elements\n    as v has all negative real numbers\
    \ in the same order. \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    Exercise\
    \ 4\n    \n    We have two sets of numbers: [1, 2, 3, 4] and [5, 6, 7, 8]. \n\
    \    Find the union of the two sets: [1, 5, 6, 7].\n    \n    \"\"\"\n    \n \
    \   \"\"\"\n    Exercise 5\n    \n    The vector v has two elements: [1, 2, 3]\
    \ \n    Find the difference of v from the vector [4, 5]. \n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    Exercise 6\n    \n    Given a vector v of positive real\
    \ numbers, return the vector u of\n    negative real numbers, such that u[1] v[1],\
    \ u[2] v[2], ..., u[n] v[n]\n    is a positive real number and a u with the same\
    \ number of elements\n    as v has all negative real numbers in the same order.\
    \ \n    \n    \"\"\"\n    \n    \"\"\"\n    Exercise 7\n    \n    Write a program\
    \ that takes a matrix M of size N x N and an N by M\n    array C of doubles. \n\
    \    \n    Your function should fill out the following matrices: \n    \n    M\
    \ is a matrix of double type. \n    C is an N by M array of doubles.\n    \n \
    \   Your function should fill out a N by M matrix M such that\n    M[i][j] = C[i][j]\
    \ * M[i][j].\n    \n    The input C contains random numbers. \n    \n    \"\"\"\
    \n    \n    \"\"\"\n    Exercise 8\n    \n    We have two sets of numbers: [1,\
    \ 2, 3, 4] and [5, 6, 7, 8].\n    Find the intersection of these two sets: [1,\
    \ 5].\n    \n    \"\"\"\n    \n    \"\"\"\n    Exerci", "\"\"\"\n    Word tokenizer\
    \ using regular expression. \n\"\"\"", "    s = split(s)\n    for n in s\n   \
    \     split(n)\n    end\n    return s\nend\n</cell>\n<text>\nExercise 12\nDefine\
    \ a function that prints the nth word in the given string.", "    words_vec =\
    \ Array{String, 1}()\n    for w in split(s)\n        if w != ''\n            push!(words_vec,\
    \ w)\n        end\n    end\n    return words_vec\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    words_string(s:String)", "    \n    words_string = split(s, \",\"\
    )\n    return words_string\n    \nend\n</cell>\n<code language=julia-1.6>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nNow let's try out what words_string does\
    \ with some of our other strings, such as \"One, two, three, four, five, six\"\
    .", "    s = lowercase(replace(s, \",\", \"\"))\n    s = replace(s, \" \", \"\"\
    )\n    splits = s.split(\", \")\n    return splits\nend", "        words = split(s,\
    \ \",\")\n        return words\n    end\n</cell>\n<code language=julia-0.4>\n\
    result = words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-0.4>\n\
    println(result)\n</cell>\n<text>\nExercise: Using words_string() you can write\
    \ a function that replaces spaces with commas and returns a word list. For example,",
  "    s = split(s)\n    if isempty(s)\n        return s\n    end\n    s = removesuffix(s,\
    \ \",\")\n    push!(s, \"\")\n    s = removeprefix(s, \",\")\n    push!(s, \"\"\
    )\n    return s\nend", "    words = split(s)\n    return words\nend\n</cell>\n\
    <text>\nNow let's try to test our function", "    \n    words = split(s, ',')\n\
    \    v = Vector{String}()\n    for word in words\n        push!(v, word)\n   \
    \ end\n    return v\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    words_string(str::String)",
  "    s = split(s,\",\")\n    for s in split(s,\" \")\n        push!(s,\"\")\n  \
    \  return s\nend\n</cell>\n<code language=julia-1.0>\nwords_string(\"Hi, my name\
    \ is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"One, two, three,\
    \ four, five, six\")\n</cell>\n<text>\nGreat Job!", "    \n    words = split(s)\n\
    \    \n    return words\nend # words_string", "    string_splitted = split(s,\
    \ ',')\n    string_vector = string_splitted\n    \nend\n</cell>\n<code language=julia-1.1>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 4: split a sentence\
    \ into words and return a vector of words", "    words = split(s,\" \")\n    return\
    \ words\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"Hi, my name is\
    \ John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One, two, three,\
    \ four, five, six\")\n</cell>\n<text>\nProblem 7 - String Search\nWrite a function\
    \ to test if a given word occurs in a given string. \nThe function has two input\
    \ parameters; a string and a word. \nThe function should return a boolean indicating\
    \ whether the given word occurs in the given string. \nThe word can occur in any\
    \ position within the given string.", "    return s.split(', ')\nend\n</cell>\n\
    <text>\nSolutions", "    return split(s, ',')\nend", "    return split(s, ',')\n\
    end \n    \n\"\"\"\n    You will be given a list of words already split. Your\
    \ task is to remove all\n    duplicates and return a list without them.\n    \n\
    \    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
    \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n    \"\"\"", "    words_strings = split(s, \", \")\n    words_strings\n\
    end", "    words_strings = split(s,\", \")\n    words_strings = words_strings[2:end]\n\
    \    return words_strings\nend\n</cell>\n<code language=julia-0.5>\nprintln(\"\
    Done\")\n</cell>\n<text>\nExercise 3.3: Write a function that takes a vector of\
    \ strings and returns an array of all of the strings in the array that start with\
    \ the string \"one\"", "    \"\"\"\n    You will be given a string of words separated\
    \ by commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my\
    \ name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"", "    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n", "    \n    \"\"\"\nThis function\
    \ converts a string to a vector of words\"\"\"\n    \n    function split_words(words::Vector{String})\n\
    \        \n        \n    end\nend", "    \"\"\"\n    Write your code here!\n \
    \   \"\"\"\n    return \"\"\nend ", "    word_string = split(s)\n    word_vec\
    \ = []\n    for i in word_string\n        word_vec = word_vec ++ convert(i, lowercase_letters)\n\
    \    return word_vec\nend", "    \n    vec = Array{String}(undef, 0)\n    arr\
    \ = split(s, \",\")\n    for s in arr\n        push!(vec, split(s))\n    end\n\
    \    return vec\nend\n</cell>\n<text>\nWe can check our function by testing it\
    \ on some inputs and printing the results. We'll use the function we defined above\
    \ to check our function, and then also run our function on some input for fun.",
  "    \n\"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is to \n    split the string into words and return a vector of the\
    \ words. The vector must have a \n    length of exactly 5. The string must contain\
    \ only lowercase and uppercase letters \n    and should be separated by spaces.\n\
    \    \n    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
    \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n    \"\"\"", "    v = Vector{String}()\n    for (index, word) in words(s)\n\
    \        v[index] = word\n    end\n    return v\nend\n</cell>\n<cell>\n\"\"\"\n\
    \    The longest word in English language is 8 characters long.\n    Write a function\
    \ that accepts a string (as defined above) and returns the length of the\n   \
    \ longest word in this string.\n\"\"\"", "    words_string = (split((split(s))))\n\
    \    return words_string\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\nThe\
    \ function is_palindrome(s::String)::Bool tests whether the given word s is a\
    \ palindrome.\n\"\"\"", "    \"\"\"\n    Given a string, return a new string of\
    \ words separated by commas or\n    spaces.", "    words = split(s,',')\n    return\
    \ words\nend", "    s = split(s, \",\")\n    return s\nend", "    \n    word_list\
    \ = split(s,\" \")\n    \n    word_list = map(word_to_int,word_list)\n    \n \
    \   return word_list\nend", "    \n    s = split(s)\n    s = filter(x -> !isWhitespace(x),\
    \ s)\n    s = filter(x -> !isLetter(char(x)), s)\n    s = filter(x -> !isDigit(char(x)),\
    \ s)\n    return s\nend", "\"\"\"\n    Vectorized version of the words_string\
    \ function.\n\"\"\"", "    \n    \"\"\"\n    You will need to write a for loop\
    \ that goes through every word in the \n    string. Each word in the string will\
    \ be one element in the array. \n    \n    Your code should look like:\n    >>>\
    \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    function\
    \ words_string(s:String)::Vector{String}\n        words = split(s, \",\")\n  \
    \      \n        \n    \"\"\"\n    You will be given an array of strings that\
    \ each have some text and \n    numbers. Your task is to return the string that\
    \ is the shortest and the \n    longest between the strings. \n    \n    For example:\n\
    \    >>> longest_string([\"I like numbers\", \"The longest string\", \"Hi, my\
    \ name is John\"])\n    \"Hi, my name is John\"\n    >>> shortest_string([\"I\
    \ like numbers\", \"The longest string\", \"Hi, my name is John\"])\n    \"I like\
    \ numbers\"\n    \"\"\"\n    function longest_string(a::Vector{String})\n    \
    \    length = length(a[0])\n        for element in a\n            length = length\
    \ if length < length(element) else length(element)\n        end\n    end\n   \
    \ \n    \"\"\"\n    You will be given an array of strings that each have some\
    \ text and \n    numbers. Your task is to return the string that is the shortest\
    \ and the \n    longest between the strings. \n    \n    For example:\n    >>>\
    \ longest_string([\"I like numbers\", \"The longest string\", \"Hi, my name is\
    \ John\"])\n    \"Hi, my name is John\"\n    >>> shortest_string([\"I like numbers\"\
    , \"The longest string\", \"Hi, my name is John\"])\n    \"I like numbers\"\n\
    \    \"\"\"\n    function shortest_string(a::Vector{String})\n        length =\
    \ length(a[0])\n        for element in a\n            length = length if length\
    \ > length(element) else length(element)\n        end\n    end\n    \n    \n \
    \   \"\"\"\n    You will be given an array of strings that each have some text\
    \ and \n    numbers. Your task is to return the string that is the shortest and\
    \ the \n    longest between the strings. \n    \n    For example:\n    >>> longest_string([\"\
    I like numbers\", \"The longest string\", \"Hi, my name is John\"])\n    \"Hi,\
    \ my name is John\"\n    >>> shortest_string([\"I like numbers\", \"The longest\
    \ string\", \"Hi, my name is John\"])\n    \"I like numbers\"\n    \"\"\"\n  \
    \  function shortest_string(a::Vector{String})\n        length = length(a[0])\n\
    \        for element in a", "    \"\"\"\n    You will be given a vector of words.\
    \ Your task is to remove common elements\n    and return a vector of unique words.\n\
    \    \"\"\"", "    splitted = split(s, ',')\n    vec = []\n    for i in splitted\n\
    \        push!(vec, i)\n    end\n    return vec\nend\n</cell>\n<text>\nExercise\n\
    Write a function named sentence_score() that takes two input strings as arguments\
    \ and returns a score value between 0.0 and 1.0.", "    word_vec = Vector{String}(\"\
    \")\n    for word in split(s, \",\\s*\")\n        word_vec << word\n    end\n\
    \    return word_vec\nend", "    return split(s, \",\")\nend", "\"\"\"\n    \n\
    \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return a vector of the\
    \ words. The \n    words MUST be lowercase.\n    \n    For example:\n    >>> words_string(\"\
    Hi, my name is John\")\n    [\"hi\", \"my\", \"name\", \"is\", \"john\"]\n   \
    \ >>> words_string(\"One, two, three, four, five, six\")\n    [\"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"", "    \n    return split(s)\
    \ |> collect{x->split(x)} |> unique\nend\n</cell>\n<code language=julia-1.5>\n\
    # test it out\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\nTask: Given\
    \ a string, return a vector of strings that represents the letters in the given\
    \ string.\n    \n    For example:\n    >>> letters(\"Hello, World!\")\n    [\"\
    H\", \"e\", \"l\", \"l\", \"o\", \",\", \"W\", \"o\", \"r\", \"l\", \"d\", \"\
    .\", \"!\"]\n    \"\"\"", "    Vector[String](split(s))\nend\n</cell>\n<code language=julia-0.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nImplement\
    \ the function words_to_numbers(s::String)::Vector{Int} which takes in a string\
    \ and returns a vector of word numbers. For example, words_to_numbers(\"one\"\
    ) should return [1,2,1,3]. words_to_numbers(\"two\") should return [2,3,2].",
  "    splitted = split(s, ',')\n    return Vector(splitted)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n?split\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>",
  "    \n    word_list = split(s,\" \")\n    \n    return word_list\nend # words_string\n\
    </cell>\n<code language=julia-0.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a vector of words for any sentence\
    \ given as a string. For instance:", "    \n    words_str = split(s, \",|\\ \"\
    )\n    words_str = [split(word, \"\\ \") for word in words_str]\n    words_str\
    \ = [word for row in words_str for word in row]\n    \n    return words_str\n\
    end\n</cell>\n<code language=julia-1.6>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nWrite a function words_numbers(s::String) which takes in a\
    \ string of words and returns a vector of integers.\nYour function should return\
    \ a vector of integers where the elements are the ASCII integer code of each character.",
  "    \n    \n    # Your code here\n    words_string = split(s, ',')\n    return\
    \ words_string\n    \nend\n</cell>\n<text>\nLet's check your solution. Run the\
    \ cell below to test your function and compare the output to ours.", "    split(s.split(\"\
    \ \"))\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\n    You will be given\
    \ a string of words and a vector of the same length as the number of words\n \
    \   in the string where the words are separated by commas or spaces. Your task\
    \ is to \n    split the string into words and return the vector containing these\
    \ words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is John\"\
    , [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n    [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n    \"\"\"", "\"\"\"\n    \n    You will be given a string\
    \ of words separated by commas or spaces. Your task is\n    to split the string\
    \ into words and return a vector of the words.\n    \n    For example:\n    >>>\
    \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"", "    words\
    \ = split(s)\n    \n    return words\nend", "    return split(s,split=char(\"\
    ,\"), skip=skip(\" \\t\",\" \\t\\n\"))\nend", "    word_list = split(s)\n    word_vec\
    \ = []\n    for word in word_list\n        push!(word_vec,word)\n    end\n   \
    \ return word_vec\nend", "    \n    s = s.replace(\" \", \"\")\n    s = s.split(\"\
    ,\")\n    return s\nend\n</cell>\n<code language=julia-0.6>\n# Test your words_string\
    \ function\nwords_string(\"\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"\
    \ \")\n</cell>\n<code language=julia-0.6>\nwords_string(\"hi\")\n</cell>\n<code\
    \ language=julia-0.6>\nwords_string(\"hi my name is john\")\n</cell>\n<code language=julia-0.6>\n\
    words_string(\"hi, my name is john\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"\
    hi, my name is  john\")\n</cell>\n<text>\nSplit each string into a vector of words\n\
    Next we will take our function and modify the last line to split each string into\
    \ a vector of words. If you don't understand what split is doing, don't worry\
    \ about trying to understand it now, we will be using it for the upcoming problem.",
  "    return split(s)\nend", "  parts = split(s, \",\")\n  return [p for p in parts\
    \ if p != \"\"]\nend", "    word_split = split(s, \",\")\n    word_split = split(s,\
    \ \"-\")\n    word_split = split(s, \"!\")\n    word_split = split(s, \".\")\n\
    \    word_split = split(s, \";\")\n    word_split = split(s, \"?\")\n    word_split\
    \ = split(s, \":\")\n    word_split = split(s, \" \")\n    word_split = split(s,\
    \ \"\\n\")\n    word_split = split(s, \"\")\n    word_split = split(s, \" \")\n\
    \    word_split\nend", " \n    words=split(s,\",\")\n    words_string=Vector{String}(words)\n\
    \    return words_string\nend\n\"\"\"\n    You will be given a list of words.\
    \ Your task is to remove all duplicates from the\n    list and return a new list\
    \ without duplicates.\n    \n    For example:\n    >>> removeDuplicates([1, 3,\
    \ 2, 4, 3, 1])\n    [1, 3, 2, 4]\n    >>> removeDuplicates([1, 3, 2, 4, 3])\n\
    \    [1, 3, 2, 4]\n    \"\"\"", "    return split(s, ',\\s*')\nend ", "    return\
    \ split(s,\",\")\nend\n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n  \
    \  \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\
    \"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n   \
    \ \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n   \
    \ \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n \
    \   \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n \
    \   \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n", "    return split(s, \", \")\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that splits a string by commas but ignore commas\
    \ within quotes.", "    \n    # Your code goes here", "    split(split(s, \",\"\
    ), \" \")\nend\n</cell>\n<code language=julia-1.0>\n@test words_string(\"Hi, my\
    \ name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n@test words_string(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n</cell>\n<text>\nExercise: Write a function named words_string_trim\
    \ that takes a string and returns a vector of the words in the string trimmed\
    \ of their whitespace characters.\nWrite a function named words_string_trim that\
    \ takes a string and returns a vector of the words in the string trimmed in all\
    \ whitespace characters.", "    result = String.[]\n    for i in s\n        if\
    \ i isalpha()\n            push!(result, i)\n        else if i == \",\"\n    \
    \        if length(result) > 0\n                push!(result, \"\")\n        \
    \    end\n        else\n            push!(result, \"\")\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\n    word_count(word_string)\n\
    \    Count the number of occurrences of each word in word_string.\n    \n    For\
    \ example,\n    >>> word_count(\"Hi, my name is John\")\n    Dict(\"Hi\" => 1,\
    \ \"my\" => 1, \"name\" => 1, \"is\" => 1, \"John\" => 1)\n    >>> word_count(\"\
    Hi my name is John\")\n    Dict(\"Hi\" => 1, \"my\" => 1, \"name\" => 1, \"is\"\
    \ => 1, \"John\" => 1)\n    >>> word_count(\"Hi, my name, is John\")\n    Dict(\"\
    Hi\" => 1, \"my\" => 1, \"name\" => 2, \"is\" => 1, \"John\" => 1)\n    \"\"\"",
  "    return split(s,\", \")\nend", "    \n    if s == \"\"\n        return []\n\
    \    if !islower(s)\n        s = lowercase(s)\n    end\n    word_list = split(s,\"\
    ,\",\",\",true)\n    return word_list\nend", "    Vector{String} = s.split(\"\
    , \")\n    return Vector{String}\nend ", "    \n    string_split = split(s)\n\
    \    return string_split\nend\n</cell>\n<code language=julia-0.5>\n#export\n\"\
    \"\"\n    words_string(::String, sep::Char=',')::Vector{String}", "    word_list::Vector{String}\
    \ = split(s, \", \")\n    return word_list\nend", "    words = split(s,\",\")\n\
    \    string_to_vec = Vector{String}(words)\n    \n    return string_to_vec\nend",
  "    return words(s)\nend\n</cell>\n<cell>\nimport LinearAlgebra\nusing LinearAlgebra",
  "  v = split(s, \",\")\n  for word in v\n    push!(word_vec, word)\n  end\n  return\
    \ word_vec\nend\n</cell>\n<cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes three vectors of ints, a matrix\
    \ of ints, and returns a matrix of ints where:", " \n\"\"\"\n    You will be given\
    \ a list of words, each of which has its first letter capitalized. Your\n    task\
    \ is to return a string made of the first letter of each word. \n    \n    For\
    \ example:\n    >>> capitalise([\"hi\",\"my\",\"name\",\"is\",\"john\"])\n   \
    \ \"Hi, my name is John\"\n    >>> capitalise(\"One Two Three Four Five Six\"\
    )\n    \"One Two Three Four Five Six\"\n    \"\"\"", "    s = lowercase(s);\n\
    \    \n    return split(s, \", \");\nend\n\"\"\"\n    You will be given a string\
    \ of words separated by commas or spaces. Your task is\n    to count the number\
    \ of words and return a vector of the words and their \n    respective counts.\n\
    \    \n    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
    \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n    \"\"\"", "    \n    #split the string in list of words\n    \n   \
    \ s = split(s)\n    \n    words = Vector{String}()\n    \n    for w in s\n   \
    \     push!(words, w)\n    end\n    \n    return words\nend\n</cell>\n<code language=julia-1.3>\n\
    word_list(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.3>\nword_list(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nNotice that the function\
    \ words_string takes only one parameter: the string containing all of your data.",
  "</code>\nPart 2 of the puzzle\nThe function words_string() that you wrote returns\
    \ an array of strings. However, the following code block expects that this function\
    \ returns an array of Vectors:\n<code>", "    \n    if length(s) <= 0\n      \
    \  return vec[]\n    else\n        word_list = split(s, \",\")\n        words_vector\
    \ = vec[]\n        for i in word_list\n            words_vector = push!(words_vector,\
    \ split(i, \" \"))\n        end\n        return words_vector\n    end\nend", " \
    \   \n    \n    #initialize a Vector with empty strings\n    wordsVec=Vector{String}(10)\n\
    \    \n    #Split the String in tokens by ','\n    tokens = split(s,\",\")\n \
    \   #split the tokens in words by ' '\n    words = split(s,\" \")\n    \n    #Iterate\
    \ over all the words and add them to vector\n    for i in words\n        wordsVec=\
    \ append(wordsVec,i)\n    end\n    \n    return wordsVec\nend", "    Vector(s)\n\
    end", "    words = split(s, \" ,\")\n    return words\nend", "    string::String\n\
    \    vector::Vector{String}\n    vector = split(s, \" \")\n    return vector\n\
    end", "    words = [split(s, \",\")]\n    for word in words\n        if !is_empty(word)\n\
    \            push!(words, split(word, \" \"))\n        end\n    end\n    return\
    \ words\nend\n</cell>\n<code language=julia-1.5>", "    # your code goes here\n\
    \    return []\nend\n</cell>\n<text>\nExpected Output:", "    \n    v = Vector{String}()\n\
    \    \n    for i in split(s) do \n        v = v .+ split(i)\n    end\n    \n \
    \   return v\nend\n</cell>\n<cell>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the string \"Abe\" is\
    \ part of the words \"Hip\", \"Eye\" and \"Eyebrow\".", "\tstring_split = split(s,\
    \ ',')\n\tstring_split = split(s, ' ')\n\treturn string_split\nend\n</cell>\n\
    <code language=julia-1.3>\n# Test your words_string function\nwords = words_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.3>\n# Ok, now write a\
    \ function that takes a string and returns a list of lowercase words found in\
    \ it\nlowercasewords = words_string(\"Hi, my name is John\")\nlowercasewords\n\
    </cell>\n<code language=julia-1.3>\n# Ok, now write a function that takes a list\
    \ of words and returns a list with the words made lowercase", "    \n    split_string\
    \ = split(s)\n    \n    return split_string\nend\n</cell>\n<code language=julia-0.6>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"\
    A\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"\")\n</cell>\n<code language=julia-0.6>\n\
    words_string(\" \")\n</cell>\n<text>\nExercise: Implement a vectorization version\
    \ of words_string that returns a vector instead of a list\nImplement a vectorization\
    \ version of split that splits str into a vector where each element is a string\
    \ that is delimited by some character such as \",\".", "    \"\"\"\n    You will\
    \ be given a vector of characters. Your task is\n    to count the occurrences\
    \ of each character in the vector and return a vector\n    that counts the characters\
    \ in each string. \n    \n    For example:\n    >>> characters_string([97,98,\
    \ 99,100,101,102])\n    [22, 9, 0, 3, 7, 2, 4]\n    \"\"\"", "  words_string =\
    \ split(s) |> map(x->split(x)) |> flatten\n  return words_string\nend ", "   \
    \ words = split(s, \",\")\n    return words\nend\n</cell>\n<text>\nExercise 2\n\
    The string \"A,B,C\" is given as an example of a word vector. Implement a function\
    \ that extracts the vector for the sentence \"A,B,C\"", "    \n    \n    \"\"\"\
    \n    You will be given a string of words separated by commas or spaces. Your\
    \ task is\n    to split the string into words and return a vector of words. \n\
    \    \n    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
    \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n    \"\"\"", "    return split(s, ' ')", "    \n    word_list = split(s,\
    \ \", \")\n    word_list = split(s, \" \")\n    word_list = split(s, \",\")\n\
    \    word_list = split(s, \" \")\n    \n    return word_list\nend", "    return\
    \ split(s, ' ')\nend", "    \n    words_string = split(s)\n    return words_string\n\
    end ", "    s_array = split(s, \", \")\n    \n    \n    \n    if s_array == Nil\
    \ \n        s_array = [s]\n    end\n    \n    return s_array\nend\n</cell>\n<code\
    \ language=julia-1.6>\nwords_string(words_string(\"Hi, my name is John\"))\n</cell>\n\
    <text>\nQuestion 12\nWrite a function which takes a string as an input and returns\
    \ a list of integers corresponding to the ASCII codes of the characters in the\
    \ string.", "    word_list = split(s,\",\")\n    word_list = map(x -> split(x,\"\
    \ \"),word_list)\n    word_list = filter(x -> length(x)>0,word_list)\n    return\
    \ word_list\n\"\"\"", "    return split(split(s, \", \")...)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n# Test your code\nwords_to_vec(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nNotice that this function is slightly different than the one\
    \ given to you in the earlier assignments, because here we have an extra split()\
    \ in the beginning. Moreover, we do not need to have that extra space before the\
    \ comma.", "    \n    word_list = string.split(s)\n    \n    return word_list\n\
    end", "    \n    \n    \n\"\"\"\nYou will be given a string of words separated\
    \ by commas or spaces. Your task is\nto count the number of times a word occurs\
    \ in the string.\n\"\"\"", "    \n    #initialize a vector of strings\n    vector\
    \ = []\n    \n    #loop through the string\n    for word in split(s)\n       \
    \ \n        #if a space was found append the string to the vector \n        if\
    \ word != \"\"\n            vector += word\n        \n        end\n    end\n \
    \   return vector\nend", "    string_split = split(s)\n    Vector.empty(string_split)\n\
    end", "    splitted = split(s,\", | \")\n    return Vector{String}(splitted)\n\
    end", "\"\"\"\n    \n    You will be given a string of words with all the same\
    \ capitalisation. You should\n    remove all words with less than 3 characters.\n\
    \    \n    For example:\n    >>> remove_capitalised_words(\"Hi, my name is John\"\
    )\n    [\"Hi\", \"my\", \"name\", \"is\"]\n    \"\"\"", "    words_string = split(s,\"\
    \ \")\n    words_string\nend", "    word_lists <- words_string(s)\n    return\
    \ word_lists[end]\nend", "    \n    word_list = split(s)\n    \n    word_list\
    \ = map(x->split_word(x),word_list)\n    \n    return flatten(word_list)\nend\n\
    </cell>\n<code language=julia-1.5>\n@test words_string(\"Hi, my name is John\"\
    ) \u2248 [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n@test words_string(\"One,\
    \ two, three, four, five, six\") \u2248 [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n</cell>\n<code language=julia-1.5>", "    return split(s,\
    \ \",\")\nend", "    word_list = split(s, \" \")\n    return word_list\nend ",
  "\"\"\"\n    Given a string, return an array of strings that represent words in\
    \ the string\n    \n    For example, \n    >>> words_string(\"Hi, my name is John\"\
    )\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One,\
    \ two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\n    \"\"\"", "    \"\"\"\n    You will be given a string\
    \ of words separated by commas or spaces. Your task is\n    to split the string\
    \ into words and return a vector of the words.\n    \n    For example:\n    >>>\
    \ words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\")\n    [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    words\
    \ = string.split(string)\n    vec = []\n    for w in words\n        push!(vec,\
    \ w)\n    return vec\nend\n</cell>\n<code language=julia-1.2>\n\"\"\"\n    words_string(s)",
  "    words = split(s, ',')\n    return words\nend", "    if isnothing(s) return\
    \ nil\n    if s == \"\" then return []\n    split_str = String.split(s,\",\")\n\
    \    split_str = String.split(s,\" \")\n    return split_str\nend", "    return\
    \ split((\" \").join(s))\nend\n</cell>\n<code language=julia-1.6>\n@testset \"\
    split_words\" begin\n    split(\"Hi, my name is John\", ' ')\n    split(\"One,\
    \ two, three, four, five, six\")\nend\n</cell>\n<text>\nExercise 3", "    words\
    \ = split(s,\" \")\n    \n    return words\nend", "    split(s,\", \") |> Vector{String}\n\
    end", "    \n    wordss = split(s)\n    wordvecs = Vector{String}(length(wordss))\n\
    \    for i=1:length(wordss)\n        wordvecs[i] = wordss\n    end\n    return\
    \ wordvecs\nend\n</cell>\n<code language=julia-1.5>", "   \"\"\"\n    \n    \n\
    \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return a vector of the\
    \ words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is John\"\
    )\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One,\
    \ two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\n    \"\"\"", "    return split(s, \" ,\")\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Random\nRandom.seed!(0)", "    words = split(strip(s))\n\
    \    return words\nend\n</cell>\n<code language=julia-0.5>\nwords_string(\" Hi,\
    \ my name is John \")\n</cell>\n<text>\nExercise 3\nWrite a function called count_words(s::String)::Int\
    \ that takes a string and\nreturns the number of words in the string separated\
    \ by commas.", "    \n    split = split(s, \",\")\n    \n    return split\nend\n\
    </cell>\n<text>\nExercise 15: words_string()", "    return split(s)\nend\n</cell>\n\
    <code language=julia-0.6>\n\"\"\"\n    words_file(s::String)::Vector{String}\n\
    \    \n    Read the words in the file \"s\" and return them as a vector.\n   \
    \ \n    You are expected to call this function once for each line in the file\n\
    \    \n    For example:\n    >>> words_file(\"src/input.txt\")\n    [\"Hello\"\
    , \"World\"]\n\"\"\"", "    \n    words::Vector{String} = split(s,\" \")\n   \
    \ return words\nend\n</cell>\n<code language=julia-0.5>\n@code_native words_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-0.5>\n@code_native words_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nPart 3: Vectorized string\
    \ operations", "  result = Vector{String}()\n  words = get_tokens(s)\n  for w\
    \ in words\n    push!(result, w)\n  end\n  return result\nend\n</cell>\n<text>\n\
    Exercise 11: Word count", "    \n    function split_string(string)\n        \n\
    \        s = replace(s, \",\", \" \")\n        s = replace(s, \"\\\"\", \"\")\n\
    \        s = replace(s, \"\\'\", \"\")\n        words = split(s, \" \")\n    end\n\
    \    \n    split_string(s)\nend\n</cell>\n<code language=julia-1.4>\n# you can\
    \ test it here in julia\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.4>\n# you can test it here in julia\nwords_string(\"One, two,\
    \ three, four, five, six\")\n</cell>\n<text>\nImplement a function count_words\
    \ that, given a list of words and a target word, counts the number of times target\
    \ word occurs in the list.", "    split = split(s, \",\")\n    result = Vector{String}(split)\n\
    \    return result\nend\n\"\"\"\n    You will be given a list of strings. Your\
    \ task is\n    to merge all strings into one string.\n    \n    For example:\n\
    \    >>> string_list = [\"one\", \"two\", \"three\", \"four\", \"five\"]\n   \
    \ >>> string_list\n    [\"one\", \"two\", \"three\", \"four\", \"five\"]\n   \
    \ >>> words_string(string_list)\n    \"onetwothreefourfive\"\n    \"\"\"", " \
    \   s = replace(s, \", \", \" \")\n    s = replace(s, \"\\\"\", \"\")\n    s =\
    \ replace(s, \",\", \"\")\n    s = replace(s, \" \", \"\")\n    s = replace(s,\
    \ \"-\", \" \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s, \"?\", \"\
    \ \")\n    s = replace(s, \"-\", \" \")\n    s = replace(s, \"/\", \" \")\n  \
    \  s = replace(s, \"\\\"\", \"\")\n    s = replace(s, \"[\", \"\")\n    s = replace(s,\
    \ \"]\", \"\")\n    s = replace(s, \"{\", \"\")\n    s = replace(s, \"}\", \"\"\
    )\n    s = replace(s, \"(\", \"\")\n    s = replace(s, \")\", \"\")\n    s = replace(s,\
    \ \"{\", \"\")\n    s = replace(s, \"}\", \"\")\n    s = replace(s, \"[\", \"\"\
    )\n    s = replace(s, \"]\", \"\")\n    s = replace(s, \"[\", \"\")\n    s = replace(s,\
    \ \"]\", \"\")\n    s = replace(s, \"{\", \"\")\n    s = replace(s, \"}\", \"\"\
    )\n    s = replace(s, \"'\", \"\")\n    s = replace(s, \"!\", \"\")\n    s = replace(s,\
    \ \"?\", \"\")\n    s = replace(s, \"-\", \" \")\n    s = replace(s, \"/\", \"\
    \ \")\n    s = replace(s, \"*\", \" \")\n    s = replace(s, \"(\", \" \")\n  \
    \  s = replace(s, \")\", \" \")\n    s = replace(s, \"]\", \" \")\n    s = replace(s,\
    \ \"}\", \" \")\n    s = replace(s, \"}\", \" \")\n    s = replace(s, \" \", \"\
    \")\n    s = replace(s, \"\\\"\", \"\")\n    s = replace(s, \"{\", \"\")\n   \
    \ s = replace(s, \"}\", \"\")\n    s = replace(s, \"[\", \"\")\n    s = replace(s,\
    \ \"]\", \"\")\n    s = replace(s, \"(\", \"\")\n    s = replace(s, \")\", \"\"\
    )\n    s = replace(s, \"[\", \"\")\n    s = replace(s, \"]\", \"\")\n    s = replace(s,\
    \ \"{\", \"\")\n    s = replace(s, \"}\", \"\")\n    s = replace(s, \"\\\"'\"\
    , \"\") \n    s = replace(s, \".\", \"\")\n    s = replace(s, \",\", \" \")\n\
    \    s = replace(s, \";\", \" \")\n    s = replace(s, \"-\", \" \")\n    s = replace(s,\
    \ \"/\", \" \")\n    s = replace(s, \"*\", \" \")\n    s = replace(s, \"?\", \"\
    \ \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s, \"(\", \" \")\n  \
    \  s = replace(s, \")\", \" \")\n    s = replace(s, \"]\", \" \")\n    s = replace(s,\
    \ \"=\", \" \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s, \"?\", \"\
    \ \")\n    s = replace(s, \" \", \" \")\n    s = replace(s, \"\\\"\", \"\")\n\
    \    s = replace(s, \"{\", \"\")\n    s = replace(s, \"}\", \"\")\n    s = replace(s,\
    \ \"[\", \"\")\n    s = replace(s, \"]\", \"\")\n    s = replace(s, \"(\", \"\
    \ \")\n    s = replace(s, \")\", \" \")\n    s = replace(s, \"]\", \" \")\n  \
    \  s = replace(s, \"=\", \" \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s,\
    \ \"?\", \" \")\n    s = replace(s, \" \", \" \")\n    s = replace(s, \"!\", \"\
    \")\n    s = replace(s, \"?\", \"\")\n    s = replace(s, \" \", \" \")\n    s\
    \ = replace(s, \"\\", "    \"\"\"\n    You will be given a string of words separated\
    \ by commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my\
    \ name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n    # Your code here\n    return s.split(\"\
    ,\")\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<code language=julia-1.5>", "    return split(s,\", \")\nend", " \
    \       \n    return split(split(strings(s)), ',')\nend", "    vectors = split(s,\"\
    , \")\n    Vector(vectors)\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\n\
    \    words_string(s::Vector{String})", "    wordsvec = split(s)\n    return wordsvec\n\
    end ", "    # Your code here\n    return s.split(',')\nend", "    words = split(s,\"\
    ,\")\n    \n    return words\nend \n</cell>\n<code language=julia-0.5>\n#@test\
    \ words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\",\
    \ \"John\"]\n#@test words_string(\"One, two, three, four, five, six\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nExercise\
    \ 3:\nWrite a function count_characters(s::String)::Int that returns the number\
    \ of characters in s.", "    \"\"\"\n    You will be given a list of words separated\
    \ by commas or spaces. Your task is\n    to separate each word into its own element\
    \ of the list and return a list of\n    all the words.\n    \n    For example:\n\
    \    >>> words_list([\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n    [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n    >>> words_list([\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"])\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"", "    return split(s, \", \") \nend", '    return
    words.(split(s," "))', "    \n    splitted = split(s)\n    \n    return splitted\n\
    end", " \n    return string_to_vector(s, \",\")\nend", "    v = Vector{String}([])\n\
    \    if s == \"\"\n        return v\n    else\n        split(s, \",\")\n    end\n\
    end", "    split_string(s)\nend\n</cell>\n<code language=julia-1.3>\n@code_native(words_string)\n\
    </cell>\n<text>\nExercise 4\nInstructions: Implement the function count_substring(s,\
    \ substr) that returns the number of times that substring s occurs in s.", " \
    \   \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return a vector of the\
    \ words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is John\"\
    )\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One,\
    \ two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\n    \"\"\"\n    \n    \n    \n    words = []\n    for word\
    \ in string.split(\" \"):\n        if word == \"\":\n            continue\n  \
    \      else:\n            words.append(word)\n    \n    words = [w.lower() for\
    \ w in words]\n    return words", "    words_splitted = s.split(//)\n    return\
    \ words_splitted\nend ", "    \"\"\"\n    \n    \n    \n    \"\"\"\n    Your task\
    \ below is to write a function `split_string` that takes a string\n    as input\
    \ and returns a Vector of `String`s. For example:\n    >>> split_string(\n   \
    \ 'one,two,three,four,five,six')\n    [\"one\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\n    >>> split_string('one,two,three,four,five,six')\n  \
    \  [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"", " \
    \   \n    words = split(s, ',')\n    \n    words_vector = Vector{String}(undef,\
    \ 0)\n    for i in 1:length(words)\n        words_vector = words_vector + [words[i]]\n\
    \    end\n    \n    return words_vector\nend\n</cell>\n<cell>\nwords_string(string(1,2,3,4,5,6,7,8))\n\
    </cell>\n<text>\nExercise 5\nCreate a function that creates a vector containing\
    \ the first n prime numbers.", "    s = split(s,\" ,.?!\")\n    n = length(s)\n\
    \    v = Vector{String}(repeat(\"\", n))\n    for i = 1:n\n        v[i] = s[i]\n\
    \    end\n    return v\nend", "    # Your code here\n    \n    return words\n\
    end", "  \n    l = split(s, \" \")\n    n = length(s)\n    res = []\n    for i\
    \ = 1:n\n        push!(res, l[i])\n    end\n    return res\nend ", "    str =\
    \ split(s,\",\")\n    str = split(s,\" \")\n    str = map(parse, str)\n    return\
    \ str\nend \n</cell>\n<code language=julia-1.6>\nwords_string(\"Hi, my name is\
    \ John\")\n</cell>\n<text>\nQuestion 3\nCreate a function filter_string(s::String)::Vector{String}\
    \ where you can filter out words by whether they are uppercase or not. \nFor example,\
    \ if you pass \"Hi, my name is John\" then your function should return [\"Hi\"\
    , \"my\", \"name\", \"is\"].", "    split_string(s)\nend", "    return split(s)\n\
    end\n</cell>\n<text>\nQuestion 10\nNow that you have created the function split\
    \ which returns a vector of words, you will write a second function which splits\
    \ your vector into a vector of characters. You can do this by creating a vector\
    \ of characters containing the characters provided by the split. Use the characters\
    \ to create a second vector and return the vector as a string.", "    \"\"\"\n\
    \    You will be given a vector of words. Your task is to transform each word\
    \ into the index \n    position of the word in the word vector. Use the function\
    \ `words_to_idx` \n    in the first exercise.\n    \n    For example, given the\
    \ word vector `[1,2,3,4,5,6,7,8,9,10,11]`, and the string `'one two three four\
    \ five six seven eight nine'`, \n    the index vector will be `[5, 1, 4, 6, 2,\
    \ 8, 3, 9, 10, 7]`.\n    \"\"\"", "    words = split(s)\n    Vector{String}(words)\n\
    end", "    stringList = split(s,\", \")\n    stringVector = stringList[2:end]\n\
    \    return stringVector\nend", "    split(s, \", \") |> collect\nend\n\"\"\"\n\
    \    You will be given a string of words separated by commas or spaces. Your task\
    \ is\n    to split the string into words and return a vector of words and the\
    \ remainder\n    of the string. If a string of words is empty then return a vector\
    \ of empty strings.\n    \n    For example:\n    >>> words_string(\"Hi, my name\
    \ is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\", \"\"]\n    >>>\
    \ words_string(\"One, two, three, four, five, six\")\n    [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"\"]\n    \"\"\"", "    word_list = split(s)\n\
    \    return word_list\nend", "    \n    \n\"\"\"\n    You will be given a string\
    \ of words separated by commas or spaces. Your task is\n    to split the string\
    \ into words and return a vector of the words in reverse.\n    \n    For example:\n\
    \    >>> words_string(\"Hi, my name is John\")\n    [\"John\", \"is\", \"my\"\
    , \"name\", \"Hi\"]\n    >>> words_string(\"One, two, three, four, five, six\"\
    )\n    [\"six\", \"five\", \"four\", \"three\", \"two\", \"One\"]\n    \"\"\"",
  "    if length(s)==0 \n        return [] \n    \n    words = []\n    words = split(s,\
    \ \" \")\n    return words\nend", "    \n    word_list = split(s,\" \")\n    \n\
    \    return word_list\nend\n</cell>\n<cell>\n\"\"\"\n    words_string(s::String)::Vector{Int}\n\
    \    \n    words_string(s) splits the string s into a list of words and returns\
    \ a list of \n    integers representing the index of the words in the list\n \
    \   \n    For example:\n    \n    >>> words_string(\"Hi, my name is John\")\n\
    \    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One,\
    \ two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\n    \n\"\"\"", "    words = split(s, \", \")\n    words.map(identity)\n\
    end", "    split = split(s, \" \")\n    words  = split(split(s)[1])\n    \n  \
    \  return words\n\"\"\"\n## `words_chars`\nCalculate the number of words in the\
    \ given string.", "    \n    \"\"\"\n    You will be given a string of words separated\
    \ by commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my\
    \ name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n</code>\n<|/ q tags=string,julia |>\n<| c |>\n\
    Try `map(split,string)`.\n<|/ c |>\n<| c |>\nHi thank you for your reply! When\
    \ I run this code:", "    return [word for (word, s) in tokenize(s, \",\")]\n\
    end", "    split_string = split(s, \" \") #split string by space\n    \n    #convert\
    \ string to vector\n    words_vec = Vector{String}(split_string)\n    \n    return\
    \ words_vec", "    return string.split(s)\nend", "    return s.split(\", \")\n\
    end", " \n    words_string = \"\"\n    for i in s\n        if i \u2209 \" \",\
    \ \".\", \",\"\n            words_string += i\n        else\n            words_string\
    \ += i\n        end\n    end\n    \n    words_string = split(words_string)\n \
    \   words_string = sort(words_string)\n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Question 5 - Test Your Code\nRun the cell below to test your code. Make sure that\
    \ all the tests pass.", "  res = Vector{String}()\n  for i in split(s,',') \n\
    \    push!(res,string(i))\n  end\n  return res\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    words_string(s)\n    \n    Split a string into words.\n    \n    Example:\n\
    \    >>> words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n    \"\"\"", "    word_list = split(s, ' ')\n    word_list\
    \ = replace(word_list, \"'\", \"\")\n    word_list = replace(word_list, '\"',\
    \ \"\")\n    return word_list\nend\n</cell>\n<code language=julia-0.4>\n\"\"\"\
    \n    words_string(s:String)::Vector{String}\n\"\"\"", "    return s.split(\"\
    ,\")\nend\n</cell>\n<code language=julia-0.6>\n# Your result should be in `words_strings_solution`\n\
    words_strings_solution = words_string(\"Hi, my name is John\")\nwords_strings_solution\
    \ == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n</cell>\n<code language=julia-0.6>\n\
    # Run this cell to test your function\nwords_string(\"Hi, my name is John\") ==\
    \ words_strings_solution\n</cell>\n<text>\nQuestion 4.2\nWrite a function that\
    \ counts the number of words in a string. \nFor example, `count(\"Hello World\"\
    )` should return `5`.\nWrite a function that takes a string and returns the first\
    \ n words.\nWrite a function that takes a string and returns a list of all but\
    \ the first n words.\nWrite a function that takes a string and returns a list\
    \ of the words with duplicates.\nWrite a function that takes a string and returns\
    \ a list of the words in sorted order.\nWrite a function which takes a string,\
    \ a number N, and returns a list of all but the first N words from that string.",
  "    return split(s)\nend\n</cell>\n<code language=julia-1.6>", "    \n    \n  \
    \  \n    \n\"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of tuples of the words.\n    \n    For example:\n    >>> words_string(\"Hi,\
    \ my name is John\")\n    [(\"Hi\", 1), (\"my\", 2), (\"name\", 3), (\"is\", 4),\
    \ (\"John\", 5)]\n    >>> words_string(\"One, two, three, four, five, six\")\n\
    \    [(\"One\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4), (\"five\", 5),\
    \ (\"six\", 6)]\n    \"\"\"", "    return word_split(split(s))\nend", "    if\
    \ s == \"\" then return [] else\n        \n        splits = split(s, \", \")\n\
    \        words = [w for s in splits for w in words(s)]\n        return words\n\
    \    end\n\"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of words that have a length of\n    more than three characters.\n    \n    For\
    \ example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three, four, five,\
    \ six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n   \
    \ \"\"\"", "    return String.tokenize(s)\nend\n</cell>\n<code language=julia-0.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nTask 3\nWrite a function\
    \ count(s) that returns a dictionary with the counts of the letters in the string\
    \ s.\nYour function should take s in string form and return a dictionary where\
    \ keys are letters and values are counts.", "    \n    words = split(s)\n    return\
    \ words\nend", "\tlocal v = split(s,\" \")\n\tfor i in eachindex(v)\n\t\tv[i]\
    \ = split(v[i],\",\")\n\tend\n\treturn v\nend", "    splitted = split(s)\n   \
    \ vec = []\n    for i in splitted \n        push!(vec, i)\n    end\n    return\
    \ vec\nend\n</cell>\n<text>\nAfter defining the function words_string we would\
    \ like to test it using the cell above by running the following command:", " \
    \   return split(s, \", \")\nend\n</cell>\n<text>\nExercise 9\nThe function words_string\
    \ has two outputs. You can return multiple outputs by returning multiple tuples.",
  "    word_list = split(s)\n    vector(word_list)\nend\n</cell>\n<text>\nAs a final\
    \ note, we should note that splitting text into words is not always the best way\
    \ to tokenize text. There are many other ways to tokenize text that may be better\
    \ suited for your needs. For instance, if you wanted to split a sentence into\
    \ individual words before further processing, you could split on spaces, punctuation,\
    \ or even non-alphanumeric characters."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
