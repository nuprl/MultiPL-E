language: jl
name: HumanEval_101_words_string
results:
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n\"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of words as a list of\n    strings. For example:\n    >>> words_string(\"Hi,\
    \ my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>>\
    \ words_string(\"One, two, three, four, five, six\")\n    [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"]\n\"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph7fhjyre.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph7fhjyre.jl:1\n\
    in expression starting at /tmp/tmph7fhjyre.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    #Your code goes here\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpswtoc728.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpswtoc728.jl:1\n\
    in expression starting at /tmp/tmpswtoc728.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplkhcpx0b.jl:1\nin expression starting at /tmp/tmplkhcpx0b.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_string = split(s, \", \")\nend\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2_os0ho1.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp2_os0ho1.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_os0ho1.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_os0ho1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2_os0ho1.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_os0ho1.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_os0ho1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2_os0ho1.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_os0ho1.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2_os0ho1.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2_os0ho1.jl:23\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2_os0ho1.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    let wordsArray = split(s) \n    \n    wordsArray \nend\n</cell>\n\
    <code language=julia-1.1>\n\"\"\"\n    words_string(string::String, regex_pattern::String)\n\
    \    \n    split a string into words by using a regular expression. The pattern\
    \ should\n    be specified as an additional parameter. For example, if the\n \
    \   original string is \"A B C\" and your regex pattern is \"[A-C]\", the\n  \
    \  function will return a vector [\"A\",\"B\",\"C\"]\n    \n    For example,\n\
    \    >>> words_string(\"A B C\", \"[A-C]\")\n    [\"A\",\"B\",\"C\"]\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc80a7bi8.jl:17\nin expression starting at\
    \ /tmp/tmpc80a7bi8.jl:17\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\t\n\twords = []\n\tfor (word in split(s))\n\t\tpush!(words, word)\n\treturn\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdh4j73n.jl:15\nin expression starting at\
    \ /tmp/tmprdh4j73n.jl:15\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"Split the string into words separated by commas or spaces.\"\"\"\
    \n    words = split(s)\n    if length(words)==0 || words[0] == \"\"\n    else\
    \ words\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6qcduqoa.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6qcduqoa.jl:1\n\
    in expression starting at /tmp/tmp6qcduqoa.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    # initialize an empty array\n    array = []\n    # split the string into\
    \ words\n    for word in split(s, \" \")\n        push!(array, word)\n    end\n\
    \    return array\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy9gtk36e.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpy9gtk36e.jl:25\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy9gtk36e.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9gtk36e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy9gtk36e.jl:26\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy9gtk36e.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9gtk36e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy9gtk36e.jl:27\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy9gtk36e.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy9gtk36e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpy9gtk36e.jl:28\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    words_vec = Dict{String, Vector{String}}()\n   \
    \ for word in words\n        words_vec[word] = get!(words_vec, word, [])\n   \
    \     push!(words_vec[word], word)\n    end\n    return words_vec\nend #end words_string()\n\
    </cell>\n<text>\nNotice that words_string uses split and the get! function, which\
    \ are built-in functions in Julia. get! returns the value at key if key exists,\
    \ otherwise it returns the default value, in this case an empty array. We can\
    \ use get! to update words_vec by setting its key.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17__0vho.jl:20\nin expression starting at\
    \ /tmp/tmp17__0vho.jl:20\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split_string(s)\nend \nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpk2kicen3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpk2kicen3.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: split_string not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpk2kicen3.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2kicen3.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2kicen3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk2kicen3.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: split_string not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpk2kicen3.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2kicen3.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2kicen3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk2kicen3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: split_string\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpk2kicen3.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpk2kicen3.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk2kicen3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpk2kicen3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  Und"
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_split = split(s, \",| \")\n    return words_split\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp61q2iw9y.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp61q2iw9y.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi, my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61q2iw9y.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp61q2iw9y.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp61q2iw9y.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One, two, three, four, five, six\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp61q2iw9y.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp61q2iw9y.jl:19\ntest set: Test Failed at /tmp/tmp61q2iw9y.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi, my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp61q2iw9y.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp61q2iw9y.jl:19\ntest set: Test Failed at /tmp/tmp61q2iw9y.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,, two,\
    \ three, four, five, six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp61q2iw9y.jl:23 "
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n    return split(s, ',')\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnxlf6cb7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnxlf6cb7.jl:1\n\
    in expression starting at /tmp/tmpnxlf6cb7.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \",\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprub6usdy.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmprub6usdy.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    splitted = split(s, \", | \")\n    return [w for w in splitted if w]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp95ssnyah.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp95ssnyah.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  TypeError: non-boolean (SubString{String}) used in boolean\
    \ context\n  Stacktrace:\n   [1] iterate\n     @ ./iterators.jl:447 [inlined]\n\
    \   [2] iterate\n     @ ./generator.jl:44 [inlined]\n   [3] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{typeof(identity), Vector{SubString{String}}},\
    \ typeof(identity)})\n     @ Base ./array.jl:797\n   [4] collect\n     @ ./array.jl:721\
    \ [inlined]\n   [5] words_string(s::String)\n     @ Main /tmp/tmp95ssnyah.jl:13\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp95ssnyah.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp95ssnyah.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp95ssnyah.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  TypeError: non-boolean (SubString{String}) used\
    \ in boolean context\n  Stacktrace:\n   [1] iterate\n     @ ./iterators.jl:447\
    \ [inlined]\n   [2] iterate\n     @ ./generator.jl:44 [inlined]\n   [3] grow_to!(dest::Vector{SubString{String}},\
    \ itr::Base.Generator{Base.Iterators.Filter{typeof(identity), Vector{SubString{String}}},\
    \ typeof(identity)})\n     @ Base ./array.jl:797\n   [4] collect\n     @ ./array.jl:721\
    \ [inlined]\n   [5] words_string(s::String)\n     @ Main /tmp/tmp95ssnyah.jl:13\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp95ssnyah.jl:21 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp95ssnyah.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp95ssnyah.jl:22\n  Test threw except"
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, \" \")\n    words_vector = []\n    for word in\
    \ words\n        push!(words_vector, word)\n    end\n    \n    return words_vector\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1zr2a8_q.jl:23

    '
  stdout: "test set: Test Failed at /tmp/tmp1zr2a8_q.jl:26\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zr2a8_q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zr2a8_q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1zr2a8_q.jl:27\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zr2a8_q.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zr2a8_q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1zr2a8_q.jl:28\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1zr2a8_q.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1zr2a8_q.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp1zr2a8_q.jl:29\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will need to write a function for this part. \n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp83j_7ju2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp83j_7ju2.jl:1\n\
    in expression starting at /tmp/tmp83j_7ju2.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = []\n    s = split(s, \" \")\n    for word in s\n        push!(words,word)\n\
    \    end\n    return words\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpey5_90l2.jl:19\nin expression starting at\
    \ /tmp/tmpey5_90l2.jl:19\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    parts = split(s,\" \")\n    \n    lengths = []\n    \n    for part in\
    \ parts\n        push!(lengths, length(split(part,\",\")))\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpazsp7ycs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpazsp7ycs.jl:1\n\
    in expression starting at /tmp/tmpazsp7ycs.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    str = split(s, \" \")\n    str = sort(str)\n    return str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptmu040zh.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmptmu040zh.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"John\", \"is\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptmu040zh.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptmu040zh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptmu040zh.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"five,\", \"four,\", \"six\", \"three,\", \"two,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptmu040zh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptmu040zh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptmu040zh.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptmu040zh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptmu040zh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptmu040zh.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"five,\", \"four,\", \"six,\", \"three,\",\
    \ \"two,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s,\", \")\n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpj8qjrkmj.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpj8qjrkmj.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8qjrkmj.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8qjrkmj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj8qjrkmj.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8qjrkmj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8qjrkmj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj8qjrkmj.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8qjrkmj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpj8qjrkmj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpj8qjrkmj.jl:24\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpj8qjrkmj.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqax_r9r4.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpqax_r9r4.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    \n    Input: \n    \n    A string with words separated by\
    \ commas or spaces.\n    \n    Output:\n    \n    A vector of the words.\n   \
    \ \n    Constraints:\n    \n    The number of words in the string can vary.\n\
    \    \n    The string can contain alphanumeric, space, and punctuation characters.\n\
    \    \n    Note: \n    \n    You may assume that the string is composed of alphanumeric\
    \ characters only\n    and spaces only.\n    \n    You can use regular expressions\
    \ for finding the words in the string.\n    \n    Example: \n    \n    >>> words_string(\"\
    Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsbyz_gdw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsbyz_gdw.jl:1\n\
    in expression starting at /tmp/tmpsbyz_gdw.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split = split(s, ',')\n    words = unique(split)\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp1y0xe09m.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp1y0xe09m.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: split not defined\n  Stacktrace:\n   [1]\
    \ words_string(s::String)\n     @ Main /tmp/tmp1y0xe09m.jl:12\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp1y0xe09m.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1y0xe09m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1y0xe09m.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: split not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp1y0xe09m.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1y0xe09m.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1y0xe09m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1y0xe09m.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: split\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp1y0xe09m.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1y0xe09m.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1y0xe09m.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp1y0xe09m.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: split not"
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \"\"\"\n    Function words_string takes one positional argument\
    \ s. It takes the\n    string s as its argument, and returns a vector with all\
    \ the words\n    separated by commas.\n    \n    \"\"\"\n    \n    \n    \"\"\"\
    \n    Exercise 2\n    \n    Given a vector v of positive real numbers, return\
    \ the vector u of\n    negative real numbers, such that u[1] v[1], u[2] v[2],\
    \ ..., u[n] v[n]\n    is a positive real number and a u with the same number of\
    \ elements\n    as v has all negative real numbers in the same order. \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    Exercise 3\n    \n    Given a vector\
    \ v of positive real numbers, return the vector u of\n    negative real numbers,\
    \ such that u[1] v[1], u[2] v[2], ..., u[n] v[n]\n    is a positive real number\
    \ and a u with the same number of elements\n    as v has all negative real numbers\
    \ in the same order. \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    Exercise\
    \ 4\n    \n    We have two sets of numbers: [1, 2, 3, 4] and [5, 6, 7, 8]. \n\
    \    Find the union of the two sets: [1, 5, 6, 7].\n    \n    \"\"\"\n    \n \
    \   \"\"\"\n    Exercise 5\n    \n    The vector v has two elements: [1, 2, 3]\
    \ \n    Find the difference of v from the vector [4, 5]. \n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    Exercise 6\n    \n    Given a vector v of positive real\
    \ numbers, return the vector u of\n    negative real numbers, such that u[1] v[1],\
    \ u[2] v[2], ..., u[n] v[n]\n    is a positive real number and a u with the same\
    \ number of elements\n    as v has all negative real numbers in the same order.\
    \ \n    \n    \"\"\"\n    \n    \"\"\"\n    Exercise 7\n    \n    Write a program\
    \ that takes a matrix M of size N x N and an N by M\n    array C of doubles. \n\
    \    \n    Your function should fill out the following matrices: \n    \n    M\
    \ is a matrix of double type. \n    C is an N by M array of doubles.\n    \n \
    \   Your function should fill out a N by M matrix M such that\n    M[i][j] = C[i][j]\
    \ * M[i][j].\n    \n    The input C contains random numbers. \n    \n    \"\"\"\
    \n    \n    \"\"\"\n    Exercise 8\n    \n    We have two sets of numbers: [1,\
    \ 2, 3, 4] and [5, 6, 7, 8].\n    Find the intersection of these two sets: [1,\
    \ 5].\n    \n    \"\"\"\n    \n    \"\"\"\n    Exerci\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnise59xx.jl:1\nin expression starting at /tmp/tmpnise59xx.jl:1\n"
  stdout: ''
  timestamp: 1659979245
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\n    Word tokenizer using regular expression. \n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdw3td9g2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdw3td9g2.jl:1\n\
    in expression starting at /tmp/tmpdw3td9g2.jl:1\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = split(s)\n    for n in s\n        split(n)\n    end\n    return s\n\
    end\n</cell>\n<text>\nExercise 12\nDefine a function that prints the nth word\
    \ in the given string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xxdxz2n.jl:18\nin expression starting at\
    \ /tmp/tmp_xxdxz2n.jl:18\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_vec = Array{String, 1}()\n    for w in split(s)\n        if w !=\
    \ ''\n            push!(words_vec, w)\n        end\n    end\n    return words_vec\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    words_string(s:String)\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid empty character literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplct1q2y4.jl:14\nin expression starting at\
    \ /tmp/tmplct1q2y4.jl:14\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s, \",\")\n    return words_string\n    \n\
    end\n</cell>\n<code language=julia-1.6>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nNow let's try out what words_string does with some of our\
    \ other strings, such as \"One, two, three, four, five, six\".\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxiqjxdim.jl:17\nin expression starting at\
    \ /tmp/tmpxiqjxdim.jl:17\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = lowercase(replace(s, \",\", \"\"))\n    s = replace(s, \" \", \"\"\
    )\n    splits = s.split(\", \")\n    return splits\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpr_yftfq_.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpr_yftfq_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching replace(::String, ::String,\
    \ ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpr_yftfq_.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr_yftfq_.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpr_yftfq_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpr_yftfq_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpr_yftfq_.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpr_yftfq_.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-l"
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n        words = split(s, \",\")\n        return words\n    end\n</cell>\n\
    <code language=julia-0.4>\nresult = words_string(\"Hi, my name is John\")\n</cell>\n\
    <code language=julia-0.4>\nprintln(result)\n</cell>\n<text>\nExercise: Using words_string()\
    \ you can write a function that replaces spaces with commas and returns a word\
    \ list. For example,\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph8o7knag.jl:15\nin expression starting at\
    \ /tmp/tmph8o7knag.jl:15\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = split(s)\n    if isempty(s)\n        return s\n    end\n    s = removesuffix(s,\
    \ \",\")\n    push!(s, \"\")\n    s = removeprefix(s, \",\")\n    push!(s, \"\"\
    )\n    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp94_s9nx3.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmp94_s9nx3.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: removesuffix not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp94_s9nx3.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp94_s9nx3.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp94_s9nx3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp94_s9nx3.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: removesuffix not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp94_s9nx3.jl:16\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp94_s9nx3.jl:28 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp94_s9nx3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp94_s9nx3.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: removesuffix\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp94_s9nx3.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp94_s9nx3.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp94_s9nx3.jl:26\ntest set:\
    \ Error During Test at /tmp/tmp94_s9nx3.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  Und"
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    return words\nend\n</cell>\n<text>\nNow let's try\
    \ to test our function\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_32n5yy.jl:15\nin expression starting at\
    \ /tmp/tmpr_32n5yy.jl:15\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, ',')\n    v = Vector{String}()\n    for word in\
    \ words\n        push!(v, word)\n    end\n    return v\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    words_string(str::String)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4y4db5fd.jl:20\nin expression starting at\
    \ /tmp/tmp4y4db5fd.jl:20\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = split(s,\",\")\n    for s in split(s,\" \")\n        push!(s,\"\"\
    )\n    return s\nend\n</cell>\n<code language=julia-1.0>\nwords_string(\"Hi, my\
    \ name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"One, two,\
    \ three, four, five, six\")\n</cell>\n<text>\nGreat Job!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2aagx1dm.jl:17\nin expression starting at\
    \ /tmp/tmp2aagx1dm.jl:17\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    \n    return words\nend # words_string\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7lqu1lr2.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmp7lqu1lr2.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lqu1lr2.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lqu1lr2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7lqu1lr2.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lqu1lr2.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lqu1lr2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7lqu1lr2.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7lqu1lr2.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7lqu1lr2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7lqu1lr2.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979248
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    string_splitted = split(s, ',')\n    string_vector = string_splitted\n\
    \    \nend\n</cell>\n<code language=julia-1.1>\nwords_string(\"Hi, my name is\
    \ John\")\n</cell>\n<text>\nExercise 4: split a sentence into words and return\
    \ a vector of words\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6isximw.jl:16\nin expression starting at\
    \ /tmp/tmpp6isximw.jl:16\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s,\" \")\n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nProblem 7 - String Search\n\
    Write a function to test if a given word occurs in a given string. \nThe function\
    \ has two input parameters; a string and a word. \nThe function should return\
    \ a boolean indicating whether the given word occurs in the given string. \nThe\
    \ word can occur in any position within the given string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4bk9deet.jl:15\nin expression starting at\
    \ /tmp/tmp4bk9deet.jl:15\n"
  stdout: ''
  timestamp: 1659979247
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return s.split(', ')\nend\n</cell>\n<text>\nSolutions\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpohdebcdj.jl:12\nin expression\
    \ starting at /tmp/tmpohdebcdj.jl:12\n"
  stdout: ''
  timestamp: 1659979248
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, ',')\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg1ze8f79.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpg1ze8f79.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ze8f79.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ze8f79.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg1ze8f79.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ze8f79.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ze8f79.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg1ze8f79.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg1ze8f79.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg1ze8f79.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpg1ze8f79.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, ',')\nend \n    \n\"\"\"\n    You will be given a list\
    \ of words already split. Your task is to remove all\n    duplicates and return\
    \ a list without them.\n    \n    For example:\n    >>> words_string(\"Hi, my\
    \ name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpeqympjob.jl:15\nin expression starting at /tmp/tmpeqympjob.jl:15\n"
  stdout: ''
  timestamp: 1659979248
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_strings = split(s, \", \")\n    words_strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpnj8_0t85.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpnj8_0t85.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj8_0t85.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj8_0t85.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnj8_0t85.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj8_0t85.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj8_0t85.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnj8_0t85.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj8_0t85.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpnj8_0t85.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpnj8_0t85.jl:24\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpnj8_0t85.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_strings = split(s,\", \")\n    words_strings = words_strings[2:end]\n\
    \    return words_strings\nend\n</cell>\n<code language=julia-0.5>\nprintln(\"\
    Done\")\n</cell>\n<text>\nExercise 3.3: Write a function that takes a vector of\
    \ strings and returns an array of all of the strings in the array that start with\
    \ the string \"one\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6cc8qdo.jl:16\nin expression starting at\
    \ /tmp/tmph6cc8qdo.jl:16\n"
  stdout: ''
  timestamp: 1659979248
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv7lvv9dm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv7lvv9dm.jl:1\n\
    in expression starting at /tmp/tmpv7lvv9dm.jl:1\n"
  stdout: ''
  timestamp: 1659979248
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \"\"\
    \"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n \
    \   \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8bsu992.jl:1\nin expression starting at /tmp/tmpl8bsu992.jl:1\n"
  stdout: ''
  timestamp: 1659979248
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \"\"\"\nThis function converts a string to a vector of words\"\"\
    \"\n    \n    function split_words(words::Vector{String})\n        \n        \n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmppzvgxu_1.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmppzvgxu_1.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: Cannot `convert` an object of type var\"#split_words#1\"\
    \ to an object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmppzvgxu_1.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmppzvgxu_1.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppzvgxu_1.jl:25\ntest set:\
    \ Error During Test at /tmp/tmppzvgxu_1.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: Cannot `convert` an object of type\
    \ var\"#split_words#1\" to an object of type Vector{String}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{Vector{String}}, !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmppzvgxu_1.jl:16\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/poly"
  timestamp: 1659979251
- exit_code: -1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    Write your code here!\n    \"\"\"\n    return \"\"\nend \n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpw0hcr0kj.jl:22\n  Test threw
    exception\n  Expression: candidate("Hi, my name is John") == ["Hi", "my", "name",
    "is", "John"]\n  MethodError: Cannot `convert` an object of type String to an
    object of type Vector{String}\n  Closest candidates are:\n    convert(::Type{T},
    !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpw0hcr0kj.jl:15\n   [2] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpw0hcr0kj.jl:22 [inlined]\n   [4] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpw0hcr0kj.jl:21\ntest set: Error During Test at
    /tmp/tmpw0hcr0kj.jl:23\n  Test threw exception\n  Expression: candidate("One,
    two, three, four, five, six") == ["One", "two", "three", "four", "five", "six"]\n  MethodError:
    Cannot `convert` an object of type String to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    words_string(s::String)\n     @ Main /tmp/tmpw0hcr0kj.jl:15\n   [2] macro expansion\n     @
    ~/.conda/'
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_string = split(s)\n    word_vec = []\n    for i in word_string\n\
    \        word_vec = word_vec ++ convert(i, lowercase_letters)\n    return word_vec\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7q4fqxt3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7q4fqxt3.jl:1\n\
    in expression starting at /tmp/tmp7q4fqxt3.jl:1\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    vec = Array{String}(undef, 0)\n    arr = split(s, \",\")\n    for\
    \ s in arr\n        push!(vec, split(s))\n    end\n    return vec\nend\n</cell>\n\
    <text>\nWe can check our function by testing it on some inputs and printing the\
    \ results. We'll use the function we defined above to check our function, and\
    \ then also run our function on some input for fun.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvhunuzjl.jl:20\nin expression starting at\
    \ /tmp/tmpvhunuzjl.jl:20\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n\"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is to \n    split the string into words and return a vector\
    \ of the words. The vector must have a \n    length of exactly 5. The string must\
    \ contain only lowercase and uppercase letters \n    and should be separated by\
    \ spaces.\n    \n    For example:\n    >>> words_string(\"Hi, my name is John\"\
    )\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One,\
    \ two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\",\
    \ \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvx1b5gsz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvx1b5gsz.jl:1\n\
    in expression starting at /tmp/tmpvx1b5gsz.jl:1\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    v = Vector{String}()\n    for (index, word) in words(s)\n        v[index]\
    \ = word\n    end\n    return v\nend\n</cell>\n<cell>\n\"\"\"\n    The longest\
    \ word in English language is 8 characters long.\n    Write a function that accepts\
    \ a string (as defined above) and returns the length of the\n    longest word\
    \ in this string.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpykmoife3.jl:18\nin expression starting at\
    \ /tmp/tmpykmoife3.jl:18\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_string = (split((split(s))))\n    return words_string\nend\n</cell>\n\
    <code language=julia-0.4>\n\"\"\"\nThe function is_palindrome(s::String)::Bool\
    \ tests whether the given word s is a palindrome.\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyp3rqb2.jl:15\nin expression starting at\
    \ /tmp/tmpvyp3rqb2.jl:15\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    Given a string, return a new string of words separated by\
    \ commas or\n    spaces.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp38nslk1d.jl:1\nin expression starting at /tmp/tmp38nslk1d.jl:1\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s,',')\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3io9zzqb.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp3io9zzqb.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3io9zzqb.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3io9zzqb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3io9zzqb.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3io9zzqb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3io9zzqb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3io9zzqb.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3io9zzqb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3io9zzqb.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3io9zzqb.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = split(s, \",\")\n    return s\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp0tkax30p.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp0tkax30p.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0tkax30p.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0tkax30p.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp0tkax30p.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0tkax30p.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0tkax30p.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp0tkax30p.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp0tkax30p.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp0tkax30p.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp0tkax30p.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    word_list = split(s,\" \")\n    \n    word_list = map(word_to_int,word_list)\n\
    \    \n    return word_list\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpz2hx_mj8.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmpz2hx_mj8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: word_to_int not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpz2hx_mj8.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz2hx_mj8.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz2hx_mj8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpz2hx_mj8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: word_to_int not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpz2hx_mj8.jl:15\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz2hx_mj8.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz2hx_mj8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpz2hx_mj8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: word_to_int\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpz2hx_mj8.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpz2hx_mj8.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpz2hx_mj8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmpz2hx_mj8.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefV"
  timestamp: 1659979251
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    s = split(s)\n    s = filter(x -> !isWhitespace(x), s)\n    s =\
    \ filter(x -> !isLetter(char(x)), s)\n    s = filter(x -> !isDigit(char(x)), s)\n\
    \    return s\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp18t_tns8.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmp18t_tns8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: isWhitespace not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#4\")(x::SubString{String})\n     @ Main /tmp/tmp18t_tns8.jl:14\n\
    \   [2] filter(f::var\"#1#4\", a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [3] words_string(s::String)\n     @ Main /tmp/tmp18t_tns8.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp18t_tns8.jl:24 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp18t_tns8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp18t_tns8.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: isWhitespace not defined\n  Stacktrace:\n\
    \   [1] (::var\"#1#4\")(x::SubString{String})\n     @ Main /tmp/tmp18t_tns8.jl:14\n\
    \   [2] filter(f::var\"#1#4\", a::Vector{SubString{String}})\n     @ Base ./array.jl:2484\n\
    \   [3] words_string(s::String)\n     @ Main /tmp/tmp18t_tns8.jl:14\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [5] macro expansion\n     @ /tmp/tmp18t_tns8.jl:25 [inlined]\n\
    \   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp18t_tns8.jl:23\ntest set:\
    \ Error During Test at /tmp/tmp18t_tns8.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: isWhitespace\
    \ not defined\n  Stacktrace:\n   [1] (::var\"#1#4\")(x::SubString{String})\n \
    \    @ Main /tmp/tmp18t_tns8.jl:14\n   [2] filter(f::var\"#1#4\", a::Vector{SubString{String}})\n\
    \     @ Base ./array.jl:2484\n   [3] words_string(s::String)\n     @ Main /tmp/tmp18t_tns8.jl:14\n\
    \   [4] macro expansion\n     @ ~/.co"
  timestamp: 1659979251
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\n    Vectorized version of the words_string function.\n\"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo1qkolzg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo1qkolzg.jl:1\n\
    in expression starting at /tmp/tmpo1qkolzg.jl:1\n"
  stdout: ''
  timestamp: 1659979249
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \"\"\"\n    You will need to write a for loop that goes through\
    \ every word in the \n    string. Each word in the string will be one element\
    \ in the array. \n    \n    Your code should look like:\n    >>> words_string(\"\
    Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   \
    \ >>> words_string(\"One, two, three, four, five, six\")\n    [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    function words_string(s:String)::Vector{String}\n\
    \        words = split(s, \",\")\n        \n        \n    \"\"\"\n    You will\
    \ be given an array of strings that each have some text and \n    numbers. Your\
    \ task is to return the string that is the shortest and the \n    longest between\
    \ the strings. \n    \n    For example:\n    >>> longest_string([\"I like numbers\"\
    , \"The longest string\", \"Hi, my name is John\"])\n    \"Hi, my name is John\"\
    \n    >>> shortest_string([\"I like numbers\", \"The longest string\", \"Hi, my\
    \ name is John\"])\n    \"I like numbers\"\n    \"\"\"\n    function longest_string(a::Vector{String})\n\
    \        length = length(a[0])\n        for element in a\n            length =\
    \ length if length < length(element) else length(element)\n        end\n    end\n\
    \    \n    \"\"\"\n    You will be given an array of strings that each have some\
    \ text and \n    numbers. Your task is to return the string that is the shortest\
    \ and the \n    longest between the strings. \n    \n    For example:\n    >>>\
    \ longest_string([\"I like numbers\", \"The longest string\", \"Hi, my name is\
    \ John\"])\n    \"Hi, my name is John\"\n    >>> shortest_string([\"I like numbers\"\
    , \"The longest string\", \"Hi, my name is John\"])\n    \"I like numbers\"\n\
    \    \"\"\"\n    function shortest_string(a::Vector{String})\n        length =\
    \ length(a[0])\n        for element in a\n            length = length if length\
    \ > length(element) else length(element)\n        end\n    end\n    \n    \n \
    \   \"\"\"\n    You will be given an array of strings that each have some text\
    \ and \n    numbers. Your task is to return the string that is the shortest and\
    \ the \n    longest between the strings. \n    \n    For example:\n    >>> longest_string([\"\
    I like numbers\", \"The longest string\", \"Hi, my name is John\"])\n    \"Hi,\
    \ my name is John\"\n    >>> shortest_string([\"I like numbers\", \"The longest\
    \ string\", \"Hi, my name is John\"])\n    \"I like numbers\"\n    \"\"\"\n  \
    \  function shortest_string(a::Vector{String})\n        length = length(a[0])\n\
    \        for element in a\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpu3oeh9rf.jl:40 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu3oeh9rf.jl:41\n\
    in expression starting at /tmp/tmpu3oeh9rf.jl:41\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a vector of words. Your task is to remove\
    \ common elements\n    and return a vector of unique words.\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphzbj0z_d.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphzbj0z_d.jl:1\n\
    in expression starting at /tmp/tmphzbj0z_d.jl:1\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    splitted = split(s, ',')\n    vec = []\n    for i in splitted\n      \
    \  push!(vec, i)\n    end\n    return vec\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function named sentence_score() that takes two input strings as arguments\
    \ and returns a score value between 0.0 and 1.0.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp346xydqi.jl:19\nin expression starting at\
    \ /tmp/tmp346xydqi.jl:19\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_vec = Vector{String}(\"\")\n    for word in split(s, \",\\s*\")\n\
    \        word_vec << word\n    end\n    return word_vec\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2g1weem7.jl:13\nin expression starting at /tmp/tmp2g1weem7.jl:13\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \",\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprub6usdy.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmprub6usdy.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\n    \n\"\"\"\n    You will be given a string of words separated by\
    \ commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of the words. The \n    words MUST be lowercase.\n    \n    For example:\n\
    \    >>> words_string(\"Hi, my name is John\")\n    [\"hi\", \"my\", \"name\"\
    , \"is\", \"john\"]\n    >>> words_string(\"One, two, three, four, five, six\"\
    )\n    [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpn_zis3yb.jl:11 expected\
    \ \"end\", got \"will\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_zis3yb.jl:15\n\
    in expression starting at /tmp/tmpn_zis3yb.jl:15\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    return split(s) |> collect{x->split(x)} |> unique\nend\n</cell>\n\
    <code language=julia-1.5>\n# test it out\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nTask: Given a string, return a vector of strings that represents\
    \ the letters in the given string.\n    \n    For example:\n    >>> letters(\"\
    Hello, World!\")\n    [\"H\", \"e\", \"l\", \"l\", \"o\", \",\", \"W\", \"o\"\
    , \"r\", \"l\", \"d\", \".\", \"!\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw8hybzyf.jl:15\nin expression starting at\
    \ /tmp/tmpw8hybzyf.jl:15\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    Vector[String](split(s))\nend\n</cell>\n<code language=julia-0.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nImplement the function words_to_numbers(s::String)::Vector{Int}\
    \ which takes in a string and returns a vector of word numbers. For example, words_to_numbers(\"\
    one\") should return [1,2,1,3]. words_to_numbers(\"two\") should return [2,3,2].\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxk83n4g.jl:14\nin expression starting at\
    \ /tmp/tmpaxk83n4g.jl:14\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    splitted = split(s, ',')\n    return Vector(splitted)\nend\n</cell>\n\
    <code language=julia-1.0>\n?split\n</cell>\n<code language=julia-1.0>\n@code_native\
    \ words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7syj95mh.jl:15\nin expression starting at\
    \ /tmp/tmp7syj95mh.jl:15\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    word_list = split(s,\" \")\n    \n    return word_list\nend # words_string\n\
    </cell>\n<code language=julia-0.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns a vector of words for any sentence\
    \ given as a string. For instance:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_yljhzp.jl:17\nin expression starting at\
    \ /tmp/tmp5_yljhzp.jl:17\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_str = split(s, \",|\\ \")\n    words_str = [split(word, \"\
    \\ \") for word in words_str]\n    words_str = [word for row in words_str for\
    \ word in row]\n    \n    return words_str\nend\n</cell>\n<code language=julia-1.6>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nWrite a function words_numbers(s::String)\
    \ which takes in a string of words and returns a vector of integers.\nYour function\
    \ should return a vector of integers where the elements are the ASCII integer\
    \ code of each character.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppwzi0n3q.jl:13\nin expression starting at /tmp/tmppwzi0n3q.jl:13\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    # Your code here\n    words_string = split(s, ',')\n    return\
    \ words_string\n    \nend\n</cell>\n<text>\nLet's check your solution. Run the\
    \ cell below to test your function and compare the output to ours.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvaqff2d3.jl:19\nin expression starting at\
    \ /tmp/tmpvaqff2d3.jl:19\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(s.split(\" \"))\nend\n</cell>\n<code language=julia-0.5>\n\"\"\"\
    \n    You will be given a string of words and a vector of the same length as the\
    \ number of words\n    in the string where the words are separated by commas or\
    \ spaces. Your task is to \n    split the string into words and return the vector\
    \ containing these words.\n    \n    For example:\n    >>> words_string(\"Hi,\
    \ my name is John\", [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n    [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9cbhgkp8.jl:14\nin expression starting at\
    \ /tmp/tmp9cbhgkp8.jl:14\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\n    \n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjqud770t.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjqud770t.jl:1\n\
    in expression starting at /tmp/tmpjqud770t.jl:1\n"
  stdout: ''
  timestamp: 1659979250
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpff4og43m.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpff4og43m.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff4og43m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff4og43m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpff4og43m.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff4og43m.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff4og43m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpff4og43m.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpff4og43m.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpff4og43m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpff4og43m.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s,split=char(\",\"), skip=skip(\" \\t\",\" \\t\\n\"))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpl1y0a_gv.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpl1y0a_gv.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: char not defined\n  Stacktrace:\n   [1]\
    \ words_string(s::String)\n     @ Main /tmp/tmpl1y0a_gv.jl:12\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpl1y0a_gv.jl:19 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1y0a_gv.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl1y0a_gv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: char not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpl1y0a_gv.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1y0a_gv.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1y0a_gv.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl1y0a_gv.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: char\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpl1y0a_gv.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl1y0a_gv.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl1y0a_gv.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpl1y0a_gv.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: char not def"
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list = split(s)\n    word_vec = []\n    for word in word_list\n \
    \       push!(word_vec,word)\n    end\n    return word_vec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf56vx54q.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmpf56vx54q.jl:24\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf56vx54q.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf56vx54q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf56vx54q.jl:25\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf56vx54q.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf56vx54q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf56vx54q.jl:26\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf56vx54q.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf56vx54q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf56vx54q.jl:27\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    s = s.replace(\" \", \"\")\n    s = s.split(\",\")\n    return s\n\
    end\n</cell>\n<code language=julia-0.6>\n# Test your words_string function\nwords_string(\"\
    \")\n</cell>\n<code language=julia-0.6>\nwords_string(\" \")\n</cell>\n<code language=julia-0.6>\n\
    words_string(\"hi\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"hi my\
    \ name is john\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"hi, my name\
    \ is john\")\n</cell>\n<code language=julia-0.6>\nwords_string(\"hi, my name is\
    \  john\")\n</cell>\n<text>\nSplit each string into a vector of words\nNext we\
    \ will take our function and modify the last line to split each string into a\
    \ vector of words. If you don't understand what split is doing, don't worry about\
    \ trying to understand it now, we will be using it for the upcoming problem.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1qxzp79z.jl:17\nin expression starting at\
    \ /tmp/tmp1qxzp79z.jl:17\n"
  stdout: ''
  timestamp: 1659979251
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqax_r9r4.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpqax_r9r4.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqax_r9r4.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqax_r9r4.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpqax_r9r4.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1"
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n  parts = split(s, \",\")\n  return [p for p in parts if p != \"\"]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpr7tq8seo.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpr7tq8seo.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7tq8seo.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7tq8seo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpr7tq8seo.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7tq8seo.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7tq8seo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpr7tq8seo.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpr7tq8seo.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpr7tq8seo.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpr7tq8seo.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \"\
    \ six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expa"
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_split = split(s, \",\")\n    word_split = split(s, \"-\")\n    word_split\
    \ = split(s, \"!\")\n    word_split = split(s, \".\")\n    word_split = split(s,\
    \ \";\")\n    word_split = split(s, \"?\")\n    word_split = split(s, \":\")\n\
    \    word_split = split(s, \" \")\n    word_split = split(s, \"\\n\")\n    word_split\
    \ = split(s, \"\")\n    word_split = split(s, \" \")\n    word_split\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf55ap1ae.jl:27

    '
  stdout: "test set: Test Failed at /tmp/tmpf55ap1ae.jl:30\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf55ap1ae.jl:30 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf55ap1ae.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf55ap1ae.jl:31\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf55ap1ae.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf55ap1ae.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf55ap1ae.jl:32\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpf55ap1ae.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpf55ap1ae.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpf55ap1ae.jl:33\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n \n    words=split(s,\",\")\n    words_string=Vector{String}(words)\n    return\
    \ words_string\nend\n\"\"\"\n    You will be given a list of words. Your task\
    \ is to remove all duplicates from the\n    list and return a new list without\
    \ duplicates.\n    \n    For example:\n    >>> removeDuplicates([1, 3, 2, 4, 3,\
    \ 1])\n    [1, 3, 2, 4]\n    >>> removeDuplicates([1, 3, 2, 4, 3])\n    [1, 3,\
    \ 2, 4]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpxxu7rpim.jl:17\nin expression starting at /tmp/tmpxxu7rpim.jl:17\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, ',\\s*')\nend \nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfrk2vkew.jl:12\nin expression starting at /tmp/tmpfrk2vkew.jl:12\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s,\",\")\nend\n\"\"\"\n    \n    \n    \n    \n\"\"\"\n \
    \   \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n \
    \   \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n    \n\"\"\"\n    \n    \n    \n    \n\"\"\"\n    \n \
    \   \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa9hw1zd6.jl:269

    '
  stdout: "test set: Test Failed at /tmp/tmpa9hw1zd6.jl:272\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9hw1zd6.jl:272 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9hw1zd6.jl:271\ntest set: Test\
    \ Failed at /tmp/tmpa9hw1zd6.jl:273\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9hw1zd6.jl:273 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9hw1zd6.jl:271\ntest set: Test\
    \ Failed at /tmp/tmpa9hw1zd6.jl:274\n  Expression: candidate(\"Hi, my name\")\
    \ == [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa9hw1zd6.jl:274 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa9hw1zd6.jl:271\ntest set: Test\
    \ Failed at /tmp/tmpa9hw1zd6.jl:275\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inline"
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \", \")\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that splits a string by commas but ignore commas within quotes.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgsgnq6rh.jl:14\nin expression starting at\
    \ /tmp/tmpgsgnq6rh.jl:14\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    # Your code goes here\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8b8lnhmm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8b8lnhmm.jl:1\n\
    in expression starting at /tmp/tmp8b8lnhmm.jl:1\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(split(s, \",\"), \" \")\nend\n</cell>\n<code language=julia-1.0>\n\
    @test words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n@test words_string(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nExercise:\
    \ Write a function named words_string_trim that takes a string and returns a vector\
    \ of the words in the string trimmed of their whitespace characters.\nWrite a\
    \ function named words_string_trim that takes a string and returns a vector of\
    \ the words in the string trimmed in all whitespace characters.\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptd1qwrgm.jl:14\nin expression starting at\
    \ /tmp/tmptd1qwrgm.jl:14\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    result = String.[]\n    for i in s\n        if i isalpha()\n         \
    \   push!(result, i)\n        else if i == \",\"\n            if length(result)\
    \ > 0\n                push!(result, \"\")\n            end\n        else\n  \
    \          push!(result, \"\")\n        end\n    end\n    return result\nend\n\
    </cell>\n<code language=julia-0.6>\n\"\"\"\n    word_count(word_string)\n    Count\
    \ the number of occurrences of each word in word_string.\n    \n    For example,\n\
    \    >>> word_count(\"Hi, my name is John\")\n    Dict(\"Hi\" => 1, \"my\" =>\
    \ 1, \"name\" => 1, \"is\" => 1, \"John\" => 1)\n    >>> word_count(\"Hi my name\
    \ is John\")\n    Dict(\"Hi\" => 1, \"my\" => 1, \"name\" => 1, \"is\" => 1, \"\
    John\" => 1)\n    >>> word_count(\"Hi, my name, is John\")\n    Dict(\"Hi\" =>\
    \ 1, \"my\" => 1, \"name\" => 2, \"is\" => 1, \"John\" => 1)\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0d3fuwbl.jl:16\nin expression starting at\
    \ /tmp/tmp0d3fuwbl.jl:16\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s,\", \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt2d36cuj.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpt2d36cuj.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d36cuj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt2d36cuj.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d36cuj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt2d36cuj.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d36cuj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt2d36cuj.jl:23\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    if s == \"\"\n        return []\n    if !islower(s)\n        s =\
    \ lowercase(s)\n    end\n    word_list = split(s,\",\",\",\",true)\n    return\
    \ word_list\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj4qbwemd.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj4qbwemd.jl:1\n\
    in expression starting at /tmp/tmpj4qbwemd.jl:1\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    Vector{String} = s.split(\", \")\n    return Vector{String}\nend \nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpsnhxp3tj.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpsnhxp3tj.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: Vector not defined\n  Stacktrace:\n   [1]\
    \ words_string(s::String)\n     @ Main /tmp/tmpsnhxp3tj.jl:12\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpsnhxp3tj.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnhxp3tj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsnhxp3tj.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: Vector not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpsnhxp3tj.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnhxp3tj.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnhxp3tj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsnhxp3tj.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: Vector\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpsnhxp3tj.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsnhxp3tj.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsnhxp3tj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsnhxp3tj.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: Vector"
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    string_split = split(s)\n    return string_split\nend\n</cell>\n\
    <code language=julia-0.5>\n#export\n\"\"\"\n    words_string(::String, sep::Char=',')::Vector{String}\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dwvq74x.jl:16\nin expression starting at\
    \ /tmp/tmp6dwvq74x.jl:16\n"
  stdout: ''
  timestamp: 1659979252
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list::Vector{String} = split(s, \", \")\n    return word_list\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprnywnjkh.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmprnywnjkh.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnywnjkh.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnywnjkh.jl:19\ntest set: Test\
    \ Failed at /tmp/tmprnywnjkh.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnywnjkh.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnywnjkh.jl:19\ntest set: Test\
    \ Failed at /tmp/tmprnywnjkh.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnywnjkh.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprnywnjkh.jl:19\ntest set: Test\
    \ Failed at /tmp/tmprnywnjkh.jl:24\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprnywnjkh.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s,\",\")\n    string_to_vec = Vector{String}(words)\n  \
    \  \n    return string_to_vec\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpq57mouix.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpq57mouix.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq57mouix.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq57mouix.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpq57mouix.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq57mouix.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq57mouix.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpq57mouix.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpq57mouix.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpq57mouix.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpq57mouix.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return words(s)\nend\n</cell>\n<cell>\nimport LinearAlgebra\nusing LinearAlgebra\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp18moadx3.jl:14\nin expression starting at\
    \ /tmp/tmp18moadx3.jl:14\n"
  stdout: ''
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n  v = split(s, \",\")\n  for word in v\n    push!(word_vec, word)\n  end\n\
    \  return word_vec\nend\n</cell>\n<cell>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<text>\nProblem 7\nWrite a function that takes three vectors of ints,\
    \ a matrix of ints, and returns a matrix of ints where:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8prjgdds.jl:18\nin expression starting at\
    \ /tmp/tmp8prjgdds.jl:18\n"
  stdout: ''
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n \n\"\"\"\n    You will be given a list of words, each of which has its first\
    \ letter capitalized. Your\n    task is to return a string made of the first letter\
    \ of each word. \n    \n    For example:\n    >>> capitalise([\"hi\",\"my\",\"\
    name\",\"is\",\"john\"])\n    \"Hi, my name is John\"\n    >>> capitalise(\"One\
    \ Two Three Four Five Six\")\n    \"One Two Three Four Five Six\"\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpux08sdsu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpux08sdsu.jl:1\n\
    in expression starting at /tmp/tmpux08sdsu.jl:1\n"
  stdout: ''
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = lowercase(s);\n    \n    return split(s, \", \");\nend\n\"\"\"\n \
    \   You will be given a string of words separated by commas or spaces. Your task\
    \ is\n    to count the number of words and return a vector of the words and their\
    \ \n    respective counts.\n    \n    For example:\n    >>> words_string(\"Hi,\
    \ my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>>\
    \ words_string(\"One, two, three, four, five, six\")\n    [\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmplcixts81.jl:16\nin expression starting at /tmp/tmplcixts81.jl:16\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    #split the string in list of words\n    \n    s = split(s)\n   \
    \ \n    words = Vector{String}()\n    \n    for w in s\n        push!(words, w)\n\
    \    end\n    \n    return words\nend\n</cell>\n<code language=julia-1.3>\nword_list(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.3>\nword_list(\"One, two,\
    \ three, four, five, six\")\n</cell>\n<text>\nNotice that the function words_string\
    \ takes only one parameter: the string containing all of your data.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7gkjwfd2.jl:25\nin expression starting at\
    \ /tmp/tmp7gkjwfd2.jl:25\n"
  stdout: ''
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n</code>\nPart 2 of the puzzle\nThe function words_string() that you wrote\
    \ returns an array of strings. However, the following code block expects that\
    \ this function returns an array of Vectors:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb98t969y.jl:12\nin expression starting at\
    \ /tmp/tmpb98t969y.jl:12\n"
  stdout: ''
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    if length(s) <= 0\n        return vec[]\n    else\n        word_list\
    \ = split(s, \",\")\n        words_vector = vec[]\n        for i in word_list\n\
    \            words_vector = push!(words_vector, split(i, \" \"))\n        end\n\
    \        return words_vector\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpsexconfv.jl:26

    '
  stdout: "test set: Error During Test at /tmp/tmpsexconfv.jl:29\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching getindex(::typeof(vec))\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpsexconfv.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsexconfv.jl:29 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsexconfv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsexconfv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching getindex(::typeof(vec))\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpsexconfv.jl:17\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsexconfv.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsexconfv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsexconfv.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching getindex(::typeof(vec))\n  Stacktrace:\n   [1] words_string(s::String)\n\
    \     @ Main /tmp/tmpsexconfv.jl:17\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsexconfv.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsexconfv.jl:28\ntest set:\
    \ Error During Test at /tmp/tmpsexconfv.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"On"
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    #initialize a Vector with empty strings\n    wordsVec=Vector{String}(10)\n\
    \    \n    #Split the String in tokens by ','\n    tokens = split(s,\",\")\n \
    \   #split the tokens in words by ' '\n    words = split(s,\" \")\n    \n    #Iterate\
    \ over all the words and add them to vector\n    for i in words\n        wordsVec=\
    \ append(wordsVec,i)\n    end\n    \n    return wordsVec\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmps92ur83l.jl:31

    '
  stdout: "test set: Error During Test at /tmp/tmps92ur83l.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching Vector{String}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmps92ur83l.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps92ur83l.jl:34 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps92ur83l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmps92ur83l.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching Vector{String}(::Int64)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmps92ur83l.jl:15\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps92ur83l.jl:35 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps92ur83l.jl:33\ntest set:\
    \ Error During Test at /tmp/tmp"
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    Vector(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp9uohaoyt.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp9uohaoyt.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching (Vector)(::String)\n  Closest\
    \ candidates are:\n    (Vector)() at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:38\n\
    \    (Vector)(!Matched::SuiteSparse.CHOLMOD.Dense{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:856\n\
    \    (Vector)(!Matched::SparseArrays.AbstractSparseVector{Tv}) where Tv at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:946\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp9uohaoyt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9uohaoyt.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9uohaoyt.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9uohaoyt.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching (Vector)(::String)\n\
    \  Closest candidates are:\n    (Vector)() at ~/.conda/envs/polyglot/share/julia/base/baseext.jl:38\n\
    \    (Vector)(!Matched::SuiteSparse.CHOLMOD.Dense{T}) where T at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SuiteSparse/src/cholmod.jl:856\n\
    \    (Vector)(!Matched::SparseArrays.AbstractSparseVector{Tv}) where Tv at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsevector.jl:946\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp9uohaoyt.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9uohaoyt.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] t"
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s, \" ,\")\n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmplvw7eqf4.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmplvw7eqf4.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi, my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvw7eqf4.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmplvw7eqf4.jl:19\ntest set: Test\
    \ Failed at /tmp/tmplvw7eqf4.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One, two, three, four, five, six\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplvw7eqf4.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplvw7eqf4.jl:19\ntest set: Test Failed at /tmp/tmplvw7eqf4.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi, my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmplvw7eqf4.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmplvw7eqf4.jl:19\ntest set: Test Failed at /tmp/tmplvw7eqf4.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,, two,\
    \ three, four, five, six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmplvw7eqf4.jl:23 "
  timestamp: 1659979182
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    string::String\n    vector::Vector{String}\n    vector = split(s, \" \"\
    )\n    return vector\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp7qtzyizi.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp7qtzyizi.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  TypeError: in typeassert, expected String, got a value\
    \ of type typeof(string)\n  Stacktrace:\n   [1] words_string(s::String)\n    \
    \ @ Main /tmp/tmp7qtzyizi.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qtzyizi.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qtzyizi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7qtzyizi.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  TypeError: in typeassert, expected String, got\
    \ a value of type typeof(string)\n  Stacktrace:\n   [1] words_string(s::String)\n\
    \     @ Main /tmp/tmp7qtzyizi.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qtzyizi.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qtzyizi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7qtzyizi.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  TypeError: in typeassert,\
    \ expected String, got a value of type typeof(string)\n  Stacktrace:\n   [1] words_string(s::String)\n\
    \     @ Main /tmp/tmp7qtzyizi.jl:12\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7qtzyizi.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7qtzyizi.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp7qtzyizi.jl:25\n  Test threw exception\n  E"
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = [split(s, \",\")]\n    for word in words\n        if !is_empty(word)\n\
    \            push!(words, split(word, \" \"))\n        end\n    end\n    return\
    \ words\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4bfa0j2.jl:20\nin expression starting at\
    \ /tmp/tmpb4bfa0j2.jl:20\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    # your code goes here\n    return []\nend\n</cell>\n<text>\nExpected Output:\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy7a49nj.jl:15\nin expression starting at\
    \ /tmp/tmpqy7a49nj.jl:15\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    v = Vector{String}()\n    \n    for i in split(s) do \n        v\
    \ = v .+ split(i)\n    end\n    \n    return v\nend\n</cell>\n<cell>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the string \"Abe\" is part of the words \"Hip\", \"Eye\" and \"Eyebrow\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxvjxt_1.jl:21\nin expression starting at\
    \ /tmp/tmpoxvjxt_1.jl:21\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\tstring_split = split(s, ',')\n\tstring_split = split(s, ' ')\n\treturn string_split\n\
    end\n</cell>\n<code language=julia-1.3>\n# Test your words_string function\nwords\
    \ = words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.3>\n\
    # Ok, now write a function that takes a string and returns a list of lowercase\
    \ words found in it\nlowercasewords = words_string(\"Hi, my name is John\")\n\
    lowercasewords\n</cell>\n<code language=julia-1.3>\n# Ok, now write a function\
    \ that takes a list of words and returns a list with the words made lowercase\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph6_veiap.jl:16\nin expression starting at\
    \ /tmp/tmph6_veiap.jl:16\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    split_string = split(s)\n    \n    return split_string\nend\n</cell>\n\
    <code language=julia-0.6>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-0.6>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <code language=julia-0.6>\nwords_string(\"A\")\n</cell>\n<code language=julia-0.6>\n\
    words_string(\"\")\n</cell>\n<code language=julia-0.6>\nwords_string(\" \")\n\
    </cell>\n<text>\nExercise: Implement a vectorization version of words_string that\
    \ returns a vector instead of a list\nImplement a vectorization version of split\
    \ that splits str into a vector where each element is a string that is delimited\
    \ by some character such as \",\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptlzkhxwy.jl:17\nin expression starting at\
    \ /tmp/tmptlzkhxwy.jl:17\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a vector of characters. Your task is\n \
    \   to count the occurrences of each character in the vector and return a vector\n\
    \    that counts the characters in each string. \n    \n    For example:\n   \
    \ >>> characters_string([97,98, 99,100,101,102])\n    [22, 9, 0, 3, 7, 2, 4]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_3mzh9wk.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_3mzh9wk.jl:1\n\
    in expression starting at /tmp/tmp_3mzh9wk.jl:1\n"
  stdout: ''
  timestamp: 1659979254
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n  words_string = split(s) |> map(x->split(x)) |> flatten\n  return words_string\n\
    end \nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpa_s4157z.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpa_s4157z.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching (::var\"#1#2\")()\n  Closest\
    \ candidates are:\n    (::var\"#1#2\")(!Matched::Any) at /tmp/tmpa_s4157z.jl:12\n\
    \  Stacktrace:\n   [1] map(f::var\"#1#2\")\n     @ Base ./abstractarray.jl:2965\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpa_s4157z.jl:12\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa_s4157z.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa_s4157z.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa_s4157z.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching (::var\"#1#2\"\
    )()\n  Closest candidates are:\n    (::var\"#1#2\")(!Matched::Any) at /tmp/tmpa_s4157z.jl:12\n\
    \  Stacktrace:\n   [1] map(f::var\"#1#2\")\n     @ Base ./abstractarray.jl:2965\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpa_s4157z.jl:12\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpa_s4157z.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpa_s4157z.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpa_s4157z.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no\
    \ method matching (::var\"#1#2\")()\n  Closest candidates are:\n    (::var\"#1#2\"\
    )(!Matched::Any) at /tmp/tmpa_s4157z.jl:12\n  Stacktrace:\n   [1] map(f::var\"\
    #1#2\")\n     @ Base ./abstractarray.jl:2965\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmpa_s4157z.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/"
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s, \",\")\n    return words\nend\n</cell>\n<text>\nExercise\
    \ 2\nThe string \"A,B,C\" is given as an example of a word vector. Implement a\
    \ function that extracts the vector for the sentence \"A,B,C\"\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxlfn0ztl.jl:15\nin expression starting at\
    \ /tmp/tmpxlfn0ztl.jl:15\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \"\"\"\n    You will be given a string of words separated\
    \ by commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of words. \n    \n    For example:\n    >>> words_string(\"Hi, my name\
    \ is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphykehs79.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphykehs79.jl:1\n\
    in expression starting at /tmp/tmphykehs79.jl:1\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, ' ')\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptwdbq4py.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptwdbq4py.jl:1\n\
    in expression starting at /tmp/tmptwdbq4py.jl:1\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    word_list = split(s, \", \")\n    word_list = split(s, \" \")\n\
    \    word_list = split(s, \",\")\n    word_list = split(s, \" \")\n    \n    return\
    \ word_list\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxln8hxzw.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpxln8hxzw.jl:25\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxln8hxzw.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxln8hxzw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxln8hxzw.jl:26\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxln8hxzw.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxln8hxzw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxln8hxzw.jl:27\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxln8hxzw.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxln8hxzw.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpxln8hxzw.jl:28\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, ' ')\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5kok19c7.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp5kok19c7.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kok19c7.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kok19c7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5kok19c7.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kok19c7.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kok19c7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5kok19c7.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5kok19c7.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5kok19c7.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp5kok19c7.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979185
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words_string = split(s)\n    return words_string\nend \nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpe968kppi.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpe968kppi.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe968kppi.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe968kppi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe968kppi.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe968kppi.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe968kppi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe968kppi.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpe968kppi.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpe968kppi.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe968kppi.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s_array = split(s, \", \")\n    \n    \n    \n    if s_array == Nil \n\
    \        s_array = [s]\n    end\n    \n    return s_array\nend\n</cell>\n<code\
    \ language=julia-1.6>\nwords_string(words_string(\"Hi, my name is John\"))\n</cell>\n\
    <text>\nQuestion 12\nWrite a function which takes a string as an input and returns\
    \ a list of integers corresponding to the ASCII codes of the characters in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp938_nca2.jl:22\nin expression starting at\
    \ /tmp/tmp938_nca2.jl:22\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list = split(s,\",\")\n    word_list = map(x -> split(x,\" \"),word_list)\n\
    \    word_list = filter(x -> length(x)>0,word_list)\n    return word_list\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp65dvb925.jl:1\nin expression starting at /tmp/tmp65dvb925.jl:1\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(split(s, \", \")...)\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\nwords_to_vec(\"Hi, my name is John\")\n</cell>\n<text>\nNotice\
    \ that this function is slightly different than the one given to you in the earlier\
    \ assignments, because here we have an extra split() in the beginning. Moreover,\
    \ we do not need to have that extra space before the comma.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6y1u2eqg.jl:14\nin expression starting at\
    \ /tmp/tmp6y1u2eqg.jl:14\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    word_list = string.split(s)\n    \n    return word_list\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpfo7ox06h.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpfo7ox06h.jl:22\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type #string has no field split\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmpfo7ox06h.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfo7ox06h.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfo7ox06h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfo7ox06h.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type #string has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmpfo7ox06h.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfo7ox06h.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfo7ox06h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfo7ox06h.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type #string has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpfo7ox06h.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfo7ox06h.jl:24 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfo7ox06h.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpfo7ox06h.jl:25\n  Test threw exce"
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n\"\"\"\nYou will be given a string of words separated by\
    \ commas or spaces. Your task is\nto count the number of times a word occurs in\
    \ the string.\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_kgdozlz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_kgdozlz.jl:1\n\
    in expression starting at /tmp/tmp_kgdozlz.jl:1\n"
  stdout: ''
  timestamp: 1659979255
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    #initialize a vector of strings\n    vector = []\n    \n    #loop\
    \ through the string\n    for word in split(s)\n        \n        #if a space\
    \ was found append the string to the vector \n        if word != \"\"\n      \
    \      vector += word\n        \n        end\n    end\n    return vector\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpnz1vv4gz.jl:29

    '
  stdout: "test set: Error During Test at /tmp/tmpnz1vv4gz.jl:32\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::Vector{Any}, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n    +(::Array,\
    \ !Matched::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpnz1vv4gz.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnz1vv4gz.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnz1vv4gz.jl:31\ntest set:\
    \ Error During Test at /tmp/tmpnz1vv4gz.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching +(::Vector{Any},\
    \ ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,\
    \ !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at ~/.conda/envs/polyglot/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpnz1vv4gz.jl:21\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnz1vv4gz.jl:33 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined"
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    string_split = split(s)\n    Vector.empty(string_split)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8v3ggpha.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp8v3ggpha.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type UnionAll has no field empty\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:37 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmp8v3ggpha.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8v3ggpha.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8v3ggpha.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8v3ggpha.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type UnionAll has no field empty\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:37 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmp8v3ggpha.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8v3ggpha.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8v3ggpha.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8v3ggpha.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type UnionAll has\
    \ no field empty\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:37 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmp8v3ggpha.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp8v3ggpha.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp8v3ggpha.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8v3ggpha.jl:23\n  Test threw e"
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    splitted = split(s,\", | \")\n    return Vector{String}(splitted)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpcvc_oxkg.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpcvc_oxkg.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi, my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvc_oxkg.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcvc_oxkg.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcvc_oxkg.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One, two, three, four, five, six\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcvc_oxkg.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcvc_oxkg.jl:19\ntest set: Test Failed at /tmp/tmpcvc_oxkg.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi, my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpcvc_oxkg.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpcvc_oxkg.jl:19\ntest set: Test Failed at /tmp/tmpcvc_oxkg.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,, two,\
    \ three, four, five, six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcvc_oxkg.jl:23 "
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\n    \n    You will be given a string of words with all the same capitalisation.\
    \ You should\n    remove all words with less than 3 characters.\n    \n    For\
    \ example:\n    >>> remove_capitalised_words(\"Hi, my name is John\")\n    [\"\
    Hi\", \"my\", \"name\", \"is\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp524yggr5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp524yggr5.jl:1\n\
    in expression starting at /tmp/tmp524yggr5.jl:1\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_string = split(s,\" \")\n    words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppf3f_xug.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmppf3f_xug.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf3f_xug.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf3f_xug.jl:19\ntest set: Test\
    \ Failed at /tmp/tmppf3f_xug.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf3f_xug.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf3f_xug.jl:19\ntest set: Test\
    \ Failed at /tmp/tmppf3f_xug.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppf3f_xug.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppf3f_xug.jl:19\ntest set: Test\
    \ Failed at /tmp/tmppf3f_xug.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979257
- exit_code: -1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_lists <- words_string(s)\n    return word_lists[end]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    word_list = split(s)\n    \n    word_list = map(x->split_word(x),word_list)\n\
    \    \n    return flatten(word_list)\nend\n</cell>\n<code language=julia-1.5>\n\
    @test words_string(\"Hi, my name is John\") \u2248 [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\n@test words_string(\"One, two, three, four, five, six\")\
    \ \u2248 [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa0u2q5zo.jl:19\nin expression starting at\
    \ /tmp/tmpa0u2q5zo.jl:19\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \",\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprub6usdy.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmprub6usdy.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:20\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprub6usdy.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprub6usdy.jl:18\ntest set: Test\
    \ Failed at /tmp/tmprub6usdy.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979246
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list = split(s, \" \")\n    return word_list\nend \nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpa4k2p6zm.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpa4k2p6zm.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa4k2p6zm.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa4k2p6zm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa4k2p6zm.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa4k2p6zm.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa4k2p6zm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa4k2p6zm.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpa4k2p6zm.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpa4k2p6zm.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa4k2p6zm.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\"\"\"\n    Given a string, return an array of strings that represent words\
    \ in the string\n    \n    For example, \n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9qawj1ld.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9qawj1ld.jl:1\n\
    in expression starting at /tmp/tmp9qawj1ld.jl:1\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n    words = string.split(string)\n    vec =\
    \ []\n    for w in words\n        push!(vec, w)\n    return vec\nend\n</cell>\n\
    <code language=julia-1.2>\n\"\"\"\n    words_string(s)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8syfwze.jl:28\nin expression starting at\
    \ /tmp/tmpe8syfwze.jl:28\n"
  stdout: ''
  timestamp: 1659979256
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s, ',')\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxete7kum.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpxete7kum.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxete7kum.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxete7kum.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxete7kum.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxete7kum.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxete7kum.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxete7kum.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxete7kum.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxete7kum.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxete7kum.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    if isnothing(s) return nil\n    if s == \"\" then return []\n    split_str\
    \ = String.split(s,\",\")\n    split_str = String.split(s,\" \")\n    return split_str\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqk0ghanw.jl:13\nin expression starting at /tmp/tmpqk0ghanw.jl:13\n"
  stdout: ''
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split((\" \").join(s))\nend\n</cell>\n<code language=julia-1.6>\n\
    @testset \"split_words\" begin\n    split(\"Hi, my name is John\", ' ')\n    split(\"\
    One, two, three, four, five, six\")\nend\n</cell>\n<text>\nExercise 3\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfpmml8ql.jl:14\nin expression starting at\
    \ /tmp/tmpfpmml8ql.jl:14\n"
  stdout: ''
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s,\" \")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7vycdkux.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp7vycdkux.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vycdkux.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vycdkux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7vycdkux.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vycdkux.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vycdkux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7vycdkux.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7vycdkux.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7vycdkux.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7vycdkux.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(s,\", \") |> Vector{String}\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp2kpfrbwb.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmp2kpfrbwb.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2kpfrbwb.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2kpfrbwb.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2kpfrbwb.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2kpfrbwb.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2kpfrbwb.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2kpfrbwb.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2kpfrbwb.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp2kpfrbwb.jl:18\ntest set: Test\
    \ Failed at /tmp/tmp2kpfrbwb.jl:23\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp2kpfrbwb.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    wordss = split(s)\n    wordvecs = Vector{String}(length(wordss))\n\
    \    for i=1:length(wordss)\n        wordvecs[i] = wordss\n    end\n    return\
    \ wordvecs\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7aofgwqm.jl:20\nin expression starting at\
    \ /tmp/tmp7aofgwqm.jl:20\n"
  stdout: ''
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n   \"\"\"\n    \n    \n\"\"\"\n    You will be given a string of words separated\
    \ by commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my\
    \ name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmprvp8yqvt.jl:11 expected\
    \ \"end\", got \"will\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprvp8yqvt.jl:16\n\
    in expression starting at /tmp/tmprvp8yqvt.jl:16\n"
  stdout: ''
  timestamp: 1659979257
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \" ,\")\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Random\nRandom.seed!(0)\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplm30eaqr.jl:14\nin expression starting at\
    \ /tmp/tmplm30eaqr.jl:14\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(strip(s))\n    return words\nend\n</cell>\n<code language=julia-0.5>\n\
    words_string(\" Hi, my name is John \")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function called count_words(s::String)::Int that takes a string and\nreturns\
    \ the number of words in the string separated by commas.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqflqrco.jl:15\nin expression starting at\
    \ /tmp/tmpdqflqrco.jl:15\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    split = split(s, \",\")\n    \n    return split\nend\n</cell>\n\
    <text>\nExercise 15: words_string()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xy0n39_.jl:17\nin expression starting at\
    \ /tmp/tmp0xy0n39_.jl:17\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s)\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\n   \
    \ words_file(s::String)::Vector{String}\n    \n    Read the words in the file\
    \ \"s\" and return them as a vector.\n    \n    You are expected to call this\
    \ function once for each line in the file\n    \n    For example:\n    >>> words_file(\"\
    src/input.txt\")\n    [\"Hello\", \"World\"]\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32k27pyb.jl:14\nin expression starting at\
    \ /tmp/tmp32k27pyb.jl:14\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words::Vector{String} = split(s,\" \")\n    return words\nend\n\
    </cell>\n<code language=julia-0.5>\n@code_native words_string(\"Hi, my name is\
    \ John\")\n</cell>\n<code language=julia-0.5>\n@code_native words_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nPart 3: Vectorized string operations\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rq_16o3.jl:16\nin expression starting at\
    \ /tmp/tmp3rq_16o3.jl:16\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n  result = Vector{String}()\n  words = get_tokens(s)\n  for w in words\n \
    \   push!(result, w)\n  end\n  return result\nend\n</cell>\n<text>\nExercise 11:\
    \ Word count\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9al37fhp.jl:19\nin expression starting at\
    \ /tmp/tmp9al37fhp.jl:19\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    function split_string(string)\n        \n        s = replace(s,\
    \ \",\", \" \")\n        s = replace(s, \"\\\"\", \"\")\n        s = replace(s,\
    \ \"\\'\", \"\")\n        words = split(s, \" \")\n    end\n    \n    split_string(s)\n\
    end\n</cell>\n<code language=julia-1.4>\n# you can test it here in julia\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\n# you can test it\
    \ here in julia\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nImplement a function count_words that, given a list of words and a target\
    \ word, counts the number of times target word occurs in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu8f7tq6.jl:23\nin expression starting at\
    \ /tmp/tmpyu8f7tq6.jl:23\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split = split(s, \",\")\n    result = Vector{String}(split)\n    return\
    \ result\nend\n\"\"\"\n    You will be given a list of strings. Your task is\n\
    \    to merge all strings into one string.\n    \n    For example:\n    >>> string_list\
    \ = [\"one\", \"two\", \"three\", \"four\", \"five\"]\n    >>> string_list\n \
    \   [\"one\", \"two\", \"three\", \"four\", \"five\"]\n    >>> words_string(string_list)\n\
    \    \"onetwothreefourfive\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpr1s35lpg.jl:16\nin expression starting at /tmp/tmpr1s35lpg.jl:16\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = replace(s, \", \", \" \")\n    s = replace(s, \"\\\"\", \"\")\n  \
    \  s = replace(s, \",\", \"\")\n    s = replace(s, \" \", \"\")\n    s = replace(s,\
    \ \"-\", \" \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s, \"?\", \"\
    \ \")\n    s = replace(s, \"-\", \" \")\n    s = replace(s, \"/\", \" \")\n  \
    \  s = replace(s, \"\\\"\", \"\")\n    s = replace(s, \"[\", \"\")\n    s = replace(s,\
    \ \"]\", \"\")\n    s = replace(s, \"{\", \"\")\n    s = replace(s, \"}\", \"\"\
    )\n    s = replace(s, \"(\", \"\")\n    s = replace(s, \")\", \"\")\n    s = replace(s,\
    \ \"{\", \"\")\n    s = replace(s, \"}\", \"\")\n    s = replace(s, \"[\", \"\"\
    )\n    s = replace(s, \"]\", \"\")\n    s = replace(s, \"[\", \"\")\n    s = replace(s,\
    \ \"]\", \"\")\n    s = replace(s, \"{\", \"\")\n    s = replace(s, \"}\", \"\"\
    )\n    s = replace(s, \"'\", \"\")\n    s = replace(s, \"!\", \"\")\n    s = replace(s,\
    \ \"?\", \"\")\n    s = replace(s, \"-\", \" \")\n    s = replace(s, \"/\", \"\
    \ \")\n    s = replace(s, \"*\", \" \")\n    s = replace(s, \"(\", \" \")\n  \
    \  s = replace(s, \")\", \" \")\n    s = replace(s, \"]\", \" \")\n    s = replace(s,\
    \ \"}\", \" \")\n    s = replace(s, \"}\", \" \")\n    s = replace(s, \" \", \"\
    \")\n    s = replace(s, \"\\\"\", \"\")\n    s = replace(s, \"{\", \"\")\n   \
    \ s = replace(s, \"}\", \"\")\n    s = replace(s, \"[\", \"\")\n    s = replace(s,\
    \ \"]\", \"\")\n    s = replace(s, \"(\", \"\")\n    s = replace(s, \")\", \"\"\
    )\n    s = replace(s, \"[\", \"\")\n    s = replace(s, \"]\", \"\")\n    s = replace(s,\
    \ \"{\", \"\")\n    s = replace(s, \"}\", \"\")\n    s = replace(s, \"\\\"'\"\
    , \"\") \n    s = replace(s, \".\", \"\")\n    s = replace(s, \",\", \" \")\n\
    \    s = replace(s, \";\", \" \")\n    s = replace(s, \"-\", \" \")\n    s = replace(s,\
    \ \"/\", \" \")\n    s = replace(s, \"*\", \" \")\n    s = replace(s, \"?\", \"\
    \ \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s, \"(\", \" \")\n  \
    \  s = replace(s, \")\", \" \")\n    s = replace(s, \"]\", \" \")\n    s = replace(s,\
    \ \"=\", \" \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s, \"?\", \"\
    \ \")\n    s = replace(s, \" \", \" \")\n    s = replace(s, \"\\\"\", \"\")\n\
    \    s = replace(s, \"{\", \"\")\n    s = replace(s, \"}\", \"\")\n    s = replace(s,\
    \ \"[\", \"\")\n    s = replace(s, \"]\", \"\")\n    s = replace(s, \"(\", \"\
    \ \")\n    s = replace(s, \")\", \" \")\n    s = replace(s, \"]\", \" \")\n  \
    \  s = replace(s, \"=\", \" \")\n    s = replace(s, \"!\", \" \")\n    s = replace(s,\
    \ \"?\", \" \")\n    s = replace(s, \" \", \" \")\n    s = replace(s, \"!\", \"\
    \")\n    s = replace(s, \"?\", \"\")\n    s = replace(s, \" \", \" \")\n    s\
    \ = replace(s, \"\\\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprzyh_uj.jl:96\nin expression starting at\
    \ /tmp/tmpprzyh_uj.jl:96\n"
  stdout: ''
  timestamp: 1659979258
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n    # Your code here\n    return s.split(\"\
    ,\")\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"Hi, my name is John\"\
    )\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7c16o_y.jl:25\nin expression starting at\
    \ /tmp/tmpw7c16o_y.jl:25\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s,\", \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpt2d36cuj.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmpt2d36cuj.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d36cuj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt2d36cuj.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d36cuj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt2d36cuj.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpt2d36cuj.jl:18\ntest set: Test\
    \ Failed at /tmp/tmpt2d36cuj.jl:23\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpt2d36cuj.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979253
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n        \n    return split(split(strings(s)), ',')\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmptpk0i1om.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmptpk0i1om.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: strings not defined\n  Stacktrace:\n   [1]\
    \ words_string(s::String)\n     @ Main /tmp/tmptpk0i1om.jl:13\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmptpk0i1om.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptpk0i1om.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptpk0i1om.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: strings not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmptpk0i1om.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptpk0i1om.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptpk0i1om.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptpk0i1om.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: strings\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmptpk0i1om.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmptpk0i1om.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptpk0i1om.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptpk0i1om.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: str"
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    vectors = split(s,\", \")\n    Vector(vectors)\nend\n</cell>\n<code language=julia-0.6>\n\
    \"\"\"\n    words_string(s::Vector{String})\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqjaaz2rm.jl:15\nin expression starting at\
    \ /tmp/tmpqjaaz2rm.jl:15\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    wordsvec = split(s)\n    return wordsvec\nend \nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi4g172a_.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpi4g172a_.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4g172a_.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4g172a_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi4g172a_.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4g172a_.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4g172a_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi4g172a_.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4g172a_.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4g172a_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi4g172a_.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    # Your code here\n    return s.split(',')\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpxpew11zu.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpxpew11zu.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n     @ Main /tmp/tmpxpew11zu.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpew11zu.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpew11zu.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxpew11zu.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmpxpew11zu.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpew11zu.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpew11zu.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxpew11zu.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpxpew11zu.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpxpew11zu.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpxpew11zu.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxpew11zu.jl:23\n  Test threw excepti"
  timestamp: 1659979261
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s,\",\")\n    \n    return words\nend \n</cell>\n<code language=julia-0.5>\n\
    #@test words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\n#@test words_string(\"One, two, three, four, five, six\") ==\
    \ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\n\
    Exercise 3:\nWrite a function count_characters(s::String)::Int that returns the\
    \ number of characters in s.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkwzvscc.jl:16\nin expression starting at\
    \ /tmp/tmpwkwzvscc.jl:16\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a list of words separated by commas or spaces.\
    \ Your task is\n    to separate each word into its own element of the list and\
    \ return a list of\n    all the words.\n    \n    For example:\n    >>> words_list([\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n    [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\n    >>> words_list([\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"])\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg0rbg8sb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpg0rbg8sb.jl:1\n\
    in expression starting at /tmp/tmpg0rbg8sb.jl:1\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \", \") \nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppaayh56e.jl:16

    '
  stdout: "test set: Test Failed at /tmp/tmppaayh56e.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppaayh56e.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppaayh56e.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppaayh56e.jl:21\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppaayh56e.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppaayh56e.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppaayh56e.jl:22\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppaayh56e.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppaayh56e.jl:18\ntest set: Test\
    \ Failed at /tmp/tmppaayh56e.jl:23\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppaayh56e.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n "
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return words.(split(s,\" \"))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8f7aukfz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8f7aukfz.jl:1\n\
    in expression starting at /tmp/tmp8f7aukfz.jl:1\n"
  stdout: ''
  timestamp: 1659979259
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    splitted = split(s)\n    \n    return splitted\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmphgs9l0b4.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmphgs9l0b4.jl:22\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgs9l0b4.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgs9l0b4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphgs9l0b4.jl:23\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgs9l0b4.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgs9l0b4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphgs9l0b4.jl:24\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmphgs9l0b4.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmphgs9l0b4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphgs9l0b4.jl:25\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n \n    return string_to_vector(s, \",\")\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpck4vw_kn.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmpck4vw_kn.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: string_to_vector not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpck4vw_kn.jl:13\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpck4vw_kn.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpck4vw_kn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpck4vw_kn.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: string_to_vector not defined\n\
    \  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpck4vw_kn.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpck4vw_kn.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpck4vw_kn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpck4vw_kn.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: string_to_vector\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpck4vw_kn.jl:13\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpck4vw_kn.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpck4vw_kn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpck4vw_kn.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", "
  timestamp: 1659979261
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    v = Vector{String}([])\n    if s == \"\"\n        return v\n    else\n\
    \        split(s, \",\")\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmppbem3wj0.jl:21

    '
  stdout: "test set: Test Failed at /tmp/tmppbem3wj0.jl:24\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbem3wj0.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbem3wj0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppbem3wj0.jl:25\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbem3wj0.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbem3wj0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppbem3wj0.jl:26\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmppbem3wj0.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmppbem3wj0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppbem3wj0.jl:27\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] ma"
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split_string(s)\nend\n</cell>\n<code language=julia-1.3>\n@code_native(words_string)\n\
    </cell>\n<text>\nExercise 4\nInstructions: Implement the function count_substring(s,\
    \ substr) that returns the number of times that substring s occurs in s.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0e27pqa.jl:14\nin expression starting at\
    \ /tmp/tmpj0e27pqa.jl:14\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n    \n    \n    \n    words = []\n    for word\
    \ in string.split(\" \"):\n        if word == \"\":\n            continue\n  \
    \      else:\n            words.append(word)\n    \n    words = [w.lower() for\
    \ w in words]\n    return words\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbqop647_.jl:27\nin expression starting at\
    \ /tmp/tmpbqop647_.jl:27\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words_splitted = s.split(//)\n    return words_splitted\nend \nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmphv1u7lbp.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmphv1u7lbp.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n     @ Main /tmp/tmphv1u7lbp.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphv1u7lbp.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphv1u7lbp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphv1u7lbp.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmphv1u7lbp.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphv1u7lbp.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphv1u7lbp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphv1u7lbp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmphv1u7lbp.jl:12\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmphv1u7lbp.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmphv1u7lbp.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphv1u7lbp.jl:23\n  Test threw excepti"
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    Your task below is to write\
    \ a function `split_string` that takes a string\n    as input and returns a Vector\
    \ of `String`s. For example:\n    >>> split_string(\n    'one,two,three,four,five,six')\n\
    \    [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    >>> split_string('one,two,three,four,five,six')\n\
    \    [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpd9sag45s.jl:11 expected\
    \ \"end\", got \"task\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd9sag45s.jl:17\n\
    in expression starting at /tmp/tmpd9sag45s.jl:17\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s, ',')\n    \n    words_vector = Vector{String}(undef,\
    \ 0)\n    for i in 1:length(words)\n        words_vector = words_vector + [words[i]]\n\
    \    end\n    \n    return words_vector\nend\n</cell>\n<cell>\nwords_string(string(1,2,3,4,5,6,7,8))\n\
    </cell>\n<text>\nExercise 5\nCreate a function that creates a vector containing\
    \ the first n prime numbers.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6sxxjomc.jl:22\nin expression starting at\
    \ /tmp/tmp6sxxjomc.jl:22\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    s = split(s,\" ,.?!\")\n    n = length(s)\n    v = Vector{String}(repeat(\"\
    \", n))\n    for i = 1:n\n        v[i] = s[i]\n    end\n    return v\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp75pngd_b.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp75pngd_b.jl:25\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching Vector{String}(::String)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp75pngd_b.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp75pngd_b.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp75pngd_b.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp75pngd_b.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: no method matching Vector{String}(::String)\n\
    \  Closest candidates are:\n    Vector{T}() where T at ~/.conda/envs/polyglot/share/julia/base/boot.jl:476\n\
    \    Array{T, N}(!Matched::Core.Compiler.BitArray{N}) where {T, N} at ~/.conda/envs/polyglot/share/julia/base/bitarray.jl:494\n\
    \    Vector{T}(!Matched::Core.Compiler.AbstractRange{T}) where T at ~/.conda/envs/polyglot/share/julia/base/range.jl:1286\n\
    \    ...\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp75pngd_b.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp75pngd_b.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp75pngd_b.jl:24\ntest set:\
    \ Error During Test at /tmp/t"
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    # Your code here\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp8acuuxvm.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmp8acuuxvm.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: words not defined\n  Stacktrace:\n   [1]\
    \ words_string(s::String)\n     @ Main /tmp/tmp8acuuxvm.jl:14\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp8acuuxvm.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8acuuxvm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8acuuxvm.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: words not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp8acuuxvm.jl:14\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8acuuxvm.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8acuuxvm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8acuuxvm.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: words\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp8acuuxvm.jl:14\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp8acuuxvm.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp8acuuxvm.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp8acuuxvm.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: words not"
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n  \n    l = split(s, \" \")\n    n = length(s)\n    res = []\n    for i =\
    \ 1:n\n        push!(res, l[i])\n    end\n    return res\nend \nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfjlk_3g4.jl:23

    '
  stdout: "test set: Error During Test at /tmp/tmpfjlk_3g4.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  BoundsError: attempt to access 5-element Vector{SubString{String}}\
    \ at index [6]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpfjlk_3g4.jl:17\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfjlk_3g4.jl:26 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfjlk_3g4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpfjlk_3g4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  BoundsError: attempt to access 6-element Vector{SubString{String}}\
    \ at index [7]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpfjlk_3g4.jl:17\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfjlk_3g4.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpfjlk_3g4.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpfjlk_3g4.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  BoundsError: attempt\
    \ to access 3-element Vector{SubString{String}} at index [4]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmpfjlk_3g4.jl:17\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpfjlk_3g4.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.j"
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    str = split(s,\",\")\n    str = split(s,\" \")\n    str = map(parse, str)\n\
    \    return str\nend \n</cell>\n<code language=julia-1.6>\nwords_string(\"Hi,\
    \ my name is John\")\n</cell>\n<text>\nQuestion 3\nCreate a function filter_string(s::String)::Vector{String}\
    \ where you can filter out words by whether they are uppercase or not. \nFor example,\
    \ if you pass \"Hi, my name is John\" then your function should return [\"Hi\"\
    , \"my\", \"name\", \"is\"].\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_j8ooq6.jl:17\nin expression starting at\
    \ /tmp/tmpg_j8ooq6.jl:17\n"
  stdout: ''
  timestamp: 1659979260
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split_string(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpw9kkvng_.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpw9kkvng_.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: split_string not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpw9kkvng_.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9kkvng_.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9kkvng_.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw9kkvng_.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: split_string not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpw9kkvng_.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9kkvng_.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9kkvng_.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw9kkvng_.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: split_string\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpw9kkvng_.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw9kkvng_.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw9kkvng_.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpw9kkvng_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  Und"
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s)\nend\n</cell>\n<text>\nQuestion 10\nNow that you have\
    \ created the function split which returns a vector of words, you will write a\
    \ second function which splits your vector into a vector of characters. You can\
    \ do this by creating a vector of characters containing the characters provided\
    \ by the split. Use the characters to create a second vector and return the vector\
    \ as a string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7n2zm2pd.jl:14\nin expression starting at\
    \ /tmp/tmp7n2zm2pd.jl:14\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \"\"\"\n    You will be given a vector of words. Your task is to transform\
    \ each word into the index \n    position of the word in the word vector. Use\
    \ the function `words_to_idx` \n    in the first exercise.\n    \n    For example,\
    \ given the word vector `[1,2,3,4,5,6,7,8,9,10,11]`, and the string `'one two\
    \ three four five six seven eight nine'`, \n    the index vector will be `[5,\
    \ 1, 4, 6, 2, 8, 3, 9, 10, 7]`.\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm379igqu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm379igqu.jl:1\n\
    in expression starting at /tmp/tmpm379igqu.jl:1\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s)\n    Vector{String}(words)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp64tel8n5.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmp64tel8n5.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64tel8n5.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64tel8n5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp64tel8n5.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64tel8n5.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64tel8n5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp64tel8n5.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp64tel8n5.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp64tel8n5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp64tel8n5.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979261
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    stringList = split(s,\", \")\n    stringVector = stringList[2:end]\n \
    \   return stringVector\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpzzgtd941.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpzzgtd941.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzgtd941.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpzzgtd941.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzzgtd941.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"two\", \"three\", \"four\", \"five\", \"six\"] == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzzgtd941.jl:22 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzzgtd941.jl:20\ntest set: Test Failed at /tmp/tmpzzgtd941.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpzzgtd941.jl:23 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpzzgtd941.jl:20\ntest set: Test Failed at /tmp/tmpzzgtd941.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"two\", \"\
    three\", \"four\", \"five\", \"six,\"] == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpzzgtd941.jl:24 [in"
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split(s, \", \") |> collect\nend\n\"\"\"\n    You will be given a string\
    \ of words separated by commas or spaces. Your task is\n    to split the string\
    \ into words and return a vector of words and the remainder\n    of the string.\
    \ If a string of words is empty then return a vector of empty strings.\n    \n\
    \    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\", \"\"]\n    >>> words_string(\"One, two,\
    \ three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmp8uxkol6b.jl:14\nin expression starting at /tmp/tmp8uxkol6b.jl:14\n"
  stdout: ''
  timestamp: 1659979261
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list = split(s)\n    return word_list\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpi4cti89x.jl:17

    '
  stdout: "test set: Test Failed at /tmp/tmpi4cti89x.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4cti89x.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4cti89x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi4cti89x.jl:21\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4cti89x.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4cti89x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi4cti89x.jl:22\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpi4cti89x.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpi4cti89x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpi4cti89x.jl:23\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n\"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words in reverse.\n    \n    For example:\n    >>> words_string(\"Hi,\
    \ my name is John\")\n    [\"John\", \"is\", \"my\", \"name\", \"Hi\"]\n    >>>\
    \ words_string(\"One, two, three, four, five, six\")\n    [\"six\", \"five\",\
    \ \"four\", \"three\", \"two\", \"One\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp799jk_63.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp799jk_63.jl:1\n\
    in expression starting at /tmp/tmp799jk_63.jl:1\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    if length(s)==0 \n        return [] \n    \n    words = []\n    words\
    \ = split(s, \" \")\n    return words\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwbz3v7dk.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwbz3v7dk.jl:1\n\
    in expression starting at /tmp/tmpwbz3v7dk.jl:1\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    word_list = split(s,\" \")\n    \n    return word_list\nend\n</cell>\n\
    <cell>\n\"\"\"\n    words_string(s::String)::Vector{Int}\n    \n    words_string(s)\
    \ splits the string s into a list of words and returns a list of \n    integers\
    \ representing the index of the words in the list\n    \n    For example:\n  \
    \  \n    >>> words_string(\"Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n    >>> words_string(\"One, two, three, four, five, six\"\
    )\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \n\"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfv4qzzwp.jl:17\nin expression starting at\
    \ /tmp/tmpfv4qzzwp.jl:17\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    words = split(s, \", \")\n    words.map(identity)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp16nmnjuz.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp16nmnjuz.jl:20\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type Array has no field map\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n     @ Main /tmp/tmp16nmnjuz.jl:13\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp16nmnjuz.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp16nmnjuz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp16nmnjuz.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type Array has no field map\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmp16nmnjuz.jl:13\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp16nmnjuz.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp16nmnjuz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp16nmnjuz.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type Array has no\
    \ field map\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmp16nmnjuz.jl:13\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp16nmnjuz.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp16nmnjuz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp16nmnjuz.jl:23\n  Test threw exception\n  Expr"
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split = split(s, \" \")\n    words  = split(split(s)[1])\n    \n    return\
    \ words\n\"\"\"\n## `words_chars`\nCalculate the number of words in the given\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf62cllpg.jl:1\nin expression starting at /tmp/tmpf62cllpg.jl:1\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \"\"\"\n    You will be given a string of words separated by commas\
    \ or spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\n</code>\n<|/ q tags=string,julia |>\n<| c |>\n\
    Try `map(split,string)`.\n<|/ c |>\n<| c |>\nHi thank you for your reply! When\
    \ I run this code:\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgu8clr7e.jl:23\nin expression starting at\
    \ /tmp/tmpgu8clr7e.jl:23\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return [word for (word, s) in tokenize(s, \",\")]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpnx8qk6h2.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpnx8qk6h2.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: tokenize not defined\n  Stacktrace:\n  \
    \ [1] words_string(s::String)\n     @ Main /tmp/tmpnx8qk6h2.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx8qk6h2.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx8qk6h2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnx8qk6h2.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: tokenize not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmpnx8qk6h2.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx8qk6h2.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx8qk6h2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnx8qk6h2.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: tokenize\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmpnx8qk6h2.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnx8qk6h2.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnx8qk6h2.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpnx8qk6h2.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: "
  timestamp: 1659979264
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    split_string = split(s, \" \") #split string by space\n    \n    #convert\
    \ string to vector\n    words_vec = Vector{String}(split_string)\n    \n    return\
    \ words_vec\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp05oituvy.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp05oituvy.jl:1\n\
    in expression starting at /tmp/tmp05oituvy.jl:1\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return string.split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp3ul3rb9x.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp3ul3rb9x.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type #string has no field split\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmp3ul3rb9x.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ul3rb9x.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ul3rb9x.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3ul3rb9x.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type #string has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmp3ul3rb9x.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ul3rb9x.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ul3rb9x.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3ul3rb9x.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type #string has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmp3ul3rb9x.jl:12\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp3ul3rb9x.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp3ul3rb9x.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp3ul3rb9x.jl:22\n  Test threw exce"
  timestamp: 1659979264
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return s.split(\", \")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpvrve43an.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpvrve43an.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  type String has no field split\n  Stacktrace:\n   [1] getproperty\n\
    \     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n     @ Main /tmp/tmpvrve43an.jl:12\n\
    \   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvrve43an.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvrve43an.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvrve43an.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  type String has no field split\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] words_string(s::String)\n\
    \     @ Main /tmp/tmpvrve43an.jl:12\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvrve43an.jl:20 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvrve43an.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvrve43an.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  type String has\
    \ no field split\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] words_string(s::String)\n     @ Main /tmp/tmpvrve43an.jl:12\n   [3] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpvrve43an.jl:21 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpvrve43an.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpvrve43an.jl:22\n  Test threw excepti"
  timestamp: 1659979264
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n \n    words_string = \"\"\n    for i in s\n        if i \u2209 \" \", \"\
    .\", \",\"\n            words_string += i\n        else\n            words_string\
    \ += i\n        end\n    end\n    \n    words_string = split(words_string)\n \
    \   words_string = sort(words_string)\n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Question 5 - Test Your Code\nRun the cell below to test your code. Make sure that\
    \ all the tests pass.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \",\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6umrhl4d.jl:15\nin expression starting at /tmp/tmp6umrhl4d.jl:15\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n  res = Vector{String}()\n  for i in split(s,',') \n    push!(res,string(i))\n\
    \  end\n  return res\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    words_string(s)\n\
    \    \n    Split a string into words.\n    \n    Example:\n    >>> words_string(\"\
    Hi, my name is John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurwt3zs1.jl:18\nin expression starting at\
    \ /tmp/tmpurwt3zs1.jl:18\n"
  stdout: ''
  timestamp: 1659979262
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list = split(s, ' ')\n    word_list = replace(word_list, \"'\", \"\
    \")\n    word_list = replace(word_list, '\"', \"\")\n    return word_list\nend\n\
    </cell>\n<code language=julia-0.4>\n\"\"\"\n    words_string(s:String)::Vector{String}\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9nmekxw.jl:17\nin expression starting at\
    \ /tmp/tmpm9nmekxw.jl:17\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return s.split(\",\")\nend\n</cell>\n<code language=julia-0.6>\n# Your\
    \ result should be in `words_strings_solution`\nwords_strings_solution = words_string(\"\
    Hi, my name is John\")\nwords_strings_solution == [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\n</cell>\n<code language=julia-0.6>\n# Run this cell to test your\
    \ function\nwords_string(\"Hi, my name is John\") == words_strings_solution\n\
    </cell>\n<text>\nQuestion 4.2\nWrite a function that counts the number of words\
    \ in a string. \nFor example, `count(\"Hello World\")` should return `5`.\nWrite\
    \ a function that takes a string and returns the first n words.\nWrite a function\
    \ that takes a string and returns a list of all but the first n words.\nWrite\
    \ a function that takes a string and returns a list of the words with duplicates.\n\
    Write a function that takes a string and returns a list of the words in sorted\
    \ order.\nWrite a function which takes a string, a number N, and returns a list\
    \ of all but the first N words from that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpafv6t5hj.jl:14\nin expression starting at\
    \ /tmp/tmpafv6t5hj.jl:14\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s)\nend\n</cell>\n<code language=julia-1.6>\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1fmpp4fs.jl:14\nin expression starting at\
    \ /tmp/tmp1fmpp4fs.jl:14\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    \n    \n    \n\"\"\"\n    You will be given a string of words separated\
    \ by commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of tuples of the words.\n    \n    For example:\n    >>> words_string(\"\
    Hi, my name is John\")\n    [(\"Hi\", 1), (\"my\", 2), (\"name\", 3), (\"is\"\
    , 4), (\"John\", 5)]\n    >>> words_string(\"One, two, three, four, five, six\"\
    )\n    [(\"One\", 1), (\"two\", 2), (\"three\", 3), (\"four\", 4), (\"five\",\
    \ 5), (\"six\", 6)]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02f0452n.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02f0452n.jl:1\n\
    in expression starting at /tmp/tmp02f0452n.jl:1\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return word_split(split(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmp9ddatbyl.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp9ddatbyl.jl:19\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  UndefVarError: word_split not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp9ddatbyl.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ddatbyl.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ddatbyl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9ddatbyl.jl:20\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarError: word_split not defined\n  Stacktrace:\n\
    \   [1] words_string(s::String)\n     @ Main /tmp/tmp9ddatbyl.jl:12\n   [2] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ddatbyl.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ddatbyl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9ddatbyl.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  UndefVarError: word_split\
    \ not defined\n  Stacktrace:\n   [1] words_string(s::String)\n     @ Main /tmp/tmp9ddatbyl.jl:12\n\
    \   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9ddatbyl.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ddatbyl.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp9ddatbyl.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  UndefVarE"
  timestamp: 1659979265
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    if s == \"\" then return [] else\n        \n        splits = split(s,\
    \ \", \")\n        words = [w for s in splits for w in words(s)]\n        return\
    \ words\n    end\n\"\"\"\n    You will be given a string of words separated by\
    \ commas or spaces. Your task is\n    to split the string into words and return\
    \ a vector of words that have a length of\n    more than three characters.\n \
    \   \n    For example:\n    >>> words_string(\"Hi, my name is John\")\n    [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"One, two, three,\
    \ four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0s24n9pb.jl:12\nin expression starting at /tmp/tmp0s24n9pb.jl:12\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return String.tokenize(s)\nend\n</cell>\n<code language=julia-0.4>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nTask 3\nWrite a function count(s) that\
    \ returns a dictionary with the counts of the letters in the string s.\nYour function\
    \ should take s in string form and return a dictionary where keys are letters\
    \ and values are counts.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gfer9eu.jl:14\nin expression starting at\
    \ /tmp/tmp0gfer9eu.jl:14\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    \n    words = split(s)\n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpsqkfh_fl.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpsqkfh_fl.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsqkfh_fl.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsqkfh_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsqkfh_fl.jl:22\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsqkfh_fl.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsqkfh_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsqkfh_fl.jl:23\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsqkfh_fl.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsqkfh_fl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsqkfh_fl.jl:24\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n "
  timestamp: 1659979264
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n\tlocal v = split(s,\" \")\n\tfor i in eachindex(v)\n\t\tv[i] = split(v[i],\"\
    ,\")\n\tend\n\treturn v\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,
    0 broken.

    in expression starting at /tmp/tmpej3ay2zd.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmpej3ay2zd.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: Cannot `convert` an object of type Vector{SubString{String}}\
    \ to an object of type SubString{String}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:SubString at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:56\n\
    \    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:54\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{SubString{String}},\
    \ i1::Int64)\n     @ Base ./array.jl:903\n   [2] words_string(s::String)\n   \
    \  @ Main /tmp/tmpej3ay2zd.jl:14\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpej3ay2zd.jl:23 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpej3ay2zd.jl:22\ntest set:\
    \ Error During Test at /tmp/tmpej3ay2zd.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\n  MethodError: Cannot `convert` an object of type\
    \ Vector{SubString{String}} to an object of type SubString{String}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:SubString at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:56\n\
    \    convert(::Type{SubString{S}}, !Matched::AbstractString) where S<:AbstractString\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/substring.jl:54\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(A::Vector{SubString{String}}, x::Vector{SubStrin"
  timestamp: 1659979266
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    splitted = split(s)\n    vec = []\n    for i in splitted \n        push!(vec,\
    \ i)\n    end\n    return vec\nend\n</cell>\n<text>\nAfter defining the function\
    \ words_string we would like to test it using the cell above by running the following\
    \ command:\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphhhkbw1_.jl:19\nin expression starting at\
    \ /tmp/tmphhhkbw1_.jl:19\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    return split(s, \", \")\nend\n</cell>\n<text>\nExercise 9\nThe function\
    \ words_string has two outputs. You can return multiple outputs by returning multiple\
    \ tuples.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyi5vwxcf.jl:14\nin expression starting at\
    \ /tmp/tmpyi5vwxcf.jl:14\n"
  stdout: ''
  timestamp: 1659979263
- exit_code: 1
  program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return a vector\
    \ of the words.\n    \n    For example:\n    >>> words_string(\"Hi, my name is\
    \ John\")\n    [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    >>> words_string(\"\
    One, two, three, four, five, six\")\n    [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String}\
    \ \n    word_list = split(s)\n    vector(word_list)\nend\n</cell>\n<text>\nAs\
    \ a final note, we should note that splitting text into words is not always the\
    \ best way to tokenize text. There are many other ways to tokenize text that may\
    \ be better suited for your needs. For instance, if you wanted to split a sentence\
    \ into individual words before further processing, you could split on spaces,\
    \ punctuation, or even non-alphanumeric characters.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz04gujo0.jl:15\nin expression starting at\
    \ /tmp/tmpz04gujo0.jl:15\n"
  stdout: ''
  timestamp: 1659979263
