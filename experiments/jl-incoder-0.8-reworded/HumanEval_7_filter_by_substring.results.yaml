language: jl
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    for str in strings\n        indices = findall(instr(str, substring),\
    \ str) \n        if length(indices) > 0\n            return str[indices]\n   \
    \     end\n    end\n    return strings\nend\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp5w09xh9_.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmp5w09xh9_.jl:23\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: instr\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp5w09xh9_.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5w09xh9_.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w09xh9_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp5w09xh9_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: instr\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp5w09xh9_.jl:10\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5w09xh9_.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w09xh9_.jl:21\ntest set:\
    \ Error During Test at /tmp/tmp5w09xh9_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: instr not defined\n  Stacktrace:\n   [1]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main\
    \ /tmp/tmp5w09xh9_.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp5w09xh9_.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5w09xh9_.jl:21\nTest Summary:\
    \ | Pass  E"
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    local result = Set()\n    for str in strings\n        if contains(substring,\
    \ str)\n            push!(result, str)\n        end\n    end\n    collect!(result)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpi0661r0j.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmpi0661r0j.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: collect! not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpi0661r0j.jl:14\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi0661r0j.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0661r0j.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi0661r0j.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: collect! not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpi0661r0j.jl:14\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpi0661r0j.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0661r0j.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpi0661r0j.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: collect!\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpi0661r0j.jl:14\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpi0661r0j.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpi0661r0j.jl:20\ntest set:\
    \ Error During Test at /tmp/"
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) <= 0\n        return strings\n    \n    substring_index\
    \ = get_index(regexp_findall(substring, strings[1]), strings)\n    \n    if substring_index\
    \ <= 0\n        return strings\n    \n    substring_index_list = []\n    for i\
    \ in 2:length(strings)\n        substring_index_list.append(get_index(regexp_findall(substring,\
    \ strings[i]), strings))\n    end\n    \n    strings_final = strings[substring_index_list[1]:end]\
    \ + strings[substring_index_list[2]:end]\n    \n    return strings_final\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpov1_0edt.jl:1\nin expression starting at /tmp/tmpov1_0edt.jl:1\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  strings = filter((x) -> contains(x,substring), strings)\n  return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980011
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n        \n    if length(strings) == 0\n        return strings\n    ends_with_substring\
    \ = substring in strings\n    starts_with_substring = contains(strings, substring)\n\
    \    contains_substring = contains(strings, substring)\n    \n    if ends_with_substring\n\
    \        return filter_by_substring(substring..strings, substring)\n    elseif\
    \ starts_with_substring\n        return filter_by_substring(strings..substring,\
    \ substring)\n    elseif contains_substring\n        return strings\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(\"abcdefg\", \"c\"\
    )\n</cell>\n<text>\nFilter an input vector of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"abc\")\n    [\"abc\", \"bacd\"]\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"bacd\")\n    [\"bacd\", \"cde\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    )\n    []\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxelh28mn.jl:23\nin expression starting at\
    \ /tmp/tmpxelh28mn.jl:23\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    indexes = [i for (i,s) in eachindex(strings) if contains(s, substring)]\n\
    \    return filter([x -> isempty(find(strings, x)), x->not(x in indexes)], strings)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpgkp05kit.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpgkp05kit.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access Int64 at index [2]\n  Stacktrace:\n    [1] indexed_iterate(I::Int64,\
    \ i::Int64, state::Nothing)\n      @ Base ./tuple.jl:98\n    [2] (::var\"#2#6\"\
    {String})(::Int64)\n      @ Main ./none:0\n    [3] iterate\n      @ ./iterators.jl:447\
    \ [inlined]\n    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n\
    \      @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpgkp05kit.jl:8\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpgkp05kit.jl:17 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgkp05kit.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpgkp05kit.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  BoundsError: attempt\
    \ to access Int64 at index [2]\n  Stacktrace:\n    [1] indexed_iterate(I::Int64,\
    \ i::Int64, state::Nothing)\n      @ Base ./tuple.jl:98\n    [2] (::var\"#2#6\"\
    {String})(::Int64)\n      @ Main ./none:0\n    [3] iterate\n      @ ./iterators.jl:447\
    \ [inlined]\n    [4] iterate\n      @ ./generator.jl:44 [inlined]\n    [5] grow_to!\n\
    \      @ ./array.jl:797 [inlined]\n    [6] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [7] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpgkp05kit.jl:8\n    [8] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [9] macro expansion\n      @ /tmp/tmpgkp05kit.jl:18 [inlined]\n\
    \   [10] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.j"
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings)==0\n        return strings\n    found_substrings =\
    \ Vector{String}()\n    for str in strings\n        if contains(substring, str)\n\
    \            push!(found_substrings, str)\n        end\n    end\n    return found_substrings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyrtku7wz.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyrtku7wz.jl:1\n\
    in expression starting at /tmp/tmpyrtku7wz.jl:1\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in 1:length(strings)\n        if contains(strings[i], substring)\n\
    \            filter_by_substring(strings[i+1:end], substring)\n        else\n\
    \            strings\n        end\n    end\nend\n</cell>\n<text>\n5.3 Removing\
    \ elements from an array\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0te5n3wm.jl:16\nin expression starting at\
    \ /tmp/tmp0te5n3wm.jl:16\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    indices = findall(r\".*\" + substring + \".*\", strings)\n    return filter((x)\
    \ -> !contains(x,substring), strings)\nend\n</cell>\n<text>\n4. Filter for specific\
    \ characters\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsyuurl9w.jl:11\nin expression starting at\
    \ /tmp/tmpsyuurl9w.jl:11\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = check_null(strings) \n    substring = check_null(substring)\n\
    \    \n    filtered = []\n    \n    for string in strings\n        if string.contains(substring)\n\
    \            push!(filtered, string)\n        end\n    end\n    \n    return filtered\n\
    end\n</cell>\n<text>\nLet's have a look:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1bdreva3.jl:22\nin expression starting at\
    \ /tmp/tmp1bdreva3.jl:22\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if is_string_in_vector(strings, substring) == true\n        return filter(is_string_in_vector(strings,\
    \ substring), strings)\n    else\n        return strings\n    end\nend\n\"\"\"\
    \nFilter an input vector of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: cannot document the following expression:\n\nusing Test\n\
    \nStacktrace:\n [1] error(::String, ::String)\n   @ Base ./error.jl:42\n [2] top-level\
    \ scope\n   @ /tmp/tmpjly1jim5.jl:14\nin expression starting at /tmp/tmpjly1jim5.jl:14\n"
  stdout: ''
  timestamp: 1659980013
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered::Vector{String} = []\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7jlgizvy.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7jlgizvy.jl:1\n\
    in expression starting at /tmp/tmp7jlgizvy.jl:1\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for str in strings\n        if contains(str, substring)\n            push!(results,\
    \ str)\n        end\n    end\n    return results\nend\n</cell>\n<text>\nExercise\
    \ 4.6 (2 points): Write a function that filters by a substring and returns the\
    \ number of occurrences of the substring\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    1\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n    2\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6u4u7ed.jl:15\nin expression starting at\
    \ /tmp/tmpa6u4u7ed.jl:15\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    matches = [x for x \u2208 strings if substring in x]\n    if length(matches)==0\n\
    \        return strings\n    elseif length(matches)>1\n        error(\"Cannot\
    \ filter by substring, because multiple elements are found\")\n    end\n    return\
    \ matches\nend\n</cell>\n<code language=julia-1.0>\nfilter_by_substring([[\"abc\"\
    ,\"bcd\"]], \"c\")\n</cell>\n<code language=julia-1.0>\nfilter_by_substring([[\"\
    abc\",\"bcd\"]], \"ab\")\n</cell>\n<code language=julia-1.0>\nfilter_by_substring([[\"\
    abc\",\"bcd\"]], \"a\")\n</cell>\n<code language=julia-1.0>\nfilter_by_substring([[\"\
    abc\",\"bcd\"]], \"bcd\")\n</cell>\n<text>\nExercise 10\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ouduk3w.jl:16\nin expression starting at\
    \ /tmp/tmp0ouduk3w.jl:16\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in eachindex(strings)\n        if contains(substring,strings[i])\n\
    \            return strings[i]\n    end\n    return strings\nend # filter_by_substring\n\
    </cell>\n<text>\nExercise\nWrite a function that returns all elements of the array\
    \ that do not contain the given substring\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_4ox0rv.jl:14\nin expression starting at\
    \ /tmp/tmpn_4ox0rv.jl:14\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if string.contains(substring, strings) \n        \n        return strings\n\
    \    else\n        return filter_by_substring(strings, substring)\n    end\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([x\
    \ for x in [\"abc\", \"bacd\", \"cde\", \"array\"] if x != \"a\"], \"a\")\n</cell>\n\
    <text>\n4. Intersect two sets\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9spaj4w8.jl:15\nin expression starting at\
    \ /tmp/tmp9spaj4w8.jl:15\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if !contains(strings, substring)\n        return strings\n    else\n \
    \       new_strings = filter_by_substring(strings[!contains(strings, substring)],\
    \ substring)\n        return new_strings\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp1xx5_822.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp1xx5_822.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching contains(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp1xx5_822.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xx5_822.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xx5_822.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp1xx5_822.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching contains(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    contains(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n  Stacktrace:\n\
    \   [1] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp1xx5_822.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1xx5_822.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1xx5_822.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp1xx5_822.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ ma"
  timestamp: 1659980015
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( elem -> contains(substring, elem), strings )\n    return\
    \ strings\nend\n</cell>\n<text>\n6.7.3 filter_by_substring2()\nAs with the previous\
    \ function, filter_by_substring() accepts a vector of strings as input and the\
    \ substring to filter on (the second argument) and returns a vector of strings.\
    \ However, this function uses the contains function and the filter() function.\
    \ filter() iterates through each element in the input vector and applies a predicate\
    \ function to each element. The predicate function checks if the element is true,\
    \ and if so, the element is kept in the output vector. filter() can therefore\
    \ be used to filter an input vector of strings for only those strings that contain\
    \ given substring.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyto0iojc.jl:11\nin expression starting at\
    \ /tmp/tmpyto0iojc.jl:11\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    for str in strings\n        str = replace(str, substring)\n    end\n\
    \    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp6wr3gfls.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp6wr3gfls.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching replace(::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp6wr3gfls.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6wr3gfls.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6wr3gfls.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp6wr3gfls.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching replace(::String, ::String)\n  Closest candidates are:\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at ~/.conda/envs/polyglot/share/julia/base/set.jl:622\n\
    \    replace(::String, !Matched::Pair...; count) where N at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:535\n\
    \    replace(::AbstractString, !Matched::Pair...; count) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:634\n\
    \    ...\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp6wr3gfls.jl:10\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp6wr3gfls.jl:21 [inlined]\n\
    \   [4] macro expansion"
  timestamp: 1659980015
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  new_strings = Set()\n  for str in strings\n    if contains(str, substring)\n\
    \      new_strings <- new_strings + [str]\n    end\n  end\n  return new_strings\n\
    end\n</cell>\n<text>\nFilter words by their first letter\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl381haaf.jl:16\nin expression starting at\
    \ /tmp/tmpl381haaf.jl:16\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    for str in strings do \n        if contains(str, substring) == true\
    \ then \n            return str\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([1,2,3],\
    \ \"abc\")\n</cell>\n<code language=julia-1.5>\n# Create a function that removes\
    \ every element from an input vector\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp324sbhh7.jl:9\nin expression starting at /tmp/tmp324sbhh7.jl:9\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings_filtered = @filter (x -> contains(x, substring))(strings)\n  \
    \  return strings_filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: UndefVarError: @filter not defined\nStacktrace:\n [1]\
    \ top-level scope\n   @ :0\n [2] #macroexpand#51\n   @ ./expr.jl:115 [inlined]\n\
    \ [3] macroexpand\n   @ ./expr.jl:114 [inlined]\n [4] docm(source::LineNumberNode,\
    \ mod::Module, meta::Any, ex::Any, define::Bool) (repeats 2 times)\n   @ Base.Docs\
    \ ./docs/Docs.jl:537\n [5] var\"@doc\"(::LineNumberNode, ::Module, ::String, ::Vararg{Any})\n\
    \   @ Core ./boot.jl:517\nin expression starting at /tmp/tmpkune6u2k.jl:1\nin\
    \ expression starting at /tmp/tmpkune6u2k.jl:1\n"
  stdout: ''
  timestamp: 1659980013
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if all(strings == \"\") || substring == \"\"\n        strings\n    elseif\
    \ length(strings) < 2\n        strings\n    else\n        intersect(filter(x ->\
    \ contains(substring,x), strings), strings)\n    end\nend\n</cell>\n<text>\nfilter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu00739z8.jl:16\nin expression starting at\
    \ /tmp/tmpu00739z8.jl:16\n"
  stdout: ''
  timestamp: 1659980012
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, false)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpss37f7sg.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpss37f7sg.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpss37f7sg.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpss37f7sg.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpss37f7sg.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss37f7sg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpss37f7sg.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Bool)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpss37f7sg.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpss37f7sg.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpss37f7sg.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpss37f7sg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpss37f7sg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Bool)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpss37f7sg.jl:7\n\
    \  Stacktrace:\n   [1] filte"
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in 1:length(strings)\n        if strings[i] == substring\n     \
    \       strings\n        else\n            append!(strings, strings[i])\n    \
    \    end\n    end\nend\n</cell>\n<text>\nThe function filter_by_substring works\
    \ similarly to filter in Matlab, i.e. it returns a new vector that only contains\
    \ the elements that match the given substring.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxmf2z2kc.jl:16\nin expression starting at\
    \ /tmp/tmpxmf2z2kc.jl:16\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter((string) -> contains(string, substring), strings)\nend\n\
    </cell>\n<code language=julia-1.0>\nfilter_by_substring!(\n    strings,\n    substring,\n\
    )\n</cell>\n<text>\n4.10 filter_by_count\nGiven a vector of strings, return a\
    \ new vector containing only those strings which contain the given substring,\
    \ and their number of occurrences in the original vector. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm6gy8rwz.jl:10\nin expression starting at\
    \ /tmp/tmpm6gy8rwz.jl:10\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if contains(strings, substring)\n        return strings\n    else\n  \
    \      return []\n    end\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nWe can implement\
    \ a function that filters a vector based on another vector's length, which might\
    \ be useful in certain situations.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06klf7xx.jl:14\nin expression starting at\
    \ /tmp/tmp06klf7xx.jl:14\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = filter_by_substring2(strings, substring)\n    if isempty(filtered)\n\
    \        throw(stringcat(\"No substrings found for: \", strings))\n    end\n \
    \   return filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpzl_6d0n3.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpzl_6d0n3.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: filter_by_substring2 not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpzl_6d0n3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzl_6d0n3.jl:19 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzl_6d0n3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpzl_6d0n3.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_substring2\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpzl_6d0n3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzl_6d0n3.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzl_6d0n3.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpzl_6d0n3.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_substring2\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpzl_6d0n3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpzl_6d0n3.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzl_6d0n3.jl:18\ntes"
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter_by_substring(map(string => string -> string == substring,\
    \ strings), substring)\nend\n</cell>\n<code language=julia-1.5>\n#export\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx0ds9eb1.jl:10\nin expression starting at\
    \ /tmp/tmpx0ds9eb1.jl:10\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if contains(substring,strings) == false \n        return strings\n   \
    \ end\n    for s in strings \n        if contains(substring,s) == false \n   \
    \         return strings\n        end\n    end\n    return strings\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp58lvhip_.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp58lvhip_.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching occursin(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    occursin(!Matched::Union{AbstractChar, AbstractString},\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:622\n\
    \    occursin(!Matched::Regex, ::AbstractString; offset) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:264\n\
    \    occursin(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] contains(haystack::String, needle::Vector{String})\n  \
    \   @ Base ./strings/util.jl:100\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp58lvhip_.jl:8\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp58lvhip_.jl:23 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp58lvhip_.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp58lvhip_.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching occursin(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    occursin(!Matched::Union{AbstractChar,\
    \ AbstractString}, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:622\n\
    \    occursin(!Matched::Regex, ::AbstractString; offset) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:264\n\
    \    occursin(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] contains(haystack::String, needle::Vector{String})\n  \
    \   @ Base ./strings/util.jl:100\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp58lvhip_.jl:8\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes"
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(substring,x),strings)\nend \n</cell>\n<code\
    \ language=julia-0.5>\n#export\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpvlhk9p.jl:10\nin expression starting at\
    \ /tmp/tmpkpvlhk9p.jl:10\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n        \n    if !length(substring) \n        throw(DomainError(\"Not enough\
    \ arguments for filter_by_substring\"))\n    end\n    \n    strings = [x for x\
    \ in strings if contains(x, substring)]\n    return strings\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmps03rv6kb.jl:18

    '
  stdout: "test set: Error During Test at /tmp/tmps03rv6kb.jl:21\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching !(::Int64)\n  Closest candidates are:\n   \
    \ !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmps03rv6kb.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps03rv6kb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps03rv6kb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmps03rv6kb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching !(::Int64)\n\
    \  Closest candidates are:\n    !(!Matched::Function) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:1117\n\
    \    !(!Matched::Bool) at ~/.conda/envs/polyglot/share/julia/base/bool.jl:35\n\
    \    !(!Matched::Missing) at ~/.conda/envs/polyglot/share/julia/base/missing.jl:101\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmps03rv6kb.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps03rv6kb.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps03rv6kb.jl:20\ntest set:\
    \ Error During Test at /tmp/tmps03rv6kb.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\""
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    # Write your code here\n    \n    return strings\nend\n</cell>\n<text>\n\
    Question 3.1: Write a function called filter_by_regex(strings, regex) that takes\
    \ in an array of strings and a regular expression and returns a new array of strings\
    \ that only contain the strings matching the regular expression regex\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi6vwgrm.jl:12\nin expression starting at\
    \ /tmp/tmpzi6vwgrm.jl:12\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [x for x in strings if substring in x]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzxp2i3su.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpzxp2i3su.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzxp2i3su.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpzxp2i3su.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpzxp2i3su.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzxp2i3su.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzxp2i3su.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpzxp2i3su.jl:17 [inlined]\n   [11] "
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(s -> contains(substring,s), strings)\n    return strings\n\
    end\n</cell>\n<text>\nFilter the given vector of vectors of strings by only returning\
    \ ones that match a given substring.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfetlj8m.jl:11\nin expression starting at\
    \ /tmp/tmpyfetlj8m.jl:11\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  if length(strings) < 1 \n    return strings\n  elseif length(substring)\
    \ == 0 \n    return strings\n  end\n  \n  res = []\n  for str in strings\n   \
    \ if string.contains(str, substring)\n      push!(res, str)\n    end\n  end\n\
    \  return res\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpwsqkl68a.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpwsqkl68a.jl:28\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type #string has no\
    \ field contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpwsqkl68a.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwsqkl68a.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwsqkl68a.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwsqkl68a.jl:29\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  type #string has no\
    \ field contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpwsqkl68a.jl:16\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpwsqkl68a.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpwsqkl68a.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpwsqkl68a.jl:30\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  type #string has no field contains\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpwsqkl68a.jl:16\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpwsqkl68a.jl:30 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/"
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  if length(strings) == 0 || length(strings[1]) == 0\n    return strings\n\
    \  end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi425cgn3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi425cgn3.jl:1\n\
    in expression starting at /tmp/tmpi425cgn3.jl:1\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    indices = (i for (i, s) in string.enumerate(strings) if contains(s, substring))\n\
    \    keep = filter((i => !isin(i, indices)) for i in indices)\n    \n    return\
    \ take_n(keep, length(indices))\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4l2osl3.jl:13\nin expression starting at\
    \ /tmp/tmpn4l2osl3.jl:13\n"
  stdout: ''
  timestamp: 1659980014
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    string_contains = contains(strings, substring)\n    filtered_strings\
    \ = filter((i) -> string_contains(i), strings)\n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp2ogp_z11.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp2ogp_z11.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching contains(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp2ogp_z11.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ogp_z11.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ogp_z11.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2ogp_z11.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching contains(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    contains(!Matched::AbstractString,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n    contains(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n  Stacktrace:\n\
    \   [1] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp2ogp_z11.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp2ogp_z11.jl:19 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2ogp_z11.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp2ogp_z11.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ ma"
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!(x -> contains(substring,x), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([1,2,3,4],\"e\")\n</cell>\n\
    <text>\n5.4 Exercise: filter using a custom function\nWrite a function that returns\
    \ the index of a string in another string if the string exists in the other string.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpta7m4ufu.jl:11\nin expression starting at\
    \ /tmp/tmpta7m4ufu.jl:11\n"
  stdout: ''
  timestamp: 1659980015
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter_by_strings(strings, substring)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpc8g4p8hv.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpc8g4p8hv.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: filter_by_strings not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpc8g4p8hv.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc8g4p8hv.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8g4p8hv.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpc8g4p8hv.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_strings not\
    \ defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpc8g4p8hv.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc8g4p8hv.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8g4p8hv.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpc8g4p8hv.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_strings\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpc8g4p8hv.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpc8g4p8hv.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpc8g4p8hv.jl:14\ntest set:\
    \ Er"
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, [])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp5wwwfu0x.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmp5wwwfu0x.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Vector{Any})\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp5wwwfu0x.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp5wwwfu0x.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5wwwfu0x.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wwwfu0x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5wwwfu0x.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Vector{Any})\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmp5wwwfu0x.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp5wwwfu0x.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp5wwwfu0x.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wwwfu0x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5wwwfu0x.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Vector{Any})\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmp5wwwfu0x.jl:7\n\
    \  Sta"
  timestamp: 1659980019
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    # remove strings that don't contain substring \n    strings = filter(x->contains(x,substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<text>\n3.3 String similarity\
    \ with Jaccard similarity\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp20a0xkug.jl:14\nin expression starting at\
    \ /tmp/tmp20a0xkug.jl:14\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in strings\n        if contains(i, substring)\n            yield\
    \ i\n        end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoo5ki2xj.jl:10\nin expression starting at /tmp/tmpoo5ki2xj.jl:10\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    # Search the entire string and return a list of matches, else return\
    \ an empty list\n    return strings[findall(x -> contains(x,substring), strings)]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980015
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    l = length(strings)\n    filtered = Vector{String}(undef, 0)\n    for\
    \ i in 1:l\n        if strings[i] == substring\n            push!(filtered, strings[i])\n\
    \        end\n    end\n    return filtered\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmprtdmw6si.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmprtdmw6si.jl:23\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtdmw6si.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtdmw6si.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprtdmw6si.jl:24\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmprtdmw6si.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmprtdmw6si.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprtdmw6si.jl:25\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmprtdmw6si.jl:25 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmprtdmw6si.jl:21\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    to_return = strings[:]\n    to_return = filter( string -> contains(string,\
    \ substring), to_return)\n    return to_return\nend\n</cell>\n<text>\nNow we can\
    \ use the function with any type of string vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mwpglrd.jl:12\nin expression starting at\
    \ /tmp/tmp_mwpglrd.jl:12\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if substring.length == 0 || length(substring) == 0 || length(strings)\
    \ == 0\n        strings = []\n    end\n    \n    # Step 1. Create a list of all\
    \ substrings\n    substrings = [substring] \n    for str in strings\n        substrings\
    \ = setdiff(substrings, findall(substring, str))\n    end\n    \n    # Step 2.\
    \ Filter the input strings\n    strings = filter!(x -> length(x) == 0, strings)\n\
    \    strings = filter!(x -> x in substrings, strings)\n    \n    # Step 3. Return\
    \ filtered input strings\n    return strings\nend\n</cell>\n<code language=julia-1.6>\n\
    \"\"\"\n    filter_by_substrings(strings::Vector{String}, substrings::Vector{String})\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpktyb1a2h.jl:25\nin expression starting at\
    \ /tmp/tmpktyb1a2h.jl:25\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter!(x -> contains(substring,x), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpwts7va2e.jl:12

    '
  stdout: "test set: Test Failed at /tmp/tmpwts7va2e.jl:16\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwts7va2e.jl:16 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwts7va2e.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwts7va2e.jl:17\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpwts7va2e.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpwts7va2e.jl:14\ntest set: Test\
    \ Failed at /tmp/tmpwts7va2e.jl:18\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpwts7va2e.jl:18 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpwts7va2e.jl:14\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [x for x in strings if substring in x]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzxp2i3su.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpzxp2i3su.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(x::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzxp2i3su.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpzxp2i3su.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpzxp2i3su.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzxp2i3su.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(x::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzxp2i3su.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpzxp2i3su.jl:17 [inlined]\n   [11] "
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for string in strings\n        if string.contains(substring)\n       \
    \     push!(ret, string)\n        end\n    end\n    return ret\nend\n</cell>\n\
    <text>\nPutting it all together\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr30brz4k.jl:15\nin expression starting at\
    \ /tmp/tmpr30brz4k.jl:15\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return strings\n    elseif length(strings)\
    \ >= length(string) && all(string == strings[length(substring)+1:] for string\
    \ in strings)\n        return strings\n    elseif all(string == strings[length(substring)+1:]\
    \ for string in strings)\n        return strings\n    elseif substring in strings[:]\n\
    \        return strings\n    else\n        strings\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nFilter by length\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(length(substring)\
    \ + 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcsi00zqw.jl:10\n\
    in expression starting at /tmp/tmpcsi00zqw.jl:10\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\"\n    Filter an input vector of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\n    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4u6cry28.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4u6cry28.jl:1\n\
    in expression starting at /tmp/tmp4u6cry28.jl:1\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    result = filter(elem -> contains(substring, elem), strings)\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmptgf2904l.jl:13

    '
  stdout: "test set: Test Failed at /tmp/tmptgf2904l.jl:17\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptgf2904l.jl:17 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptgf2904l.jl:15\ntest set: Test\
    \ Failed at /tmp/tmptgf2904l.jl:18\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmptgf2904l.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmptgf2904l.jl:15\ntest set: Test\
    \ Failed at /tmp/tmptgf2904l.jl:19\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmptgf2904l.jl:19 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmptgf2904l.jl:15\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter_by_substring2(strings, substring, length(strings)==0)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfguux_gi.jl:10\nin expression starting at\
    \ /tmp/tmpfguux_gi.jl:10\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!((string) -> string.contains(substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmplo2a93jb.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmplo2a93jb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field\
    \ contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] (::var\"#1#2\"{String})(string::String)\n     @ Main /tmp/tmplo2a93jb.jl:8\n\
    \   [3] filter!(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2529\n\
    \   [4] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmplo2a93jb.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplo2a93jb.jl:16 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplo2a93jb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplo2a93jb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  type String has no\
    \ field contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] (::var\"#1#2\"{String})(string::String)\n     @ Main /tmp/tmplo2a93jb.jl:8\n\
    \   [3] filter!(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2529\n\
    \   [4] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmplo2a93jb.jl:8\n   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [6] macro expansion\n     @ /tmp/tmplo2a93jb.jl:17 [inlined]\n\
    \   [7] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmplo2a93jb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplo2a93jb.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  type String has no field contains\n  Stacktrace:\n   [1]\
    \ getproperty\n     @ ./Base.jl:4"
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = string_filter(strings, substring)\n    return strings\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpai39v1ne.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmpai39v1ne.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: string_filter not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpai39v1ne.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpai39v1ne.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpai39v1ne.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpai39v1ne.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: string_filter not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpai39v1ne.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpai39v1ne.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpai39v1ne.jl:15\ntest set:\
    \ Error During Test at /tmp/tmpai39v1ne.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: string_filter\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpai39v1ne.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpai39v1ne.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpai39v1ne.jl:15\ntest set:\
    \ Error During T"
  timestamp: 1659980019
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    substring_index = findfirst(isequal(substring), strings)\n    if substring_index\
    \ == nothing\n        return strings\n    else\n        return strings[substring_index\
    \ : end]\n    end\nend\n</cell>\n<code language=julia-1.1>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.1>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n\
    <code language=julia-1.1>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<text>\nExercise\nWrite a function that counts the\
    \ occurrences of the letters in the string. For example, counting the number of\
    \ \"a\", \"b\", and \"c\" in the string \"abc\" would return 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbho_oat3.jl:15\nin expression starting at\
    \ /tmp/tmpbho_oat3.jl:15\n"
  stdout: ''
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0 || substring == \"\"\n        return strings\n\
    \    endposition = findfirst(substring, strings)\n    return strings[2:endposition]\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(strings, \"a\")\n\
    </cell>\n<text>\nExercise 7: filter_by_substring(strings::Vector{String}, substring::String)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87_ztyd1.jl:13\nin expression starting at\
    \ /tmp/tmp87_ztyd1.jl:13\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if is_string(strings) \n        string_vector = split(strings, \",\")\n\
    \    else \n        string_vector = strings\n    end\n    string_vector = filter(\
    \ x -> contains(substring,x),string_vector)\n    string_vector = map(x->remove_first(substring,x),\
    \ string_vector)\n    return string_vector\nend \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpyoed4jst.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpyoed4jst.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: is_string not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpyoed4jst.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyoed4jst.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyoed4jst.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyoed4jst.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: is_string not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpyoed4jst.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyoed4jst.jl:23 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyoed4jst.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpyoed4jst.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: is_string\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpyoed4jst.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpyoed4jst.jl:24 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyoed4jst.jl:21\ntest set:\
    \ Error During Test at /tmp/"
  timestamp: 1659980019
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\"\n    Filter an input vector of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\n    length_strings = length(filter_by_substring(strings, \"\"))\n\
    \    strings = strings[length_strings == length(strings)] \n    return strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = strings[findall(strings, substring) .!= strings]\n    strings\n\
    end\n</cell>\n<text>\nFiltering a DataFrame column containing strings\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp70puxnex.jl:11\nin expression starting at\
    \ /tmp/tmp70puxnex.jl:11\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptl96qwnz.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptl96qwnz.jl:1\n\
    in expression starting at /tmp/tmptl96qwnz.jl:1\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    local retVal = Vector{String}()\n    \n    for string in strings\n\
    \        if string.contains(substring)\n            retVal[end] = string\n   \
    \     end\n    end\n    \n    return retVal\nend\n</cell>\n<text>\nfilter_by_exact_length\
    \ filters an input vector of strings only for ones that contain exactly the given\
    \ length\nThis function takes the second parameter as an integer, which is the\
    \ expected length of the substring. It returns all strings in the input vector\
    \ that have length equal to the given length.\nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkgkiyy_p.jl:19\nin expression starting at\
    \ /tmp/tmpkgkiyy_p.jl:19\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for string in strings\n        if string.contains(substring)\n       \
    \     push!(out, string)\n        end\n    end\n    return out \nend\n</code>\n\
    <|/ a tags=julia,string |>\n<| c |>\nYou don't need the `for` loop at all. The\
    \ function can be written as `filter_by_substring(xs, substring) = filter(x->contains(x,\
    \ substring), xs)`.\n<|/ c |>\n<| c |>\nThanks for your comment. I am not that\
    \ familiar with Julia, so I did not think of it.\n<|/ c |>\n<| c |>\nIf you don't\
    \ understand what `filter` does, then you really should learn Julia. `filter`\
    \ is one of the most fundamental functions in the language.\n<|/ c |>\n<| c |>\n\
    It seems like `filter` returns a lazy sequence of the items in xs that match the\
    \ condition (the lambda), whereas I need the items in xs to be in the vector returned\
    \ by the function.\n<|/ c |>\n<| a dscore=3 tags=julia,string |>\nYou can also\
    \ use map, which returns a lazy sequence:\n<code>\njulia> filter(x->!(x==\"ab\"\
    ), [\"ab\", \"abc\", \"a\"])\n5-element Array{String,1}:\n \"ab\"\n \"abc\"\n\
    </code>\nAs points out in a comment, you don't need the for loop. Here, we're\
    \ simply using the map(x->!(x==\"ab\"), ...) syntax to replace an explicit for\
    \ loop (which also happens to work well here).\n<|/ a |>\n<| c |>\nThanks for\
    \ your answer! The only issue I see is that `x->!(x==\"ab\")` returns `Int` instead\
    \ of a `Bool`. And since `filter` returns an `AbstractArray`, I can't use it as\
    \ I want.\n<|/ c |>\n<| c |>\nAh, yes. I should have used `map` instead of `filter`,\
    \ since `map` returns a lazy sequence. Answer updated.\n<|/ c |>\n<| c |>\nAlso,\
    \ thanks for the suggestion to use `map`.\n<|/ c |>\n<| c |>\nSure. Feel free\
    \ to mark this as the accepted answer by clicking the check mark next to it.\n\
    <|/ c |>\n<| a |>\nAn alternative solution is to use regex matching\n<code>\n\
    julia> filter(x->occursin(\"ab\", x), [\"ab\", \"abc\", \"a\"])\n5-element Array{String,1}:\n\
    \ \"ab\"\n \"abc\"\n</code>\n<|/ a dscore=2 tags=julia,string |>\n<| c |>\n\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw7jm8qkm.jl:15\nin expression starting at\
    \ /tmp/tmpw7jm8qkm.jl:15\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in eachindex(strings)\n        if contains(strings[i], substring)\n\
    \            strings\n        else\n            deleteat!(strings, i)\n      \
    \  end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: 'b''test set: Error During Test at /tmp/tmpowjy5zyy.jl:21\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    Cannot `convert` an object of type Nothing to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main /tmp/tmpowjy5zyy.jl:12\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpowjy5zyy.jl:21 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpowjy5zyy.jl:20\ntest set: Error
    During Test at /tmp/tmpowjy5zyy.jl:22\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  BoundsError:
    attempt to access 4-element Vector{String} at index [5]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] filter_by_substring(strings::Vector{String},
    substring::String)\n     @ Main /tmp/tmpowjy5zyy.jl:9\n   [3] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmpowjy5zyy.jl:22 [inlined]\n   [5] macro expansion\n     @
    ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmpowjy5zyy.jl:20\ntest set: Error During Test at
    /tmp/tmpowjy5zyy.jl:23\n  Test threw exception\n'
  timestamp: 1659980021
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!(x -> contains(x, substring), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980017
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!(x -> contains(substring,x), strings)\nend\n</cell>\n<text>\nExercise\
    \ #3\nThe function filter_by_substring should only consider strings that are substrings\
    \ of another string. Specifically, the function should filter out all strings\
    \ that have substrings that are not substrings of the given string. For example,\
    \ \"abab\" is a substring of \"aba\" but is not a substring of \"abb\".\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy91d09uu.jl:10\nin expression starting at\
    \ /tmp/tmpy91d09uu.jl:10\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    indices = findall(strings, x -> contains(x, substring))\n    return\
    \ subset(strings, indices)\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpgza725rr.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpgza725rr.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching findall(::Vector{String}, ::var\"#1#2\"{String})\n\
    \  Closest candidates are:\n    findall(!Matched::Function, ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n\
    \    findall(::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmpgza725rr.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgza725rr.jl:17 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgza725rr.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgza725rr.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching findall(::Vector{String},\
    \ ::var\"#1#2\"{String})\n  Closest candidates are:\n    findall(!Matched::Function,\
    \ ::Any) at ~/.conda/envs/polyglot/share/julia/base/array.jl:2253\n    findall(::Any)\
    \ at ~/.conda/envs/polyglot/share/julia/base/array.jl:2299\n  Stacktrace:\n  \
    \ [1] filter_by_substring(strings::Vector{String}, substring::String)\n     @\
    \ Main /tmp/tmpgza725rr.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpgza725rr.jl:18 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgza725rr.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpgza725rr.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching findall(::Vec"
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings)==0\n        return strings \n    endpt = findfirst(substring,strings)\n\
    \    if endpt==nothing\n        return strings \n    endpt+=length(substring)\n\
    \    ret = copy(strings)\n    ret[endpt:] = strings[endpt+endpt+1:end]\n    drop!(ret,\
    \ endpt)\n    return ret\nend # filter_by_substring\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"endpt:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0hx19fqv.jl:15\nin expression\
    \ starting at /tmp/tmp0hx19fqv.jl:15\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) <= 0\n        return strings\n    \n    if length(substring)\
    \ == 0 \n        return strings\n    endpos = length(strings) - 1\n    \n    startpos\
    \ = search(substring, strings[1])\n    \n    if startpos == endpos \n        return\
    \ strings\n    endpos = startpos\n    \n    tmp = strings[startpos+endpos:end]\n\
    \    \n    if length(tmp) == 0 \n        return strings\n    endpos = startpos\
    \ + length(tmp) - 1\n    \n    tmp = strings[startpos+endpos:end]\n    \n    if\
    \ length(tmp) == 0 \n        return strings\n    endpos = startpos + length(tmp)\
    \ - 1\n    \n    tmp = strings[startpos+endpos:end]\n    \n    if length(tmp)\
    \ == 0 \n        return strings\n    endpos = startpos + length(tmp) - 1\n   \
    \ \n    tmp = strings[startpos+endpos:end]\n    \n    if length(tmp) == 0 \n \
    \       return strings\n    endpos = startpos + length(tmp) - 1\n    \n    tmp\
    \ = strings[startpos+endpos:end]\n    \n    if length(tmp) == 0 \n        return\
    \ strings\n    endpos = startpos + length(tmp) - 1\n    \n    tmp = strings[startpos+endpos:end]\n\
    \    \n    if length(tmp) == 0 \n        return strings\n    endpos = startpos\
    \ + length(tmp) - 1\n    \n    tmp = strings[startpos+endpos:end]\n    \n    if\
    \ length(tmp) == 0 \n        return strings\n    endpos = startpos + length(tmp)\
    \ - 1\n    \n    tmp = strings[startpos+endpos:end]\n    \n    if length(tmp)\
    \ == 0 \n        return strings\n    endpos = startpos + length(tmp) - 1\n   \
    \ \n    tmp = strings[startpos+endpos:end]\n    \n    if length(tmp) == 0 \n \
    \       return strings\n    endpos = startpos + length(tmp) - 1\n    \n    tmp\
    \ = strings[startpos+endpos:end]\n    \n    if length(tmp) == 0 \n        return\
    \ strings\n    endpos = startpos + length(tmp) - 1\n    \n    tmp = strings[startpos+endpos:end]\n\
    \    \n    if length(tmp) == 0 \n        return strings\n    endpos = startpos\
    \ + length(tmp) - 1\n    \n    tmp = strings[startpos+endpos:end]\n    \n    if\
    \ length(tmp) == 0 \n        return strings\n    endpos = startpos + length(tmp)\
    \ - 1\n    \n    tmp = strings[startpos+endpos:end]\n    \n    if length(tmp)\
    \ == 0 \n        return strings\n    endpos = startpos + length(tmp) - 1\n   \
    \ \n    tmp = strings[startpos+endpos:end]\n    \n    if length(tmp) == 0 \n \
    \       return strings\n    endpos = startpos + length(tmp) - 1\n    \n    tmp\
    \ = strings[startpos+\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp293nn1lm.jl:1\nin expression starting at /tmp/tmp293nn1lm.jl:1\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    # Precondition: len(strings) > 0 and len(substring) > 0\n    \n    if\
    \ contains(strings, substring) == false\n        return strings # Nothing to filter\
    \ through\n    \n    strings_new = copy(strings)\n    \n    for i in 1:length(strings)\n\
    \        if contains(strings_new[i], substring) == false\n            deleteat!(strings_new,\
    \ i) # Remove from string\n        end\n    end\n    \n    return strings_new\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr0aaloc1.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpr0aaloc1.jl:1\n\
    in expression starting at /tmp/tmpr0aaloc1.jl:1\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) < 1 || length(substring) == 0 \n        return strings\
    \ \n    end\n    if length(substring) == 1 \n        return [string for string\
    \ in strings if string.startswith(substring)] \n    else \n        substring =\
    \ substring \n        indices = [i for (i, x) in enumerate(strings) \n       \
    \            if x.startswith(substring) \n                   and length(x) ==\
    \ length(substring)] \n        indices = union(indices, range(length(strings)))\n\
    \        return filter_by_substring(strings[indices], substring) \n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpqal4rydm.jl:17\nin expression starting at /tmp/tmpqal4rydm.jl:17\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring = for s in strings do \n        if contains(s, substring)\
    \ then s end\n    end\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nWe will make use\
    \ of the function filter_by_substring() to filter out all the empty strings. So\
    \ our final list will contain only the strings that we want. We can use ismissing()\
    \ to check for missing elements and return an empty array when a string is missing,\
    \ otherwise we return the string\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsngjclpq.jl:8\nin expression starting at /tmp/tmpsngjclpq.jl:8\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(filter(str -> str == substring, strings)) == 0\n        return\
    \ strings\n    else\n        string_lengths = map(str -> length(split(str, substring)),\
    \ strings)\n        return filter((x) -> sum(string_lengths) == x, strings)\n\
    \    end\nend\n</cell>\n<text>\nA final version of filter_by_substring using pattern\
    \ matching:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqi1ysipq.jl:15\nin expression starting at\
    \ /tmp/tmpqi1ysipq.jl:15\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    # return an empty vector if there are no matches\n    if length(strings)\
    \ < 1 || length(substring) == 0 || substring == \"\" \n        return strings\n\
    \    end\n    \n    # create a set of all unique substrings\n    setSubstrings\
    \ = Set[String]()\n    \n    for string in strings \n        setSubstrings.add(substring)\n\
    \    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t\
    @test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsdf3_kg9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpsdf3_kg9.jl:1\n\
    in expression starting at /tmp/tmpsdf3_kg9.jl:1\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0:\n        return []\n    \n    substring = lowercase(substring)\n\
    \    strings = map(lowercase(strings), strings)\n    \n    filtered_strings =\
    \ filter(s -> contains(s, substring), strings)\n    return strings[findall(x ->\
    \ x == strings[1], filtered_strings)]\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgk5l_k7.jl:9\nin expression starting at /tmp/tmptgk5l_k7.jl:9\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter((x->contains(x,substring)),strings)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    #filter_by_substring(strings,substring)\n    filter_vector = Vector{String}(undef,\
    \ 0)\n    for (index, elem) in enumerate(strings)\n        if contains(elem, substring)\n\
    \            filter_vector[index] = elem\n        end\n    end\n    return filter_vector\n\
    end\n</cell>\n<code language=julia-0.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-0.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n<text>\nfilter function\
    \ filters out every element that does not satisfy a given condition\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2tyrbud.jl:17\nin expression starting at\
    \ /tmp/tmpq2tyrbud.jl:17\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659979964
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if contains(strings, substring)\n        strings\n    else\n        []\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([1, 3,\
    \ 5], \"b\")\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([1, 3, 5],\
    \ \"c\")\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([1, 3, 5], \"\
    d\")\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([1, 3, 5], \"d\"\
    )\n</cell>\n<text>\n5. Filter the elements of an array\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevl70b9c.jl:14\nin expression starting at\
    \ /tmp/tmpevl70b9c.jl:14\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!(x -> contains(x, substring), strings)\nend\n</cell>\n<code language=julia-0.4>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nFinding an element in an array\nTo find an element in an array, you can\
    \ use filter or find:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wcsos54.jl:10\nin expression starting at\
    \ /tmp/tmp5wcsos54.jl:10\n"
  stdout: ''
  timestamp: 1659980019
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!(string -> contains(string, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980018
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    \n    for i in 1:length(strings)\n        if contains(strings[i],\
    \ substring)\n            append!(strings_filtered, strings[i])\n        end\n\
    \    end\n    return strings_filtered\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nWrite a function filter_by_word that filters an input vector of strings\
    \ only for ones that contain the given word as a substring (case insensitive)\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsg9fh2rm.jl:17\nin expression starting at\
    \ /tmp/tmpsg9fh2rm.jl:17\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x -> contains(substring,x), strings)\n    strings = filter(x\
    \ -> contains(substring,x), strings)\n    strings = filter(x -> contains(substring,x),\
    \ strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpg_d6uj32.jl:15

    '
  stdout: "test set: Test Failed at /tmp/tmpg_d6uj32.jl:19\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"xxx\"] == [\"xxx\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_d6uj32.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_d6uj32.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpg_d6uj32.jl:20\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpg_d6uj32.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpg_d6uj32.jl:17\ntest set: Test\
    \ Failed at /tmp/tmpg_d6uj32.jl:21\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpg_d6uj32.jl:21 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmpg_d6uj32.jl:17\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [i for i in strings if contains(substring,i)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsskpyuzw.jl:11\nin expression starting at\
    \ /tmp/tmpsskpyuzw.jl:11\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  \n    length_to_keep = maximum(map(len, strings)) - 1\n    filtered_strings\
    \ = Vector{String}(undef, 0)\n    \n    for str in strings\n        if all(substring\
    \ in str for substring in substrings)\n            push!(filtered_strings, str)\n\
    \        end\n    end\n    \n    filtered_strings[length_to_keep:]\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\n3. Filtering input vectors for elements that\
    \ meet some set of conditions\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"length_to_keep:\"\
    \ range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpflsrnn4t.jl:18\n\
    in expression starting at /tmp/tmpflsrnn4t.jl:18\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    function contains_substring(substring::String, value::String)::Bool\
    \ \n        contains_substring(value) && contains(substring) \n    end\n    \n\
    \    filter_by_substring(strings, substring)\nend\n</cell>\n<cell>\n# TEST Filter\
    \ by Substring (2b)\n@testset \"Filter by Substring (2b)\" begin\n    filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"array\")\nend\n</cell>\n<text>\nImplement a\
    \ filtering function which filters an array of integers using a given comparison\
    \ function and returns the result.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7hzys6xf.jl:15\nin expression starting at\
    \ /tmp/tmp7hzys6xf.jl:15\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = vec(strings)\n    \n    idxs_substring = findall(strings, substring)\n\
    \    idxs_substring = [idxs_substring[j] for j = 1:length(strings)]\n    \n  \
    \  strings = filter_strings(strings, idxs_substring)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nFilters strings list by a set\
    \ of indices. \n    \n    Params:\n    - strings - a list of strings (characters)\n\
    \    - idxs_subset - a list of indices (integers) indicating \n        which strings\
    \ in the input list are to be filtered\n        \n    Returns:\n    - filtered_strings\
    \ - a list of strings filtered according \n        to the list of indices\n\"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nqtaqwn.jl:17\nin expression starting at\
    \ /tmp/tmp9nqtaqwn.jl:17\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    included = filter_by_string(strings, substring)\n    excluded = filter_by_string(strings,\
    \ substring)\n    return append(included, excluded)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmppe7shhop.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmppe7shhop.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: filter_by_string not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmppe7shhop.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppe7shhop.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppe7shhop.jl:16\ntest set:\
    \ Error During Test at /tmp/tmppe7shhop.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_string not\
    \ defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmppe7shhop.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppe7shhop.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppe7shhop.jl:16\ntest set:\
    \ Error During Test at /tmp/tmppe7shhop.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_string\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmppe7shhop.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmppe7shhop.jl:19 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmppe7shhop.jl:16\ntest set:\
    \ Error"
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings)>0\n        \n        for string in strings\n      \
    \      if contains(string, substring)\n                return strings\n      \
    \      end\n        end\n    end\n    return strings\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp1n_0lpqi.jl:20

    '
  stdout: "test set: Test Failed at /tmp/tmp1n_0lpqi.jl:24\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n_0lpqi.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n_0lpqi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1n_0lpqi.jl:25\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"] == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n_0lpqi.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n_0lpqi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp1n_0lpqi.jl:26\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"] == [\"grunt\", \"prune\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n_0lpqi.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n_0lpqi.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = strings |> Vector{String}\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb7nopfoh.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb7nopfoh.jl:1\n\
    in expression starting at /tmp/tmpb7nopfoh.jl:1\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    idx = strings == substring\n    strings[idx]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise\nFilter an array of strings to have only\
    \ strings that end with the letter \"a\". Print the result to check your work.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo42qfr15.jl:12\nin expression starting at\
    \ /tmp/tmpo42qfr15.jl:12\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(i -> contains(substring,strings[i]), 1:length(strings))\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp2w8pmhe7.jl:16\n  Test threw
    exception\n  Expression: candidate(["xxx", "asd", "xxy", "john doe", "xxxAAA",
    "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  MethodError: Cannot `convert` an
    object of type Int64 to an object of type String\n  Closest candidates are:\n    convert(::Type{String},
    !Matched::String) at ~/.conda/envs/polyglot/share/julia/base/essentials.jl:223\n    convert(::Type{T},
    !Matched::T) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:231\n    convert(::Type{T},
    !Matched::AbstractString) where T<:AbstractString at ~/.conda/envs/polyglot/share/julia/base/strings/basic.jl:232\n    ...\n  Stacktrace:\n    [1]
    setindex!(A::Vector{String}, x::Int64, i1::Int64)\n      @ Base ./array.jl:903\n    [2]
    _unsafe_copyto!(dest::Vector{String}, doffs::Int64, src::Vector{Int64}, soffs::Int64,
    n::Int64)\n      @ Base ./array.jl:253\n    [3] unsafe_copyto!\n      @ ./array.jl:307
    [inlined]\n    [4] _copyto_impl!\n      @ ./array.jl:331 [inlined]\n    [5] copyto!\n      @
    ./array.jl:317 [inlined]\n    [6] copyto!\n      @ ./array.jl:343 [inlined]\n    [7]
    copyto_axcheck!\n      @ ./abstractarray.jl:1104 [inlined]\n    [8] Vector{String}(x::Vector{Int64})\n      @
    Base ./array.jl:563\n    [9] convert\n      @ ./array.jl:554 [inlined]\n   [10]
    filter_by_substring(strings::Vector{String}, substring::String)\n      @ Main
    /tmp/tmp2w8pmhe7.jl:8\n   [11] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [12] macro expansion\n      @ /tmp/tmp2w8pmhe7.jl:16 [inlined]\n   [13]
    macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [14] top-level scope\n      @ /tmp/tmp2w8pmhe7.jl:14\ntest set:
    Test Failed at /tmp/tmp2w8pmhe7.jl:17\n  Expression: candidate(["xxx", "asd",
    "aaaxxy", "john doe", "xxxAAA", "xxx"], "xx") == ["xxx", "aaaxxy", "xxxAAA", "xxx"]\n   Evaluated:
    String[] == ["xxx", "aaaxxy", "xxxAAA", "xxx"]\nStacktrace:\n [1] macro ex'
  timestamp: 1659980024
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    length(strings)==0 || length(substring)==0 || !isdefined(substring) ||\
    \ !isdefined(strings) \n        strings \n    else \n        filter(x -> containsstring(x,\
    \ substring), strings) \nend\n</cell>\n<text>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ab\") returns [\"abc\", \"bacd\", \"array\"]\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpt26uuw0n.jl:7 expected\
    \ \"end\", got \"else\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpt26uuw0n.jl:10\n\
    in expression starting at /tmp/tmpt26uuw0n.jl:10\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\"Filter an input vector of strings only for ones that contain given\
    \ substring\"\"\"\n    strings = strings[findall(x -> substring in x, strings)]\n\
    \    return strings\nend\n</cell>\n<text>\nThis function can be used to filter\
    \ out all words that have any substrings in them from the input vector\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0wgp46tb.jl:12\nin expression starting at\
    \ /tmp/tmp0wgp46tb.jl:12\n"
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [x for x in strings if substring in x]\n    return strings\n\
    end\n</cell>\n<code language=julia-0.6>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2kb3gj5.jl:11\nin expression starting at\
    \ /tmp/tmpc2kb3gj5.jl:11\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter (string -> string.find(substring) > -1) strings\nend\n</cell>\n\
    <text>\nExercise\nTry implementing your own filter_by_substring function using\
    \ a loop for filtering the input vector of strings.\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"filter (\"\
    \ at /tmp/tmpmjveh4hl.jl:8\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmjveh4hl.jl:8\n\
    in expression starting at /tmp/tmpmjveh4hl.jl:8\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n        local index=0\n        for str in strings do\n            if (string.find(str,substring)==1)\
    \ then\n                index+=1\n            end\n        end\n        if (index==0)\
    \ then\n            return []\n        else\n            return strings[index..end]\n\
    \        end\n    end\n</cell>\n<text>\nExercise 3:\nWrite a function that:\n\
    filter_by_substring() filters out any strings that do not contain given substring\
    \ (i.e. remove them).\nfilter_by_uppercase() filters out any strings that do not\
    \ contain uppercase letters.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp58l6k805.jl:9\nin expression starting at /tmp/tmp58l6k805.jl:9\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for s in strings\n        if contains(s, substring)\n            return\
    \ strings\n    end\n    return []\nend\n</cell>\n<cell>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\u0420\u0435\u0437\
    \u0443\u043B\u044C\u0442\u0430\u0442\u044B filter_by_substring\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn01e86ul.jl:14\nin expression starting at\
    \ /tmp/tmpn01e86ul.jl:14\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if (length(substring)==0)\n        return strings\n    end\n    for s\
    \ in strings\n        if (strcontains(s,substring))\n            return strings\n\
    \        end\n    end\n    return []\nend\n</cell>\n<text>\nfilter_by_substring\n\
    This function is implemented using list comprehensions in Julia. Here is an example:\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplfyeofia.jl:18\nin expression starting at\
    \ /tmp/tmplfyeofia.jl:18\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings[strings == substring] \nend\n</cell>\n<code language=julia-0.5>\n\
    filter_by_substring([\"a\", \"ab\", \"acd\", \"acde\"], \"a\")\n</cell>\n<code\
    \ language=julia-0.5>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvppuot8r.jl:10\nin expression starting at\
    \ /tmp/tmpvppuot8r.jl:10\n"
  stdout: ''
  timestamp: 1659980021
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    substrings = filter( x -> contains(x,substring), strings)\n    length(substrings)\
    \ == 0 ? strings : substrings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980020
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if filter_by_substring(strings, substring) == strings\n        filter(strings,\
    \ x -> contains(x, substring))\n    end\nend\n</code>\nI realized that there could\
    \ be an issue with substrings being too long. One can still solve it using issubset,\
    \ but here is a better way to do it using sets. First, get all unique substrings\
    \ of a given string, say by using the function substrings\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpljqjgmbc.jl:12\nin expression starting at\
    \ /tmp/tmpljqjgmbc.jl:12\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring = (filter . filter_indices)(\n        map(x->x==substring,\
    \ 1:length(strings)), \n        1:length(strings), \n        function(index) strings[index]\n\
    \    )\n    return filter_by_substring(strings)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"filter .\"\
    \ at /tmp/tmpd0ms39i3.jl:8\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd0ms39i3.jl:8\n\
    in expression starting at /tmp/tmpd0ms39i3.jl:8\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n        \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if contains(string, substring) == true\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter_by_substring2(strings, substring, true)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprd1aosym.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmprd1aosym.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: filter_by_substring2 not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmprd1aosym.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprd1aosym.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprd1aosym.jl:14\ntest set:\
    \ Error During Test at /tmp/tmprd1aosym.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_substring2\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmprd1aosym.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprd1aosym.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprd1aosym.jl:14\ntest set:\
    \ Error During Test at /tmp/tmprd1aosym.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_by_substring2\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmprd1aosym.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprd1aosym.jl:17 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprd1aosym.jl:14\ntes"
  timestamp: 1659980024
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  result = []\n  for s in strings \n    if contains(s, substring) \n     \
    \ result.append(s)\n    end\n  end\n  result\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqm1jgtr2.jl:16\nin expression starting at\
    \ /tmp/tmpqm1jgtr2.jl:16\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered_string = strings[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_string, string)\n        end\n    end\n\
    \    return filtered_string\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([string(\"\
    abc\"), string(\"bacd\"), string(\"cde\"), string(\"array\")], \"a\")\n</cell>\n\
    <text>\nFiltering vectors\nFiltering a vector of strings according to a condition\
    \ is now straightforward:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpel0qz2tf.jl:16\nin expression starting at\
    \ /tmp/tmpel0qz2tf.jl:16\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x->contains(x, substring), strings)\nend\n</cell>\n<text>\n\
    As the last exercise we will apply this function to all vectors in our dataset.\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplr0ditu0.jl:10\nin expression starting at\
    \ /tmp/tmplr0ditu0.jl:10\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in eachindex(strings)\n        if contains(strings[i], substring)\n\
    \            delete!(strings, i)\n        end\n    end\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp04ojxn1x.jl:15\nin expression starting at\
    \ /tmp/tmp04ojxn1x.jl:15\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(substring) == 0 \n        return strings \n    \n    filtered\
    \ = filter(s -> include(substring, s), strings)\n    if length(filtered) == 0\
    \ \n        return strings \n    else \n        return filtered \nend\n</cell>\n\
    <text>\nfilter function\nfilter()  filters the elements of an array for those\
    \ that satisfy a certain condition (here s -> include(substring, s))\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpntu6ikui.jl:17\nin expression starting at\
    \ /tmp/tmpntu6ikui.jl:17\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter!(x -> contains(x, substring), strings)\nend\n</cell>\n<text>\n\
    filter_by_substring\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfo6hox3r.jl:10\nin expression starting at\
    \ /tmp/tmpfo6hox3r.jl:10\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for string in strings \n        if contains(string, substring) \n    \
    \        yield string \n        end\n    end\nend\n</cell>\n<code language=julia-0.4>\n\
    filter_by_substring(strings, \"a\")\n</cell>\n<text>\nThe function below does\
    \ what its name suggests: it removes all the strings in a given vector that do\
    \ not contain a given substring.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"string\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnjo2j25v.jl:10\nin expression starting at /tmp/tmpnjo2j25v.jl:10\n"
  stdout: ''
  timestamp: 1659980022
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(s -> contains(s, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptl96qwnz.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptl96qwnz.jl:1\n\
    in expression starting at /tmp/tmptl96qwnz.jl:1\n"
  stdout: ''
  timestamp: 1659980018
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  result = []\n  for i in strings\n    if contains(i, substring) == true\n\
    \      push!(result, i)\n    end\n  end\n  return result\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980021
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    matches = findall(strings, substring)\n    keep_strings = filter((s) =>\
    \ !contains(strings, s), matches)\n    return keep_strings\nend\n</cell>\n<cell>\n\
    \"\"\"\n    filter_by_substring(strings::Vector{String}, substring::Function,\
    \ caseSensitive::Bool = false)::Vector{String}\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirs3euyg.jl:12\nin expression starting at\
    \ /tmp/tmpirs3euyg.jl:12\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings::Vector{String} - input vector of strings\n    substring::String\
    \ - substring to look for in strings\n    \n    return vector of strings containing\
    \ substring\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter by a set\
    \ of characters\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp8fd8qb7r.jl:7 expected\
    \ \"end\", got \"vector\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8fd8qb7r.jl:9\n\
    in expression starting at /tmp/tmp8fd8qb7r.jl:9\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter((item) => item contains substring, strings)\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaxkohl9d.jl:8\nin expression starting at /tmp/tmpaxkohl9d.jl:8\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    if strings == []\n        \n    return strings\n    else\n     \
    \   \n    filtered_strings = []\n    \n    for s in strings\n        if contains(substring,s)\n\
    \            filtered_strings.push(s)\n        end\n    end\n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptfo20tw9.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfo20tw9.jl:1\n\
    in expression starting at /tmp/tmptfo20tw9.jl:1\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    if length(strings) == 0\n        return strings\n    elseif length(strings)\
    \ == 1\n        if strings[1] == substring\n            return strings\n     \
    \   else\n            return []\n        end\n    elseif isa(strings[1], String)\n\
    \        return strings\n    end\n    \n    length_index = [i for (i, string)\
    \ in enumerate(strings) if isa(string, String)]\n    \n    index = length_index[1]\n\
    \    \n    for (i in length_index[2:end])\n        if strings[i] != substring\n\
    \            index = i\n            break\n        end\n    end\n    \n    string_copy\
    \ = copy(strings[index:])\n    \n    strings[index:] = []\n    \n    return string_copy\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85wpd85b.jl:26\nin expression starting at\
    \ /tmp/tmp85wpd85b.jl:26\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0 || length(strings) == 1 \n        return strings\n\
    \    endstring = length(strings)\n    filtered_strings = Vector{String}(undef,\
    \ endstring)\n    for i in 1:endstring\n        if all(string(strings[i]) .==\
    \ substring) \n            filtered_strings[i] = strings[i]\n        else\n  \
    \          filtered_strings[i] = \"\"\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<text>\nFiltering by a regular expression\nThe function filter_by_regex\
    \ filters an array of strings using a regular expression. The function returns\
    \ a vector containing the strings which match the regular expression. It returns\
    \ an empty vector if there are no strings which match the regular expression.\
    \ Here is an example.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6u1cpte.jl:21\nin expression starting at\
    \ /tmp/tmpi6u1cpte.jl:21\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring, length(substring))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpblapb0s3.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpblapb0s3.jl:15\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching filter_by_substring(::Vector{String}, ::String,\
    \ ::Int64)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpblapb0s3.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpblapb0s3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpblapb0s3.jl:15 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblapb0s3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpblapb0s3.jl:16\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching filter_by_substring(::Vector{String},\
    \ ::String, ::Int64)\n  Closest candidates are:\n    filter_by_substring(::Vector{String},\
    \ ::String) at /tmp/tmpblapb0s3.jl:7\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpblapb0s3.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpblapb0s3.jl:16 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpblapb0s3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpblapb0s3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching filter_by_substring(::Vector{String}, ::String, ::Int64)\n  Closest\
    \ candidates are:\n    filter_by_substring(::Vector{String}, ::String) at /tmp/tmpblapb0s3.jl:7\n\
    \  Stacktrace:\n   [1] fi"
  timestamp: 1659980026
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n        if string == substring\n            string\n        else\n       \
    \     filter_by_substring(strings, substring)\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvlgq8t5t.jl:14\nin expression starting at /tmp/tmpvlgq8t5t.jl:14\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if string == substring\n        strings\n    else\n        filter_by_substring(reverse(strings),\
    \ substring)\n    end\nend\n</cell>\n<text>\nExercise 10\nWhat is the length of\
    \ the longest substring contained in the input vector of strings? Remember that\
    \ it is possible that a substring occurs more than once. Write a function which\
    \ returns the length of a substring of a given string only once. Do this by using\
    \ filter_by_substring!.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppr15m1au.jl:14\nin expression starting at\
    \ /tmp/tmppr15m1au.jl:14\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if string == substring \n        strings \n    else \n        filter(x\
    \ -> x contains substring, strings)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg9kvg1rm.jl:11\nin expression starting at\
    \ /tmp/tmpg9kvg1rm.jl:11\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    matches = []\n    \n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(matches, s)\n        end\n    end\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp02_jhu_l.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp02_jhu_l.jl:1\n\
    in expression starting at /tmp/tmp02_jhu_l.jl:1\n"
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\"\n    Filter the given vector for strings that contain the substring\
    \ given\n    \"\"\"\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(output, string)\n        end\n    end\n    return output\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp72z7yiiz.jl:20

    '
  stdout: "test set: Error During Test at /tmp/tmp72z7yiiz.jl:23\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: output not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp72z7yiiz.jl:16\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp72z7yiiz.jl:23 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp72z7yiiz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp72z7yiiz.jl:24\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: output not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmp72z7yiiz.jl:13\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp72z7yiiz.jl:24 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp72z7yiiz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp72z7yiiz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: output\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp72z7yiiz.jl:13\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp72z7yiiz.jl:25 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp72z7yiiz.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp72z"
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_vec = Vector{String}()\n    for str in strings\n        if str\
    \ == substring\n            push!(filter_vec, str)\n        end\n    end\n   \
    \ return filter_vec\nend\n</cell>\n<text>\nExercise 6\nWrite a function that replaces\
    \ given substring with replacement. You may use the function provided in the string\
    \ package. For example:\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ly1w7kw.jl:16\nin expression starting at\
    \ /tmp/tmp4ly1w7kw.jl:16\n"
  stdout: ''
  timestamp: 1659980024
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter((x) -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplno3t8_a.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplno3t8_a.jl:1\n\
    in expression starting at /tmp/tmplno3t8_a.jl:1\n"
  stdout: ''
  timestamp: 1659980024
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\"Filter an array of strings down to the ones containing substring\n\
    \    >>> filter_by_substring([\"\", \"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\")\n    [\"abc\", \"array\"]\n    \"\"\"\n</code>\n<|/ a dscore=1 |>\n<| a |>\n\
    I wrote a quick function that works in both Python 2 and 3:\n<code>\ndef filter_by_substring(strings:\
    \ list, substring: str) -> list:\n    return [s for s in strings if substring\
    \ in s]\n</code>\n<|/ a tags=python,string,filter dscore=1 |>\n<| a tags=python,string,filter\
    \ |>\nIn python2 the .split method will split the string on any whitespace character.\n\
    <code>\nstr_list = [\"this\", \"is a\", \"test\"]\nsub = \"test\"\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo1bq4ivf.jl:12\nin expression starting at\
    \ /tmp/tmpo1bq4ivf.jl:12\n"
  stdout: ''
  timestamp: 1659980024
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x,substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980023
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  if length(strings)==0\n    return strings\n  if length(strings)==1\n   \
    \ return strings\n  if strings[1] == substring\n    return filter_by_substring(strings[2:end],\
    \ substring)\n  end\n  if strings[1] == substring[1]\n    return filter_by_substring(strings[2:end],\
    \ substring)\n  end\n  return filter_by_substring(strings[2:end], substring)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnvsq_5f.jl:1\nin expression starting at /tmp/tmpqnvsq_5f.jl:1\n"
  stdout: ''
  timestamp: 1659980024
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for string in strings\n        if string.contains(substring)\n       \
    \     push!(strings, string)\n        end\n    end\n    return strings\nend\n\
    </cell>\n<code language=julia-0.5>\n# Let's see it work!\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nIn Julia, there\
    \ are a couple different ways to write loops. One is the for loop:\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqw_xbt5.jl:15\nin expression starting at\
    \ /tmp/tmpdqw_xbt5.jl:15\n"
  stdout: ''
  timestamp: 1659980024
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = [string for string in strings if substring in string]\n\
    \    \nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpzy71vhhd.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpzy71vhhd.jl:18\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzy71vhhd.jl:9\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpzy71vhhd.jl:18 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpzy71vhhd.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpzy71vhhd.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:797 [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpzy71vhhd.jl:9\n    [9] macro expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpzy71vhhd.jl:19 [inlined"
  timestamp: 1659980026
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    substrings = Set()\n    \n    for str in strings\n        if contains(str,\
    \ substring)\n            push!(substrings, str)\n        end\n    end\n    \n\
    \    return filter(x -> !x in substrings, strings)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvm1xmjx.jl:19\nin expression starting at\
    \ /tmp/tmpuvm1xmjx.jl:19\n"
  stdout: ''
  timestamp: 1659980024
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(substring) > length(strings[1]) || length(substring) < 1 \n\
    \        error(\"Substring length must be greater than 0 and must be greater than\
    \ or equal to the length of the input string\")\n    end\n    filtered_strings\
    \ = []\n    for str in strings\n        if contains(substring,str)\n         \
    \   filtered_strings.push(str)\n        end\n    end\n    return filtered_strings\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 2 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmps83sa3xu.jl:21

    '
  stdout: "test set: Error During Test at /tmp/tmps83sa3xu.jl:24\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  BoundsError: attempt to access 0-element Vector{String} at index [1]\n  Stacktrace:\n\
    \   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmps83sa3xu.jl:8\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmps83sa3xu.jl:24 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps83sa3xu.jl:23\ntest set:\
    \ Error During Test at /tmp/tmps83sa3xu.jl:25\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type Array has no field push\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmps83sa3xu.jl:14\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmps83sa3xu.jl:25 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmps83sa3xu.jl:23\ntest set:\
    \ Test Failed at /tmp/tmps83sa3xu.jl:26\n  Expression: candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmps83sa3xu.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmps83sa3xu.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps83sa3xu.jl"
  timestamp: 1659980028
- exit_code: -1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    str = \"\"\n    for i in strings\n        if contains(i, substring)\n\
    \            str = str + i\n        end\n    end\n    \n    return str\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpkzz9z6yo.jl:23\n  Test threw
    exception\n  Expression: candidate(Vector{String}([]), "john") == Vector{String}([])\n  MethodError:
    Cannot `convert` an object of type String to an object of type Vector{String}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{Vector{String}},
    !Matched::LibGit2.StrArrayStruct) at ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/LibGit2/src/strarray.jl:13\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at ~/.conda/envs/polyglot/share/julia/base/array.jl:554\n    ...\n  Stacktrace:\n   [1]
    filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main /tmp/tmpkzz9z6yo.jl:16\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkzz9z6yo.jl:23 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkzz9z6yo.jl:22\ntest set: Error
    During Test at /tmp/tmpkzz9z6yo.jl:24\n  Test threw exception\n  Expression: candidate(["xxx",
    "asd", "xxy", "john doe", "xxxAAA", "xxx"], "xxx") == ["xxx", "xxxAAA", "xxx"]\n  MethodError:
    no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,
    ::Any, !Matched::Any, !Matched::Any...) at ~/.conda/envs/polyglot/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main /tmp/tmpkzz9z6yo.jl:12\n   [2]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpkzz9z6yo.jl:24 [inlined]\n   [4]
    macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkzz9z6yo.jl:22\ntes'
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    answer = copy(strings)\n    for string in answer do\n        if contains(string,\
    \ substring) then\n            remove(string, substring)\n        end\n    end\n\
    \    return answer\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplkcgdpno.jl:9\nin expression starting at /tmp/tmplkcgdpno.jl:9\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    substrings = map(s, substring)\n    filtered_strings = filter(s, strings)\n\
    \    map(filtered_strings, filter_by_substring, substrings)\nend\n</cell>\n<code\
    \ language=julia-0.5>\nfilter_by_substring([1, 3, 5], [1, 3])\n</cell>\n<text>\n\
    Exercise 1.11: Counting substrings\nGiven a vector of strings, count how many\
    \ times each substring appears.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy580g55e.jl:12\nin expression starting at\
    \ /tmp/tmpy580g55e.jl:12\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter( x -> occursin( substring, x ), strings )\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_occurrence(input_vector,\
    \ sub_vector)\n  Filter a vector for elements that occur only in another vector\n\
    \  Returns an empty vector if the two input vectors do not contain any elements\
    \ in common.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp39tw7u7g.jl:11\nin expression starting at\
    \ /tmp/tmp39tw7u7g.jl:11\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for s in strings \n        if contains(s, substring)\n            append!(result,\
    \ s)\n        end\n    end\n    return result\nend\n</cell>\n<text>\nExercise:\
    \ Write a filter_by_all_substrings function that takes a list of strings and a\
    \ substring, and returns the list of strings filtered to only contain strings\
    \ that contain all of the substrings in that list. Remember to return a list of\
    \ strings and not a list of lists of strings. Feel free to use the function you\
    \ just wrote!\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr66g2wkx.jl:15\nin expression starting at\
    \ /tmp/tmpr66g2wkx.jl:15\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if (string in strings) == false\n    return strings\n    endpos = find(strings,\
    \ substring)\n    if endpos == length(substring)\n        return strings\n   \
    \ else\n        return strings[endpos+1 : end]\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-0.6>\n# %load solutions/filter_by_substring.jl\n</cell>\n\
    <text>\nFiltering for \"array\" only using filter_by_substring\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperhalmwe.jl:17\nin expression starting at\
    \ /tmp/tmperhalmwe.jl:17\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x->contains(substring,x), strings)\nend\n</cell>\n<text>\nfilter_by_substring\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2l71su6.jl:10\nin expression starting at\
    \ /tmp/tmpc2l71su6.jl:10\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter(x -> substring in x, strings)\nend\n</cell>\n<code language=julia-0.4>\n\
    filter_by_substring([1, 2, 3, 4], \"2\")\n</cell>\n<code language=julia-0.4>\n\
    filter_by_substring([4, 5, 6, 7], \"2\")\n</cell>\n<text>\nThe opposite of filter\
    \ is to remove, using setdiff, elements that match a given condition:\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo630ymxq.jl:10\nin expression starting at\
    \ /tmp/tmpo630ymxq.jl:10\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [ x for x \u2208 strings if contains(x, substring) ]\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwicgnniq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwicgnniq.jl:1\n\
    in expression starting at /tmp/tmpwicgnniq.jl:1\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n  new_strings = copy(strings)\n  for s in strings\n    if contains(s, substring)\n\
    \      push!(new_strings, s)\n    end\n  end\n  return new_strings\nend\n</cell>\n\
    <code language=julia-0.6>\nfilter_by_substring(x->x, \"a\")\n</cell>\n<code language=julia-0.6>\n\
    filter_by_substring(x->x, \"abc\")\n</cell>\n<text>\nExercise 4\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8ehf7ya.jl:16\nin expression starting at\
    \ /tmp/tmpr8ehf7ya.jl:16\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings_substring = filter(x->(x \u2208 substring), strings)\n    strings_substring_not_in_substring\
    \ = filter(x->!(x\u2208 substring), strings)\n    return union(sort(strings_substring),\
    \ sort(strings_substring_not_in_substring))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpphobgehz.jl:14

    '
  stdout: "test set: Error During Test at /tmp/tmpphobgehz.jl:18\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#3\"{String})(x::String)\n     @ Main /tmp/tmpphobgehz.jl:8\n\
    \   [4] filter(f::var\"#1#3\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpphobgehz.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpphobgehz.jl:18 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpphobgehz.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpphobgehz.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#3\"{String})(x::String)\n     @ Main /tmp/tmpphobgehz.jl:8\n\
    \   [4] filter(f::var\"#1#3\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmpphobgehz.jl:8\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmpphobgehz.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmpphobgehz.jl:16\ntest set:\
    \ Error During Test at /tmp/tmpphobgehz.jl:20\n  Test threw exception\n  Expression:"
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n\"\"\"Filter out elements of a list that do not contain given substring. \"\
    \"\"\n    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgayg0adl.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgayg0adl.jl:1\n\
    in expression starting at /tmp/tmpgayg0adl.jl:1\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x->contains(x, substring), strings)\nend\n</cell>\n<code\
    \ language=julia-0.6>\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefs90rce.jl:10\nin expression starting at\
    \ /tmp/tmpefs90rce.jl:10\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(substring) == 0 \n        return strings \n    else \n     \
    \   substring = lower(substring) \n        filtered = filter_by_substring(strings,\
    \ substring) \n        return filter_by_substring(filtered, substring) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nFilters an array of strings based\
    \ on whether a string contains a given substring. \nReturns an array of strings\
    \ that do not contain the given substring. \nusing Test\n\n@testset begin\n\n\
    candidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpts11_agq.jl:16\nin expression starting at\
    \ /tmp/tmpts11_agq.jl:16\n"
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for str in strings \n        if contains(str, substring) \n          \
    \  push!(result, str) \n        end\n    end\n    result\nend\n</code>\n<|/ a\
    \ tags=list,string,julia |>\n<| c |>\nIt works only if you input a string, not\
    \ a list. For example, if I run `filter_by_substring([[1, 2, 3], [4, 5], [6, 7]],\
    \ '3')`, I get the error message: `MethodError: no method matching filter_by_substring(::Type{Array{Any,1}},\
    \ ::Symbol)`\n<|/ c |>\n<| c |>\nThat's because `filter_by_substring` expects\
    \ a string. If you're calling it on a list of strings (which is what I'd assumed\
    \ you were doing), you can call `map` instead of `filter`.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI recommend you use this Julia package, which implements a lot of efficient\
    \ string matching algorithms:\nhttps://github.com/tmandel/StringMatching.jl\n\
    <|/ a tags=list,string,julia |>\n<| a tags=list,string,julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpao6dslrb.jl:15\nin expression starting at\
    \ /tmp/tmpao6dslrb.jl:15\n"
  stdout: ''
  timestamp: 1659980026
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) < 1 \n        return strings\n    if !contains(substring,strings[1])\n\
    \        return strings\n    else\n        substring = substring(1:length(substring))\n\
    \        \n        strings = strings[2:end]\n        filter_by_substring(strings,substring)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz6427jfd.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpz6427jfd.jl:1\n\
    in expression starting at /tmp/tmpz6427jfd.jl:1\n"
  stdout: ''
  timestamp: 1659980026
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    for string in strings \n        if (contains(string, substring))\n\
    \            push!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nThe filter function can be easily extended for matching\
    \ any substring, by just changing the contains call to any (which returns a boolean\
    \ true/false).\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyu8x82b7.jl:17\nin expression starting at\
    \ /tmp/tmpyu8x82b7.jl:17\n"
  stdout: ''
  timestamp: 1659980026
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(filter(x -> contains(x, substring), strings)) == length(strings)\n\
    \        return strings\n    else\n        return []\n    end\nend\n</cell>\n\
    <text>\n\u0422\u0435\u043F\u0435\u0440\u044C \u0441\u043E\u043E\u0431\u0449\u0430\
    \u0435\u043C \u0432\u043D\u0438\u043C\u0430\u043D\u0438\u0435, \u0447\u0442\u043E\
    \ \u043F\u043E\u0441\u043B\u0435 \u0438\u0437\u043C\u0435\u043D\u0435\u043D\u0438\
    \u044F \u0444\u0443\u043D\u043A\u0446\u0438\u0438 filter_by_substring \u0432\u044B\
    \ \u043C\u043E\u0436\u0435\u0442\u0435 \u043F\u0440\u0438\u043C\u0435\u043D\u0438\
    \u0442\u044C \u044D\u0442\u043E\u0442 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\
    \ \u0434\u0440\u0443\u0433\u043E\u043C\u0443 \u043F\u0440\u0438\u043C\u0435\u0440\
    \u0443 \u0432 \u0442\u0435\u0441\u0442\u0435. \u0418\u0441\u043F\u043E\u043B\u044C\
    \u0437\u0443\u0439\u0442\u0435 \u0442\u0435\u0441\u0442\u043E\u0432\u044B\u0439\
    \ \u043F\u0440\u0438\u043C\u0435\u0440:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kgymai1.jl:14\nin expression starting at\
    \ /tmp/tmp5kgymai1.jl:14\n"
  stdout: ''
  timestamp: 1659980026
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter((x) -> contains(x, substring), strings);\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980025
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    if contains(substring,strings)\n        \n        push!(newstrings,strings[find(strings,\
    \ substring)])\n        newstrings = uniq(newstrings)\n    end\n    \n    return\
    \ newstrings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpv3n0ctuu.jl:19

    '
  stdout: "test set: Error During Test at /tmp/tmpv3n0ctuu.jl:22\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  MethodError: no method matching occursin(::Vector{String}, ::String)\n  Closest\
    \ candidates are:\n    occursin(!Matched::Union{AbstractChar, AbstractString},\
    \ ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:622\n\
    \    occursin(!Matched::Regex, ::AbstractString; offset) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:264\n\
    \    occursin(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] contains(haystack::String, needle::Vector{String})\n  \
    \   @ Base ./strings/util.jl:100\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpv3n0ctuu.jl:9\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmpv3n0ctuu.jl:22 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv3n0ctuu.jl:21\ntest set:\
    \ Error During Test at /tmp/tmpv3n0ctuu.jl:23\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method matching occursin(::Vector{String},\
    \ ::String)\n  Closest candidates are:\n    occursin(!Matched::Union{AbstractChar,\
    \ AbstractString}, ::AbstractString) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:622\n\
    \    occursin(!Matched::Regex, ::AbstractString; offset) at ~/.conda/envs/polyglot/share/julia/base/regex.jl:264\n\
    \    occursin(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/search.jl:636\n\
    \  Stacktrace:\n   [1] contains(haystack::String, needle::Vector{String})\n  \
    \   @ Base ./strings/util.jl:100\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpv3n0ctuu.jl:9\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Tes"
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(substring,x), strings)\nend\n</cell>\n<cell>\n\
    @test filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\") ===\
    \ [\"abc\", \"bacd\", \"array\"]\n</cell>\n<text>\n4.5 Combining Functions\n4.5.1\
    \ Function composition\nThe function composition operator is defined as $f\u2218\
    g\u2218h$, where $f \u2218 g\u2218 h$ is the function composition operator. Given\
    \ two functions, $f$ and $g$, the composition is of the form $f\u2218g$ and can\
    \ be denoted $fg$ (the latter is abbreviated to $fg$).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqb4tzeg.jl:10\nin expression starting at\
    \ /tmp/tmpfqb4tzeg.jl:10\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return strings\n    endIndex = findfirst(substring,\
    \ strings)\n    if endIndex < 0\n        return strings\n    endIndex += length(substring)\n\
    \    firstIndex = endIndex\n    return strings[firstIndex:end]\nend\n</cell>\n\
    <text>\nfilter_by_regex\nSame as filter_by_substring, but filters strings that\
    \ match the given regular expression.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqzisq3l4.jl:17\nin expression starting at\
    \ /tmp/tmpqzisq3l4.jl:17\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter(x -> substring in x, strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([1,2,3],\
    \ 2)\n</cell>\n<text>\nExercise: Create your own filter by substring function\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxarsxwil.jl:11\nin expression starting at\
    \ /tmp/tmpxarsxwil.jl:11\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    string <- StringTools.join(strings)\n    \n    strings[\n      \
    \  findall(x->contains(x, substring), string)\n    ]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmprsd14ycb.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmprsd14ycb.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: StringTools not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmprsd14ycb.jl:9\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprsd14ycb.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsd14ycb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprsd14ycb.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: StringTools not defined\n\
    \  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String}, substring::String)\n\
    \     @ Main /tmp/tmprsd14ycb.jl:9\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmprsd14ycb.jl:21 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsd14ycb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmprsd14ycb.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: StringTools\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmprsd14ycb.jl:9\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmprsd14ycb.jl:22 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmprsd14ycb.jl:19\ntest set:\
    \ Error During Test at"
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered_strings = copy(strings)\n    for string in strings\n        if\
    \ contains(string, substring)\n            filtered_strings -= 1\n        end\n\
    \    end\n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    # test our filter function\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 9\nWrite a function that converts\
    \ a list to a set and back\nWrite a function that converts a set to a dictionary\
    \ and back\nWrite a function that converts a dictionary to a set and back\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxldeyqxu.jl:16\nin expression starting at\
    \ /tmp/tmpxldeyqxu.jl:16\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([[\"abc\", \"bacd\"\
    , \"cde\"], [\"a\"], [\"bcd\"]], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([[\"abc\", \"bacd\", \"cde\"], [\"a\"], [\"bcd\"]], \"bacd\"\
    )\n</cell>\n<text>\nFiltering vectors\nFiltering vector is quite simple:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe45drrdf.jl:11\nin expression starting at\
    \ /tmp/tmpe45drrdf.jl:11\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [strings[i] for i in which(strings ~= substring)] \nend\n</cell>\n\
    <code language=julia-0.4>\nfilter_by_substring(strings, \"a\")\n</cell>\n<text>\n\
    filter_by_substring also works for arrays of numbers:\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"=\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_3c8jhna.jl:8\nin expression starting at /tmp/tmp_3c8jhna.jl:8\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n\treturn  filter((x) -> contains(x, substring), strings)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nusing BenchmarkTools\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7pz35xth.jl:10\nin expression starting at\
    \ /tmp/tmp7pz35xth.jl:10\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    for i in eachindex(strings)\n        if contains(strings[i], substring)\n\
    \            push!(strings, strings[i])\n        end\n    end\n    return strings\n\
    end\n</cell>\n<text>\n\u0417\u0430\u043F\u0443\u0441\u043A\u0430\u0435\u043C \u0442\
    \u0435\u0441\u0442\u044B\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyk0kx2ec.jl:16\nin expression starting at\
    \ /tmp/tmpyk0kx2ec.jl:16\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\nfilter_by_substring(strings::Vector{String},\
    \ substring)::Vector{String} \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0oxlapy9.jl:11\nin expression starting at\
    \ /tmp/tmp0oxlapy9.jl:11\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    length(strings) == 0 && return strings\n    length(strings) < 2 || return\
    \ strings\n    strings[2:end-1] .== substring\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4p3uh5q6.jl:14

    '
  stdout: "test set: Test Failed at /tmp/tmp4p3uh5q6.jl:18\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"] == [\"xxx\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n [1] macro\
    \ expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p3uh5q6.jl:18 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p3uh5q6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4p3uh5q6.jl:19\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: [\"xxx\", \"asd\", \"aaaxxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"] == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p3uh5q6.jl:19 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p3uh5q6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4p3uh5q6.jl:20\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ [\"grunt\", \"trumpet\", \"prune\", \"gruesome\"] == [\"grunt\", \"prune\"]\n\
    Stacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4p3uh5q6.jl:20 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4p3uh5q6.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    length(strings) > 0 && \n    contains(strings, substring) && \n    remove!(strings,\
    \ x -> x != substring)\nend\n</cell>\n<code language=julia-0.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 1: filter_by_substring()\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzyfr20g9.jl:12\nin expression starting at\
    \ /tmp/tmpzyfr20g9.jl:12\n"
  stdout: ''
  timestamp: 1659980027
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    substrings = [substr for str in strings for substr in split(str)]\n  \
    \  return filter(x->contains(substrings, x), strings)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp8qhvpfsp.jl:13

    '
  stdout: "test set: Error During Test at /tmp/tmp8qhvpfsp.jl:17\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching contains(::Vector{SubString{String}}, ::String)\n  Closest candidates\
    \ are:\n    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{SubString{String}}})(x::String)\n\
    \     @ Main /tmp/tmp8qhvpfsp.jl:9\n   [2] filter(f::var\"#2#4\"{Vector{SubString{String}}},\
    \ a::Vector{String})\n     @ Base ./array.jl:2484\n   [3] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp8qhvpfsp.jl:9\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [5] macro expansion\n     @ /tmp/tmp8qhvpfsp.jl:17 [inlined]\n   [6] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmp8qhvpfsp.jl:15\ntest set:\
    \ Error During Test at /tmp/tmp8qhvpfsp.jl:18\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  MethodError: no method\
    \ matching contains(::Vector{SubString{String}}, ::String)\n  Closest candidates\
    \ are:\n    contains(!Matched::AbstractString, ::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:100\n\
    \    contains(::Any) at ~/.conda/envs/polyglot/share/julia/base/strings/util.jl:161\n\
    \  Stacktrace:\n   [1] (::var\"#2#4\"{Vector{SubString{String}}})(x::String)\n\
    \     @ Main /tmp/tmp8qhvpfsp.jl:9\n   [2] filter(f::var\"#2#4\"{Vector{SubString{String}}},\
    \ a::Vector{String})\n     @ Base ./array.jl:2484\n   [3] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp8qhvpfsp.jl:9\n   [4] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 ["
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if substring in strings[i]\n        strings\n    else\n        []\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp61xuke7q.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmp61xuke7q.jl:19\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: i not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp61xuke7q.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp61xuke7q.jl:19 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61xuke7q.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp61xuke7q.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: i not defined\n  Stacktrace:\n\
    \   [1] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp61xuke7q.jl:8\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp61xuke7q.jl:20 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61xuke7q.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp61xuke7q.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: i not\
    \ defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp61xuke7q.jl:8\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp61xuke7q.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61xuke7q.jl:18\ntest set:\
    \ Error During Test at /tmp/tmp61xuke7q.jl:22\n  Test"
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter((string -> string.contains(substring)), strings)\nend\n</cell>\n\
    <text>\n3.3. remove_duplicates function\nWrite a function that removes duplicate\
    \ elements from an input vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdvx3eucd.jl:10\nin expression starting at\
    \ /tmp/tmpdvx3eucd.jl:10\n"
  stdout: ''
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for str in strings \n        if contains(str, substring) == true\n   \
    \         return str\n        end\n    end\n    return []\nend\n</code>\n<|/ a\
    \ tags=julia,string,filter,function dscore=2 |>\n<| a |>\nIn Julia v1.0 onwards,\
    \ you can use filter:\n<code>\njulia> filter(x -> ends_with(x,\"ed\"), [\"eidd\"\
    ,\"ed\",\"edd\"])\n5-element Vector{String}:\n \"eidd\"\n \"ed\"\n \"edd\"\n</code>\n\
    ends_with is a function that returns true if the argument ends with the last character\
    \ of the string.  filter applies a function to each element of an array.\n<|/\
    \ a tags=julia,string,filter,function dscore=2 |>\n<| a dscore=2 |>\nIn Julia\
    \ v0.6 this worked for me:\n<code>\njulia> strings = [\"eidd\", \"ed\", \"edd\"\
    ]\n2-element Vector{String}:\n \"eidd\"\n \"ed\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8tfvlgy.jl:15\nin expression starting at\
    \ /tmp/tmpu8tfvlgy.jl:15\n"
  stdout: ''
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    length_to_keep = length(substring)\n    if length(strings) < length_to_keep\n\
    \        return strings\n    else\n        return filter_by_substring(filter_by_substring(strings[start:end-1],\
    \ substring), substring)\n    end\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgd__zg_3.jl:15\nin expression starting at\
    \ /tmp/tmpgd__zg_3.jl:15\n"
  stdout: ''
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    for i in eachindex(strings) \n        if contains(strings[i], substring)\
    \ \n            strings \n        else \n            remove!(strings, i) \n  \
    \          \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgm1buyrd.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgm1buyrd.jl:1\n\
    in expression starting at /tmp/tmpgm1buyrd.jl:1\n"
  stdout: ''
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if isempty(strings) || isempty(substring)\n        return strings\n  \
    \  end\n    strings = filter_(x -> isequal(substring, x), strings)\n    return\
    \ strings\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpjsffay9z.jl:16

    '
  stdout: "test set: Error During Test at /tmp/tmpjsffay9z.jl:20\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpjsffay9z.jl:11\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjsffay9z.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjsffay9z.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjsffay9z.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: filter_\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpjsffay9z.jl:11\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjsffay9z.jl:21 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjsffay9z.jl:18\ntest set:\
    \ Error During Test at /tmp/tmpjsffay9z.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"\
    grunt\", \"prune\"]\n  UndefVarError: filter_ not defined\n  Stacktrace:\n   [1]\
    \ filter_by_substring(strings::Vector{String}, substring::String)\n     @ Main\
    \ /tmp/tmpjsffay9z.jl:11\n   [2] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjsffay9z.jl:22 [inlined]\n\
    \   [4] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjsffay9z.jl:18\nTest Summary:\
    \ | P"
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = filter((x) -> (contains(x,substring)), (strings))\nend\n</cell>\n\
    <code language=julia-1.2>\n\"\"\"\n    filter_by_substring(strings::Vector{String},\
    \ substring::Regex)\n    Filter a vector of strings containing given substring\
    \ using regex\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplusbqs52.jl:10\nin expression starting at\
    \ /tmp/tmplusbqs52.jl:10\n"
  stdout: ''
  timestamp: 1659980028
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for i in eachindex(strings) \n        if contains(strings[i], substring)\
    \ \n            strings \n        else \n            deleteat!(strings, i) \n\
    \    end \nend \n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\n\u0420\u0430\u0431\u043E\
    \u0442\u0430 \u0441 \u043A\u043E\u0440\u0442\u0435\u0436\u0435\u0439\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzq9so5i.jl:15\nin expression starting at\
    \ /tmp/tmpzzq9so5i.jl:15\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    string_vecs = strings[:]\n    for i in length(string_vecs) \n        if\
    \ contains(string_vecs[i], substring) == true \n            string_vecs[i] = \"\
    \"\n        end\n    end\n    return string_vecs\nend\n</cell>\n<cell>\n\"\"\"\
    \n    filter_by_substring(string_vecs::Vector{String}, substring::String)::Vector{String}\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp933l6hqb.jl:16\nin expression starting at\
    \ /tmp/tmp933l6hqb.jl:16\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    answer = filter!(x -> contains(x, substring), strings)\n    return answer\n\
    end\n</cell>\n<code language=julia-1.6>\n@test filter_by_substring([], \"a\")\
    \ \u2245 []\n@test filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\") \u2245 [\"abc\", \"bacd\", \"array\"]\n</cell>\n<text>\n3. find()\n\
    find method returns index in vector where given predicate returns true, returns\
    \ nothing if not found.\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpufn22c3s.jl:11\nin expression starting at\
    \ /tmp/tmpufn22c3s.jl:11\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    strings = sort(strings)\n    strings = filter((string) -> (substring\
    \ in string), strings)\n    return strings\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmp90akpxtv.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmp90akpxtv.jl:19\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base ./error.jl:33\n\
    \   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(string::String)\n     @ Main /tmp/tmp90akpxtv.jl:10\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp90akpxtv.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp90akpxtv.jl:19 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp90akpxtv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp90akpxtv.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n   [1] error(s::String)\n     @ Base\
    \ ./error.jl:33\n   [2] in(#unused#::String, #unused#::String)\n     @ Base ./strings/search.jl:638\n\
    \   [3] (::var\"#1#2\"{String})(string::String)\n     @ Main /tmp/tmp90akpxtv.jl:10\n\
    \   [4] filter(f::var\"#1#2\"{String}, a::Vector{String})\n     @ Base ./array.jl:2484\n\
    \   [5] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp90akpxtv.jl:10\n   [6] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [7] macro expansion\n     @ /tmp/tmp90akpxtv.jl:20 [inlined]\n\
    \   [8] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [9] top-level scope\n     @ /tmp/tmp90akpxtv.jl:17\ntest set:\
    \ Error During Test at /tmp/tmp90akpxtv.jl:21\n  Test threw exception"
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    substrings = split(substring, \"b\")\n    filtered_strings = []\n    for\
    \ s in strings\n        if contains(substrings, s)\n            push!(filtered_strings,\
    \ s)\n        end\n    end\n    filtered_strings\nend\n</cell>\n<code language=julia-1.6>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring\n Function  Description \nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtlx_abc.jl:17\nin expression starting at\
    \ /tmp/tmpdtlx_abc.jl:17\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filter_by_substring(strings, substring) == map(string) do str\n      \
    \  if contains(substring, str)\n            str\n        else \n            str\n\
    \        end\n    end\nend\n</cell>\n<text>\nSort an input vector of strings according\
    \ to a given sorting function\n(Note: this function is identical to the sort function\
    \ in Julia).\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu0hssl10.jl:16\nin expression starting at\
    \ /tmp/tmpu0hssl10.jl:16\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    strings = [s for s in strings if substring in s]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,
    0 broken.

    in expression starting at /tmp/tmpczcauuez.jl:12

    '
  stdout: "test set: Error During Test at /tmp/tmpczcauuez.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:638\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:447 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:797 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpczcauuez.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpczcauuez.jl:16 [inlined]\n   [11] macro\
    \ expansion\n      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpczcauuez.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpczcauuez.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:638\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:447 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:797\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:721 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpczcauuez.jl:8\n    [9] macro expansion\n\
    \      @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [10] macro expansion\n      @ /tmp/tmpczcauuez.jl:17 [inlined]\n   [11] "
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    length(strings) <= 0 ? strings : filter_by_substring(strings[2:end-1],\
    \ substring)\n    return if isa_string_vector(strings) \n        strings == substring\
    \ ? [] : strings\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpjmhxbkcu.jl:15

    '
  stdout: "test set: Error During Test at /tmp/tmpjmhxbkcu.jl:18\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: isa_string_vector not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpjmhxbkcu.jl:9\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmpjmhxbkcu.jl:18 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjmhxbkcu.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjmhxbkcu.jl:19\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isa_string_vector not\
    \ defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpjmhxbkcu.jl:9\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String) (repeats 3 times)\n     @ Main /tmp/tmpjmhxbkcu.jl:8\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpjmhxbkcu.jl:19 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpjmhxbkcu.jl:17\ntest set:\
    \ Error During Test at /tmp/tmpjmhxbkcu.jl:20\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  UndefVarError: isa_string_vector\
    \ not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmpjmhxbkcu.jl:9\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String) (repeats 3 times)\n     @ Main /tmp/tmpjmhxbkcu.jl:8\n  \
    \ [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ ["
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    filtered_strings = Vector{String}()\n    \n    for s in strings\n\
    \        if contains(substring, s)\n            push!(filtered_strings, s)\n \
    \       end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    6. Create a function that takes a vector of strings as an argument and returns\
    \ a vector of strings that contain \"o\"\n    >>> takes_strings(\"abcde\")\n \
    \   [\"abc\", \"cde\"]\n    >>> takes_strings([\"abc\", \"cde\"])\n    [\"abc\"\
    , \"cde\"]\n    >>> takes_strings([123,\"abc\", \"cde\"])\n    [\"abc\", \"cde\"\
    ]\n    >>> takes_strings([\"abcde\", \"1234\", \"d\"])\n    []\n    >>> takes_strings([\"\
    abcde\", \"1234\", \"d\", \"1234\"])\n    []\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprnseexeg.jl:19\nin expression starting at\
    \ /tmp/tmprnseexeg.jl:19\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) == 0\n        return []\n    ends_with = false\n  \
    \  for s in strings\n        if substring in s\n            ends_with = true\n\
    \            break\n        end\n    end\n    if ends_with\n        return strings\n\
    \    else\n        return filter_by_substring(strings[2:end-1], substring)\n \
    \   end\nend\n</code>\n<|/ a |>\n<| a tags=string,julia,filter |>\nI assume that\
    \ by \"filter\" you mean remove elements not matching your criteria. If so, a\
    \ regex based approach may be useful.\n<code>\njulia> str = \"abc,bacd,cde,array\"\
    \n\"abc,bacd,cde,array\"\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuqgs2rzn.jl:23\nin expression starting at\
    \ /tmp/tmpuqgs2rzn.jl:23\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    index_strings = map(i -> i==substring, strings)\n    return filter_strings_index(strings,\
    \ index_strings)\nend\n</cell>\n<text>\n2.3 Functions to select only unique elements\
    \ from an array\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp002tro_9.jl:11\nin expression starting at\
    \ /tmp/tmp002tro_9.jl:11\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    to_return = Vector{String}()\n    for s in strings\n        if contains(s,\
    \ substring)\n            to_return .= s\n        end\n    end\n    return to_return\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp7_i_vpi8.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmp7_i_vpi8.jl:22\n  Expression: candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_i_vpi8.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_i_vpi8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7_i_vpi8.jl:23\n  Expression: candidate([\"xxx\", \"asd\"\
    , \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\"\
    , \"xxxAAA\", \"xxx\"]\n   Evaluated: String[] == [\"xxx\", \"aaaxxy\", \"xxxAAA\"\
    , \"xxx\"]\nStacktrace:\n [1] macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp7_i_vpi8.jl:23 [inlined]\n [3]\
    \ macro expansion\n   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp7_i_vpi8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7_i_vpi8.jl:24\n  Expression: candidate([\"grunt\", \"trumpet\"\
    , \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"]\n   Evaluated:\
    \ String[] == [\"grunt\", \"prune\"]\nStacktrace:\n [1] macro expansion\n   @\
    \ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp7_i_vpi8.jl:24 [inlined]\n [3] macro expansion\n\
    \   @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n\
    \ [4] top-level scope\n   @ /tmp/tmp7_i_vpi8.jl:20\nTest Summary: | Pass  Fail\
    \  Total\ntest set      |    1     3      4\n"
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(strings) < 1 \n        return strings\n    elseif length(substring)\
    \ > length(strings)\n        throw(ArgumentError(\"length of substring exceeds\
    \ length of strings\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate =\
    \ filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4r8rmf15.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4r8rmf15.jl:1\n\
    in expression starting at /tmp/tmp4r8rmf15.jl:1\n"
  stdout: ''
  timestamp: 1659980029
- exit_code: 0
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \n    included_substrings = filter(x -> contains(x, substring), strings)\n\
    \    \n    return included_substrings\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\
    \t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"\
    asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"\
    aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"\
    prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    4      4

    '
  stdout: ''
  timestamp: 1659980029
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    \"\"\"\n    Filter an input vector of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\n    \nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4u6cry28.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4u6cry28.jl:1\n\
    in expression starting at /tmp/tmp4u6cry28.jl:1\n"
  stdout: ''
  timestamp: 1659980016
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return \n        filter (s -> contains(s, substring), strings)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \"(\" not allowed in \"filter (\"\
    \ at /tmp/tmpk08rke3e.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk08rke3e.jl:9\n\
    in expression starting at /tmp/tmpk08rke3e.jl:9\n"
  stdout: ''
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    for string in strings\n        if string.contains(substring)\n       \
    \     push!(results, string)\n        end\n    end\n    return results\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmp304n_w99.jl:17

    '
  stdout: "test set: Error During Test at /tmp/tmp304n_w99.jl:20\n  Test threw exception\n\
    \  Expression: candidate(Vector{String}([]), \"john\") == Vector{String}([])\n\
    \  UndefVarError: results not defined\n  Stacktrace:\n   [1] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp304n_w99.jl:13\n   [2] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [3] macro expansion\n     @ /tmp/tmp304n_w99.jl:20 [inlined]\n   [4] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp304n_w99.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp304n_w99.jl:21\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"\
    xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  type String has no field contains\n\
    \  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n     @ Main /tmp/tmp304n_w99.jl:9\n   [3] macro expansion\n\
    \     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \   [4] macro expansion\n     @ /tmp/tmp304n_w99.jl:21 [inlined]\n   [5] macro\
    \ expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp304n_w99.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp304n_w99.jl:22\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  type String has no\
    \ field contains\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] filter_by_substring(strings::Vector{String}, substring::String)\n    \
    \ @ Main /tmp/tmp304n_w99.jl:9\n   [3] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp304n_w99.jl:22 [inlined]\n\
    \   [5] macro expansion\n     @ ~/.conda/envs/polyglot/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined"
  timestamp: 1659980031
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    if length(substring) == 0 return strings\n    else if length(substring)\
    \ == 1 return filter_by_substring(strings, substring[1])\n    else return filter_by_substring(filter_by_substring(strings,\
    \ substring(1,end(strings))), substring(end(strings),end(strings)))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2_ycb9p.jl:9\nin expression starting at /tmp/tmpc2_ycb9p.jl:9\n"
  stdout: ''
  timestamp: 1659980030
- exit_code: 1
  program: "\"\"\" Filter an input vector of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    l = find_in_vector(strings, substring)\n    if l == 0\n        return\
    \ strings\n    end\n    return strings[l .. end]\nend\n</code>\n<|/ a tags=filter,julia,string\
    \ dscore=1 |>\n<| a dscore=0 |>\nYou can use findall() function\n<code>\njulia>\
    \ findall(\"a\", \"abca\")\n2-element Vector{SubString{String}}:\n \"a\"\n \"\
    b\"\n</code>\n<|/ a tags=filter,julia,string |>\n<| c |>\nThe question is about\
    \ filtering strings using regular expressions\n<|/ c |>\n<| a |>\nIf you wanted\
    \ to use a regular expression, you can use findall. For example:\n<code>\njulia>\
    \ findall(r\"\\b\\w*\", \"abc def ghi\")\n2-element Array{SubString{String},1}:\n\
    \ \"abc\"\n \"def\"\n</code>\n<|/ a dscore=0 tags=filter,julia,string |>\n<| a\
    \ tags=filter,julia,string |>\nI came up with some code that is basically a filter\
    \ function using regular expressions. The code is as follows, I hope this helps.\
    \ I also have a couple of benchmarks in case you need them.\n<code>\n\"\"\"\n\
    Filter function using regular expressions\n\"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]), \"john\"\
    ) == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"])\n\t\
    @test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"\
    ], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd89guogl.jl:14\nin expression starting at\
    \ /tmp/tmpd89guogl.jl:14\n"
  stdout: ''
  timestamp: 1659980030
