name: HumanEval_120_maximum
language: jl
prompt: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
  \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the vector\
  \ will be in the range of [1, 1000].\n        2. The elements in the vector will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\
  function maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
  \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
  \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
  \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5,\
  \ 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
  \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
  \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\n\
  end\n"
completions: ["    if k > length(arr)\n        throw(ArgumentError(\"k must be less\
    \ than length\"))\n    end", "    max_arr = Array{Int64}(undef, k)\n    for i\
    \ in 1:k\n        max_arr[i] = maximum(arr[i], max_arr[i])\n    end\n    return\
    \ max_arr\nend\n\"\"\"\n    Given a vector arr of integers, return a sorted vector\
    \ \n    of length k with the minimum k numbers in arr.", "    return maximum_rec(arr,\
    \ k, 0)\nend", "    \"\"\"\n    Given a vector of integers and a positive integer\
    \ k, return the k largest \n    numbers in the vector arr.\n    \"\"\"\n    maximum_idx\
    \ = k\n    maximum_idx = maximum_idx if maximum_idx >= length(arr) else  maximum_idx-1\n\
    \    maximum_value = arr[maximum_idx]", "    if k > length(arr)\n        return\
    \ arr[end]\n    else\n        maximum.arr += maximum(arr, k - 1)\n        return\
    \ maximum(maximum.arr, k)\n    end\nend\nmaximum.arr = Vector{Int64}()\nmaximum(maximum.arr,\
    \ k)\nmaximum\n</cell>\n<text>\nFind the min in a vector\nGiven a vector arr of\
    \ integers, find the min and return the index and the value.", "    if k == 0\
    \ \n        return arr\n    else\n        maximum1(arr, k-1)\n    end\nend\nmaximum(arr::Vector{Int64},\
    \ k::Int64) = maximum(maximum(arr, k), length(arr))\nmaximum(arr::Vector{Int64})\
    \ = maximum(maximum(arr), length(arr))\nmaximum(arr::Vector) = maximum(maximum(arr))",
  "    # base case: \n    if k == 1\n        return arr\n    else\n        # initialize\
    \ max \n        max = -Inf \n        # initialize current index \n        current_index\
    \ = 0 \n        # loop through array \n        for element in arr\n          \
    \  # update max \n            if element > max\n                max = element\
    \ \n                current_index = 1 \n            # update max \n          \
    \  elif element == max\n                current_index = 1 \n            # update\
    \ max if current index is equal to k \n            elseif current_index == k\n\
    \                break\n        end\n        return arr[k+current_index-1:k+current_index+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nmaximum(arr::Vector{Int64},\
    \ k::Int64)\n</cell>\n<text>\nmaximum_in_list\nGiven an array arr and a value\
    \ val, find the index of val in the array arr. If val is not in arr, return -1.",
  "    if k < 1 \n        error(\"Invalid k\") \n    end", "    if k <= length(arr)\
    \ \n        result = Vector{Int64}(undef, k) \n        result[:] = 0\n       \
    \ for i in range(k)\n            if arr[i] > result[i] \n                result[i]\
    \ = arr[i] \n            end \n        end \n        return result \n    else\
    \ \n        return arr \n    end \nend ", "    k = maximum_ind(arr, k)\n    arr\
    \ = arr[k]\n    maximum = arr\n    maximum.sort!(maximum)\n    return maximum\n\
    end", "    max_els = maximum(arr, k)\n    if max_els == []\n        return [];\n\
    \    elseif max_els == k\n        return arr[1 : k];\n    else\n        return\
    \ arr[1 : length(arr) - max_els + 1] + max_els;\n    end\nend", "    if k==1\n\
    \        maximum = arr\n    else\n        maximum = maximum.(maximum(arr, k-1))\n\
    \    end\n    return maximum\nend", "    if k == 0 \n        return sort(arr)\n\
    \    else \n        max_value = maximum(arr[1:k], k - 1)\n        insert(max_value,\
    \ arr[k], k)\n        return arr\n    end\nend\nmaximum(a, k) = maximum(a, k -\
    \ 1)", "    if k <= 0\n    error(\"k should be positive\")\n    end\n    if length(arr)\
    \ <= k\n    error(\"k should not be greater than the number of elements\")\n \
    \   end\n    maximum_values = copy(arr)\n    maximum_values[end + 1 : end]= maximum_values[end\
    \ + 1 : end][end - k + 1 : end]\n    maximum_values[end - k + 1 : end]= maximum_values[end\
    \ - k + 1 : end][end - 1 : end]\n    return maximum_values\nend", "    if k ==\
    \ 1\n        return arr\n    elm = maximum(arr, k - 1)\n    res = [elm]\n    k\
    \ = k - 1\n    while k >= 1\n        elm = maximum(arr, k)\n        if elm > res[end]\n\
    \            res[end] = elm\n        end\n        k = k - 1\n    end\n    res\n\
    end\n</cell>\n<text>\nmaximum([1, 2, 3, 4, 5], 3)", "    if k < 1 \n        error(\"\
    k must be positive\")\n    end\n    if length(arr) == 0 || k <= 0 || k >= length(arr)\
    \ \n        return arr\n    end\n    max_value = maximum(reverse(arr), k - 1)\n\
    \    push!(arr, max_value)\n    return arr\nend", "    if k <= length(arr)\n \
    \       maximum = arr[k - 1]\n        minimum = minimum(arr[k - 1])\n        for\
    \ i in k - 2:-1:2\n            if arr[i] > maximum\n                maximum =\
    \ arr[i]\n            elseif arr[i] < minimum\n                minimum = arr[i]\n\
    \            end\n        end\n    else\n        maximum = minimum(arr[k])\n \
    \       for i in 1:k\n            if arr[i] > maximum\n                maximum\
    \ = arr[i]\n            elseif arr[i] < minimum\n                minimum = arr[i]\n\
    \            end\n        end\n    end\n    return maximum\nend\n\"\"\"\n    Given\
    \ a vector arr of integers and a positive integer k, return a new vector \n  \
    \  that contains the kth largest numbers in arr.", "    s = zeros(Int64, k)\n\
    \    for a in arr\n        s = maximum(s,a)\n    end\n    s\nend\n\"\"\"\n   \
    \ Given a vector arr of integers and a positive integer k, return a sorted vector\
    \ \n    of length k with the minimum k numbers in arr.", "    maximum = maximum_values(arr,\
    \ k)\n    return maximum\nend", '    return vec(maximum_inner(arr, k))', "   \
    \ if k < 0 || k > length(arr)\n        throw(ArgumentError(\"k should be in the\
    \ range of [0, 1] and k should be less than or equal to length(arr).\"))\n   \
    \ end\n    maximums = similar(arr)\n    maximums[k] = arr[end]\n    for i in k+1:length(arr)\n\
    \        if arr[i] > maximums[k]\n            maximums[k] = arr[i]\n        else\n\
    \            if maximums[k] > maximums[i]\n                maximums[k] = maximums[i]\n\
    \            end\n        end\n    end\n    maximums\nend", "    if length(arr)<=k\
    \ \n        return arr \n    else if k==1 \n        return arr \n    else \n \
    \       maxarr=maximum.(maximum.(arr, k-1),k) \n        push!(maxarr, maximum.(arr,\
    \ k-length(arr)) ) \n        return maxarr\n    end\nend\nmaximum([4, -4, 4],\
    \ 2)\n</cell>\n<text>\nQuestion 8 (6.81 pts)\nWrite a function median([1,2,3,4]). ",
  "    return arr[(arr.>0).==1][k-1:end]\nend \n</cell>\n<code language=julia-1.5>\n\
    maximum(ar, 2)\n</cell>\n<code language=julia-1.5>\nmaximum(ar, 1)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(ar, 3)\n</cell>\n<code language=julia-1.5>\n\
    maximum(ar, 4)\n</cell>\n<code language=julia-1.5>\nmaximum(ar, 5)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(ar, 6)\n</cell>\n<text>\nThe maximum function\
    \ in Julia is built on top of sorting.", "  maximum=arr\n  for j in length(arr)-1:-1:k\
    \ \n    if maximum[j]<arr[j] \n      maximum=arr\n    else \n      break\n  end\n\
    \  maximum\nend\nmaximum(a::Vector{Int64}, b::Int64) = maximum(a, b-1)\nmaximum(a::Vector{Int64},\
    \ b::Int64) = maximum(a, b-1)\nmaximum(a::Vector{Int64}, b::Int64) = maximum(a,\
    \ b-1)\nmaximum(a::Vector{Int64}, b::Int64) = maximum(a, b-1)", "    if k <= length(arr)\
    \ \n        maximum = arr[k - 1] \n        for j in (1 to k)\n            if maximum\
    \ < arr[j] \n                maximum = arr[j] \n            end \n        end\
    \ \n        return [maximum]\n    else \n        return arr\n    end\nend\n</cell>\n\
    <cell>\nmaximum(A, 1)\n</cell>\n<text>\nFind the maximum element of an array.",
  "    if k <= 0\n        return Vector{Int64}(undef, 0)\n    end\n    maximums =\
    \ []\n    for i in 1:length(arr)\n        if arr[i] > maximums[k]\n          \
    \  maximums[k] = arr[i]\n        end\n    end\n    return maximums\nend\nmaximum\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\n    minimum(arr::Vector{Int64}, k::Int64)::Vector{Int64}\n\
    \    Given a vector arr of integers and a positive integer k, return a sorted\
    \ vector \n    of length k with the minimum k numbers in arr.", "    if k == 0\
    \ return arr\n    if k > length(arr) \n        return arr\n    sorted_arr = sort(arr)\n\
    \    remain_length = length(sorted_arr) - k\n    if remain_length <= 0\n     \
    \   return arr\n    else\n        return maximum(sorted_arr, remain_length)\n\
    \    end\nend\nmaximum()", "    if k == 0 || arr.size < k\n        return arr\n\
    \    \n    if k == 1 && arr.size == 1\n        return arr\n    \n    maxIndex\
    \ = k\n    maxValue = arr[k]\n    for i= k+1:length(arr)\n        if arr[i] >\
    \ maxValue\n            maxValue = arr[i]\n            maxIndex = i\n        end\n\
    \    end\n    return maximum([arr[maxIndex], maxValue], k-1)\nend", "    if k\
    \ == 0 \n        return arr \n    else \n        maximum2(arr, k - 1) \n    end",
  "    \n    max_arr=[]\n    for x in arr \n        if x > max_arr[k] \n         \
    \   max_arr[k] = x\n    end", "    if k == 1\n        return arr\n    else\n \
    \       lo, hi = maximum1(arr, k)\n        lo, hi = lo[1], hi[1]\n        lo +=\
    \ k - 1\n        hi + k - 1\n        return arr <= hi ? arr : arr <= lo ? lo :\
    \ hi\n    end\nend", "    if k <= 0 || k > length(arr)\n        return arr\n \
    \   else\n        maxs = arr.take(k)\n        sort(maxs)\n        return arr\n\
    \    end\nend\n</cell>\n<text>\nExercise 4:", "    n = length(arr)\n    \n   \
    \ if n < 1 || k > n\n        throw(ArgumentError(\"maximum: k must be less than\
    \ or equal to length of arr\"))\n    end\n    \n    if n == 0 || k == 0\n    \
    \    Vector{Int64}()\n    end\n    \n    maximum = arr[1]\n    for i in (2 to\
    \ n)\n        if arr[i] > maximum\n            maximum = arr[i]\n        end\n\
    \    end\n    \n    return maximum\nend\nmaximum(a::Vector{Int64}, k::Int64) =\
    \ maximum(a, k)\nmaximum(a::Vector{Int64}) = maximum(a, length(a))\nmaximum(a::Vector{Int64},\
    \ length(a)) = a", "    if k < 1 || length(arr) < k\n        error(\"The length\
    \ of vector arr must be greater than k !\")\n    end\n    maximum_value = arr[1]\n\
    \    for i in 2:length(arr)\n        if arr[i] > maximum_value\n            maximum_value\
    \ = arr[i]\n        end\n    end\n    maximum_value = arr[k-1]\n    return maximum_value\n\
    end", "    if k == 1\n        return arr\n    elseif k == length(arr)\n      \
    \  return arr\n    end", "    n = length(arr)\n    if n <= k\n        return arr\n\
    \    arr = maximum(arr, n)\n    maximum_values = arr\n    for i=n+1:k\n      \
    \  if maximum_values[i] > maximum_values[n-i]\n            maximum_values[i] =\
    \ maximum_values[n-i]\n        else\n            maximum_values[i] = maximum_values[n]\n\
    \        end\n    end\n    maximum_values[k] = 1\n    return maximum_values\n\
    end", "    vec = []\n    i = size(arr)[1]\n    while k > 0\n        push!(vec,\
    \ maximum(arr,k-1))\n        i = i-1\n    end\n    vec\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum([4, -4, 4],\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
    </cell>\n<text>\nExercise 2", "    arr = sort(arr)\n    vec = Vector{Int64}(undef,\
    \ k)\n    i = j = 1\n    while j <= k && i < length(arr)\n        if arr[i] >\
    \ arr[j] \n            vec[j] = arr[i]\n            i += 1\n        else\n   \
    \         vec[j] = arr[j]\n            j += 1\n        end\n    end\n    vec\n\
    end\n</cell>\n<text>\nQuestion 7\nWrite a function that takes a list of integers\
    \ and returns the list sorted\nby the sum of the numbers.", "    if k <= 0 ||\
    \ length(arr) == 0 || arr == []\n    else maximum([maximum(arr[0..k], k - 1),\
    \ maximum(arr[k..end], k - 1)], k)\nend", "    if k == length(arr)\n        return\
    \ arr\n    else\n        maximum2(arr, k)\n    end\nend", "    if k < 0 || k >\
    \ length(arr)\n        throw(ArgumentError(\"k must be in the range of [0, length(arr)]\"\
    ))\n    end\n    maximum = arr\n    for index in range(k-1)\n        maximum =\
    \ [maximum(maximum, arr[index]), maximum[1]] \n    end\n    return maximum\nend",
  "    if k <= length(arr)\n        maximum = [arr[k]]\n    else\n        maximum\
    \ = maximum(maximum(arr[1:k]), k - 1)\n    end\nend\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<code language=julia-0.5>\nmaximum([4, -4, 4], 2)\n</cell>\n<code language=julia-0.5>\n\
    maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<code language=julia-0.5>", " \
    \   arr1 = sort(arr)\n    len = length(arr1)\n    \n    if k == len\n        return\
    \ arr1\n    elseif k == 1\n        return [arr1[k-1]]\n    else\n        arr2\
    \ = maximum(arr1[(k-1):end], k-1)\n        return arr2 + [arr1[k-1]]\n    end\n\
    end\n</cell>\n<text>\nAnd here's the second function (maximum without an explicit\
    \ return statement):", "    # base case\n    if k == 0 \n        return Vector{Int64}(arr)\n\
    \    \n    # recursive case\n    # sort array from highest to lowest\n    arr\
    \ = sort(arr)\n    \n    # take first k\n    return maximum(arr[1:k], k)\nend ",
  "    if k < 1 || k > size(arr) \n        throw(BoundsError(\"maximum() k must be\
    \ between 1 and $size(arr)\"))\n    else\n        sort(arr)\n    end\n    return\
    \ arr\nend\nmaximum", "    if k > length(arr)\n        return arr\n    \n    maximums\
    \ = []\n    \n    for elt in arr\n        if elt > maximum(maximums, k-1)\n  \
    \          maximums = maximums + [elt]\n        end\n    end\n    \n    return\
    \ maximums\nend\nmaximum(x) = maximum(x, length(maximum(x)))\nmaximum(x, k) =\
    \ x\n</cell>\n<code language=julia-1.5>", "    if k <= length(arr)\n        maximum_list\
    \ = arr[k:]\n    else\n        maximum_list = arr\n    end\n    maximum(maximum_list,\
    \ k)\nend", "    arr = sort(arr)\n    return arr[k+1:end][1:k]\nend\n</cell>\n\
    <code language=julia-1.6>\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.6>\n\
    maximum([4, -4, 4], 2)\n</cell>\n<code language=julia-1.6>\nmaximum([-3, 2, 1,\
    \ 2, -1, -2, 1], 1)\n</cell>\n<text>\nProblem 7", "    if k <= 0\n        throw(ArgumentError(\"\
    k must be positive and no less than length of vector\"))\n    elseif k >= length(arr)\n\
    \        throw(ArgumentError(\"k must be positive and no more than length of vector\"\
    ))\n    elseif length(arr) <= k\n        throw(ArgumentError(\"length of vector\
    \ must be greater than k\"))\n    elseif k == 0 \n        throw(ArgumentError(\"\
    k must be greater than 0\"))\n    end\n    maximum = arr[1]\n    for ele in arr[1..k]\n\
    \        if ele > maximum\n            maximum = ele\n        end\n    end\n \
    \   return maximum\nend\n\"\"\"\n    Given a vector arr of integers and a positive\
    \ integer k, return a sorted vector \n    of length k with the minimum k numbers\
    \ in arr.", "    maximums = sort(arr, true)\n    return maximums[-k+1:end]\nend",
  "    if k == 1\n        return arr\n    elseif k > length(arr)\n        return arr\n\
    \    end", "    largest = arr\n    \n    for i in 1:k\n        largest[i] = maximum(largest,\
    \ length(arr)-k+i)\n    end", "    arr1 = arr[k]\n    for i in 1:k-1\n       \
    \ arr1 = maximum(arr, i) + arr1\n    end\n    return arr1\nend", "    return sort(arr)[1:k];\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nmaximum_by\
    \ \uD568\uC218\n\uC6D0\uB798\uB450 \uC218\uB97C \uCC3E\uAE30 \uC704\uD574 maximum_by\
    \ \uD568\uC218\uAC00 \uC81C\uACF5\uB418\uC5C8\uB2E4. maximum_by \uBA54\uC11C\uB4DC\
    \uB294 findmax\n\uD568\uC218\uB97C \uD1B5\uD574 \uC790\uC2DD \uD568\uC218\uB97C\
    \ \uBCF4\uC5EC\uC900\uB2E4.", "    \"\"\"\n    Given a vector arr of integers\
    \ and a positive integer k, return a sorted vector \n    of length k with the\
    \ maximum k numbers in arr.", "    max_arr = zeros(k, Int64)\n    \n    for j\
    \ in 1:k\n        max_arr[j] = maximum(arr[j], k)\n    end\n    \n    return max_arr\n\
    end", "    arr = sort(arr)\n    if k > length(arr), arr; else\n        maximum(k\
    \ - 1, arr[1 : end - (k - 1)])\n    end\nend\n</cell>\n<code language=julia-0.6>\n\
    maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum([-3,2,1,-2,-3,4,5,-5,-6,-7,8,-9,-10]),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20),20",
  "    if (k > length(arr))\n        throw(ArgumentError(\"Maximum must be less than\
    \ or equal to the length of the vector\"))\n    end", "    if len(arr) <= k\n\
    \        return arr\n    end\n    maximum1 = maximum(arr[1:k], k)\n    maximum2\
    \ = maximum(arr[k+1:end], k)\n    maximum = maximum1 >= maximum2 ? maximum1 :\
    \ maximum2\n    push!(maximum, arr[k])\n    return maximum\nend", "    \"\"\"\n\
    \    Given a vector arr of integers and a positive integer k, return a sorted\
    \ vector \n    of length k with the maximum k numbers in arr.", "    if length(arr)<=k\
    \ then arr\n    else maximum(arr[1...k], k) + maximum(reverse(arr[1...k]), k)\n\
    end\n</cell>\n<text>\n\u6700\u5C0F\u503C\n\u6700\u5C0F\u503C\u95EE\u9898\n\u6700\
    \u5C0F\u503C\uFF08min or maximum\uFF09\u662F\u4E24\u4E2A\u6570\u7684\u6700\u5C0F\
    \u503C\uFF0C\u4E5F\u5C31\u662F\u8BF4\uFF0C\u5BF9\u4E8E\u4E24\u4E2A\u4E0D\u76F8\
    \u540C\u7684\u6570\uFF0C\u6211\u4EEC\u53EA\u9700\u8981\u6709\u4E00\u4E2A\u6700\
    \u5C0F\u503C\u3002", "    # Write your code here\nend", "    if k == 0 || arr.length\
    \ == 0 \n        return arr\n    end\n    if k <= length(arr) \n        sorted_arr\
    \ = copy(arr)\n        topk(sorted_arr, k)\n        return sorted_arr\n    end\n\
    \    \n    return maximum_rec(arr, k-1, arr[k])\nend", "    if k == 0 || length(arr)\
    \ == k\n        return arr\n    elseif k == 1 && length(arr) == 1\n        return\
    \ arr\n    elseif k == 2 && arr[1] == arr[2]\n        return arr\n    end", " \
    \   if k <= length(arr)\n        return maximum_inner(arr, k)\n    else\n    \
    \    push!(result, maximum(arr[k .. end], k - 1))\n        return result\n   \
    \ end\nend", "    # write your code here\n    maximum_value = arr[0]\n    maximum_index\
    \ = 1 ", "    if k == 0 return arr\n    \n    # Get the length of the array\n\
    \    n = length(arr)", "    if k > length(arr)\n        error(\"k out of range\"\
    )\n    end", "    if k == 0 \n        return arr\n    if k > length(arr)\n   \
    \     return maximum(arr, k - 1)\n    m = maximum.(arr[1..k], k - 1)\n    maximum.(arr[1..k],\
    \ k - 1) = arr[k] \n    m\nend\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nPart\
    \ 5 (5 points)\nCreate a function called minimum2 that has two arguments, arr1\
    \ and arr2, and returns the minimum number between arr1 and arr2. For example,\
    \ minimum2([10, 5, 12], 12) should return 10, because 12 is the smallest number\
    \ between the two.", "    arr == sort(arr)[k..end] ? arr : maximum(maximum(arr,\
    \ nil), k)\nend\n</cell>\n<code language=julia-1.3>\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<code language=julia-1.3>\nmaximum([4, -4, 4], 2)\n</cell>\n<code language=julia-1.3>\n\
    maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum(maximum(maximum(maximum([4,\
    \ -4, 4], 2), [-3, 2, 1, 2, -1, -2, 1]), [1, -1000, 1000]), [-1000, 1000])\n</cell>\n\
    <text>\nProblem 7. Complete the function sumsq that returns the sum of squares\
    \ \n    of a vector (arr) of integers. Assume that all elements in the \n    vector\
    \ can be represented by 32-bit signed integers.\n    For example, arr = [1, -1000,\
    \ 1000] will produce a sumsq = 0. \n    arr = [1, 2, 3] will produce a sumsq =\
    \ 1.", "    if k > length(arr) \n        return vec() \n    \n    maximum_list\
    \ = maximum_list(arr, k)\n    maximum_list = maximum_list[1:end]\n    return maximum_list\n\
    end\n</cell>\n<text>\nQ6. Write a function called maximum_list. This function\
    \ should accept a vector arr and a positive integer k and return a sorted vector\
    \ with k maximum numbers in arr. \nThe length of the returned vector will be in\
    \ the range of [1, 1000].", "    sort!(reverse(arr), by=x->x[1])\n    return arr[k-1:end]\n\
    end", "    return arr[(1:k).sort]\nend", "    return maximum([max(arr[i] for i\
    \ in 1:k), max(arr[end - k + 1:end] for i in 1:k)]);\nend", "    if k > length(arr)\
    \ \n        error(\"k must be <= length(arr)\") \n    else \n        maximum_rec(arr,\
    \ k, 0) \n    end\nend ", "    if k > length(arr)\n        throw(BoundsError(\"\
    k > length(arr)\", k, length(arr)))\n    elseif k == length(arr)\n        return\
    \ arr\n    end\n    \n    idxs = Vector{Int64}(k)\n    idxs[1] = length(arr)\n\
    \    \n    biggest = maximum(arr[2 : idxs[1]], k - 2)\n    \n    idxs[end] = length(arr)\
    \ - idxs[end]\n    \n    for i in reverse(idxs)\n        if arr[i] > biggest\n\
    \            biggest = arr[i]\n        end\n    end\n    \n    return biggest::Vector{Int64}\n\
    end", "    if k > length(arr)\n        return arr\n    end", "    if k == length(arr)\
    \ \n        return arr \n    else \n        arr = maximum(maximum(arr,k-1),k)\
    \ \n    end\nend\n\"\"\"\n    Given a sorted vector arr of integers and a positive\
    \ integer k, return a \n    sorted vector of length k with the minimum k numbers\
    \ in arr.\n    \n    Example 1:", "    if k == 0 || k > length(arr) \n       \
    \ return arr \n    \n    # create result array \n    result = zeros(k) ", "  \
    \  if k > length(arr)\n        return fill(NaN,k)\n    else\n        sort!(arr,\
    \ by=x->x)\n        revsort!(arr,by=x->-x)\n        arr[k+1:end]\n    end\nend\n\
    \"\"\"\n    Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n    of length k with the minimum k numbers in arr.", "    maximum!(arr,\
    \ Vector{Int64}(k))\nend", "    arr = arr + [-1000; 1000]\n    arr = sort(arr)\n\
    \    arr = arr[k+1 : end]\n    arr = arr + [-1000; 1000]\n    return arr\nend",
  "    if k < 1 || k > length(arr) \n        throw(ArgumentError(\"k must be in [1,\
    \ length(arr)]\"))\n    end\n    if k == 1 \n        return arr\n    end\n   \
    \ max_length = k\n    maximums = []\n    for ele in arr\n        if ele > maximum(maximum(maximums),\
    \ maximums)\n            max_length = length(maximums)\n            maximums =\
    \ []\n        end\n        push!(maximums, ele)\n    end\n    return maximums[max_length\
    \ .. end]\nend", "    len = length(arr)\n    if len < k\n        arr\n    elseif\
    \ k > len\n        arr\n    else\n        arr = arr[k:end]\n        maximum (sort(arr),\
    \ k-1)\n    end\nend", "    maximum = sort(arr)\n    return maximum[k+1:end]\n\
    end", "    if k < 1 || k > length(arr)\n        raise ArgumentError(\"k out of\
    \ range\")\n    elseif k == length(arr)\n        return arr\n    else\n      \
    \  return arr[k-1] => maximum(arr[1:k], k-2)\n    end\nend", "    arr = sort(arr)\n\
    \    if k == 0 \n        return arr\n    else if k < length(arr)\n        return\
    \ maximum(arr[1:end-1], k-1)\n    else\n        return maximum(arr[1:end], k-1)\n\
    \    end\nend", "    if k < 1 \n        return arr \n    \n    maximum_idx = k\
    \ \n    maximum = arr[k] \n    for idx = k+1:size(arr,1) \n        if arr[idx]\
    \ > maximum \n            maximum_idx = idx \n            maximum = arr[idx] \n\
    \        end \n    end \n    return maximum(maximum(arr[1:(maximum_idx-1)], maximum),\
    \ maximum) \nend", "    maximum!(arr, k)\n    return arr\nend\nmaximum(arr::Vector{Int64},\
    \ k::Int64) =\n    [maximum(a, k-1) for a in arr]", "    if length(arr) <= k\n\
    \        arr\n    else\n        maximum([maximum(arr[0..k-1],k-1), maximum(arr[1..end],k)],\
    \ k)\n    end\nend", "    maximums = Vector{Int64}()\n    for x in arr\n     \
    \   if maximums.length == k || x > maximum(maximums, k)\n            maximums.push(x)\n\
    \        end\n    end\n    maximums\nend", "    maximum=k-1\n    if k>length(arr)\n\
    \        k=length(arr)\n    end\n    maximum=maximum\n    maximum=maximum\n  \
    \  maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n    maximum=maximum\n\
    \    maximum=", "    # Complete this function\nend\n</code>\nTo find the maximum:\n\
    <code>\nmaximum([-3, -4, 5], 3)\n</code>\nResult:\n<code>\n[-4, -3, 5]\n</code>\n\
    To find the minimum element:\n<code>\nminimum([-3, -4, 5], 3)\n</code>\nResult:\n\
    <code>\n[-4, -3, 5]\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\nHere's a solution\
    \ that uses sort and maximum:\n<code>", "        maximum = sort(arr)\n       \
    \ maximum = maximum[1:k]\n        return maximum\nend", "    if k==1\n       \
    \ return arr\n    else\n        max1=maximum(arr,k-1)\n        max2=maximum(arr[end-1:end],k-1)\n\
    \        arr=union(arr,[max2,max1])\n        arr\n    end\nend", "    maximum_list\
    \ = maximum_list(arr, k)\n    return maximum_list\nend\nmaximum()", "    if k\
    \ < 1 || k < length(arr) \n    error(\"k is out of range\") \n    end \n    result\
    \ = arr \n    for i in 2:k \n        max = -Inf \n        for j in 0 .. length(result)\
    \ - 1 \n            if result[j] > max \n                max = result[j] \n  \
    \          end \n        end \n        result[i] = max \n    end \n    result\
    \ \nend ", "    if k == 1 \n        return arr \n    elseif k <= length(arr) \n\
    \        maximum = maximum(maximum(arr[1:k]), k-1) # \u6700\u5927\u7684\u4E00\u4E2A\
    \u5143\u7D20\n    end\n    return maximum\nend\nmaximum(arr::Vector{Int64}, k::Int64)\
    \ = get(maximum!(arr, k), k)", "    k = min(k, length(arr)-1)\n    maximum_value::Int64\
    \ = maximum(arr[start:end], k)\n    maximum_values = Vector{Int64}()\n    for\
    \ value in arr[start:end]\n        if value == maximum_value\n            push!(maximum_values,\
    \ value)\n        end\n    end\n    return maximum_values\nend\nmaximum()", " \
    \   if k == length(arr)  \n        return arr \n    \n    maximum_idx = lastindex(arr)\
    \ + 1\n    maximum_values = maximum(arr[maximum_idx:(endindex(arr)-1)], k-1) \n\
    \    maximum_values = [maximum_values..., maximum(arr[(endindex(arr)+1):endindex(arr)],\
    \ k-1)...]\n    maximum_values = maximum_values[2:end]\n    maximum_values = maximum_values[maximum_idx:(endindex(arr)-1)]\n\
    \    maximum_values = maximum(maximum(maximum_values, k-1), k)\n    maximum_values\
    \ = maximum(maximum_values, k-1) \n    maximum_values = maximum(maximum_values,\
    \ k)\n    \n    return maximum_values\nend", "    if k <= length(arr)\n      \
    \  max_elements(arr, k)\n    else\n        throw(ArgumentError(\"k out of range\"\
    ))\n    end\nend ", "    if k <= 0\n        return arr\n    \n    if k < length(arr)\n\
    \        maximum_recursive(arr, k, 1)\n    else\n        maximum_recursive(arr,\
    \ k, length(arr))\n    end\nend\n\"\"\"\n    Given a vector arr of integers and\
    \ a positive integer k, return a sorted vector \n    of length k with the maximum\
    \ k numbers in arr.", "    sorted_arr = sort(arr)\n    if k > length(arr)\n  \
    \      return sorted_arr\n    end", "    if k < 1 || k > length(arr)\n       \
    \ error(\"Invalid k\")\n    elseif k == 1\n        return arr\n    elseif k ==\
    \ 2\n        if arr[1] < arr[2]\n            return arr\n        else\n      \
    \      return [arr[1], arr[2]]\n        end\n    elseif k == length(arr)\n   \
    \     if arr[1] < arr[2]\n            return [arr[1], arr[2]]\n        else\n\
    \            return arr\n        end\n    end\n    m = maximum(arr[k-1:k], k-1)\n\
    \    m = maximum([m[1], m[2]], k-1)\n    return m \nend\nmaximum([1,2,3], 3)\n\
    </cell>\n<text>\nQuestion: What would be the output of the code below?", "   \
    \ if k > length(arr) \n        throw(ArgumentError(\"k is out of range\"))\n \
    \   end\n    if k == 1 \n        return arr\n    end\n    \n    largest = minimum(arr)\
    \ \n    i = 1 \n    j = k \n    while j <= length(arr) \n        if arr[j] >=\
    \ largest \n            largest = arr[j] \n            largestIndex = i \n   \
    \     end \n        if arr[j] > largest \n            largest = arr[j] \n    \
    \        largestIndex = j \n        end \n        i += 1\n        j += 1\n   \
    \ end\n    \n    return arr[k-1:largestIndex+1]\nend", "    if k==1 \n       \
    \ return sort(arr)\n    \n    # find the max \n    max = -999\n    for i in arr\n\
    \        if i > max \n            max = i\n    end\n    \n    # create an array\
    \ to store the maximum k numbers \n    maximum = zeros(Int, k)\n    \n    for\
    \ i in arr\n        if i > max \n            maximum[k]=i\n            k = k -\
    \ 1\n        end\n    end\n    \n    # return the final array\n    return maximum\n\
    end", "    \"\"\"\n    Given a vector arr of integers and a positive integer k,\
    \ return a sorted vector \n    of length k with the maximum k numbers in arr.",
  "    arr_sorted = sort(arr)\n    length = length(arr)\n    if length < k\n     \
    \   return arr_sorted\n    else\n        k = k - length\n        maximum_k = arr_sorted[end-1:end]\n\
    \        return arr_sorted[1:k] + maximum_k + arr_sorted[k+1:]\n    end\nend",
  "    # Write your code here\n    maximums = Vector{k}\n    for i = 1:length(arr)\n\
    \        if arr[i] > maximums[k]\n            maximums[k] = arr[i]\n        else\n\
    \        end\n    end\n    return maximums\nend\n</cell>\n<cell>\nmaximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum([-3,-4,5]),[4,-4,4]),[-3,2,1,2,-1,-2,1]),[3,2,1,2,3,4,5,6,7,8,9]))));\n\
    </cell>\n<text>\nQ12. Given two arrays arr1 and arr2 of same length, return an\
    \ array composed of the non-duplicate entries of arr1 followed by non-duplicate\
    \ entries of arr2. Elements in a different order should be ignored.", "    maximum\
    \ = arr[-k+1:end]\n    for i in minimum(arr[1:k-1]) \n        maximum = maximum(maximum(maximum,\
    \ arr[i:k]), k)\n    end\n    maximum\nend", "    # Your code here\n    for element\
    \ in arr\n        if element < arr[length-1]\n            arr[end] = element\n\
    \            end += 1\n        else\n            break\n    end\n    \n    k =\
    \ length(arr)\n    maximum = arr[end]\n    for i = end - k+2-1 downto 0\n    \
    \    if maximum < arr[i]\n            maximum = arr[i]\n        end\n    end\n\
    \    maximum\nend\n</cell>\n<code language=julia-0.6>\nmaximum(arr1, 6)\n</cell>\n\
    <code language=julia-0.6>\nmaximum(arr1, 7)\n</cell>\n<code language=julia-0.6>\n\
    maximum(arr1, 3)\n</cell>\n<code language=julia-0.6>\nmaximum(arr1, 1)\n</cell>\n\
    <text>\n13. Minimum number in a vector", "    if k <= 0\n        throw(ArgumentError(\"\
    k must satisfy 0 <= k <= length(arr).\"))\n    elseif k > length(arr)\n      \
    \  throw(ArgumentError(\"k must satisfy 0 <= k <= length(arr).\"))\n    elseif\
    \ length(arr) <= k\n        return arr\n    else\n        maximum1 = maximum(maximum(arr),\
    \ k - 1);\n        maximum2 = maximum(arr, k - 1);\n        return (maximum1 .<\
    \ maximum2) ? maximum1 : maximum2\n    end\nend\nmaximum(m::Vector{Int64}, k::Int64)\
    \ = maximum(reshape(m, prod(size(m))), (k + 1)::Int64)", "    sorted::Vector{Int64}\
    \ = Vector{Int64}() \n    \n    for i in reverse(arr) \n        if i >= k && i\
    \ < length(arr) - k + 1 \n            push!(sorted, i) \n        end \n    end\n\
    \    \n    sorted\nend", "    if k == 1\n        return arr\n    elseif k == length(arr)\n\
    \        return arr\n    end", "    if len(arr) < k \n        throw Exception(\"\
    Length of vector must be greater than k\")\n    else if k > length(arr) \n   \
    \     throw Exception(\"Length of vector must be greater than k\")\n    else \n\
    \        maximum_(arr, k)\n    end\nend", "    if k < 0 || length(k) == 0 || k\
    \ > length(arr) \n        return arr \n    else \n        return maximum(maximum(arr[k\
    \ .. end], k-1), length(arr)-k) \nend\n</cell>\n<text>\nmaximum()\nWrite a function\
    \ that returns the k largest elements in an array. \nThe function should take\
    \ in an array of numbers and an optional argument k. If k is not specified it\
    \ should assume it is the length of the array minus one.", "    if k <= 0 || k\
    \ >= length(arr)\n        throw(BoundsError())\n    max = arr[k]\n    for j =\
    \ k+1:length(arr)\n        if arr[j] > max\n            max = arr[j]\n       \
    \ end\n    end\n    return arr\nend", "    if k < length(arr)\n        maximum\
    \ = arr[1:k-1]\n        maximum = maximum.max((maximum(maximum), maximum(arr[k:])))\n\
    \    else\n        maximum = arr\n    end\n    return maximum\nend", "    if k\
    \ < 1 \n        return Vector{}\n    end\n    \n    if k == 1 \n        return\
    \ arr \n    end\n    \n    k = maximum(k, length(arr)-1)\n    \n    if length(a)\
    \ == 0 \n        return arr \n    end\n    \n    sorted = minimum(arr[k+1:end],\
    \ k)\n    \n    if length(a) >= k \n        a[k] = sorted\n    end\n    \n   \
    \ return a \nend", "    if k < 1 || k > length(arr) \n        return arr \n  \
    \  \n    maximum_idx = Vector{Int64}(k-1) \n    maximum_values = arr[1:k] \n \
    \   for i in 2:k \n        if maximum_values[i-1] > maximum_values[i] \n     \
    \       maximum_idx = i - 1 \n            maximum_values = maximum_values[i-1:k]\
    \ \n        else \n            maximum_idx = i \n            maximum_values =\
    \ maximum_values[i:k] \n        end\n    end\n    return maximum_values[minimum(maximum_idx):maximum(maximum_idx)+1]\n\
    end\n</code>\n<|/ a tags=vector,sorting,max,julia |>\n<| c |>\nCould you explain\
    \ the `minimum(maximum_idx)` part?\n<|/ c |>\n<| c |>\nIt's a fast way to get\
    \ indexes of minimum elements from a vector. Take a look at [`minimum`](https://docs.julialang.org/en/v1/base/collections/#Base.minimum)\
    \ and [`maximum`](https://docs.julialang.org/en/v1/base/collections/#Base.maximum)\n\
    <|/ c |>\n<| a tags=vector,sorting,max,julia |>\nHere is another way that does\
    \ not require to sort first:\n<code>", "    return arr[(length(a) - k + 1):length(a)]\n\
    end\n</cell>\n<code language=julia-0.5>\nmaximum(A, 2)\n</cell>\n<text>\nWrite\
    \ a function named minimum to find the minimum number in a vector.", "    if k\
    \ == length(arr)\n        return arr\n    elseif k <= 0\n        throw(ArgumentError(\"\
    k must be a positive integer\"))\n    elseif k >= length(arr)\n        throw(ArgumentError(\"\
    k must be less than the length of the array\"))\n    else\n        return maximum(unbox(arr[k+1:end]),\
    \ k-1)\n    end\nend", "    if k < length(arr)\n        maximum_recursive(arr,\
    \ k)\n    else\n        maximum_recursive(arr, 1)\n    end\nend\nmaximum_recursive(arr::Vector{Int64},\
    \ k::Int64)::Vector{Int64}\n    if k == length(arr)\n        arr\n    else\n \
    \       max_val = maximum(arr[k .. end], k - length(arr))\n        push!(arr,\
    \ max_val)\n        maximum_recursive(arr, k)\n    end\nend\nmaximum_recursive(arr::Vector{Int64},\
    \ k::Int64)::Vector{Int64}\n    maximum_recursive(arr, k + 1)\nend\n\"\"\"\n \
    \   Given an M x N matrix mat of doubles, return a sorted matrix mat of doubles\
    \ \n    containing all the elements in arr in non-decreasing order.", "    if\
    \ length(arr) < k \n        throw(ArgumentError(\"k should be no less than the\
    \ length of the vector arr\"))\n    \n    maximum = arr[0...k]\n    for i in k+1:length(arr)\
    \ \n        if maximum[i] > arr[i] \n            maximum = arr[i..end]\n     \
    \   elseif maximum[i] == arr[i] \n            maximum = arr[i..i] \n        else\
    \ \n            maximum = arr[i+1..end]\n        end\n    end\n    return maximum\n\
    end", "    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    else if k == 0 \n        return [maximum(arr, k - 1)]\n    end", "   \
    \ arr = arr[sortperm(arr)]\n    return arr[1:k+1]\nend", "    if k <= length(arr)\n\
    \        return maximum([x for x in arr[k+1:end]], k)\n    else\n        return\
    \ arr\n    end\nend", "    maximum = maximum(k) \n    return arr \nend", "   \
    \ if k <= 1\n        arr\n    elseif k > length(arr)\n        arr\n    else\n\
    \        maximum(maximum(arr, k - 1), length(arr) - k)\n    end\nend\n</cell>\n\
    <text>\nQuestion 11\nWrite a function that takes a vector of integers as an argument,\
    \ and returns the sum of all elements in the vector.", "    if k > length(arr)\n\
    \        throw(DomainError(...))\n    end\n    maximum = minimum(arr)\n    return\
    \ maximum(minimum(arr[end-1:end], maximum))\nend", "    if k > length(arr) ||\
    \ k <= 0\n        throw(ArgumentError(\"k out of range\"))\n    else\n       \
    \ maximum_values(arr, k)\n    end\nend", "    maximums = [i for i in arr]\n  \
    \  maximums[k] = maximum(maximums, k-1)\n    return maximums\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmaximum(maximum([-3, -4, 5], 3))\n</cell>\n<code language=julia-1.3>\n\
    maximum(maximum([4, -4, 4], 2))\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))\n</cell>\n<text>\nPart 2: Vectorization", "    v =\
    \ []\n    while k <= length(arr)\n        push!(v, arr[k])\n        k = k + 1\n\
    \    end\n    v\nend", "    m = minimum(arr)\n    v = maximum.(arr, k - 1) - m\n\
    \    v = maximum.(v, k)\n    return v\nend", "    if k <= length(arr)\n      \
    \  maximum = zeros(Int64, k)\n        maximum[k-1] = maximum(maximum(arr), k-1)\n\
    \        return maximum\n    else\n        maximum = arr\n        maximum[k-1]\
    \ = maximum(maximum(maximum), k-1)\n        return maximum\n    end\nend\n</cell>\n\
    <text>\nExample 1:\nInput:\narr = [-2, -1, -3]\nk = 1", "    if k <= 0 || k >\
    \ length(arr) \n        return arr \n    else \n        maximum1 = maximum(maximum(arr[1:k-1],arr[k+1:end],arr),arr[k+1:end],arr[k+1:end])\n\
    \        if maximum1[0] == maximum1[1] \n            return maximum1\n       \
    \ else \n            return arr \nend\n\"\"\"\n    Given a vector arr of integers\
    \ and a positive integer k, return a sorted vector \n    of length k with the\
    \ minimum k numbers in arr.", "    if k==1\n        return arr\n    elseif k >=\
    \ size(arr)\n        return arr\n    else\n        sort(arr)\n        arr1 = arr[1:k]\n\
    \        return maximum(arr1, k-1)\n    end\nend", "    max_length = 0\n    minimum(arr,\
    \ k)\n    for i=k+1:length(arr), \n        tmp = maximum(arr[i-1:i], k), \n  \
    \      tmp = minimum(tmp, k-i)\n        max_length = max(max_length, length(tmp)),\
    \ \n        arr[i] = tmp\n    end\n    arr\nend\nmaximum()", "    if k < 1 ||\
    \ k > length(arr)\n        return Array{Int64}(k)\n    end\n    \n    l = length(arr)\n\
    \    \n    if l < k\n        arr = arr + (k-l)\n    end", "    maximumArray =\
    \ maximumArray(arr, k)\n    return maximumArray\nend", "    for x in arr\n   \
    \     if x > k\n            break\n        else\n            x = x\n        end\n\
    \    end\n    return arr\nend", "    if k <= 0 || k >= length(arr) \n        return\
    \ arr\n    \n    idx = 1\n    maximum_idx = 1\n    \n    max_length = maximum(maximum(arr,arr[maximum(idx)]),arr[idx])\n\
    \    while idx < length(arr) \n        length = maximum(maximum(maximum(arr,arr[maximum(idx)]),arr[idx]),arr[idx+1])\n\
    \        if length == max_length \n            idx += 1\n            maximum_idx\
    \ = maximum(maximum_idx,maximum(maximum(arr,arr[maximum(idx)]),arr[idx]))\n  \
    \      else \n            maximum_idx = maximum(maximum_idx,maximum(arr[idx],arr[idx+1]))\n\
    \            idx += 1\n            max_length = length\n        end\n    end\n\
    \    \n    maximum_idx = maximum(maximum_idx, maximum(maximum(arr,arr[maximum(idx)]),arr[idx]))\n\
    \    return maximum_idx==k?arr[maximum_idx]:arr[maximum_idx:end] \nend", "   \
    \ if k > length(arr)\n        return arr\n    else\n        maximum = arr\n  \
    \      for j in arr[2:end]\n            maximum[j] = maximum[j-1]\n        end\n\
    \        return maximum[2:end]\n    end\nend", "    tmp = sort(arr)\n    idx =\
    \ length(arr)\n    arr1 = Vector{Int64}(idx)\n    arr1[k:] = maximum(arr1[k:],\
    \ k)\n    idx = length(arr1) - k\n    arr1[idx:] = maximum(arr1[idx:], k)\n  \
    \  return arr1\nend\nmaximum(x, y)", "    m = max(arr)\n    arr1 = arr[arr .!=\
    \ m]\n    arr2 = arr1[k .== min(k, length(arr1))]\n    maximum = arr2\n    return\
    \ maximum\nend", "    if length(arr) < k || k < 1 \n        return arr \n    end\
    \ \n    k = k % length(arr) \n    return maximum(maximum(arr[k .. end], arr),\
    \ k \u2212 1) \nend ", "  result = Array{Int64}(undef, k)\n  for i = 1:k\n   \
    \ result[i] = maximum(arr, length(arr)-i)\n  end\n  return result\nend", "   \
    \ \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.", "   \
    \ \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.", "   \
    \ maximum_arr = maximum_list(arr, k)\n    vector(maximum_arr, k)\nend", "    if\
    \ k < 1 || k > length(arr)\n        throw(ArgumentError(\"k ($k) must between\
    \ 1 and length of array ($length)\"))\n    end", "    if k <= 0\n        return\
    \ arr\n    \n    maximum = arr[-k+1:end]\n    for e in arr[end:end]\n        if\
    \ e > maximum\n            maximum = e\n        end \n    return maximum\nend",
  "    if k > length(arr) || k < 1 \n        return [] \n    else \n        return\
    \ [maximum(arr, k - 1), maximum(arr .* (k .+ ones(1, k)), k)]\n    end\nend",
  "    maximum = zeros(Int, k)\n    for i in 1:k\n        maximum[i] = maximum[i -\
    \ 1] if maximum[i - 1] > arr[i] else arr[i]\n    end\n    return maximum\nend",
  "    if k==0\n        return arr\n    if k==1\n        return arr[1:end]\n    mid\
    \ = floor((k-1)/2)\n    return maximum(maximum(arr, mid), k-1-mid)\nend\nmaximum(x::Vector{Int64},\
    \ k::Int64) = maximum([x], k)\nmaximum(x::Vector{Int64}) = x", "    arr = [maximum(arr,\
    \ arr[i])+1 for i in 1:k]\n    return arr\nend", "    if k == 1\n        return\
    \ arr\n    else\n        largest_num = maximum(arr[k+1:end], k+1)\n        temp_num\
    \ = maximum(arr, k)\n        return [largest_num] + temp_num\n    end\nend\n</cell>\n\
    <text>\nExercise 11\nImplement the function minimum. This function takes in a\
    \ list of numbers and an integer k and returns a new sorted list of length k with\
    \ the minimum numbers in the list. \nYou should call the function maximum() recursively\
    \ until k reaches 0.", "    if length(arr) <= k\n        arr\n    else\n     \
    \   maximumSubArray(arr, k)\n    end\nend", "    if k <= 0 || length( arr) <=\
    \ k return arr\n    mid = floor( length(arr)/2 )\n    sort( arr[(k-1)*mid+1:k*mid]\
    \ )\n    maximum( arr[(k-1)*mid+1:k*mid], k-1 )\nend", "    maximum = zeros(k)\n\
    \    for i = 1:k\n        maximum[i] = maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr[i],\
    \ arr[i + 1]), maximum(arr[i + 2], arr[i + 3]), maximum(arr[i + 4], arr[i + 5]),\
    \ maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(arr[i\
    \ + 8], arr[i + 9]), maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    \"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.", "   \
    \ m = minimum(arr) \n    arr = sort(arr) \n    len = length(arr) \n    return\
    \ arr[k+1:k+len] == arr[m+1:m+len] ? arr : maximum(arr[k+1:k+len], k) \nend",
  "    if k > length(arr)\n        throw(ArgumentError(\"$k should be less than length\
    \ of $arr\"))\n    end\n    @assert k == 0 || k <= length(arr) \n    return maximum((arr[1:k]\
    \ .> arr[k+1]) ? arr : arr[k+1:end])\nend", "    if k <= 0 || k > length(arr)\n\
    \        throw(ArgumentError(\"invalid k\"))\n    end\n    maximums = Vector{Int64}(repeat(0,\
    \ k))\n    maximums[1] = arr[end]\n    for i in 2:length(arr)\n        if arr[i]\
    \ > maximums[1]\n            maximums[1] = maximums[1]\n            maximums[i]\
    \ = maximums[i - 1]\n        else\n            maximums[i] = maximum(maximums,\
    \ k - 1)\n        end\n    end\n    return maximums\nend\n</code>\n<|/ a tags=julia\
    \ dscore=3 |>\n<| c |>\nThe key thing is the concept of `partition`. You can write\
    \ `maximums = maximums([4, -4, 4], 2)` as a one-liner `maximums = maximums.(partition([4,\
    \ -4, 4], 2))`.\n<|/ c |>\n<| c |>\nAlso, the last line `maximums.(partition([-3,\
    \ 2, 1, 2, -1, -2, 1], 1))` is very interesting. I have never seen this kind of\
    \ syntax before. Thank you.\n<|/ c |>\n<| a dscore=3 |>\nA compact implementation\
    \ using broadcasting - \n<code>\nmaximum(x::Vector{Int64}, k::Int64) = maximum(maximum([x],\
    \ k - 1)...)\n</code>\n<|/ a tags=julia |>\n<| a dscore=3 |>\nIn Julia >= 1.6,\
    \ you can make use of Array{T} and reshape:\n<code>\nmaximum([4, -4, 4], 2)\n\
    # 4-element Array{Int64,1}:\n# 4\n# -4", "    if (k > length(arr)) \n        throw(ArgumentError(\"\
    k must be greater than length of arr\"))\n    end\n    maximum = zeros(k)\n  \
    \  for n in arr \n        maximum[n] = maximum(maximum(maximum(maximum, maximum[n]),\
    \ maximum[n]), maximum[n])\n    end\n    return maximum\nend\nmaximum(arr::Vector{Int64},\
    \ k) = maximum(kron(arr, ones(1, k)))\nmaximum(arr) = (maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(maximum(",
  "    if k > length(arr) \n        return [] \n    \n    maximum = arr[1] \n    for\
    \ i \u2208 2:(length(arr)-1) \n        maximum = max(maximum, arr[i]) \n    \n\
    \    result = [] \n    for i \u2208 1:k \n        result[i] = maximum(maximum)\
    \ \n    \n    return result\nend\nmaximum()\n</cell>\n<code language=julia-1.6>\n\
    maximum(maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2, -3]), 3)\n</cell>\n<code\
    \ language=julia-1.6>\nmaximum(maximum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -1, -2,\
    \ -3]), 2)\n</cell>\n<code language=julia-1.6>\nmaximum(maximum([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, -1, -2, -3]), 1)\n</cell>\n<text>\n\u23CE Sort a vector arr\
    \ of integers according to the number of occurrences of the number in arr.", " \
    \   maximum([x for x in arr if x >= k], k)\nend\n</cell>\n<code language=julia-1.3>\n\
    maximum(vec::Vector{Int64}, k) = maximum(maximum(arr, k) for arr in vec)\n</cell>\n\
    <text>\nExercise 3\nWrite a Julia function to count the frequency of each element\
    \ in the input vector.", "    # O(n) time and O(1) space\n    if k > length(arr)\n\
    \        error(\"k should be less than or equal to length(arr)\", 2)\n    else\n\
    \        res = maximum_rec(arr, [], k, 1)\n        return res\n    end\nend",
  "    return maximumArray(arr,k)\nend", "    maximum = sort(arr)\n    return maximum[k..end]\n\
    end", "    arr = maximum(arr); return arr[k:end]\nend", "    if k < 1 || length(arr)\
    \ < k\n        throw(ArgumentError(\"The length of arr is smaller than k\"))\n\
    \    else if k == 1\n        throw(ArgumentError(\"The length of arr is less than\
    \ k\"))\n    elseif k == 2\n        return arr\n    else \n        maximum = maximum.(arr,\
    \ k-1)\n        maximum = [maximum[1]] + maximum[2:end-1]\n    end\nend", "  \
    \  arr[k + 1] > (arr[k] + arr[k + 1])/2 ? maximum(arr, k + 1) : arr\nend", " \
    \   if k <= 0\n        return arr\n    else if k > length(arr)\n        return\
    \ arr\n    else\n        maximum, idx = maximum(arr[1:k], k-1), 1\n        while\
    \ idx <= length(arr)-k && arr[idx] > maximum\n            maximum = arr[idx]\n\
    \            idx += 1\n        end\n        return maximum+arr[idx:end] \n   \
    \ end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef maximum(k::Int,\
    \ v::Vector{Int64}) where {Int64, N}\n    sort(v, reverse=true) |> reverse[1:k]\n\
    end\n</code>\n<|/ a tags=sorting,max,vector,julia |>\n<| a |>\nJust a thought,\
    \ but for small arrays it might be faster to simply use a global variable. \n\
    <code>", "    return maximum (arr, k)\nend", "    length = length(arr)\n    if\
    \ length <= k || k > length\n        return arr\n    end\n    maximums = sort(arr[k+1:length],\
    \ by = x -> x)\n    maximums[length(maximums)+k-1:length(maximums)] = maximums[length(maximums)+k-1:length(maximums)][1:k]\n\
    \    return maximums\nend\nmaximum", "    \n    # Initialization\n    arr1 = copy(arr)\n\
    \    res1 = Vector{Int64}()", "    l = length(arr)\n    if k > l || k <= 0\n \
    \       error(\"k should be positive integer and k should be smaller than length\
    \ of array\")\n    end", "    if k <= 0 \n        return arr \n    else \n   \
    \     maximum_rec(arr, [], k) \n    end\nmaximum_rec(arr, cur_max, k) = (cur_max...,\
    \ maximum(arr, k-1)) ", "    if length(arr) < k\n        throw(ArgumentError(\"\
    The length of arr is less than k.\"))\n    end\n    maximum = arr[k]\n    for\
    \ i in (1 .. k)\n        if maximum < arr[i]\n            maximum = arr[i]\n \
    \       else\n            break\n        end\n    end\n    return maximum\nend",
  "    if k < 1 || k > length(arr)\n        error(\"k must be in [1, length(arr)]\"\
    )\n    end", "    return sort(arr[1:k])\nend", "    if k <= 0\n        throw(ArgumentError(\"\
    k must be positive integer\"))\n    else if k >= length(arr)\n        throw(ArgumentError(\"\
    k must be less or equal to length of array\"))\n    else if length(arr) < k\n\
    \        throw(ArgumentError(\"length of array must be greater than k\"))\n  \
    \  else if k > length(arr)\n        k = length(arr)\n    end\n    a= deepcopy(arr)\n\
    \    maximum(a,k)\nend", "    maximum = max(arr)\n    idx = findfirst(i->(arr[i]>maximum),1:length(arr))\n\
    \    if idx > k\n        arr = arr[idx : k+1]\n    else\n        arr = arr[idx\
    \ : end]\n    end\n    maximum\nend", "    n = length(arr)\n    if k > n\n   \
    \     error(\"The k value is greater than the length of the arr\")\n    elseif\
    \ k == 1\n        return arr\n    else\n        return arr[1:k+1]\n    end\nend\n\
    \"\"\"\n    Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n    of length k with the minimum k numbers in arr.", "    if\
    \ k == 0 || k == length(arr)\n        return arr\n    if k > length(arr)\n   \
    \     throw(ArgumentError(\"The length of arr is too small.\"))\n    end\n   \
    \ maximum = arr[1]\n    for i in 2:length(arr)\n        if maximum > arr[i]\n\
    \            maximum = arr[i]\n        else\n            push!(maximum, arr[i])\n\
    \        end\n    end\n    return maximum\nend", "    if k == length(arr)\n  \
    \      return arr\n    elseif k <= 0\n        return maximum([arr[k], arr[k-1]],\
    \ k-1)\n    else\n        return maximum([arr[k], maximum(arr, k-1)], k-1)\n \
    \   end\nend\nmaximum([2, 4], 1)\n</cell>\n<code language=julia-1.1>", "    if\
    \ k <= 1\n        arr\n    else\n        maximum.(arr.[-k], k-1) + maximum.(arr.[1:k],\
    \ k)\n    end\nend\nmaximum(arr::Vector{Int64}, k::Int64) = maximum.(arr, k)\n\
    maximum(arr::Vector{Int64}) = maximum.(arr, length(arr))", "    length = length(arr)\n\
    \    if k < 1 || k > length\n        throw(ArgumentError(\"k out of range\"))\n\
    \    end\n    return arr |> sortperm(k) |> arr |> maximum\nend\n</cell>\n<code\
    \ language=julia-0.5>\nmaximum([4,4,4])\n</cell>\n<code language=julia-0.5>\n\
    maximum([-3, 2, 1, 2, -1, -2, 1])\n</cell>\n<code language=julia-0.5>\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 8: Maximum element in a given\
    \ range\nWrite a function that takes in a vector of integers and a range (start,\
    \ end)\nand returns the maximum element in the given range of the vector.", " \
    \   result = Array{Int64}(undef, k)\n    if k < 0 || k > (length(arr))\n     \
    \   return result\n    end", "    if length(arr)<k || k==0 || length(arr)==0\n\
    \        arr\n    else\n        maximum([arr[i]|i in 1:k-1], k-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.1>", "    if k < 1 || k > length(arr)\n      \
    \  throw(ArgumentError(\"k should be in the range of [1, length(arr)]\"))\n  \
    \  else\n        maximum_(arr, k)\n    end\nend", "    if k >= length(arr)\n \
    \       return arr\n    \n    maximum_idx = k\n    max_num = arr[k]\n    arr_copy\
    \ = [x for x in arr]\n    \n    for idx = k + 1:length(arr)\n        if arr[idx]\
    \ > max_num\n            maximum_idx = idx\n            max_num = arr[idx]\n \
    \       end\n    end\n    arr_copy[maximum_idx] = max_num\n    maximum(arr_copy,\
    \ maximum_idx - 1)\nend", "    if k == 1\n        return arr\n    \n    middle_idx\
    \ = ceil(Int64, k / 2)\n    left, right = minimum(arr, (middle_idx + 1)), k -\
    \ middle_idx", "    # Your code here\n    l = length(arr)\n    res = []\n    if\
    \ k == 0 || l == 0\n        return res\n    end\n    if k > l\n        return\
    \ arr\n    end", "    if k == 0 return arr\n    if k >= length(arr) \n       \
    \ return arr\n    mid = div(length(arr), k)\n    return maximum(maximum(arr[1:\
    \ mid], k - 1), mid)\nend\nmaximum([4, -4, 4], 2)\n</cell>\n<code language=julia-0.5>",
  "    s = arr.sort\n    s = [v for v in s if v > k] \n    \n    if length(s) == 0\n\
    \        return v\n    \n    else \n        return s\n    end\nend", "    if len(arr)\
    \ < k\n        return arr\n    elseif k <= 0\n        return arr\n    else\n \
    \       maximum = arr[k-1]\n        for i in 1:k\n            if maximum > arr[i]\n\
    \                maximum = arr[i]\n            end\n        end\n        return\
    \ arr[k-1] = maximum\n    end\nend", "    n = length(arr)\n    if k > n\n    \
    \    return fill(Inf, k)\n    else\n        maximums = zeros(k)\n        @inbounds\
    \ for i in 1:k\n            if arr[i] > maximum(arr, i-1)\n                maximums[i]\
    \ = arr[i]\n            else\n                maximums[i] = maximum(arr, i-1)\n\
    \            end\n        end\n        return maximums\n    end\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nThe maximum of a vector", "    if k <= length(arr)\n\
    \        maximum = zeros(Int64, k)\n        maximum[1]= arr[1]\n        for i\
    \ in 2:k\n            if maximum[i] > arr[i-1]\n                maximum[i] = maximum[i-1]\n\
    \            else\n                maximum[i] = maximum(arr, i-1)\n          \
    \  end\n        end\n        return maximum\n    else\n        return arr\n  \
    \  end\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
